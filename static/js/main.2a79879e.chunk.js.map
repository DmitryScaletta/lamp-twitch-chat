{"version":3,"sources":["Components/ChatInput.jsx","utils/formatEmotes.js","Components/ChatMessage.jsx","Components/Chat.jsx","styles/common.js","styles/colors.js","styles/vars.js","styles/index.js","App.jsx","utils/constants.js","index.jsx"],"names":["ChatInputRoot","styled","div","Controls","SendButton","button","Textarea","textarea","ChatInput","placeholder","maxLength","disabled","formatEmotes","text","emotes","splitText","split","Object","entries","forEach","i","mote","map","Number","moteStart","moteEnd","length","empty","Array","slice","concat","splice","join","ChatMessageRoot","p","isHistory","Name","span","color","Text","ChatMessage","name","dangerouslySetInnerHTML","__html","defaultProps","ChatRoot","ChatWrapper","MessagesWrapper","Messages","Scrollbar","attrs","disableTracksWidthCompensation","MoreMessagesButton","Chat","messages","useState","isMoreMessagesButtonVisible","setIsMoreMessagesButtonVisible","messagesRef","useRef","handleScrollToBottom","current","scrollToBottom","useEffect","onUpdate","clientHeight","contentScrollHeight","scrollTop","ref","key","onClick","css","createGlobalStyle","colors","vars","common","options","connection","secure","reconnect","channels","parseEmotes","reduce","acc","emote","emoteId","emoteIndexes","App","setMessages","a","fetch","recentMessagesResponse","json","recentMessages","normalizedRecentMessages","rawMessage","tmiParser","msg","filter","command","params","tags","fetchData","client","TwitchClient","connect","on","channel","message","m","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2a79879e.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst ChatInputRoot = styled.div`\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n  background-color: #000;\n\n  & > :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n`;\nconst SendButton = styled.button`\n  padding: 0 10px;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #9147ff;\n  outline: none;\n  font-size: 12px;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #772ce8;\n  }\n\n  &:active {\n    background-color: #5c16c5;\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n\n  &[disabled] {\n    background-color: rgba(255, 255, 255, 0.26);\n    color: rgba(255, 255, 255, 0.8);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\nconst Textarea = styled.textarea`\n  display: block;\n  padding: 10px;\n  width: 100%;\n  height: 38px;\n  max-height: 91px;\n  min-height: 40px;\n  overflow: hidden;\n  border: 2px solid transparent;\n  background-color: #262626;\n  font-family: inherit;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\n\nconst ChatInput = () => (\n  <ChatInputRoot>\n    <Textarea placeholder=\"Send a message\" maxLength={500} disabled />\n    <Controls>\n      <SendButton disabled>Chat</SendButton>\n    </Controls>\n  </ChatInputRoot>\n);\n\nexport default ChatInput;\n","const formatEmotes = (text, emotes) => {\n  let splitText = text.split('');\n\n  Object.entries(emotes || {}).forEach(([i, e]) => {\n    e.forEach((mote) => {\n      if (typeof mote !== 'string') return;\n\n      const [moteStart, moteEnd] = mote.split('-').map(Number);\n\n      const length = moteEnd - moteStart;\n      const empty = [...Array(length + 1)].map(() => '');\n\n      splitText = splitText\n        .slice(0, moteStart)\n        .concat(empty)\n        .concat(splitText.slice(moteEnd + 1, splitText.length));\n\n      splitText.splice(\n        moteStart,\n        1,\n        `<img class=\"chat-image\" src=\"https://static-cdn.jtvnw.net/emoticons/v1/${i}/1.0\" srcset=\"https://static-cdn.jtvnw.net/emoticons/v1/${i}/1.0 1x,https://static-cdn.jtvnw.net/emoticons/v1/${i}/2.0 2x,https://static-cdn.jtvnw.net/emoticons/v1/${i}/3.0 4x\">`,\n      );\n    });\n  });\n\n  return splitText.join('');\n};\n\nexport default formatEmotes;\n","import React from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport formatEmotes from '../utils/formatEmotes';\n\nconst ChatMessageRoot = styled.div`\n  padding: 5px 20px;\n  color: #fff;\n  opacity: ${(p) => (p.isHistory ? '0.5' : '1')};\n  line-height: 20px;\n  word-wrap: break-word;\n\n  &:nth-child(even) {\n    background-color: #1f1925;\n  }\n\n  .chat-image {\n    display: inline-block;\n    margin: -5px 0;\n    vertical-align: middle;\n  }\n\n  a {\n    color: #bf94ff;\n    text-decoration: none;\n\n    &:focus,\n    &:hover {\n      color: #a970ff;\n      text-decoration: underline;\n    }\n\n    &:visited {\n      color: #a970ff;\n    }\n  }\n`;\nconst Name = styled.span`\n  font-weight: bold;\n  color: ${(p) => p.color};\n`;\nconst Text = styled.span``;\n\nconst ChatMessage = ({ name, color, text = '', emotes, isHistory }) => (\n  <ChatMessageRoot isHistory={isHistory}>\n    <Name color={color}>{name}</Name>:{' '}\n    <Text dangerouslySetInnerHTML={{ __html: formatEmotes(text, emotes) }} />\n  </ChatMessageRoot>\n);\n\nChatMessage.defaultProps = {\n  emotes: {},\n  isHistory: false,\n};\n\nChatMessage.propTypes = {\n  name: pt.string.isRequired,\n  color: pt.string.isRequired,\n  text: pt.string.isRequired,\n  emotes: pt.oneOfType([pt.bool, pt.shape({})]),\n  isHistory: pt.bool,\n};\n\nexport default ChatMessage;\n","import React, { useState, useEffect, useRef } from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\nimport Scrollbar from 'react-scrollbars-custom';\n\nimport ChatInput from './ChatInput';\nimport ChatMessage from './ChatMessage';\n\nconst MORE_MESSAGES_OFFSET = 100;\n\nconst ChatRoot = styled.div`\n  height: 100vh;\n  background-color: #222;\n  font-size: 12px;\n`;\nconst ChatWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 340px;\n  height: 100%;\n  background-color: #000;\n`;\nconst MessagesWrapper = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\nconst Messages = styled(Scrollbar).attrs({\n  disableTracksWidthCompensation: true,\n})`\n  overflow-y: auto;\n\n  .ScrollbarsCustom-TrackY {\n    background: none !important;\n  }\n\n  .ScrollbarsCustom-ThumbY {\n    margin-left: auto;\n    margin-right: auto;\n    width: 6px !important;\n  }\n\n  .ScrollbarsCustom-Content {\n    padding-bottom: 10px !important;\n  }\n`;\nconst MoreMessagesButton = styled.button`\n  position: absolute;\n  right: 0;\n  bottom: 10px;\n  padding: 5px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  transform: translateX(-50%);\n`;\n\nconst Chat = ({ messages }) => {\n  const [\n    isMoreMessagesButtonVisible,\n    setIsMoreMessagesButtonVisible,\n  ] = useState(false);\n  const messagesRef = useRef(null);\n\n  const handleScrollToBottom = () => {\n    if (messagesRef.current && messagesRef.current.scrollToBottom) {\n      messagesRef.current.scrollToBottom();\n    }\n  };\n\n  useEffect(handleScrollToBottom, [messages]);\n\n  const handleScrollUpdate = ({\n    clientHeight,\n    contentScrollHeight,\n    scrollTop,\n  }) => {\n    const maxScrollTop = contentScrollHeight - clientHeight;\n    const isVisible = scrollTop + MORE_MESSAGES_OFFSET < maxScrollTop;\n\n    setIsMoreMessagesButtonVisible(isVisible);\n  };\n\n  return (\n    <ChatRoot>\n      <ChatWrapper>\n        <MessagesWrapper>\n          <Messages onUpdate={handleScrollUpdate} ref={messagesRef}>\n            {messages.map(({ name, color, text, emotes, isHistory }, key) => (\n              <ChatMessage\n                // eslint-disable-next-line react/no-array-index-key\n                key={key}\n                name={name}\n                color={color}\n                text={text}\n                emotes={emotes}\n                isHistory={isHistory}\n              />\n            ))}\n          </Messages>\n          {isMoreMessagesButtonVisible && (\n            <MoreMessagesButton onClick={handleScrollToBottom}>\n              More messages below\n            </MoreMessagesButton>\n          )}\n        </MessagesWrapper>\n        <ChatInput />\n      </ChatWrapper>\n    </ChatRoot>\n  );\n};\n\nChat.defaultProps = {\n  messages: [],\n};\n\nChat.propTypes = {\n  messages: pt.arrayOf(pt.shape({})),\n};\n\nexport default Chat;\n","import { css } from 'styled-components';\n\nexport default css`\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    margin: 0;\n    font-family: Roobert, Helvetica Neue, Helvetica, Arial, sans-serif;\n  }\n`;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { createGlobalStyle } from 'styled-components';\n\nimport common from './common';\nimport colors from './colors';\nimport vars from './vars';\n\nexport default createGlobalStyle`\n  :root {\n    ${colors};\n    ${vars};\n  }\n  ${common};\n`;\n","import React, { useState, useEffect } from 'react';\nimport { Client as TwitchClient } from 'tmi.js';\nimport tmiParser from 'tmi.js/lib/parser';\n\nimport Chat from './Components/Chat';\nimport GlobalStyles from './styles';\nimport {\n  // TWITCH_CLIENT_ID,\n  // TWITCH_REDIRECT_URI,\n  MAIN_CHANNEL_NAME,\n} from './utils/constants';\n\n// const params = {\n//   client_id: TWITCH_CLIENT_ID,\n//   redirect_uri: TWITCH_REDIRECT_URI,\n//   response_type: 'token+id_token',\n//   scope: ['openid', 'chat:edit', 'chat:read'].join('+'),\n//   claims: JSON.stringify({ id_token: { email_verified: null } }),\n//   // state: uid(),\n// };\n// const paramsString = Object.entries(params)\n//   .map(([key, value]) => `${key}=${value}`)\n//   .join('&');\n\n// const twitchAuthUrl = `https://id.twitch.tv/oauth2/authorize?${paramsString}`;\n\nconst options = {\n  connection: {\n    secure: true,\n    reconnect: true,\n  },\n  channels: [MAIN_CHANNEL_NAME],\n};\n\nconst parseEmotes = (emotes) => {\n  if (typeof emotes !== 'string') return emotes;\n\n  return emotes.split('/').reduce((acc, emote) => {\n    const [emoteId, emoteIndexes] = emote.split(':');\n\n    return {\n      ...acc,\n      [emoteId]: emoteIndexes.split(','),\n    };\n  }, {});\n};\n\nconst App = () => {\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const recentMessagesResponse = await fetch(\n        `https://recent-messages.robotty.de/api/v2/recent-messages/${MAIN_CHANNEL_NAME}?clearchatToNotice=true`,\n      );\n      const recentMessages = await recentMessagesResponse.json();\n      const normalizedRecentMessages = recentMessages.messages\n        .map((rawMessage) => tmiParser.msg(rawMessage))\n        .filter(({ command }) => command === 'PRIVMSG')\n        .map(\n          ({\n            params: [, text],\n            tags: { 'display-name': name, color, emotes },\n          }) => ({\n            name,\n            color,\n            text,\n            emotes: parseEmotes(emotes),\n            isHistory: true,\n          }),\n        );\n\n      setMessages(normalizedRecentMessages);\n    };\n\n    fetchData();\n\n    const client = new TwitchClient(options);\n\n    client.connect();\n    client.on(\n      'message',\n      (channel, { color, 'display-name': name, emotes }, text) => {\n        const message = {\n          name,\n          color,\n          emotes: parseEmotes(emotes),\n          text,\n        };\n        setMessages((m) => [...m, message]);\n      },\n    );\n  }, []);\n\n  return (\n    <>\n      <Chat messages={messages} />\n      <GlobalStyles />\n    </>\n  );\n};\n\nexport default App;\n","export const TWITCH_CLIENT_ID = '4e66w1po1tzf645r9vutn9qus05vg9x';\nexport const TWITCH_REDIRECT_URI = 'http://localhost:3000/';\n\nexport const MAIN_CHANNEL_NAME = 'nasvay_s';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}