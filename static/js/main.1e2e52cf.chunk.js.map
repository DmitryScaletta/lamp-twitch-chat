{"version":3,"sources":["utils/isAuthRedirect.js","utils/api.js","reducers/auth.js","reducers/chat.js","reducers/badges.js","reducers/emotes/twitch.js","reducers/emotes/bttv.js","reducers/emotes/ffz.js","reducers/emotes/index.js","reducers/emotes/selectors.js","utils/twitchChat.js","utils/formatMessage.js","reducers/messages.js","utils/constants.js","reducers/index.js","store/index.js","hooks/useLocationHash.js","utils/replaceEmojis.js","components/ChatInput.jsx","components/ChatMessage.jsx","components/Chat.jsx","components/Home.jsx","utils/getAuthUrl.js","components/Auth.jsx","components/AuthCallback.jsx","styles/common.js","styles/colors.js","styles/vars.js","styles/index.js","App.jsx","index.jsx"],"names":["isAuthRedirect","hash","startsWith","apiRequest","url","fetch","then","response","json","fetchUser","id","headers","Authorization","localStorage","accessToken","fetchTwitchEmotesBySets","userId","Accept","process","fetchBttvChannelEmotes","channelId","fetchFfzChannelEmotes","fetchRecentMessages","channel","fetchGlobalBadges","language","fetchChannelBadges","setIsAuth","createAction","fetchUserRequest","fetchUserSuccess","fetchUserFailure","reducer","handleActions","state","payload","isAuth","user","undefined","isLoading","error","login","displayName","currentChannelSelector","pathOr","createActions","setCurrentChannel","setIsConnected","updateGlobalUserState","updateUserState","updateRoomState","removeChannel","currentChannel","isConnected","tags","globalState","channels","userState","roomState","omit","globalBadgesSelector","badges","global","items","channelBadgesSelector","fetchGlobalBadgesRequest","fetchGlobalBadgesSuccess","fetchGlobalBadgesFailure","fetchChannelBadgesRequest","fetchChannelBadgesSuccess","fetchChannelBadgesFailure","parseBadges","combineActions","type","toString","isLoaded","isError","fetchTwitchEmotesRequest","fetchTwitchEmotesSuccess","fetchTwitchEmotesFailure","fetchBttvGlobalEmotesRequest","fetchBttvGlobalEmotesSuccess","fetchBttvGlobalEmotesFailure","fetchBttvChannelEmotesRequest","fetchBttvChannelEmotesSuccess","fetchBttvChannelEmotesFailure","parseBttvChannelEmotes","channelEmotes","sharedEmotes","fetchFfzGlobalEmotesRequest","fetchFfzGlobalEmotesSuccess","fetchFfzGlobalEmotesFailure","fetchFfzChannelEmotesRequest","fetchFfzChannelEmotesSuccess","fetchFfzChannelEmotesFailure","parseFfzGlobalEmotes","pipe","values","map","flatten","parseFfzChannelEmotes","combineReducers","twitch","bttv","ffz","twitchEmotesSelector","createSelector","bttvChannelEmotesSelector","bttvEmotesSelector","globalBttvEmotes","channelBttvEmotes","ffzChannelEmotesSelector","ffzEmotesSelector","globalFfzEmotes","channelFfzEmotes","isAllEmotesLoadedSelector","bttvGlobal","bttvChannel","ffzGlobal","ffzChannel","noopIRCCommands","booleanMessageTags","numberMessageTags","depricatedMessageTags","noticeMessageTags","data","split","reduce","acc","badge","name","value","normalizeTagValue","raw","emote","indexes","index","start","end","Number","parseInt","parseMessageEmotes","followersOnly","slow","includes","replace","parseMessageTags","Object","entries","filter","key","camelCase","getIsAction","message","endsWith","normalizeActionMessage","slice","parseState","params","parseUserState","parseRoomState","parseCommand","parseNotice","parseUserNotice","parseClearMessage","parseClearChat","parseHostTarget","Client","options","socket","_queue","_messagesQueue","this","identity","auth","sendRaw","emit","hadError","willReconnect","rawData","trim","forEach","line","_handleMessage","shift","isAction","messageEventData","uuid","tmiSentTs","Date","getTime","parsedData","tekkoParse","command","prefix","middle","trailing","parseMessageData","eventData","mergeDeepRight","_emmitOwnMessage","msgId","length","ircMessage","parseChatMessage","handleError","err","Array","isArray","send","WebSocket","addEventListener","_onConnect","_onClose","_onError","_onData","tekkoFormat","mergeDeepWith","concat","commandParams","join","roomName","push","EventEmitter","mentionRegex","linkRegex","urlRegex","strict","normalizeEmotesFromTags","toPairs","v","getFfzSrcSet","dpi","TWITCH_EMOTES_CDN","createTwitchEmote","alt","src","srcSet","createMention","text","target","findEntity","pt","shape","oneOf","isRequired","string","href","word","parseTwitch","twitchEmote","find","propEq","findTwitchEmote","bttvEmote","findBttvEmote","createBttvEmote","ffzEmote","findFfzEmote","urls","createFfzEmote","char","emojiMatch","twemojiParser","assetType","emoji","keys","head","emojilib","mentionMatch","match","toLowerCase","linkMatch","formatMessage","embeddedEmotes","emotes","isOwnMessage","hasEmbeddedEmotes","normalizedEmbeddedEmotes","result","offset","arrayOffset","spaceIndex","indexOf","startIndex","endIndex","substring","entity","embeddedEmote","textBefore","entityObject","difference","textAfter","sliceMessages","diff","getEmotes","getIsEven","prev","addedItemsCount","isSliced","addMessagesRequest","addMessages","fetchRecentMessagesRequest","fetchRecentMessagesSuccess","fetchRecentMessagesFailure","getMessageBadges","globalBadges","channelBadges","version","title","description","imageUrl1x","image_url_1x","imageUrl2x","image_url_2x","imageUrl4x","image_url_4x","label","createBadge","Boolean","normalizeRecentMessages","messages","m","parse","normalizedMessage","parsedTags","messageArray","isHistory","oldItems","newItems","slicedMessages","isEven","history","chat","store","createStore","rootReducer","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","noop","useLocationHash","useState","location","setHash","useEffect","handleHashChange","removeEventListener","replaceEmojis","ChatInputRoot","styled","form","Controls","div","SendButton","button","Textarea","textarea","StyledLink","Link","ChatInput","isDisabled","onSubmit","textareaRef","useRef","setText","handleKeyDown","useCallback","e","preventDefault","textareaNode","current","placeholder","ref","maxLength","disabled","onChange","to","defaultProps","ChatMessageRoot","p","color","isMention","Name","span","Emote","img","Emoji","Mention","isActive","css","a","attrs","rel","Badge","ChatMessage","loginRegex","RegExp","test","aria-label","renderBadges","item","renderMessageArray","badgeInfo","subscriber","number","flags","mod","bool","roomId","tmiSentId","oneOfType","ChatRoot","ChatWrapper","MessagesWrapper","Messages","Scrollbar","disableTracksWidthCompensation","MoreMessagesButton","visible","messagesSelector","isEvenSelector","Chat","onSendMessage","useSelector","isMoreMessagesButtonVisible","setIsMoreMessagesButtonVisible","messagesRef","handleScrollToBottom","scrollToBottom","onUpdate","clientHeight","contentScrollHeight","scrollTop","onClick","client","channelIdSelector","Home","dispatch","useDispatch","username","currentChannelId","isAllEmotesLoaded","rawUser","getItem","JSON","setItem","document","handleMessage","getState","rest","connect","on","apiFetchGlobalBadges","apiFetchRecentMessages","emoticon_sets","fetchTwitchEmotes","apiFetchBttvChannelEmotes","apiFetchFfzChannelEmotes","apiFetchChannelBadges","say","authParams","client_id","redirect_uri","response_type","scope","claims","stringify","id_token","email_verified","picture","preferred_username","getAuthUrl","search","Auth","AuthCallback","useHistory","URLSearchParams","get","idToken","apiFetchUser","display_name","jwt","decode","sub","lastChannel","createGlobalStyle","colors","vars","common","App","exact","path","component","ReactGA","initialize","page","pathname","pageview","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1e2e52cf.chunk.js","sourcesContent":["const isAuthRedirect = (hash) => hash.startsWith('#access_token=');\n\nexport default isAuthRedirect;\n","export const TWITCH_API_HELIX = 'https://api.twitch.tv/helix';\nexport const TWITCH_API_KRAKEN = 'https://api.twitch.tv/kraken';\n\n// TODO: throw an error if fetch completed with not 2** code\n\nconst getHelixHeaders = () => ({\n  Authorization: `Bearer ${localStorage.accessToken}`,\n});\n\nconst getKrakenHeaders = () => ({\n  Accept: 'application/vnd.twitchtv.v5+json',\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `OAuth ${localStorage.accessToken}`,\n});\n\nconst apiRequestHelix = (url) =>\n  fetch(`${TWITCH_API_HELIX}${url}`, {\n    headers: getHelixHeaders(),\n  }).then((response) => response.json());\n\nconst apiRequestKraken = (url) =>\n  fetch(`${TWITCH_API_KRAKEN}${url}`, {\n    headers: getKrakenHeaders(),\n  }).then((response) => response.json());\n\nconst apiRequest = (url) => fetch(url).then((response) => response.json());\n\nexport const fetchUser = (id) => apiRequestHelix(`/users?id=${id}`);\n\nexport const fetchTwitchEmotesBySets = (userId) =>\n  apiRequestKraken(`/users/${userId}/emotes`);\n\nexport const fetchBttvGlobalEmotes = () =>\n  apiRequest('https://api.betterttv.net/3/cached/emotes/global');\nexport const fetchBttvChannelEmotes = (channelId) =>\n  apiRequest(`https://api.betterttv.net/3/cached/users/twitch/${channelId}`);\n\nexport const fetchFfzGlobalEmotes = () =>\n  apiRequest('https://api.frankerfacez.com/v1/set/global');\nexport const fetchFfzChannelEmotes = (channelId) =>\n  apiRequest(`https://api.frankerfacez.com/v1/room/id/${channelId}`);\n\n// apiRequest(`https://api.betterttv.net/3/cached/frankerfacez/users/twitch/${channelId}`);\n\nexport const fetchRecentMessages = (channel) =>\n  apiRequest(\n    `https://recent-messages.robotty.de/api/v2/recent-messages/${channel}?clearchatToNotice=true`,\n  );\n\nexport const fetchGlobalBadges = (language = 'en') =>\n  apiRequest(\n    `https://badges.twitch.tv/v1/badges/global/display?language=${language}`,\n  );\nexport const fetchChannelBadges = (channelId, language = 'en') =>\n  apiRequest(\n    `https://badges.twitch.tv/v1/badges/channels/${channelId}/display?language=${language}`,\n  );\n","import { createAction, handleActions } from 'redux-actions';\n\nimport { fetchUser as apiFetchUser } from '../utils/api';\n\nconst defaultState = {\n  isAuth: false,\n  isLoading: false,\n  user: {\n    id: null,\n    login: null,\n    displayName: null,\n  },\n};\n\nexport const setIsAuth = createAction('SET_IS_AUTH');\nconst fetchUserRequest = createAction('FETCH_USER_REQUEST');\nconst fetchUserSuccess = createAction('FETCH_USER_SUCCESS');\nconst fetchUserFailure = createAction('FETCH_USER_FAILURE');\n\nexport const fetchUser = (id) => async (dispatch) => {\n  dispatch(fetchUserRequest());\n\n  try {\n    const response = await apiFetchUser(id);\n    const { login, display_name: displayName } = response.data[0];\n    const user = { id, login, displayName };\n    localStorage.setItem('user', JSON.stringify(user));\n\n    dispatch(fetchUserSuccess(user));\n  } catch (error) {\n    dispatch(fetchUserFailure(error));\n  }\n};\n\nconst handleSetIsAuth = (state, { payload: { isAuth, user } }) => ({\n  ...state,\n  isAuth: isAuth === undefined ? state.isAuth : isAuth,\n  user: { ...state.user, ...user },\n});\n\nconst handleFetchUserRequest = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst handleFetchUserSuccess = (state, { payload }) => ({\n  ...state,\n  isAuth: true,\n  isLoading: false,\n  user: payload,\n});\nconst handleFetchUserFailure = (state, { payload }) => ({\n  ...state,\n  isAuth: false,\n  isLoading: false,\n  error: payload,\n});\n\nconst reducer = handleActions(\n  {\n    [setIsAuth]: handleSetIsAuth,\n    [fetchUserRequest]: handleFetchUserRequest,\n    [fetchUserSuccess]: handleFetchUserSuccess,\n    [fetchUserFailure]: handleFetchUserFailure,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions } from 'redux-actions';\nimport { pathOr, omit } from 'ramda';\n\nconst defaultState = {\n  currentChannel: null,\n  isConnected: false,\n  globalState: {},\n  channels: {\n    // [channel]: {\n    //   userState: {},\n    //   roomState: {},\n    // }\n  },\n};\n\nexport const currentChannelSelector = pathOr('', ['chat', 'currentChannel']);\n\nexport const {\n  setCurrentChannel,\n  setIsConnected,\n  updateGlobalUserState,\n  updateUserState,\n  updateRoomState,\n  removeChannel,\n} = createActions(\n  'SET_CURRENT_CHANNEL',\n  'SET_IS_CONNECTED',\n  'UPDATE_GLOBAL_USER_STATE',\n  'UPDATE_USER_STATE',\n  'UPDATE_ROOM_STATE',\n  'REMOVE_CHANNEL',\n);\n\nconst handleSetCurrentChannel = (state, { payload }) => ({\n  ...state,\n  currentChannel: payload,\n});\nconst handleSetIsConnected = (state, { payload }) => ({\n  ...state,\n  isConnected: payload,\n});\nconst handleUpdateGlobalUserState = (state, { payload: { tags } }) => ({\n  ...state,\n  globalState: { ...state.globalState, ...tags },\n});\nconst handleUpdateUserState = (state, { payload: { channel, tags } }) => ({\n  ...state,\n  channels: {\n    ...state.channels,\n    [channel]: { ...state.channels[channel], userState: tags },\n  },\n});\nconst handleUpdateRoomState = (state, { payload: { channel, tags } }) => ({\n  ...state,\n  channels: {\n    ...state.channels,\n    [channel]: { ...state.channels[channel], roomState: tags },\n  },\n});\nconst handleRemoveChannel = (state, { payload: channel }) => ({\n  ...state,\n  channels: omit([channel], state.channels),\n});\n\nconst reducer = handleActions(\n  {\n    [setCurrentChannel]: handleSetCurrentChannel,\n    [setIsConnected]: handleSetIsConnected,\n    [updateGlobalUserState]: handleUpdateGlobalUserState,\n    [updateUserState]: handleUpdateUserState,\n    [updateRoomState]: handleUpdateRoomState,\n    [removeChannel]: handleRemoveChannel,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\nimport { pathOr } from 'ramda';\n\nimport { currentChannelSelector } from './chat';\n\nimport {\n  fetchGlobalBadges as apiFetchGlobalBadges,\n  fetchChannelBadges as apiFetchChannelBadges,\n} from '../utils/api';\n\nconst defaultState = {\n  global: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n    items: {},\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: {},\n    // },\n  },\n};\n\nexport const globalBadgesSelector = (state) => state.badges.global.items;\nexport const channelBadgesSelector = (state) =>\n  pathOr({}, ['badges', 'channels', currentChannelSelector(state), 'items']);\n\nconst {\n  fetchGlobalBadgesRequest,\n  fetchGlobalBadgesSuccess,\n  fetchGlobalBadgesFailure,\n  fetchChannelBadgesRequest,\n  fetchChannelBadgesSuccess,\n  fetchChannelBadgesFailure,\n} = createActions(\n  'FETCH_GLOBAL_BADGES_REQUEST',\n  'FETCH_GLOBAL_BADGES_SUCCESS',\n  'FETCH_GLOBAL_BADGES_FAILURE',\n  'FETCH_CHANNEL_BADGES_REQUEST',\n  'FETCH_CHANNEL_BADGES_SUCCESS',\n  'FETCH_CHANNEL_BADGES_FAILURE',\n);\n\nconst parseBadges = pathOr({}, ['badge_sets']);\n\nexport const fetchGlobalBadges = () => async (dispatch) => {\n  dispatch(fetchGlobalBadgesRequest());\n\n  try {\n    const response = await apiFetchGlobalBadges();\n    const data = { items: parseBadges(response) };\n\n    dispatch(fetchGlobalBadgesSuccess(data));\n  } catch (error) {\n    dispatch(fetchGlobalBadgesFailure({ error }));\n  }\n};\n\nexport const fetchChannelBadges = (channelId, channel) => async (dispatch) => {\n  dispatch(fetchChannelBadgesRequest({ channel }));\n\n  try {\n    const response = await apiFetchChannelBadges(channelId);\n    const data = {\n      channel,\n      items: parseBadges(response),\n    };\n\n    dispatch(fetchChannelBadgesSuccess(data));\n  } catch (error) {\n    dispatch(fetchChannelBadgesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchFfzGlobalEmotes = (state, { type, payload }) => {\n  if (type === fetchGlobalBadgesRequest.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: true,\n        isLoaded: false,\n        isError: false,\n        error: null,\n      },\n    };\n  }\n\n  if (type === fetchGlobalBadgesSuccess.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: true,\n        isError: false,\n        error: null,\n        ...payload,\n      },\n    };\n  }\n\n  if (type === fetchGlobalBadgesFailure.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: false,\n        isError: true,\n        ...payload,\n      },\n    };\n  }\n\n  return state;\n};\n\nconst handleFetchFfzChannelEmotes = (state, { type, payload }) => {\n  const { channel } = payload;\n\n  if (type === fetchChannelBadgesRequest.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: true,\n          isLoaded: false,\n          isError: false,\n          error: null,\n        },\n      },\n    };\n  }\n\n  if (type === fetchChannelBadgesSuccess.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: true,\n          isError: false,\n          error: null,\n          items: payload.items,\n        },\n      },\n    };\n  }\n\n  if (type === fetchChannelBadgesFailure.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: false,\n          isError: true,\n          error: payload.error,\n        },\n      },\n    };\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [combineActions(\n      fetchGlobalBadgesRequest,\n      fetchGlobalBadgesSuccess,\n      fetchGlobalBadgesFailure,\n    )]: handleFetchFfzGlobalEmotes,\n\n    [combineActions(\n      fetchChannelBadgesRequest,\n      fetchChannelBadgesSuccess,\n      fetchChannelBadgesFailure,\n    )]: handleFetchFfzChannelEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\n\nimport { fetchTwitchEmotesBySets } from '../../utils/api';\n\nconst defaultState = {\n  isLoading: false,\n  isLoaded: false,\n  isError: false,\n  error: null,\n  items: {\n    // [setId]: [\n    //   {\n    //     code: \"PartyPoro\",\n    //     id: 300949540,\n    //   },\n    // ],\n  },\n};\n\nconst {\n  fetchTwitchEmotesRequest,\n  fetchTwitchEmotesSuccess,\n  fetchTwitchEmotesFailure,\n} = createActions(\n  'FETCH_TWITCH_EMOTES_REQUEST',\n  'FETCH_TWITCH_EMOTES_SUCCESS',\n  'FETCH_TWITCH_EMOTES_FAILURE',\n);\n\nexport const fetchTwitchEmotes = (userId) => async (dispatch) => {\n  dispatch(fetchTwitchEmotesRequest);\n\n  try {\n    const response = await fetchTwitchEmotesBySets(userId);\n    const data = { items: response.emoticon_sets };\n\n    dispatch(fetchTwitchEmotesSuccess(data));\n  } catch (e) {\n    dispatch(fetchTwitchEmotesFailure(e));\n  }\n};\n\nconst handleFetchTwitchEmotes = (state, { type, payload }) => {\n  if (type === fetchTwitchEmotesRequest.toString()) {\n    return {\n      ...state,\n      isLoading: true,\n      isLoaded: false,\n      isError: false,\n      error: null,\n    };\n  }\n\n  if (type === fetchTwitchEmotesSuccess.toString()) {\n    return {\n      ...state,\n      isLoading: false,\n      isLoaded: true,\n      isError: false,\n      ...payload,\n    };\n  }\n\n  if (type === fetchTwitchEmotesFailure.toString()) {\n    return {\n      ...state,\n      isLoading: false,\n      isLoaded: false,\n      isError: true,\n      error: payload,\n    };\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [combineActions(\n      fetchTwitchEmotesRequest,\n      fetchTwitchEmotesSuccess,\n      fetchTwitchEmotesFailure,\n    )]: handleFetchTwitchEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\n\nimport {\n  fetchBttvGlobalEmotes as apiFetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes as apiFetchBttvChannelEmotes,\n} from '../../utils/api';\n\nconst defaultState = {\n  global: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n    items: [],\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: [],\n    // },\n  },\n};\n\nconst {\n  fetchBttvGlobalEmotesRequest,\n  fetchBttvGlobalEmotesSuccess,\n  fetchBttvGlobalEmotesFailure,\n  fetchBttvChannelEmotesRequest,\n  fetchBttvChannelEmotesSuccess,\n  fetchBttvChannelEmotesFailure,\n} = createActions(\n  'FETCH_BTTV_GLOBAL_EMOTES_REQUEST',\n  'FETCH_BTTV_GLOBAL_EMOTES_SUCCESS',\n  'FETCH_BTTV_GLOBAL_EMOTES_FAILURE',\n  'FETCH_BTTV_CHANNEL_EMOTES_REQUEST',\n  'FETCH_BTTV_CHANNEL_EMOTES_SUCCESS',\n  'FETCH_BTTV_CHANNEL_EMOTES_FAILURE',\n);\n\nconst parseBttvChannelEmotes = ({ channelEmotes, sharedEmotes }) => [\n  ...channelEmotes,\n  ...sharedEmotes,\n];\n\nexport const fetchBttvGlobalEmotes = () => async (dispatch) => {\n  dispatch(fetchBttvGlobalEmotesRequest());\n\n  try {\n    const items = await apiFetchBttvGlobalEmotes();\n    const data = { items };\n\n    dispatch(fetchBttvGlobalEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchBttvGlobalEmotesFailure({ error }));\n  }\n};\n\nexport const fetchBttvChannelEmotes = (channelId, channel) => async (\n  dispatch,\n) => {\n  dispatch(fetchBttvChannelEmotesRequest({ channel }));\n\n  try {\n    const response = await apiFetchBttvChannelEmotes(channelId);\n    const data = {\n      channel,\n      items: parseBttvChannelEmotes(response),\n    };\n\n    dispatch(fetchBttvChannelEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchBttvChannelEmotesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchBttvGlobalEmotes = (state, { type, payload }) => {\n  if (type === fetchBttvGlobalEmotesRequest.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: true,\n        isLoaded: false,\n        isError: false,\n        error: null,\n      },\n    };\n  }\n\n  if (type === fetchBttvGlobalEmotesSuccess.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: true,\n        isError: false,\n        error: null,\n        ...payload,\n      },\n    };\n  }\n\n  if (type === fetchBttvGlobalEmotesFailure.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: false,\n        isError: true,\n        ...payload,\n      },\n    };\n  }\n\n  return state;\n};\n\nconst handleFetchBttvChannelEmotes = (state, { type, payload }) => {\n  const { channel } = payload;\n\n  if (type === fetchBttvChannelEmotesRequest.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: true,\n          isLoaded: false,\n          isError: false,\n          error: null,\n        },\n      },\n    };\n  }\n\n  if (type === fetchBttvChannelEmotesSuccess.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: true,\n          isError: false,\n          error: null,\n          items: payload.items,\n        },\n      },\n    };\n  }\n\n  if (type === fetchBttvChannelEmotesFailure.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: false,\n          isError: true,\n          error: payload.error,\n        },\n      },\n    };\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [combineActions(\n      fetchBttvGlobalEmotesRequest,\n      fetchBttvGlobalEmotesSuccess,\n      fetchBttvGlobalEmotesFailure,\n    )]: handleFetchBttvGlobalEmotes,\n\n    [combineActions(\n      fetchBttvChannelEmotesRequest,\n      fetchBttvChannelEmotesSuccess,\n      fetchBttvChannelEmotesFailure,\n    )]: handleFetchBttvChannelEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\nimport { pipe, pathOr, map, values, flatten } from 'ramda';\n\nimport {\n  fetchFfzGlobalEmotes as apiFetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes as apiFetchFfzChannelEmotes,\n} from '../../utils/api';\n\nconst defaultState = {\n  global: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n    items: [],\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: [],\n    // },\n  },\n};\n\nconst {\n  fetchFfzGlobalEmotesRequest,\n  fetchFfzGlobalEmotesSuccess,\n  fetchFfzGlobalEmotesFailure,\n  fetchFfzChannelEmotesRequest,\n  fetchFfzChannelEmotesSuccess,\n  fetchFfzChannelEmotesFailure,\n} = createActions(\n  'FETCH_FFZ_GLOBAL_EMOTES_REQUEST',\n  'FETCH_FFZ_GLOBAL_EMOTES_SUCCESS',\n  'FETCH_FFZ_GLOBAL_EMOTES_FAILURE',\n  'FETCH_FFZ_CHANNEL_EMOTES_REQUEST',\n  'FETCH_FFZ_CHANNEL_EMOTES_SUCCESS',\n  'FETCH_FFZ_CHANNEL_EMOTES_FAILURE',\n);\n\nconst parseFfzGlobalEmotes = pipe(\n  pathOr({}, ['sets']),\n  values,\n  map(pathOr([], ['emoticons'])),\n  flatten,\n);\nconst parseFfzChannelEmotes = parseFfzGlobalEmotes;\n\nexport const fetchFfzGlobalEmotes = () => async (dispatch) => {\n  dispatch(fetchFfzGlobalEmotesRequest());\n\n  try {\n    const response = await apiFetchFfzGlobalEmotes();\n    const data = { items: parseFfzGlobalEmotes(response) };\n\n    dispatch(fetchFfzGlobalEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchFfzGlobalEmotesFailure({ error }));\n  }\n};\n\nexport const fetchFfzChannelEmotes = (channelId, channel) => async (\n  dispatch,\n) => {\n  dispatch(fetchFfzChannelEmotesRequest({ channel }));\n\n  try {\n    const response = await apiFetchFfzChannelEmotes(channelId);\n    const data = {\n      channel,\n      items: parseFfzChannelEmotes(response),\n    };\n\n    dispatch(fetchFfzChannelEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchFfzChannelEmotesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchFfzGlobalEmotes = (state, { type, payload }) => {\n  if (type === fetchFfzGlobalEmotesRequest.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: true,\n        isLoaded: false,\n        isError: false,\n        error: null,\n      },\n    };\n  }\n\n  if (type === fetchFfzGlobalEmotesSuccess.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: true,\n        isError: false,\n        error: null,\n        ...payload,\n      },\n    };\n  }\n\n  if (type === fetchFfzGlobalEmotesFailure.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: false,\n        isError: true,\n        ...payload,\n      },\n    };\n  }\n\n  return state;\n};\n\nconst handleFetchFfzChannelEmotes = (state, { type, payload }) => {\n  const { channel } = payload;\n\n  if (type === fetchFfzChannelEmotesRequest.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: true,\n          isLoaded: false,\n          isError: false,\n          error: null,\n        },\n      },\n    };\n  }\n\n  if (type === fetchFfzChannelEmotesSuccess.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: true,\n          isError: false,\n          error: null,\n          items: payload.items,\n        },\n      },\n    };\n  }\n\n  if (type === fetchFfzChannelEmotesFailure.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: false,\n          isError: true,\n          error: payload.error,\n        },\n      },\n    };\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [combineActions(\n      fetchFfzGlobalEmotesRequest,\n      fetchFfzGlobalEmotesSuccess,\n      fetchFfzGlobalEmotesFailure,\n    )]: handleFetchFfzGlobalEmotes,\n\n    [combineActions(\n      fetchFfzChannelEmotesRequest,\n      fetchFfzChannelEmotesSuccess,\n      fetchFfzChannelEmotesFailure,\n    )]: handleFetchFfzChannelEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport twitch from './twitch';\nimport bttv from './bttv';\nimport ffz from './ffz';\n\nexport default combineReducers({\n  twitch,\n  bttv,\n  ffz,\n});\n","import { createSelector } from 'reselect';\nimport { pipe, pathOr, values, flatten } from 'ramda';\n\nimport { currentChannelSelector } from '../chat';\n\nexport const twitchEmotesSelector = createSelector(\n  pathOr([], ['emotes', 'twitch', 'items']),\n  pipe(\n    values,\n    flatten,\n  ),\n);\n\nconst bttvChannelEmotesSelector = createSelector(\n  pathOr({}, ['emotes', 'bttv', 'channels']),\n  currentChannelSelector,\n  (channels, currentChannel) => pathOr([], [currentChannel, 'items'], channels),\n);\nexport const bttvEmotesSelector = createSelector(\n  pathOr([], ['emotes', 'bttv', 'global', 'items']),\n  bttvChannelEmotesSelector,\n  (globalBttvEmotes, channelBttvEmotes) => [\n    ...globalBttvEmotes,\n    ...channelBttvEmotes,\n  ],\n);\n\nconst ffzChannelEmotesSelector = createSelector(\n  pathOr({}, ['emotes', 'ffz', 'channels']),\n  currentChannelSelector,\n  (channels, currentChannel) => pathOr([], [currentChannel, 'items'], channels),\n);\nexport const ffzEmotesSelector = createSelector(\n  pathOr([], ['emotes', 'ffz', 'global', 'items']),\n  ffzChannelEmotesSelector,\n  (globalFfzEmotes, channelFfzEmotes) => [\n    ...globalFfzEmotes,\n    ...channelFfzEmotes,\n  ],\n);\n\nconst isBttvChannelEmotesLoadedSelector = (state) =>\n  pathOr(false, [\n    'emotes',\n    'bttv',\n    'channels',\n    currentChannelSelector(state),\n    'isLoaded',\n  ])(state);\n\nconst isFfzChannelEmotesLoadedSelector = (state) =>\n  pathOr(false, [\n    'emotes',\n    'ffz',\n    'channels',\n    currentChannelSelector(state),\n    'isLoaded',\n  ])(state);\n\nexport const isAllEmotesLoadedSelector = createSelector(\n  pathOr(false, ['emotes', 'twitch', 'isLoaded']),\n  pathOr(false, ['emotes', 'bttv', 'global', 'isLoaded']),\n  isBttvChannelEmotesLoadedSelector,\n  pathOr(false, ['emotes', 'ffz', 'global', 'isLoaded']),\n  isFfzChannelEmotesLoadedSelector,\n  (twitch, bttvGlobal, bttvChannel, ffzGlobal, ffzChannel) =>\n    twitch && bttvGlobal && bttvChannel && ffzGlobal && ffzChannel,\n);\n","/* eslint-disable no-underscore-dangle */\nimport { pathOr, omit, mergeDeepRight, mergeDeepWith, concat } from 'ramda';\nimport { EventEmitter } from 'events';\nimport { parse as tekkoParse, format as tekkoFormat } from 'tekko';\nimport camelCase from 'camel-case';\nimport uuid from 'uuid/v4';\n\nconst chatUrl = 'wss://irc-ws.chat.twitch.tv:443';\n\nconst noopIRCCommands = [\n  'CAP',\n  '002',\n  '003',\n  '004',\n  '353',\n  '366',\n  '375',\n  '372',\n  '376',\n];\n\nconst booleanMessageTags = [\n  'mod',\n  'emote-only',\n  'r9k',\n  'rituals',\n  'subs-only',\n  'msg-param-should-share-streak',\n];\n\nconst numberMessageTags = [\n  'ban-duration',\n  'bits',\n  'msg-param-cumulative-months',\n  'msg-param-months',\n  'msg-param-promo-gift-total',\n  'msg-param-streak-months',\n  'msg-param-viewerCount',\n  'msg-param-threshold',\n];\n\nconst depricatedMessageTags = ['subscriber', 'turbo', 'user-type'];\n\nconst noticeMessageTags = [\n  'msg_banned',\n  'msg_bad_characters',\n  'msg_channel_blocked',\n  'msg_channel_suspended',\n  'msg_duplicate',\n  'msg_emoteonly',\n  'msg_facebook',\n  'msg_followersonly',\n  'msg_followersonly_followed',\n  'msg_followersonly_zero',\n  'msg_r9k',\n  'msg_ratelimit',\n  'msg_rejected',\n  'msg_rejected_mandatory',\n  'msg_room_not_found',\n  'msg_slowmode',\n  'msg_subsonly',\n  'msg_suspended',\n  'msg_timedout',\n  'msg_verified_email',\n];\n\nconst parseMessageEmotes = (raw = '') => {\n  if (!raw) return {};\n\n  return raw.split('/').reduce((acc, emote) => {\n    const [id, indexes] = emote.split(':');\n\n    return {\n      ...acc,\n      [id]: indexes.split(',').map((index) => {\n        const [start, end] = index.split('-');\n\n        return {\n          start: Number.parseInt(start, 10),\n          end: Number.parseInt(end, 10),\n        };\n      }),\n    };\n  }, {});\n};\n\nconst parseBadges = (data = '') => {\n  if (!data) return {};\n\n  return data.split(',').reduce((acc, badge) => {\n    const [name, value] = badge.split('/');\n\n    return {\n      ...acc,\n      [name]: value,\n    };\n  }, {});\n};\n\nconst normalizeTagValue = (name, value) => {\n  if (name === 'emotes') return parseMessageEmotes(value);\n  if (name === 'badges') return parseBadges(value);\n  if (name === 'badge-info') return parseBadges(value);\n\n  if (name === 'followers-only') {\n    let followersOnly = false;\n    if (value === '-1') {\n      followersOnly = false;\n    } else if (value === '0') {\n      followersOnly = true;\n    } else if (typeof value === 'string') {\n      followersOnly = parseInt(value, 10);\n    }\n    return followersOnly;\n  }\n\n  if (name === 'slow') {\n    let slow = false;\n    if (value === '0') {\n      slow = false;\n    } else if (typeof value === 'string') {\n      slow = parseInt(value, 10);\n    }\n    return slow;\n  }\n\n  if (booleanMessageTags.includes(name)) return value === '1';\n  if (numberMessageTags.includes(name)) return parseInt(value, 10);\n\n  if (typeof value === 'string') {\n    return value.replace('\\\\s', ' ');\n  }\n\n  return value;\n};\n\nexport const parseMessageTags = (data = {}) =>\n  Object.entries(data)\n    .filter(([key]) => !depricatedMessageTags.includes(key))\n    .reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [camelCase(key)]: normalizeTagValue(key, value),\n      };\n    }, {});\n\nexport const isBroadcaster = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'broadcaster');\n\nexport const isMod = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'moderator');\n\nexport const isSub = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'subscriber');\n\nexport const isVIP = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'vip');\n\nexport const monthsSubbed = (tags = {}) => {\n  const subbed = tags.subscriber;\n\n  return subbed ? parseInt(subbed, 10) : 0;\n};\n\nexport const getIsAction = (message) =>\n  message.startsWith('\\u0001ACTION ') && message.endsWith('\\u0001');\nexport const normalizeActionMessage = (message) => message.slice(8, -1);\n\nexport const parseMessageData = ({\n  raw,\n  command,\n  tags,\n  middle: params,\n  trailing: message,\n  prefix,\n}) => ({\n  raw,\n  command,\n  tags: parseMessageTags(tags),\n  params,\n  message,\n  prefix,\n});\n\nexport const parseChatMessage = ({\n  message,\n  tags,\n  params,\n  prefix: { user },\n}) => {\n  const isAction = getIsAction(message);\n\n  return {\n    message: isAction ? normalizeActionMessage(message) : message,\n    tags,\n    user,\n    channel: params[0].slice(1),\n    isAction,\n  };\n};\n\nconst parseGlobalUserState = ({ tags }) => ({ tags });\nconst parseState = ({ tags, params: [channel] }) => ({\n  tags,\n  channel: channel.slice(1),\n});\nconst parseUserState = parseState;\nconst parseRoomState = parseState;\n\nconst parseCommand = ({ message, tags, params: [channel] }) => ({\n  message,\n  tags,\n  channel: channel.slice(1),\n});\nconst parseNotice = parseCommand;\nconst parseUserNotice = parseCommand;\nconst parseClearMessage = parseCommand;\nconst parseClearChat = parseCommand;\nconst parseHostTarget = parseCommand;\n\nconst parseWhisper = ({\n  message,\n  tags,\n  params: [channel],\n  prefix: { user },\n}) => ({\n  message,\n  tags,\n  channel,\n  user,\n});\n\nclass Client extends EventEmitter {\n  socket;\n\n  options;\n\n  user;\n\n  channels;\n\n  _queue;\n\n  _messagesQueue;\n\n  constructor(options = {}) {\n    super();\n    this.socket = null;\n    this.channels = {};\n    this.options = options;\n    this.user = null;\n    this._queue = [];\n    this._messagesQueue = {};\n  }\n\n  _onConnect() {\n    const { name, auth } = this.options.identity;\n    this.sendRaw([\n      'CAP REQ :twitch.tv/tags twitch.tv/commands',\n      `PASS oauth:${auth}`,\n      `NICK ${name}`,\n    ]);\n    this.emit('connected');\n  }\n\n  _onClose(hadError) {\n    // TODO\n    const willReconnect = false;\n    this.emit('disconnected', { willReconnect, hadError });\n    if (willReconnect) {\n      this.connect();\n    }\n  }\n\n  _onError(error) {\n    // TODO\n    this.emit('error', error);\n  }\n\n  _onData(rawData) {\n    const data = rawData.trim().split('\\r\\n');\n    data.forEach((line) => this._handleMessage(line));\n  }\n\n  _emmitOwnMessage(tags, channel) {\n    const message = pathOr([], ['_messagesQueue', channel], this).shift();\n\n    if (typeof message !== 'string') return;\n\n    const isAction = message.startsWith('/me ');\n    const messageEventData = {\n      message: isAction ? message.slice(4) : message,\n      tags: {\n        ...tags,\n        id: uuid(),\n        tmiSentTs: new Date().getTime(),\n        userId: this.user.userId,\n      },\n      user: this.options.identity.name,\n      channel,\n      isAction,\n    };\n\n    this.emit('ownmessage', messageEventData);\n  }\n\n  _handleMessage(raw) {\n    const parsedData = tekkoParse(raw);\n    parsedData.raw = raw;\n    const { command } = parsedData;\n\n    if (command === 'PING') {\n      this.sendRaw('PONG :tmi.twitch.tv');\n      this.emit('ping');\n      return;\n    }\n\n    if (parsedData.prefix && parsedData.prefix.user === 'jtv') {\n      // console.log('JTV');\n      // console.log(parsedData);\n      return;\n    }\n\n    if (command === '001') {\n      const name = parsedData.params[0];\n      this.options.identity.name = name;\n      return;\n    }\n\n    // noop\n    if (noopIRCCommands.includes(command)) {\n      return;\n    }\n\n    const data = parseMessageData(parsedData);\n    const channel = pathOr('', ['params', 0], data).slice(1);\n\n    // Sends a message to a channel\n    if (command === 'PRIVMSG') {\n      const eventData = parseChatMessage(data);\n      this.emit('message', eventData);\n      return;\n    }\n\n    // Sends user-state data when a user joins a channel or sends a PRIVMSG to a channel\n    if (command === 'USERSTATE') {\n      const eventData = parseUserState(data);\n\n      this.channels = mergeDeepRight(this.channels, {\n        [channel]: { userState: eventData.tags },\n      });\n\n      const isSendedAfterPrivateMessage =\n        pathOr(0, ['_messagesQueue', channel, 'length'], this) > 0;\n\n      if (isSendedAfterPrivateMessage) {\n        this._emmitOwnMessage(eventData.tags, channel);\n      }\n\n      this.emit('userstate', eventData);\n      return;\n    }\n\n    if (command === 'JOIN') {\n      const eventData = { channel };\n      this.channels = mergeDeepRight(this.channels, { [channel]: {} });\n      this.emit('join', eventData);\n      return;\n    }\n\n    if (command === 'PART') {\n      const eventData = { channel };\n      this.channels = omit([channel], this.channels);\n      this.emit('part', eventData);\n      return;\n    }\n\n    if (command === 'ROOMSTATE') {\n      const eventData = parseRoomState(data);\n      this.channels = mergeDeepRight(this.channels, {\n        [channel]: { roomState: eventData.tags },\n      });\n      this.emit('roomstate', eventData);\n      return;\n    }\n\n    if (command === 'NOTICE') {\n      const eventData = parseNotice(data);\n\n      // Last message was not sent\n      if (noticeMessageTags.includes(data.tags.msgId)) {\n        pathOr([], ['_messagesQueue', channel], this).shift();\n      }\n\n      this.emit('notice', eventData);\n      return;\n    }\n\n    if (command === 'USERNOTICE') {\n      const eventData = parseUserNotice(data);\n      this.emit('usernotice', eventData);\n      return;\n    }\n\n    if (command === 'CLEARCHAT') {\n      const eventData = parseClearChat(data);\n      this.emit('clearchat', eventData);\n      return;\n    }\n\n    if (command === 'CLEARMSG') {\n      const eventData = parseClearMessage(data);\n      this.emit('clearmsg', eventData);\n      return;\n    }\n\n    if (command === 'HOSTTARGET') {\n      const eventData = parseHostTarget(data);\n      this.emit('hosttarget', eventData);\n      return;\n    }\n\n    if (command === 'WHISPER') {\n      const eventData = parseWhisper(data);\n      this.emit('whisper', eventData);\n      return;\n    }\n\n    if (command === 'GLOBALUSERSTATE') {\n      const eventData = parseGlobalUserState(data);\n      this.user = eventData.tags;\n\n      while (this._queue.length) {\n        const ircMessage = this._queue.shift();\n        this.sendRaw(ircMessage);\n      }\n\n      this.emit('globaluserstate', eventData);\n      return;\n    }\n\n    this.emit('unhandled-command', data);\n  }\n\n  sendRaw(message) {\n    const handleError = (err) => {\n      if (err) {\n        this.emit('error', err);\n      }\n    };\n\n    if (Array.isArray(message)) {\n      message.forEach((line) => this.socket.send(`${line}\\r\\n`, handleError));\n    } else {\n      this.socket.send(`${message}\\r\\n`, handleError);\n    }\n  }\n\n  connect() {\n    this.socket = new WebSocket(chatUrl);\n    const { socket } = this;\n\n    socket.addEventListener('open', () => this._onConnect());\n    socket.addEventListener('close', (hadError) => this._onClose(hadError));\n    socket.addEventListener('error', (error) => this._onError(error));\n    socket.addEventListener('message', (data) => this._onData(data.data));\n  }\n\n  say(channel, message) {\n    // TODO: check if conected to the channel before send\n\n    if (!message) return;\n\n    const ircMessage = tekkoFormat({\n      command: 'PRIVMSG',\n      middle: [`#${channel}`],\n      trailing: message,\n    });\n    this.sendRaw(ircMessage);\n\n    this._messagesQueue = mergeDeepWith(concat, this._messagesQueue, {\n      [channel]: [message],\n    });\n  }\n\n  sendCommand(channel, command, params) {\n    const commandParams = Array.isArray(params) ? params.join(' ') : params;\n    const ircMessage = tekkoFormat({\n      command: 'PRIVMSG',\n      middle: [`#${channel}`],\n      trailing: `/${command} ${commandParams}`,\n    });\n    this.sendRaw(ircMessage);\n  }\n\n  join(roomName) {\n    const ircMessage = tekkoFormat({\n      command: 'JOIN',\n      middle: [`#${roomName}`],\n    });\n\n    if (!this.user) {\n      this._queue.push(ircMessage);\n    } else {\n      this.sendRaw(ircMessage);\n    }\n  }\n\n  part(roomName) {\n    const ircMessage = tekkoFormat({\n      command: 'PART',\n      middle: [`#${roomName}`],\n    });\n\n    if (!this.user) {\n      this._queue.push(ircMessage);\n    } else {\n      this.sendRaw(ircMessage);\n    }\n  }\n}\n\nexport default Client;\n","import pt from 'prop-types';\nimport { parse as twemojiParser } from 'twemoji-parser';\nimport emojilib from 'emojilib/emojis';\nimport urlRegex from 'url-regex';\nimport {\n  pipe,\n  toPairs,\n  map,\n  flatten,\n  find,\n  propEq,\n  join,\n  filter,\n  keys,\n  head,\n} from 'ramda';\n\n// const mentionRegex = /^@([\\p{Letter}_]+)/u;\nconst mentionRegex = /^@([\\w_]+)/;\nconst linkRegex = urlRegex({ strict: false });\n\nconst normalizeEmotesFromTags = pipe(\n  toPairs,\n  map(([id, value]) => map((v) => ({ id, ...v }), value)),\n  flatten,\n);\n\nconst getFfzSrcSet = pipe(\n  toPairs,\n  map(([dpi, url]) => `${url} ${dpi}x`),\n  join(', '),\n);\n\nconst TWITCH_EMOTES_CDN = '//static-cdn.jtvnw.net/emoticons/v1';\nconst BTTV_EMOTES_CDN = '//cdn.betterttv.net/emote';\n\nexport const createTwitchEmote = (alt, id) => ({\n  type: 'twitch-emote',\n  alt,\n  src: `${TWITCH_EMOTES_CDN}/${id}/1.0`,\n  srcSet: `${TWITCH_EMOTES_CDN}/${id}/1.0 1x, ${TWITCH_EMOTES_CDN}/${id}/2.0 2x, ${TWITCH_EMOTES_CDN}/${id}/3.0 4x`,\n});\nexport const createBttvEmote = (alt, { id }) => ({\n  type: 'bttv-emote',\n  alt,\n  src: `${BTTV_EMOTES_CDN}/${id}/1x`,\n  srcSet: `${BTTV_EMOTES_CDN}/${id}/2x 2x, ${BTTV_EMOTES_CDN}/${id}/3x 4x`,\n});\nexport const createFfzEmote = (alt, { urls }) => ({\n  type: 'ffz-emote',\n  alt,\n  src: urls[1],\n  srcSet: getFfzSrcSet(urls),\n});\nexport const createEmoji = (alt, src) => ({\n  type: 'emoji',\n  alt,\n  src,\n  srcSet: null,\n});\nexport const createMention = (text, target) => ({\n  type: 'mention',\n  text,\n  target,\n});\nexport const createLink = (href) => ({\n  type: 'link',\n  text: href,\n  href,\n});\n\nexport const twitchEmoteType = pt.shape({\n  type: pt.oneOf(['twitch-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const bttvEmoteType = pt.shape({\n  type: pt.oneOf(['bttv-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const ffzEmoteType = pt.shape({\n  type: pt.oneOf(['ffz-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const emojiType = pt.shape({\n  type: pt.oneOf(['emoji']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const mentionType = pt.shape({\n  type: pt.oneOf(['mention']).isRequired,\n  text: pt.string.isRequired,\n  target: pt.string.isRequired,\n});\nexport const linkType = pt.shape({\n  type: pt.oneOf(['link']).isRequired,\n  text: pt.string.isRequired,\n  href: pt.string.isRequired,\n});\n\nconst findTwitchEmote = (name, twitch) => find(propEq('code', name), twitch);\nconst findBttvEmote = (name, bttv) => find(propEq('code', name), bttv);\nconst findFfzEmote = (name, ffz) => find(propEq('name', name), ffz);\nconst findEmoji = (char) =>\n  pipe(\n    filter(propEq('char', char)),\n    keys,\n    head,\n  )(emojilib);\n\nconst findEntity = (word, { twitch, bttv, ffz }, { parseTwitch = false }) => {\n  if (parseTwitch) {\n    const twitchEmote = findTwitchEmote(word, twitch);\n    if (twitchEmote) return createTwitchEmote(word, twitchEmote.id);\n  }\n\n  const bttvEmote = findBttvEmote(word, bttv);\n  if (bttvEmote) return createBttvEmote(word, bttvEmote);\n\n  const ffzEmote = findFfzEmote(word, ffz);\n  if (ffzEmote) return createFfzEmote(word, ffzEmote);\n\n  // Don't parse two or more emotes without spaces between\n  // Don't parse emote if it's not in the emojilib package\n  const emojiMatch = twemojiParser(word, { assetType: 'png' });\n  if (\n    emojiMatch &&\n    emojiMatch.length === 1 &&\n    emojiMatch[0].text.length === word.length\n  ) {\n    const emoji = findEmoji(word);\n\n    if (emoji) {\n      const [{ url }] = emojiMatch;\n      return createEmoji(emoji, url);\n    }\n  }\n\n  // TODO: Use unicode regex if it supports\n  const mentionMatch = word.match(mentionRegex);\n  if (mentionMatch) {\n    const [text, target] = mentionMatch;\n    return [\n      createMention(text, target.toLowerCase()),\n      word.length - text.length,\n    ];\n  }\n\n  const linkMatch = word.match(linkRegex);\n  if (linkMatch && linkMatch[0].length === word.length) {\n    return createLink(word);\n  }\n\n  return null;\n};\n\nconst formatMessage = (message, embeddedEmotes, emotes) => {\n  // If the message was sent by the current user, there is no embedded emotes\n  // So we need to parse twitch emotes manually\n\n  const isOwnMessage = embeddedEmotes === undefined || embeddedEmotes === null;\n  const hasEmbeddedEmotes =\n    embeddedEmotes && Object.keys(embeddedEmotes).length > 0;\n  const normalizedEmbeddedEmotes = normalizeEmotesFromTags(embeddedEmotes);\n\n  const result = [];\n  let offset = 0;\n  // Before that offset all content was added to the result array\n  let arrayOffset = 0;\n\n  // Check every word. From offset to the next space index\n  do {\n    const spaceIndex = message.indexOf(' ', offset + 1);\n\n    const isStart = offset === 0;\n    const isEnd = spaceIndex === -1;\n\n    const startIndex = isStart ? offset : offset + 1;\n    const endIndex = isEnd ? message.length : spaceIndex;\n\n    const word = message.substring(startIndex, endIndex);\n\n    if (word) {\n      let entity = null;\n\n      // Check embedded twitch emotes\n      if (hasEmbeddedEmotes) {\n        const embeddedEmote = find(\n          propEq('start', startIndex),\n          normalizedEmbeddedEmotes,\n        );\n\n        if (embeddedEmote) {\n          entity = createTwitchEmote(word, embeddedEmote.id);\n        }\n      }\n\n      // Check other entities\n      if (!entity) {\n        entity = findEntity(word, emotes, { parseTwitch: isOwnMessage });\n      }\n\n      if (entity) {\n        // Push all text before this entity\n        if (arrayOffset !== startIndex) {\n          const textBefore = message.substring(arrayOffset, startIndex);\n          result.push(textBefore);\n        }\n\n        // If entity it's an array it means entity may be not full word\n        // The second element is the difference between word length and entity length\n        if (Array.isArray(entity)) {\n          const [entityObject, difference] = entity;\n          result.push(entityObject);\n          arrayOffset = endIndex - difference;\n        } else {\n          result.push(entity);\n          arrayOffset = endIndex;\n        }\n      }\n    }\n\n    // If it's the last word and it wasn't added to the result add it now\n    if (spaceIndex === -1 && arrayOffset !== endIndex) {\n      const textAfter = message.substring(arrayOffset, endIndex);\n      result.push(textAfter);\n    }\n\n    offset = spaceIndex;\n  } while (offset !== -1);\n\n  return result;\n};\n\nexport default formatMessage;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\nimport { pathOr, toPairs, map, pipe, filter } from 'ramda';\nimport { parse } from 'tekko';\n\nimport {\n  twitchEmotesSelector,\n  bttvEmotesSelector,\n  ffzEmotesSelector,\n} from './emotes/selectors';\nimport { globalBadgesSelector, channelBadgesSelector } from './badges';\nimport { fetchRecentMessages as apiFetchRecentMessages } from '../utils/api';\nimport { CHANNEL_MESSAGES_LIMIT } from '../utils/constants';\nimport {\n  getIsAction,\n  normalizeActionMessage,\n  parseMessageTags,\n} from '../utils/twitchChat';\nimport formatMessage from '../utils/formatMessage';\n\nconst defaultState = {\n  // [channel]: {\n  //   history: {\n  //     isLoading: true,\n  //     isLoaded: false,\n  //     isError: false,\n  //     error: null,\n  //   },\n  //   isEven: false,\n  //   items: [],\n  // },\n};\n\nconst sliceMessages = (items) => {\n  const diff = items.length - CHANNEL_MESSAGES_LIMIT;\n  return diff > 0 ? items.slice(diff) : items;\n};\n\nconst getEmotes = (state) => ({\n  twitch: twitchEmotesSelector(state),\n  bttv: bttvEmotesSelector(state),\n  ffz: ffzEmotesSelector(state),\n});\n\nconst getIsEven = (prev, addedItemsCount, isSliced) => {\n  if (isSliced) {\n    return addedItemsCount % 2 ? !prev : prev;\n  }\n  return prev;\n};\n\nconst {\n  addMessages: addMessagesRequest,\n  fetchRecentMessagesRequest,\n  fetchRecentMessagesSuccess,\n  fetchRecentMessagesFailure,\n} = createActions(\n  'ADD_MESSAGES',\n  'FETCH_RECENT_MESSAGES_REQUEST',\n  'FETCH_RECENT_MESSAGES_SUCCESS',\n  'FETCH_RECENT_MESSAGES_FAILURE',\n);\n\nconst createBadge = ({\n  title,\n  description,\n  image_url_1x: imageUrl1x,\n  image_url_2x: imageUrl2x,\n  image_url_4x: imageUrl4x,\n}) => ({\n  alt: title,\n  label: description,\n  src: imageUrl1x,\n  srcSet: `${imageUrl1x} 1x, ${imageUrl2x} 2x, ${imageUrl4x} 4x`,\n});\n\nconst getMessageBadges = (badges, globalBadges, channelBadges) => {\n  const mapBadges = ([name, version]) => {\n    const badge =\n      pathOr(false, [name, 'versions', version], channelBadges) ||\n      pathOr(false, [name, 'versions', version], globalBadges);\n\n    return badge ? createBadge(badge) : false;\n  };\n\n  return pipe(\n    toPairs,\n    map(mapBadges),\n    filter(Boolean),\n  )(badges);\n};\n\nconst normalizeRecentMessages = (messages, state) => {\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n\n  return messages\n    .map((m) => parse(m))\n    .filter((m) => m.command === 'PRIVMSG')\n    .map(({ tags, params: [channel, message], prefix: { user } }) => {\n      const isAction = getIsAction(message);\n      const normalizedMessage = isAction\n        ? normalizeActionMessage(message)\n        : message;\n      const parsedTags = parseMessageTags(tags);\n      return {\n        message: normalizedMessage,\n        messageArray: formatMessage(\n          normalizedMessage,\n          parsedTags.emotes,\n          getEmotes(state),\n        ),\n        tags: parsedTags,\n        badges: getMessageBadges(\n          parsedTags.badges,\n          globalBadges,\n          channelBadges,\n        ),\n        user,\n        channel: channel.slice(1),\n        isAction,\n        isHistory: true,\n      };\n    });\n};\n\nexport const fetchRecentMessages = (channel) => async (dispatch, getState) => {\n  dispatch(fetchRecentMessagesRequest({ channel }));\n  try {\n    const response = await apiFetchRecentMessages(channel);\n    const data = {\n      channel,\n      items: normalizeRecentMessages(response.messages, getState()),\n    };\n\n    dispatch(fetchRecentMessagesSuccess(data));\n  } catch (error) {\n    dispatch(fetchRecentMessagesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchRecentMessages = (state, { type, payload }) => {\n  const { channel } = payload;\n\n  if (type === fetchRecentMessagesRequest.toString()) {\n    const oldItems = pathOr([], [channel, 'items'], state);\n    return {\n      ...state,\n      [channel]: {\n        ...state[channel],\n        history: {\n          isLoading: true,\n          isLoaded: false,\n          isError: false,\n          error: null,\n        },\n        items: oldItems,\n      },\n    };\n  }\n\n  if (type === fetchRecentMessagesSuccess.toString()) {\n    const newItems = [...payload.items, ...state[channel].items];\n    const slicedMessages = sliceMessages(newItems);\n    const isSliced = newItems.length > slicedMessages.length;\n    const isEven = pathOr(false, [channel, 'isEven'], state);\n\n    return {\n      ...state,\n      [channel]: {\n        ...state[channel],\n        history: {\n          isLoading: false,\n          isLoaded: true,\n          isError: false,\n          error: null,\n        },\n        isEven: getIsEven(isEven, payload.items.length, isSliced),\n        items: newItems,\n      },\n    };\n  }\n\n  if (type === fetchRecentMessagesFailure.toString()) {\n    return {\n      ...state,\n      [channel]: {\n        ...state[channel],\n        history: {\n          isLoading: false,\n          isLoaded: false,\n          isError: true,\n          error: payload.error,\n        },\n      },\n    };\n  }\n\n  return state;\n};\n\nexport const addMessages = (payload) => (dispatch, getState) => {\n  const state = getState();\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = getEmotes(state);\n\n  const newItems = payload.items.map(({ message, tags, ...rest }) => ({\n    message,\n    messageArray: formatMessage(message, tags.emotes, emotes),\n    tags,\n    badges: getMessageBadges(tags.badges, globalBadges, channelBadges),\n    ...rest,\n  }));\n\n  dispatch(\n    addMessagesRequest({\n      ...payload,\n      items: newItems,\n    }),\n  );\n};\n\nconst handleAddMessages = (state, { payload }) => {\n  const { channel } = payload;\n  const oldItems = pathOr([], [channel, 'items'], state);\n  const newItems = [...oldItems, ...payload.items];\n  const slicedMessages = sliceMessages(newItems);\n  const isSliced = newItems.length > slicedMessages.length;\n  const isEven = pathOr(false, [channel, 'isEven'], state);\n\n  return {\n    ...state,\n    [channel]: {\n      ...state[channel],\n      isEven: getIsEven(isEven, payload.items.length, isSliced),\n      items: slicedMessages,\n    },\n  };\n};\n\nconst reducer = handleActions(\n  {\n    [addMessagesRequest]: handleAddMessages,\n    [combineActions(\n      fetchRecentMessagesRequest,\n      fetchRecentMessagesSuccess,\n      fetchRecentMessagesFailure,\n    )]: handleFetchRecentMessages,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","export const TWITCH_API_AUTH_BASE = 'https://id.twitch.tv/oauth2/authorize';\n\nexport const TWITCH_API_CLIENT_ID = process.env.REACT_APP_TWITCH_API_CLIENT_ID;\nexport const TWITCH_API_REDIRECT_URI =\n  process.env.REACT_APP_TWITCH_API_REDIRECT_URI;\n\nexport const CHANNEL_MESSAGES_LIMIT = 500;\n","import { combineReducers } from 'redux';\n\nimport auth from './auth';\nimport badges from './badges';\nimport chat from './chat';\nimport emotes from './emotes/index';\nimport messages from './messages';\n\nexport default combineReducers({\n  auth,\n  badges,\n  chat,\n  emotes,\n  messages,\n});\n","/* eslint-disable no-underscore-dangle */\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  {},\n  compose(\n    applyMiddleware(thunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__\n      ? window.__REDUX_DEVTOOLS_EXTENSION__()\n      : (noop) => noop,\n  ),\n);\n\nexport default store;\n","import { useState, useEffect } from 'react';\n\nconst useLocationHash = () => {\n  const [hash, setHash] = useState(window.location.hash);\n\n  useEffect(() => {\n    const handleHashChange = () => setHash(window.location.hash);\n\n    window.addEventListener('hashchange', handleHashChange);\n\n    return () => window.removeEventListener('hashchange', handleHashChange);\n  }, []);\n\n  return hash;\n};\n\nexport default useLocationHash;\n","import emojilib from 'emojilib/emojis';\n\nconst replaceEmojis = (text) =>\n  text\n    .split(' ')\n    .map((word) => {\n      if (word[0] !== ':' || word[word.length - 1] !== ':') {\n        return word;\n      }\n\n      const name = word.slice(1, -1);\n      const emoji = emojilib[name];\n\n      return emoji && emoji.char ? emoji.char : word;\n    })\n    .join(' ');\n\nexport default replaceEmojis;\n","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst ChatInputRoot = styled.form`\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n  background-color: #18181b;\n\n  & > :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n\n  & > :not(:last-child) {\n    margin-right: 20px;\n  }\n`;\nconst SendButton = styled.button`\n  padding: 0 10px;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #9147ff;\n  outline: none;\n  font-size: 12px;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #772ce8;\n  }\n\n  &:active {\n    background-color: #5c16c5;\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n\n  &[disabled] {\n    background-color: rgba(255, 255, 255, 0.26);\n    color: rgba(255, 255, 255, 0.8);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\nconst Textarea = styled.textarea`\n  display: block;\n  padding: 10px;\n  width: 100%;\n  height: 38px;\n  max-height: 91px;\n  min-height: 40px;\n  overflow: hidden;\n  border: 2px solid transparent;\n  background-color: rgba(255, 255, 255, 0.15);\n  font-family: inherit;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\nconst StyledLink = styled(Link)`\n  color: #bf94ff;\n  text-decoration: none;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\n\nconst ChatInput = ({ isAuth, isDisabled, onSubmit }) => {\n  const textareaRef = useRef(null);\n  const [text, setText] = useState('');\n\n  const handleChange = (e) => setText(e.target.value);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(text);\n    setText('');\n  };\n\n  const handleKeyDown = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        const message = text.trim();\n        if (message) {\n          onSubmit(message);\n          setText('');\n        }\n      }\n    },\n    [onSubmit, setText, text],\n  );\n\n  useEffect(() => {\n    const textareaNode = textareaRef.current;\n\n    textareaNode.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      textareaNode.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [handleKeyDown]);\n\n  return (\n    <ChatInputRoot onSubmit={handleSubmit}>\n      <Textarea\n        placeholder=\"Send a message\"\n        ref={textareaRef}\n        maxLength={500}\n        disabled={isDisabled}\n        onChange={handleChange}\n        value={text}\n      />\n      <Controls>\n        {!isAuth && (\n          <StyledLink to=\"/chat/auth\">Sign in with Twitch</StyledLink>\n        )}\n        <SendButton disabled={isDisabled} type=\"submit\">\n          Chat\n        </SendButton>\n      </Controls>\n    </ChatInputRoot>\n  );\n};\n\nChatInput.defaultProps = {\n  isDisabled: false,\n};\n\nChatInput.propTypes = {\n  isAuth: pt.bool.isRequired,\n  isDisabled: pt.bool,\n  onSubmit: pt.func.isRequired,\n};\n\nexport default ChatInput;\n","import React from 'react';\nimport pt from 'prop-types';\nimport styled, { css } from 'styled-components';\n\nimport {\n  twitchEmoteType,\n  bttvEmoteType,\n  ffzEmoteType,\n  emojiType,\n  mentionType,\n  linkType,\n} from '../utils/formatMessage';\n\nconst getChatMessageBg = (p) => {\n  if (p.isMention) return 'rgba(255, 0, 0, 0.3)';\n  if (p.isEven) return '#1f1925';\n  return 'transparent';\n};\n\nconst ChatMessageRoot = styled.div`\n  padding: 5px 20px;\n  color: ${(p) => (p.isAction ? p.color : '#fff')};\n  opacity: ${(p) => (p.isHistory ? '0.5' : '1')};\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${getChatMessageBg};\n`;\nconst Name = styled.span`\n  font-weight: bold;\n  color: ${(p) => p.color};\n`;\nconst Emote = styled.img`\n  display: inline-block;\n  margin: -5px 0;\n  vertical-align: middle;\n`;\nconst Emoji = styled.img`\n  display: inline-block;\n  margin-top: -5px;\n  margin-bottom: -4px;\n  width: 20px;\n  height: auto;\n  vertical-align: middle;\n`;\nconst Mention = styled.span`\n  ${(p) =>\n    p.isActive &&\n    css`\n      padding: 2px 4px;\n      background-color: #fafafa;\n      color: #18181b;\n    `}\n`;\nconst Link = styled.a.attrs({ rel: 'noreferrer noopener', target: '_blank' })`\n  color: #bf94ff;\n  text-decoration: none;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Badge = styled.img`\n  margin-bottom: 2px;\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst renderMessageArray = (user, login) => (item, key) => {\n  if (typeof item !== 'object') return item;\n\n  if (\n    item.type === 'twitch-emote' ||\n    item.type === 'bttv-emote' ||\n    item.type === 'ffz-emote'\n  ) {\n    return (\n      <Emote key={key} src={item.src} srcSet={item.srcSet} alt={item.alt} />\n    );\n  }\n\n  if (item.type === 'emoji') {\n    return (\n      <Emoji key={key} src={item.src} srcSet={item.srcSet} alt={item.alt} />\n    );\n  }\n\n  if (item.type === 'mention') {\n    const isActive = item.target === login || user === login;\n    return (\n      <Mention key={key} isActive={isActive}>\n        {item.text}\n      </Mention>\n    );\n  }\n\n  if (item.type === 'link') {\n    return (\n      <Link key={key} href={item.href}>\n        {item.text}\n      </Link>\n    );\n  }\n\n  return null;\n};\n\nconst renderBadges = (badges) =>\n  badges.map(({ alt, label, src, srcSet }, key) => (\n    // eslint-disable-next-line react/no-array-index-key\n    <Badge key={key} alt={alt} aria-label={label} src={src} srcSet={srcSet} />\n  ));\n\nconst ChatMessage = ({\n  message,\n  messageArray,\n  tags: { color, displayName },\n  badges,\n  user,\n  login,\n  isHistory,\n  isAction,\n  isEven,\n}) => {\n  const loginRegex = RegExp(login, 'gi');\n  const isMention = user !== login && loginRegex.test(message);\n\n  return (\n    <ChatMessageRoot\n      isHistory={isHistory}\n      isAction={isAction}\n      isEven={isEven}\n      isMention={isMention}\n      color={color}\n    >\n      {badges.length > 0 && renderBadges(badges)}\n      <Name color={color}>{displayName}</Name>\n      {!isAction && ':'} {messageArray.map(renderMessageArray(user, login))}\n    </ChatMessageRoot>\n  );\n};\n\nChatMessage.defaultProps = {\n  isHistory: false,\n  isAction: false,\n  isEven: false,\n  badges: [],\n};\n\nexport const tagsType = pt.shape({\n  badgeInfo: pt.shape({\n    subscriber: pt.number,\n  }),\n  badges: pt.shape({}),\n  color: pt.string,\n  displayName: pt.string.isRequired,\n  emotes: pt.shape({}),\n  flags: pt.string,\n  id: pt.string,\n  mod: pt.bool,\n  roomId: pt.string,\n  tmiSentId: pt.oneOfType([pt.string, pt.number]),\n  userId: pt.string,\n});\n\nChatMessage.propTypes = {\n  message: pt.string.isRequired,\n  messageArray: pt.arrayOf(\n    pt.oneOfType([\n      pt.string,\n      pt.shape({}),\n      twitchEmoteType,\n      bttvEmoteType,\n      ffzEmoteType,\n      emojiType,\n      mentionType,\n      // TODO: fix warning with link type\n      linkType,\n    ]),\n  ).isRequired,\n  tags: tagsType.isRequired,\n  badges: pt.arrayOf(\n    pt.shape({\n      alt: pt.string,\n      label: pt.string,\n      src: pt.string.isRequired,\n      srcSet: pt.string,\n    }),\n  ),\n  user: pt.string.isRequired,\n  login: pt.string.isRequired,\n  isHistory: pt.bool,\n  isAction: pt.bool,\n  isEven: pt.bool,\n};\n\nexport default ChatMessage;\n","import React, { useState, useEffect, useRef } from 'react';\nimport pt from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { pathOr } from 'ramda';\nimport Scrollbar from 'react-scrollbars-custom';\n\nimport { currentChannelSelector } from '../reducers/chat';\nimport ChatInput from './ChatInput';\nimport ChatMessage from './ChatMessage';\n\nconst MORE_MESSAGES_OFFSET = 100;\n\nconst ChatRoot = styled.div`\n  height: 100vh;\n  font-size: 12px;\n`;\nconst ChatWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background-color: #18181b;\n`;\nconst MessagesWrapper = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\nconst Messages = styled(Scrollbar).attrs({\n  disableTracksWidthCompensation: true,\n})`\n  overflow-y: auto;\n\n  .ScrollbarsCustom-TrackY {\n    background: none !important;\n  }\n\n  .ScrollbarsCustom-ThumbY {\n    margin-left: auto;\n    margin-right: auto;\n    width: 6px !important;\n  }\n\n  .ScrollbarsCustom-Content {\n    padding-bottom: 10px !important;\n  }\n`;\nconst MoreMessagesButton = styled.button`\n  position: absolute;\n  left: 50%;\n  bottom: 10px;\n  display: ${(p) => (p.visible ? 'block' : 'none')};\n  padding: 5px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  transform: translateX(-50%);\n`;\n\nconst messagesSelector = (state) =>\n  pathOr([], ['messages', currentChannelSelector(state), 'items'], state);\n\nconst isEvenSelector = (state) =>\n  pathOr(false, ['messages', currentChannelSelector(state), 'isEven'], state);\n\nconst Chat = ({ onSendMessage }) => {\n  const isAuth = useSelector((state) => state.auth.isAuth);\n  const messages = useSelector(messagesSelector);\n  // TODO: check if the user has a rights to send messages\n  const isConnected = useSelector((state) => state.chat.isConnected);\n  const isEven = useSelector(isEvenSelector);\n  const login = useSelector((state) => state.auth.user.login);\n  const [\n    isMoreMessagesButtonVisible,\n    setIsMoreMessagesButtonVisible,\n  ] = useState(false);\n  const messagesRef = useRef(null);\n\n  const handleScrollToBottom = () => {\n    if (messagesRef.current && messagesRef.current.scrollToBottom) {\n      messagesRef.current.scrollToBottom();\n    }\n  };\n\n  useEffect(() => {\n    if (!isMoreMessagesButtonVisible) {\n      handleScrollToBottom();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages]);\n\n  const handleScrollUpdate = ({\n    clientHeight,\n    contentScrollHeight,\n    scrollTop,\n  }) => {\n    const maxScrollTop = contentScrollHeight - clientHeight;\n    const isVisible = scrollTop + MORE_MESSAGES_OFFSET < maxScrollTop;\n\n    setIsMoreMessagesButtonVisible(isVisible);\n  };\n\n  return (\n    <ChatRoot>\n      <ChatWrapper>\n        <MessagesWrapper>\n          <Messages onUpdate={handleScrollUpdate} ref={messagesRef}>\n            {messages.map(\n              (\n                {\n                  message,\n                  messageArray,\n                  tags,\n                  badges,\n                  user,\n                  isAction,\n                  isHistory,\n                },\n                key,\n              ) => (\n                <ChatMessage\n                  key={tags.id}\n                  message={message}\n                  messageArray={messageArray}\n                  tags={tags}\n                  badges={badges}\n                  user={user}\n                  login={login}\n                  isAction={isAction}\n                  isHistory={isHistory}\n                  isEven={isEven ? key % 2 === 1 : key % 2 === 0}\n                />\n              ),\n            )}\n          </Messages>\n          <MoreMessagesButton\n            onClick={handleScrollToBottom}\n            visible={isMoreMessagesButtonVisible}\n          >\n            More messages below\n          </MoreMessagesButton>\n        </MessagesWrapper>\n        <ChatInput\n          onSubmit={onSendMessage}\n          isDisabled={!isAuth || !isConnected}\n          isAuth={isAuth}\n        />\n      </ChatWrapper>\n    </ChatRoot>\n  );\n};\n\nChat.propTypes = {\n  onSendMessage: pt.func.isRequired,\n};\n\nexport default Chat;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { pathOr } from 'ramda';\n\nimport useLocationHash from '../hooks/useLocationHash';\nimport { fetchTwitchEmotes } from '../reducers/emotes/twitch';\nimport {\n  fetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes,\n} from '../reducers/emotes/bttv';\nimport {\n  fetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes,\n} from '../reducers/emotes/ffz';\nimport { isAllEmotesLoadedSelector } from '../reducers/emotes/selectors';\nimport { addMessages, fetchRecentMessages } from '../reducers/messages';\nimport {\n  setCurrentChannel,\n  setIsConnected,\n  updateGlobalUserState,\n  updateUserState,\n  updateRoomState,\n  currentChannelSelector,\n} from '../reducers/chat';\nimport { fetchGlobalBadges, fetchChannelBadges } from '../reducers/badges';\nimport { setIsAuth } from '../reducers/auth';\nimport Client from '../utils/twitchChat';\nimport replaceEmojis from '../utils/replaceEmojis';\n\nimport Chat from './Chat';\n\nlet client = null;\n\nconst channelIdSelector = (state) =>\n  pathOr(\n    null,\n    ['chat', 'channels', currentChannelSelector(state), 'roomState', 'roomId'],\n    state,\n  );\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const isAuth = useSelector((state) => state.auth.isAuth);\n  const username = useSelector((state) => state.auth.user.login);\n  const currentChannel = useSelector(currentChannelSelector);\n  const currentChannelId = useSelector(channelIdSelector);\n  const isAllEmotesLoaded = useSelector(isAllEmotesLoadedSelector);\n  const userId = useSelector((state) => state.auth.user.id);\n  const hash = useLocationHash();\n\n  useEffect(() => {\n    const rawUser = localStorage.getItem('user');\n\n    if (rawUser) {\n      const user = JSON.parse(rawUser);\n\n      dispatch(setIsAuth({ isAuth: true, user }));\n    }\n\n    // TODO: try to connect to the chat. if there is an error, set isAuth to false and connect without login\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (hash && hash.length > 1) {\n      const channel = hash.slice(1);\n      dispatch(setCurrentChannel(channel));\n      localStorage.setItem('lastChannel', channel);\n    }\n  }, [dispatch, hash]);\n\n  useEffect(() => {\n    document.title = currentChannel\n      ? `#${currentChannel} - ${process.env.REACT_APP_NAME} `\n      : process.env.REACT_APP_NAME;\n  }, [currentChannel]);\n\n  useEffect(() => {\n    if (currentChannel && isAuth) {\n      const handleMessage = (data) => {\n        const eventData = {\n          channel: data.channel,\n          items: [data],\n        };\n        dispatch(addMessages(eventData));\n      };\n\n      const options = {\n        identity: {\n          name: username,\n          auth: localStorage.accessToken,\n        },\n      };\n\n      if (!client) {\n        client = new Client(options);\n        client.connect();\n      }\n\n      // TODO: Part the previous channel before join\n      client.join(currentChannel);\n\n      client.on('connected', () => dispatch(setIsConnected(true)));\n      client.on('disconnected', () => dispatch(setIsConnected(false)));\n\n      client.on('globaluserstate', (data) =>\n        dispatch(updateGlobalUserState(data)),\n      );\n      client.on('userstate', (data) => dispatch(updateUserState(data)));\n      client.on('roomstate', (data) => dispatch(updateRoomState(data)));\n\n      client.on('message', handleMessage);\n      client.on('ownmessage', handleMessage);\n    }\n  }, [dispatch, username, currentChannel, isAuth]);\n\n  useEffect(() => {\n    dispatch(fetchBttvGlobalEmotes());\n    dispatch(fetchFfzGlobalEmotes());\n    dispatch(fetchGlobalBadges());\n  }, [dispatch]);\n\n  useEffect(() => {\n    // TODO: Load recent messages immediately but render after all emotes will load\n    if (currentChannel && isAllEmotesLoaded) {\n      dispatch(fetchRecentMessages(currentChannel));\n    }\n  }, [dispatch, currentChannel, isAllEmotesLoaded]);\n\n  useEffect(() => {\n    if (userId) {\n      dispatch(fetchTwitchEmotes(userId));\n    }\n  }, [dispatch, userId]);\n\n  useEffect(() => {\n    // TODO: check if emotes for the current channel is already in the store\n    if (currentChannel && currentChannelId) {\n      dispatch(fetchBttvChannelEmotes(currentChannelId, currentChannel));\n      dispatch(fetchFfzChannelEmotes(currentChannelId, currentChannel));\n      dispatch(fetchChannelBadges(currentChannelId, currentChannel));\n    }\n  }, [dispatch, currentChannel, currentChannelId]);\n\n  const handleSendMessage = (message) => {\n    const normalizedMessage = replaceEmojis(message.trim());\n    client.say(currentChannel, normalizedMessage);\n  };\n\n  return <Chat onSendMessage={handleSendMessage} />;\n};\n\nexport default Home;\n","import {\n  TWITCH_API_AUTH_BASE,\n  TWITCH_API_CLIENT_ID,\n  TWITCH_API_REDIRECT_URI,\n} from './constants';\n\nconst authParams = {\n  client_id: TWITCH_API_CLIENT_ID,\n  redirect_uri: TWITCH_API_REDIRECT_URI,\n  response_type: 'token+id_token',\n  scope: [\n    'openid',\n    'channel:moderate',\n    'chat:edit',\n    'chat:read',\n    'whispers:read',\n    'whispers:edit',\n    'user_blocks_read',\n    'user_blocks_edit',\n    'user_subscriptions',\n  ].join('+'),\n  claims: JSON.stringify({\n    id_token: { email_verified: null, picture: null, preferred_username: null },\n  }),\n  // state: uid(),\n};\n\nconst getAuthUrl = () => {\n  const search = Object.entries(authParams)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n\n  return `${TWITCH_API_AUTH_BASE}?${search}`;\n};\n\nexport default getAuthUrl;\n","import getAuthUrl from '../utils/getAuthUrl';\n\nconst Auth = () => {\n  window.location.href = getAuthUrl();\n\n  return null;\n};\n\nexport default Auth;\n","import { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport jwt from 'jsonwebtoken';\n\nimport { fetchUser } from '../reducers/auth';\n\nconst AuthCallback = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  if (!window.location.hash) return null;\n\n  const params = new URLSearchParams(window.location.hash.slice(1));\n\n  const accessToken = params.get('access_token');\n  const idToken = params.get('id_token');\n\n  if (!accessToken || !idToken) return null;\n\n  localStorage.setItem('accessToken', accessToken);\n  localStorage.setItem('idToken', idToken);\n\n  const { sub: id } = jwt.decode(idToken);\n\n  dispatch(fetchUser(id));\n\n  const lastChannel = localStorage.getItem('lastChannel');\n\n  history.push(lastChannel ? `/chat/#${lastChannel}` : '/chat/');\n\n  return null;\n};\n\nexport default AuthCallback;\n","import { css } from 'styled-components';\n\nexport default css`\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    margin: 0;\n    font-family: Roobert, Helvetica Neue, Helvetica, Arial, sans-serif;\n  }\n`;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { createGlobalStyle } from 'styled-components';\n\nimport common from './common';\nimport colors from './colors';\nimport vars from './vars';\n\nexport default createGlobalStyle`\n  :root {\n    ${colors};\n    ${vars};\n  }\n  ${common};\n`;\n","import React from 'react';\nimport pt from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport isAuthRedirect from './utils/isAuthRedirect';\nimport Home from './components/Home';\nimport Auth from './components/Auth';\nimport AuthCallback from './components/AuthCallback';\nimport GlobalStyles from './styles';\n\nconst getHomeComponent = () =>\n  isAuthRedirect(window.location.hash) ? AuthCallback : Home;\n\nconst App = ({ store }) => (\n  <>\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/chat/\" component={getHomeComponent()} />\n          <Route exact path=\"/chat/auth\" component={Auth} />\n        </Switch>\n      </Router>\n    </Provider>\n    <GlobalStyles />\n  </>\n);\n\nApp.propTypes = {\n  store: pt.shape({}).isRequired,\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactGA from 'react-ga';\n\nimport isAuthRedirect from './utils/isAuthRedirect';\nimport store from './store';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactGA.initialize('UA-139550930-3');\n\nif (!isAuthRedirect(window.location.hash)) {\n  const page =\n    window.location.pathname + window.location.search + window.location.hash;\n  ReactGA.pageview(page);\n}\n\nReactDOM.render(<App store={store} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}