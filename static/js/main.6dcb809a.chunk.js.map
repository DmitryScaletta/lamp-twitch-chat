{"version":3,"sources":["utils/isAuthRedirect.js","utils/api.js","reducers/auth/auth.js","utils/storeFlags.js","reducers/badges/badges.js","reducers/chat/chat.js","reducers/emotes/twitch.js","reducers/emotes/bttv.js","reducers/emotes/ffz.js","reducers/emotes/index.js","reducers/emotes/selectors.js","reducers/badges/selectors.js","utils/normalizeHref.js","utils/formatMessage.js","utils/getMessageBadges.js","utils/twitchChat.js","utils/normalizeRecentMessages.js","reducers/messages/messages.js","utils/constants.js","reducers/index.js","store/index.js","hooks/useLocationHash.js","hooks/useDocumentTitle.js","reducers/messages/selectors.js","reducers/chat/selectors.js","utils/replaceEmojis.js","components/ChatInput.jsx","components/ChatMessage/types.js","components/ChatMessage/Message.jsx","components/ChatMessage/Notice.jsx","components/ChatMessage/UserNotice.jsx","components/ChatMessage/ChatMessage.jsx","components/Chat.jsx","components/Home.jsx","utils/getAuthUrl.js","components/Auth.jsx","components/AuthCallback.jsx","styles/common.js","styles/colors.js","styles/vars.js","styles/index.js","App.jsx","index.jsx"],"names":["isAuthRedirect","hash","startsWith","apiRequest","url","fetch","then","response","json","fetchUser","id","headers","Authorization","localStorage","accessToken","fetchTwitchEmotesBySets","userId","Accept","process","fetchBttvChannelEmotes","channelId","fetchFfzChannelEmotes","fetchRecentMessages","channel","fetchGlobalBadges","language","fetchChannelBadges","setIsAuth","createAction","fetchUserRequest","fetchUserSuccess","fetchUserFailure","reducer","handleActions","state","payload","isAuth","user","undefined","isLoading","error","login","displayName","storeFlags","default","isLoaded","isError","request","success","failure","defaultState","global","items","channels","createActions","fetchGlobalBadgesRequest","fetchGlobalBadgesSuccess","fetchGlobalBadgesFailure","fetchChannelBadgesRequest","fetchChannelBadgesSuccess","fetchChannelBadgesFailure","parseBadges","pathOr","combineActions","type","toString","mergeDeepRight","currentChannelSelector","setCurrentChannel","setIsConnected","updateGlobalUserState","updateUserState","updateRoomState","removeChannel","currentChannel","isConnected","tags","globalState","userState","roomState","omit","fetchTwitchEmotesRequest","fetchTwitchEmotesSuccess","fetchTwitchEmotesFailure","fetchBttvGlobalEmotesRequest","fetchBttvGlobalEmotesSuccess","fetchBttvGlobalEmotesFailure","fetchBttvChannelEmotesRequest","fetchBttvChannelEmotesSuccess","fetchBttvChannelEmotesFailure","parseBttvChannelEmotes","channelEmotes","sharedEmotes","fetchFfzGlobalEmotesRequest","fetchFfzGlobalEmotesSuccess","fetchFfzGlobalEmotesFailure","fetchFfzChannelEmotesRequest","fetchFfzChannelEmotesSuccess","fetchFfzChannelEmotesFailure","parseFfzGlobalEmotes","pipe","values","map","flatten","parseFfzChannelEmotes","combineReducers","twitch","bttv","ffz","twitchEmotesSelector","createSelector","bttvChannelEmotesSelector","bttvEmotesSelector","globalBttvEmotes","channelBttvEmotes","ffzChannelEmotesSelector","ffzEmotesSelector","globalFfzEmotes","channelFfzEmotes","emotesSelector","isEmotesLoadedSelector","emotes","isTwitchEmotesLoadedSelector","isBttvGlobalEmotesLoadedSelector","path","isBttvChannelEmotesLoadedSelector","isFfzGlobalEmotesLoadedSelector","isFfzChannelEmotesLoadedSelector","globalBadgesSelector","badges","channelBadgesSelector","isBadgesLoadedSelector","isGlobalBadgesLoadedSelector","isChannelBadgesLoadedSelector","isStartsWithProtocolRegex","normalizeHref","href","test","TWITCH_EMOTES_CDN","mentionRegex","linkRegex","urlRegex","strict","normalizeEmotesFromTags","toPairs","value","v","getFfzSrcSet","dpi","join","createTwitchEmote","alt","src","srcSet","createMention","text","target","twitchEmoteType","pt","shape","oneOf","isRequired","string","bttvEmoteType","ffzEmoteType","emojiType","mentionType","linkType","findEntity","word","parseTwitch","twitchEmote","name","find","propEq","findTwitchEmote","bttvEmote","findBttvEmote","createBttvEmote","ffzEmote","findFfzEmote","urls","createFfzEmote","char","emojiMatch","twemojiParser","assetType","length","emoji","filter","keys","head","emojilib","mentionMatch","match","toLowerCase","linkMatch","formatMessage","message","embeddedEmotes","isOwnMessage","hasEmbeddedEmotes","Object","normalizedEmbeddedEmotes","result","offset","arrayOffset","spaceIndex","indexOf","startIndex","endIndex","substring","entity","embeddedEmote","textBefore","push","Array","isArray","entityObject","difference","textAfter","getMessageBadges","globalBadges","channelBadges","version","badge","title","description","imageUrl1x","image_url_1x","imageUrl2x","image_url_2x","imageUrl4x","image_url_4x","label","createBadge","Boolean","noopIRCCommands","booleanMessageTags","numberMessageTags","depricatedMessageTags","noticeMessageTags","data","split","reduce","acc","normalizeTagValue","raw","emote","indexes","index","start","end","Number","parseInt","parseMessageEmotes","followersOnly","slow","includes","replace","parseMessageTags","entries","key","camelCase","getIsAction","endsWith","normalizeActionMessage","slice","parseState","params","parseUserState","parseRoomState","parseCommand","parseNotice","parseUserNotice","parseClearMessage","parseClearChat","parseHostTarget","Client","options","socket","_queue","_messagesQueue","this","identity","auth","sendRaw","emit","hadError","willReconnect","rawData","trim","forEach","line","_handleMessage","shift","isAction","messageEventData","uuid","tmiSentTs","Date","getTime","parsedData","tekkoParse","command","prefix","middle","trailing","parseMessageData","eventData","_emmitOwnMessage","msgId","ircMessage","parseChatMessage","handleError","err","send","WebSocket","addEventListener","_onConnect","_onClose","_onError","_onData","tekkoFormat","mergeDeepWith","concat","commandParams","roomName","EventEmitter","normalizeRecentMessages","messages","m","parse","normalizedMessage","parsedTags","messageArray","isHistory","messageTypes","addMessageEntity","fetchRecentMessagesRequest","fetchRecentMessagesSuccess","fetchRecentMessagesFailure","clearChat","addRecentMessagesAction","sliceMessages","diff","getIsEven","prev","addedItemsCount","isSliced","oldItems","newItems","slicedMessages","isEven","history","targetUserId","isDeleted","chat","enhancer","applyMiddleware","thunk","store","createStore","rootReducer","useLocationHash","useState","window","location","setHash","useEffect","handleHashChange","removeEventListener","useDocumentTitle","document","messagesSelector","isHistoryLoadedSelector","channelIdSelector","isEvenSelector","replaceEmojis","ChatInputRoot","styled","form","Controls","div","SendButton","button","Textarea","textarea","StyledLink","Link","ChatInput","isDisabled","onSubmit","textareaRef","useRef","setText","handleKeyDown","useCallback","e","preventDefault","textareaNode","current","placeholder","ref","maxLength","disabled","onChange","to","defaultProps","arrayOf","oneOfType","badgeInfo","subscriber","color","flags","mod","bool","roomId","tmiSentId","number","systemMsg","msgParamCumulativeMonths","msgParamDisplayName","msgParamLogin","msgParamMonths","msgParamPromoGiftTotal","msgParamPromoName","msgParamRecipientDisplayName","msgParamRecipientId","msgParamRecipientUserName","msgParamSenderLogin","msgParamSenderName","msgParamShouldShareStreak","msgParamStreakMonths","msgParamSubPlan","msgParamSubPlanName","msgParamViewerCount","msgParamRitualName","msgParamThreshold","MessageRoot","p","isMention","Name","span","Emote","img","Emoji","Mention","isActive","css","a","Badge","Message","isVisible","setIsVisible","RegExp","aria-label","renderBadges","onClick","item","rel","renderMessageArray","NoticeRoot","Notice","UserNoticeRoot","UserNotice","ChatMessage","ChatRoot","ChatWrapper","MessagesWrapper","Messages","Scrollbar","attrs","disableTracksWidthCompensation","MoreMessagesButton","visible","Chat","onSendMessage","useSelector","isMoreMessagesButtonVisible","setIsMoreMessagesButtonVisible","messagesRef","handleScrollToBottom","scrollToBottom","onUpdate","clientHeight","contentScrollHeight","scrollTop","client","Home","dispatch","useDispatch","currentChannelId","isEmotesLoaded","isBadgesLoaded","isHistoryLoaded","rawUser","getItem","JSON","setItem","handleMessage","rest","getState","addMessage","connect","on","apiFetchGlobalBadges","apiFetchRecentMessages","emoticon_sets","fetchTwitchEmotes","apiFetchBttvChannelEmotes","apiFetchFfzChannelEmotes","apiFetchChannelBadges","say","authParams","client_id","redirect_uri","response_type","scope","claims","stringify","id_token","email_verified","picture","preferred_username","getAuthUrl","search","Auth","AuthCallback","useHistory","URLSearchParams","get","idToken","apiFetchUser","display_name","jwt","decode","sub","lastChannel","createGlobalStyle","colors","vars","common","App","exact","component","ReactGA","initialize","page","pathname","pageview","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6dcb809a.chunk.js","sourcesContent":["const isAuthRedirect = (hash) => hash.startsWith('#access_token=');\n\nexport default isAuthRedirect;\n","export const TWITCH_API_HELIX = 'https://api.twitch.tv/helix';\nexport const TWITCH_API_KRAKEN = 'https://api.twitch.tv/kraken';\n\n// TODO: throw an error if fetch completed with not 2** code\n\nconst getHelixHeaders = () => ({\n  Authorization: `Bearer ${localStorage.accessToken}`,\n});\n\nconst getKrakenHeaders = () => ({\n  Accept: 'application/vnd.twitchtv.v5+json',\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `OAuth ${localStorage.accessToken}`,\n});\n\nconst apiRequestHelix = (url) =>\n  fetch(`${TWITCH_API_HELIX}${url}`, {\n    headers: getHelixHeaders(),\n  }).then((response) => response.json());\n\nconst apiRequestKraken = (url) =>\n  fetch(`${TWITCH_API_KRAKEN}${url}`, {\n    headers: getKrakenHeaders(),\n  }).then((response) => response.json());\n\nconst apiRequest = (url) => fetch(url).then((response) => response.json());\n\nexport const fetchUser = (id) => apiRequestHelix(`/users?id=${id}`);\n\nexport const fetchTwitchEmotesBySets = (userId) =>\n  apiRequestKraken(`/users/${userId}/emotes`);\n\nexport const fetchBttvGlobalEmotes = () =>\n  apiRequest('https://api.betterttv.net/3/cached/emotes/global');\nexport const fetchBttvChannelEmotes = (channelId) =>\n  apiRequest(`https://api.betterttv.net/3/cached/users/twitch/${channelId}`);\n\nexport const fetchFfzGlobalEmotes = () =>\n  apiRequest('https://api.frankerfacez.com/v1/set/global');\nexport const fetchFfzChannelEmotes = (channelId) =>\n  apiRequest(`https://api.frankerfacez.com/v1/room/id/${channelId}`);\n\n// apiRequest(`https://api.betterttv.net/3/cached/frankerfacez/users/twitch/${channelId}`);\n\nexport const fetchRecentMessages = (channel) =>\n  apiRequest(\n    `https://recent-messages.robotty.de/api/v2/recent-messages/${channel}?clearchatToNotice=true`,\n  );\n\nexport const fetchGlobalBadges = (language = 'en') =>\n  apiRequest(\n    `https://badges.twitch.tv/v1/badges/global/display?language=${language}`,\n  );\nexport const fetchChannelBadges = (channelId, language = 'en') =>\n  apiRequest(\n    `https://badges.twitch.tv/v1/badges/channels/${channelId}/display?language=${language}`,\n  );\n","import { createAction, handleActions } from 'redux-actions';\n\nimport { fetchUser as apiFetchUser } from '../../utils/api';\n\nconst defaultState = {\n  isAuth: false,\n  isLoading: false,\n  user: {\n    id: null,\n    login: null,\n    displayName: null,\n  },\n};\n\nexport const setIsAuth = createAction('SET_IS_AUTH');\nconst fetchUserRequest = createAction('FETCH_USER_REQUEST');\nconst fetchUserSuccess = createAction('FETCH_USER_SUCCESS');\nconst fetchUserFailure = createAction('FETCH_USER_FAILURE');\n\nexport const fetchUser = (id) => async (dispatch) => {\n  dispatch(fetchUserRequest());\n\n  try {\n    const response = await apiFetchUser(id);\n    const { login, display_name: displayName } = response.data[0];\n    const user = { id, login, displayName };\n    localStorage.setItem('user', JSON.stringify(user));\n\n    dispatch(fetchUserSuccess(user));\n  } catch (error) {\n    dispatch(fetchUserFailure(error));\n  }\n};\n\nconst handleSetIsAuth = (state, { payload: { isAuth, user } }) => ({\n  ...state,\n  isAuth: isAuth === undefined ? state.isAuth : isAuth,\n  user: { ...state.user, ...user },\n});\n\nconst handleFetchUserRequest = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst handleFetchUserSuccess = (state, { payload }) => ({\n  ...state,\n  isAuth: true,\n  isLoading: false,\n  user: payload,\n});\nconst handleFetchUserFailure = (state, { payload }) => ({\n  ...state,\n  isAuth: false,\n  isLoading: false,\n  error: payload,\n});\n\nconst reducer = handleActions(\n  {\n    [setIsAuth]: handleSetIsAuth,\n    [fetchUserRequest]: handleFetchUserRequest,\n    [fetchUserSuccess]: handleFetchUserSuccess,\n    [fetchUserFailure]: handleFetchUserFailure,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","const storeFlags = {\n  default: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n  },\n  request: {\n    isLoading: true,\n    isLoaded: false,\n    isError: false,\n    error: null,\n  },\n  success: {\n    isLoading: false,\n    isLoaded: true,\n    isError: false,\n    error: null,\n  },\n  failure: {\n    isLoading: false,\n    isLoaded: false,\n    isError: true,\n  },\n};\n\nexport default storeFlags;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\nimport { pathOr, mergeDeepRight } from 'ramda';\n\nimport storeFlags from '../../utils/storeFlags';\n\nimport {\n  fetchGlobalBadges as apiFetchGlobalBadges,\n  fetchChannelBadges as apiFetchChannelBadges,\n} from '../../utils/api';\n\nconst defaultState = {\n  global: {\n    ...storeFlags.default,\n    items: {},\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: {},\n    // },\n  },\n};\n\nconst {\n  fetchGlobalBadgesRequest,\n  fetchGlobalBadgesSuccess,\n  fetchGlobalBadgesFailure,\n  fetchChannelBadgesRequest,\n  fetchChannelBadgesSuccess,\n  fetchChannelBadgesFailure,\n} = createActions(\n  'FETCH_GLOBAL_BADGES_REQUEST',\n  'FETCH_GLOBAL_BADGES_SUCCESS',\n  'FETCH_GLOBAL_BADGES_FAILURE',\n  'FETCH_CHANNEL_BADGES_REQUEST',\n  'FETCH_CHANNEL_BADGES_SUCCESS',\n  'FETCH_CHANNEL_BADGES_FAILURE',\n);\n\nconst parseBadges = pathOr({}, ['badge_sets']);\n\nexport const fetchGlobalBadges = () => async (dispatch) => {\n  dispatch(fetchGlobalBadgesRequest());\n\n  try {\n    const response = await apiFetchGlobalBadges();\n    const data = { items: parseBadges(response) };\n\n    dispatch(fetchGlobalBadgesSuccess(data));\n  } catch (error) {\n    dispatch(fetchGlobalBadgesFailure({ error }));\n  }\n};\n\nexport const fetchChannelBadges = (channelId, channel) => async (dispatch) => {\n  dispatch(fetchChannelBadgesRequest({ channel }));\n\n  try {\n    const response = await apiFetchChannelBadges(channelId);\n    const data = {\n      channel,\n      items: parseBadges(response),\n    };\n\n    dispatch(fetchChannelBadgesSuccess(data));\n  } catch (error) {\n    dispatch(fetchChannelBadgesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchFfzGlobalEmotes = (state, { type, payload }) => {\n  if (type === fetchGlobalBadgesRequest.toString()) {\n    return mergeDeepRight(state, {\n      global: { ...storeFlags.request },\n    });\n  }\n\n  if (type === fetchGlobalBadgesSuccess.toString()) {\n    return mergeDeepRight(state, {\n      global: { ...storeFlags.success, items: payload.items },\n    });\n  }\n\n  if (type === fetchGlobalBadgesFailure.toString()) {\n    return mergeDeepRight(state, {\n      global: { ...storeFlags.failure, error: payload.error },\n    });\n  }\n\n  return state;\n};\n\nconst handleFetchFfzChannelEmotes = (state, { type, payload }) => {\n  const { channel } = payload;\n\n  if (type === fetchChannelBadgesRequest.toString()) {\n    return mergeDeepRight(state, {\n      channels: {\n        [channel]: { ...storeFlags.request },\n      },\n    });\n  }\n\n  if (type === fetchChannelBadgesSuccess.toString()) {\n    return mergeDeepRight(state, {\n      channels: {\n        [channel]: { ...storeFlags.success, items: payload.items },\n      },\n    });\n  }\n\n  if (type === fetchChannelBadgesFailure.toString()) {\n    return mergeDeepRight(state, {\n      channels: {\n        [channel]: { ...storeFlags.failure, error: payload.error },\n      },\n    });\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [combineActions(\n      fetchGlobalBadgesRequest,\n      fetchGlobalBadgesSuccess,\n      fetchGlobalBadgesFailure,\n    )]: handleFetchFfzGlobalEmotes,\n\n    [combineActions(\n      fetchChannelBadgesRequest,\n      fetchChannelBadgesSuccess,\n      fetchChannelBadgesFailure,\n    )]: handleFetchFfzChannelEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions } from 'redux-actions';\nimport { pathOr, omit } from 'ramda';\n\nconst defaultState = {\n  currentChannel: null,\n  isConnected: false,\n  globalState: {},\n  channels: {\n    // [channel]: {\n    //   userState: {},\n    //   roomState: {},\n    // }\n  },\n};\n\nexport const currentChannelSelector = pathOr('', ['chat', 'currentChannel']);\n\nexport const {\n  setCurrentChannel,\n  setIsConnected,\n  updateGlobalUserState,\n  updateUserState,\n  updateRoomState,\n  removeChannel,\n} = createActions(\n  'SET_CURRENT_CHANNEL',\n  'SET_IS_CONNECTED',\n  'UPDATE_GLOBAL_USER_STATE',\n  'UPDATE_USER_STATE',\n  'UPDATE_ROOM_STATE',\n  'REMOVE_CHANNEL',\n);\n\nconst handleSetCurrentChannel = (state, { payload }) => ({\n  ...state,\n  currentChannel: payload,\n});\nconst handleSetIsConnected = (state, { payload }) => ({\n  ...state,\n  isConnected: payload,\n});\nconst handleUpdateGlobalUserState = (state, { payload: { tags } }) => ({\n  ...state,\n  globalState: { ...state.globalState, ...tags },\n});\nconst handleUpdateUserState = (state, { payload: { channel, tags } }) => ({\n  ...state,\n  channels: {\n    ...state.channels,\n    [channel]: { ...state.channels[channel], userState: tags },\n  },\n});\nconst handleUpdateRoomState = (state, { payload: { channel, tags } }) => ({\n  ...state,\n  channels: {\n    ...state.channels,\n    [channel]: { ...state.channels[channel], roomState: tags },\n  },\n});\nconst handleRemoveChannel = (state, { payload: channel }) => ({\n  ...state,\n  channels: omit([channel], state.channels),\n});\n\nconst reducer = handleActions(\n  {\n    [setCurrentChannel]: handleSetCurrentChannel,\n    [setIsConnected]: handleSetIsConnected,\n    [updateGlobalUserState]: handleUpdateGlobalUserState,\n    [updateUserState]: handleUpdateUserState,\n    [updateRoomState]: handleUpdateRoomState,\n    [removeChannel]: handleRemoveChannel,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\n\nimport { fetchTwitchEmotesBySets } from '../../utils/api';\n\nconst defaultState = {\n  isLoading: false,\n  isLoaded: false,\n  isError: false,\n  error: null,\n  items: {\n    // [setId]: [\n    //   {\n    //     code: \"PartyPoro\",\n    //     id: 300949540,\n    //   },\n    // ],\n  },\n};\n\nconst {\n  fetchTwitchEmotesRequest,\n  fetchTwitchEmotesSuccess,\n  fetchTwitchEmotesFailure,\n} = createActions(\n  'FETCH_TWITCH_EMOTES_REQUEST',\n  'FETCH_TWITCH_EMOTES_SUCCESS',\n  'FETCH_TWITCH_EMOTES_FAILURE',\n);\n\nexport const fetchTwitchEmotes = (userId) => async (dispatch) => {\n  dispatch(fetchTwitchEmotesRequest);\n\n  try {\n    const response = await fetchTwitchEmotesBySets(userId);\n    const data = { items: response.emoticon_sets };\n\n    dispatch(fetchTwitchEmotesSuccess(data));\n  } catch (e) {\n    dispatch(fetchTwitchEmotesFailure(e));\n  }\n};\n\nconst handleFetchTwitchEmotes = (state, { type, payload }) => {\n  if (type === fetchTwitchEmotesRequest.toString()) {\n    return {\n      ...state,\n      isLoading: true,\n      isLoaded: false,\n      isError: false,\n      error: null,\n    };\n  }\n\n  if (type === fetchTwitchEmotesSuccess.toString()) {\n    return {\n      ...state,\n      isLoading: false,\n      isLoaded: true,\n      isError: false,\n      ...payload,\n    };\n  }\n\n  if (type === fetchTwitchEmotesFailure.toString()) {\n    return {\n      ...state,\n      isLoading: false,\n      isLoaded: false,\n      isError: true,\n      error: payload,\n    };\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [combineActions(\n      fetchTwitchEmotesRequest,\n      fetchTwitchEmotesSuccess,\n      fetchTwitchEmotesFailure,\n    )]: handleFetchTwitchEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\n\nimport {\n  fetchBttvGlobalEmotes as apiFetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes as apiFetchBttvChannelEmotes,\n} from '../../utils/api';\n\nconst defaultState = {\n  global: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n    items: [],\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: [],\n    // },\n  },\n};\n\nconst {\n  fetchBttvGlobalEmotesRequest,\n  fetchBttvGlobalEmotesSuccess,\n  fetchBttvGlobalEmotesFailure,\n  fetchBttvChannelEmotesRequest,\n  fetchBttvChannelEmotesSuccess,\n  fetchBttvChannelEmotesFailure,\n} = createActions(\n  'FETCH_BTTV_GLOBAL_EMOTES_REQUEST',\n  'FETCH_BTTV_GLOBAL_EMOTES_SUCCESS',\n  'FETCH_BTTV_GLOBAL_EMOTES_FAILURE',\n  'FETCH_BTTV_CHANNEL_EMOTES_REQUEST',\n  'FETCH_BTTV_CHANNEL_EMOTES_SUCCESS',\n  'FETCH_BTTV_CHANNEL_EMOTES_FAILURE',\n);\n\nconst parseBttvChannelEmotes = ({ channelEmotes, sharedEmotes }) => [\n  ...channelEmotes,\n  ...sharedEmotes,\n];\n\nexport const fetchBttvGlobalEmotes = () => async (dispatch) => {\n  dispatch(fetchBttvGlobalEmotesRequest());\n\n  try {\n    const items = await apiFetchBttvGlobalEmotes();\n    const data = { items };\n\n    dispatch(fetchBttvGlobalEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchBttvGlobalEmotesFailure({ error }));\n  }\n};\n\nexport const fetchBttvChannelEmotes = (channelId, channel) => async (\n  dispatch,\n) => {\n  dispatch(fetchBttvChannelEmotesRequest({ channel }));\n\n  try {\n    const response = await apiFetchBttvChannelEmotes(channelId);\n    const data = {\n      channel,\n      items: parseBttvChannelEmotes(response),\n    };\n\n    dispatch(fetchBttvChannelEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchBttvChannelEmotesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchBttvGlobalEmotes = (state, { type, payload }) => {\n  if (type === fetchBttvGlobalEmotesRequest.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: true,\n        isLoaded: false,\n        isError: false,\n        error: null,\n      },\n    };\n  }\n\n  if (type === fetchBttvGlobalEmotesSuccess.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: true,\n        isError: false,\n        error: null,\n        ...payload,\n      },\n    };\n  }\n\n  if (type === fetchBttvGlobalEmotesFailure.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: false,\n        isError: true,\n        ...payload,\n      },\n    };\n  }\n\n  return state;\n};\n\nconst handleFetchBttvChannelEmotes = (state, { type, payload }) => {\n  const { channel } = payload;\n\n  if (type === fetchBttvChannelEmotesRequest.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: true,\n          isLoaded: false,\n          isError: false,\n          error: null,\n        },\n      },\n    };\n  }\n\n  if (type === fetchBttvChannelEmotesSuccess.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: true,\n          isError: false,\n          error: null,\n          items: payload.items,\n        },\n      },\n    };\n  }\n\n  if (type === fetchBttvChannelEmotesFailure.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: false,\n          isError: true,\n          error: payload.error,\n        },\n      },\n    };\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [combineActions(\n      fetchBttvGlobalEmotesRequest,\n      fetchBttvGlobalEmotesSuccess,\n      fetchBttvGlobalEmotesFailure,\n    )]: handleFetchBttvGlobalEmotes,\n\n    [combineActions(\n      fetchBttvChannelEmotesRequest,\n      fetchBttvChannelEmotesSuccess,\n      fetchBttvChannelEmotesFailure,\n    )]: handleFetchBttvChannelEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\nimport { pipe, pathOr, map, values, flatten } from 'ramda';\n\nimport {\n  fetchFfzGlobalEmotes as apiFetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes as apiFetchFfzChannelEmotes,\n} from '../../utils/api';\n\nconst defaultState = {\n  global: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n    items: [],\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: [],\n    // },\n  },\n};\n\nconst {\n  fetchFfzGlobalEmotesRequest,\n  fetchFfzGlobalEmotesSuccess,\n  fetchFfzGlobalEmotesFailure,\n  fetchFfzChannelEmotesRequest,\n  fetchFfzChannelEmotesSuccess,\n  fetchFfzChannelEmotesFailure,\n} = createActions(\n  'FETCH_FFZ_GLOBAL_EMOTES_REQUEST',\n  'FETCH_FFZ_GLOBAL_EMOTES_SUCCESS',\n  'FETCH_FFZ_GLOBAL_EMOTES_FAILURE',\n  'FETCH_FFZ_CHANNEL_EMOTES_REQUEST',\n  'FETCH_FFZ_CHANNEL_EMOTES_SUCCESS',\n  'FETCH_FFZ_CHANNEL_EMOTES_FAILURE',\n);\n\nconst parseFfzGlobalEmotes = pipe(\n  pathOr({}, ['sets']),\n  values,\n  map(pathOr([], ['emoticons'])),\n  flatten,\n);\nconst parseFfzChannelEmotes = parseFfzGlobalEmotes;\n\nexport const fetchFfzGlobalEmotes = () => async (dispatch) => {\n  dispatch(fetchFfzGlobalEmotesRequest());\n\n  try {\n    const response = await apiFetchFfzGlobalEmotes();\n    const data = { items: parseFfzGlobalEmotes(response) };\n\n    dispatch(fetchFfzGlobalEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchFfzGlobalEmotesFailure({ error }));\n  }\n};\n\nexport const fetchFfzChannelEmotes = (channelId, channel) => async (\n  dispatch,\n) => {\n  dispatch(fetchFfzChannelEmotesRequest({ channel }));\n\n  try {\n    const response = await apiFetchFfzChannelEmotes(channelId);\n    const data = {\n      channel,\n      items: parseFfzChannelEmotes(response),\n    };\n\n    dispatch(fetchFfzChannelEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchFfzChannelEmotesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchFfzGlobalEmotes = (state, { type, payload }) => {\n  if (type === fetchFfzGlobalEmotesRequest.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: true,\n        isLoaded: false,\n        isError: false,\n        error: null,\n      },\n    };\n  }\n\n  if (type === fetchFfzGlobalEmotesSuccess.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: true,\n        isError: false,\n        error: null,\n        ...payload,\n      },\n    };\n  }\n\n  if (type === fetchFfzGlobalEmotesFailure.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: false,\n        isError: true,\n        ...payload,\n      },\n    };\n  }\n\n  return state;\n};\n\nconst handleFetchFfzChannelEmotes = (state, { type, payload }) => {\n  const { channel } = payload;\n\n  if (type === fetchFfzChannelEmotesRequest.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: true,\n          isLoaded: false,\n          isError: false,\n          error: null,\n        },\n      },\n    };\n  }\n\n  if (type === fetchFfzChannelEmotesSuccess.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: true,\n          isError: false,\n          error: null,\n          items: payload.items,\n        },\n      },\n    };\n  }\n\n  if (type === fetchFfzChannelEmotesFailure.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: false,\n          isError: true,\n          error: payload.error,\n        },\n      },\n    };\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [combineActions(\n      fetchFfzGlobalEmotesRequest,\n      fetchFfzGlobalEmotesSuccess,\n      fetchFfzGlobalEmotesFailure,\n    )]: handleFetchFfzGlobalEmotes,\n\n    [combineActions(\n      fetchFfzChannelEmotesRequest,\n      fetchFfzChannelEmotesSuccess,\n      fetchFfzChannelEmotesFailure,\n    )]: handleFetchFfzChannelEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport twitch from './twitch';\nimport bttv from './bttv';\nimport ffz from './ffz';\n\nexport default combineReducers({\n  twitch,\n  bttv,\n  ffz,\n});\n","import { createSelector } from 'reselect';\nimport { pipe, path, pathOr, values, flatten } from 'ramda';\n\nimport { currentChannelSelector } from '../chat';\n\nexport const twitchEmotesSelector = createSelector(\n  pathOr([], ['emotes', 'twitch', 'items']),\n  pipe(\n    values,\n    flatten,\n  ),\n);\n\nconst bttvChannelEmotesSelector = createSelector(\n  pathOr({}, ['emotes', 'bttv', 'channels']),\n  currentChannelSelector,\n  (channels, currentChannel) => pathOr([], [currentChannel, 'items'], channels),\n);\nexport const bttvEmotesSelector = createSelector(\n  pathOr([], ['emotes', 'bttv', 'global', 'items']),\n  bttvChannelEmotesSelector,\n  (globalBttvEmotes, channelBttvEmotes) => [\n    ...globalBttvEmotes,\n    ...channelBttvEmotes,\n  ],\n);\n\nconst ffzChannelEmotesSelector = createSelector(\n  pathOr({}, ['emotes', 'ffz', 'channels']),\n  currentChannelSelector,\n  (channels, currentChannel) => pathOr([], [currentChannel, 'items'], channels),\n);\nexport const ffzEmotesSelector = createSelector(\n  pathOr([], ['emotes', 'ffz', 'global', 'items']),\n  ffzChannelEmotesSelector,\n  (globalFfzEmotes, channelFfzEmotes) => [\n    ...globalFfzEmotes,\n    ...channelFfzEmotes,\n  ],\n);\n\nexport const emotesSelector = (state) => ({\n  twitch: twitchEmotesSelector(state),\n  bttv: bttvEmotesSelector(state),\n  ffz: ffzEmotesSelector(state),\n});\n\nconst isBttvGlobalEmotesLoadedSelector = (state) =>\n  state.emotes.bttv.global.isLoaded || state.emotes.bttv.global.isError;\nconst isBttvChannelEmotesLoadedSelector = (state) => {\n  const channel = currentChannelSelector(state);\n  return (\n    path(['emotes', 'bttv', 'channels', channel, 'isLoaded'], state) ||\n    path(['emotes', 'bttv', 'channels', channel, 'isError'], state)\n  );\n};\n\nconst isFfzGlobalEmotesLoadedSelector = (state) =>\n  state.emotes.ffz.global.isLoaded || state.emotes.ffz.global.isError;\nconst isFfzChannelEmotesLoadedSelector = (state) => {\n  const channel = currentChannelSelector(state);\n  return (\n    path(['emotes', 'ffz', 'channels', channel, 'isLoaded'], state) ||\n    path(['emotes', 'ffz', 'channels', channel, 'isError'], state)\n  );\n};\n\nconst isTwitchEmotesLoadedSelector = (state) =>\n  state.emotes.twitch.isLoaded || state.emotes.twitch.isError;\n\nexport const isEmotesLoadedSelector = (state) =>\n  isTwitchEmotesLoadedSelector(state) &&\n  isBttvGlobalEmotesLoadedSelector(state) &&\n  isBttvChannelEmotesLoadedSelector(state) &&\n  isFfzGlobalEmotesLoadedSelector(state) &&\n  isFfzChannelEmotesLoadedSelector(state);\n","import { pathOr } from 'ramda';\n\nimport { currentChannelSelector } from '../chat';\n\nexport const globalBadgesSelector = (state) => state.badges.global.items;\nexport const channelBadgesSelector = (state) =>\n  pathOr({}, ['badges', 'channels', currentChannelSelector(state), 'items']);\n\nconst isGlobalBadgesLoadedSelector = (state) =>\n  state.badges.global.isLoaded || state.badges.global.isError;\n\nconst isChannelBadgesLoadedSelector = (state) => {\n  const channel = currentChannelSelector(state);\n  return (\n    pathOr(false, ['badges', 'channels', channel, 'isLoaded'], state) ||\n    pathOr(false, ['badges', 'channels', channel, 'isError'], state)\n  );\n};\n\nexport const isBadgesLoadedSelector = (state) =>\n  isGlobalBadgesLoadedSelector(state) && isChannelBadgesLoadedSelector(state);\n","// https://regex101.com/r/cpaNXh/1\nconst isStartsWithProtocolRegex = /^(?:(?:[a-z]+:)?\\/\\/)/;\n\nconst normalizeHref = (href) =>\n  isStartsWithProtocolRegex.test(href) ? href : `//${href}`;\n\nexport default normalizeHref;\n","import pt from 'prop-types';\nimport { parse as twemojiParser } from 'twemoji-parser';\nimport emojilib from 'emojilib/emojis';\nimport urlRegex from 'url-regex';\nimport {\n  pipe,\n  toPairs,\n  map,\n  flatten,\n  find,\n  propEq,\n  join,\n  filter,\n  keys,\n  head,\n} from 'ramda';\n\nimport normalizeHref from './normalizeHref';\n\nconst TWITCH_EMOTES_CDN = '//static-cdn.jtvnw.net/emoticons/v1';\nconst BTTV_EMOTES_CDN = '//cdn.betterttv.net/emote';\n\n// const mentionRegex = /^@([\\p{Letter}_]+)/u;\nconst mentionRegex = /^@([\\w_]+)/;\nconst linkRegex = urlRegex({ strict: false });\n\nconst normalizeEmotesFromTags = pipe(\n  toPairs,\n  map(([id, value]) => map((v) => ({ id, ...v }), value)),\n  flatten,\n);\n\nconst getFfzSrcSet = pipe(\n  toPairs,\n  map(([dpi, url]) => `${url} ${dpi}x`),\n  join(', '),\n);\n\nexport const createTwitchEmote = (alt, id) => ({\n  type: 'twitch-emote',\n  alt,\n  src: `${TWITCH_EMOTES_CDN}/${id}/1.0`,\n  srcSet: `${TWITCH_EMOTES_CDN}/${id}/1.0 1x, ${TWITCH_EMOTES_CDN}/${id}/2.0 2x, ${TWITCH_EMOTES_CDN}/${id}/3.0 4x`,\n});\nexport const createBttvEmote = (alt, { id }) => ({\n  type: 'bttv-emote',\n  alt,\n  src: `${BTTV_EMOTES_CDN}/${id}/1x`,\n  srcSet: `${BTTV_EMOTES_CDN}/${id}/2x 2x, ${BTTV_EMOTES_CDN}/${id}/3x 4x`,\n});\nexport const createFfzEmote = (alt, { urls }) => ({\n  type: 'ffz-emote',\n  alt,\n  src: urls[1],\n  srcSet: getFfzSrcSet(urls),\n});\nexport const createEmoji = (alt, src) => ({\n  type: 'emoji',\n  alt,\n  src,\n  srcSet: null,\n});\nexport const createMention = (text, target) => ({\n  type: 'mention',\n  text,\n  target,\n});\nexport const createLink = (href) => ({\n  type: 'link',\n  text: href,\n  href: normalizeHref(href),\n});\n\nexport const twitchEmoteType = pt.shape({\n  type: pt.oneOf(['twitch-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const bttvEmoteType = pt.shape({\n  type: pt.oneOf(['bttv-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const ffzEmoteType = pt.shape({\n  type: pt.oneOf(['ffz-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const emojiType = pt.shape({\n  type: pt.oneOf(['emoji']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const mentionType = pt.shape({\n  type: pt.oneOf(['mention']).isRequired,\n  text: pt.string.isRequired,\n  target: pt.string.isRequired,\n});\nexport const linkType = pt.shape({\n  type: pt.oneOf(['link']).isRequired,\n  text: pt.string.isRequired,\n  href: pt.string.isRequired,\n});\n\nconst findTwitchEmote = (name, twitch) => find(propEq('code', name), twitch);\nconst findBttvEmote = (name, bttv) => find(propEq('code', name), bttv);\nconst findFfzEmote = (name, ffz) => find(propEq('name', name), ffz);\nconst findEmoji = (char) =>\n  pipe(\n    filter(propEq('char', char)),\n    keys,\n    head,\n  )(emojilib);\n\nconst findEntity = (word, { twitch, bttv, ffz }, { parseTwitch = false }) => {\n  if (parseTwitch) {\n    const twitchEmote = findTwitchEmote(word, twitch);\n    if (twitchEmote) return createTwitchEmote(word, twitchEmote.id);\n  }\n\n  const bttvEmote = findBttvEmote(word, bttv);\n  if (bttvEmote) return createBttvEmote(word, bttvEmote);\n\n  const ffzEmote = findFfzEmote(word, ffz);\n  if (ffzEmote) return createFfzEmote(word, ffzEmote);\n\n  // Don't parse two or more emotes without spaces between\n  // Don't parse emote if it's not in the emojilib package\n  const emojiMatch = twemojiParser(word, { assetType: 'png' });\n  if (\n    emojiMatch &&\n    emojiMatch.length === 1 &&\n    emojiMatch[0].text.length === word.length\n  ) {\n    const emoji = findEmoji(word);\n\n    if (emoji) {\n      const [{ url }] = emojiMatch;\n      return createEmoji(emoji, url);\n    }\n  }\n\n  // TODO: Use unicode regex if it supports\n  const mentionMatch = word.match(mentionRegex);\n  if (mentionMatch) {\n    const [text, target] = mentionMatch;\n    return [\n      createMention(text, target.toLowerCase()),\n      word.length - text.length,\n    ];\n  }\n\n  const linkMatch = word.match(linkRegex);\n  if (linkMatch && linkMatch[0].length === word.length) {\n    return createLink(word);\n  }\n\n  return null;\n};\n\nconst formatMessage = (message, embeddedEmotes, emotes) => {\n  // If the message was sent by the current user, there is no embedded emotes\n  // So we need to parse twitch emotes manually\n\n  const isOwnMessage = embeddedEmotes === undefined || embeddedEmotes === null;\n  const hasEmbeddedEmotes =\n    embeddedEmotes && Object.keys(embeddedEmotes).length > 0;\n  const normalizedEmbeddedEmotes = normalizeEmotesFromTags(embeddedEmotes);\n\n  const result = [];\n  let offset = 0;\n  // Before that offset all content was added to the result array\n  let arrayOffset = 0;\n\n  // Check every word. From offset to the next space index\n  do {\n    const spaceIndex = message.indexOf(' ', offset + 1);\n\n    const isStart = offset === 0;\n    const isEnd = spaceIndex === -1;\n\n    const startIndex = isStart ? offset : offset + 1;\n    const endIndex = isEnd ? message.length : spaceIndex;\n\n    const word = message.substring(startIndex, endIndex);\n\n    if (word) {\n      let entity = null;\n\n      // Check embedded twitch emotes\n      if (hasEmbeddedEmotes) {\n        const embeddedEmote = find(\n          propEq('start', startIndex),\n          normalizedEmbeddedEmotes,\n        );\n\n        if (embeddedEmote) {\n          entity = createTwitchEmote(word, embeddedEmote.id);\n        }\n      }\n\n      // Check other entities\n      if (!entity) {\n        entity = findEntity(word, emotes, { parseTwitch: isOwnMessage });\n      }\n\n      if (entity) {\n        // Push all text before this entity\n        if (arrayOffset !== startIndex) {\n          const textBefore = message.substring(arrayOffset, startIndex);\n          result.push(textBefore);\n        }\n\n        // If entity it's an array it means entity may be not full word\n        // The second element is the difference between word length and entity length\n        if (Array.isArray(entity)) {\n          const [entityObject, difference] = entity;\n          result.push(entityObject);\n          arrayOffset = endIndex - difference;\n        } else {\n          result.push(entity);\n          arrayOffset = endIndex;\n        }\n      }\n    }\n\n    // If it's the last word and it wasn't added to the result add it now\n    if (spaceIndex === -1 && arrayOffset !== endIndex) {\n      const textAfter = message.substring(arrayOffset, endIndex);\n      result.push(textAfter);\n    }\n\n    offset = spaceIndex;\n  } while (offset !== -1);\n\n  return result;\n};\n\nexport default formatMessage;\n","import { pathOr, toPairs, map, pipe, filter } from 'ramda';\n\nconst createBadge = ({\n  title,\n  description,\n  image_url_1x: imageUrl1x,\n  image_url_2x: imageUrl2x,\n  image_url_4x: imageUrl4x,\n}) => ({\n  alt: title,\n  label: description,\n  src: imageUrl1x,\n  srcSet: `${imageUrl1x} 1x, ${imageUrl2x} 2x, ${imageUrl4x} 4x`,\n});\n\nconst getMessageBadges = (badges, globalBadges, channelBadges) => {\n  const mapBadges = ([name, version]) => {\n    const badge =\n      pathOr(false, [name, 'versions', version], channelBadges) ||\n      pathOr(false, [name, 'versions', version], globalBadges);\n\n    return badge ? createBadge(badge) : false;\n  };\n\n  return pipe(\n    toPairs,\n    map(mapBadges),\n    filter(Boolean),\n  )(badges);\n};\n\nexport default getMessageBadges;\n","/* eslint-disable no-underscore-dangle */\nimport { pathOr, omit, mergeDeepRight, mergeDeepWith, concat } from 'ramda';\nimport { EventEmitter } from 'events';\nimport { parse as tekkoParse, format as tekkoFormat } from 'tekko';\nimport camelCase from 'camel-case';\nimport uuid from 'uuid/v4';\n\nconst chatUrl = 'wss://irc-ws.chat.twitch.tv:443';\n\nconst noopIRCCommands = [\n  'CAP',\n  '002',\n  '003',\n  '004',\n  '353',\n  '366',\n  '375',\n  '372',\n  '376',\n];\n\nconst booleanMessageTags = [\n  'mod',\n  'emote-only',\n  'r9k',\n  'rituals',\n  'subs-only',\n  'msg-param-should-share-streak',\n];\n\nconst numberMessageTags = [\n  'ban-duration',\n  'bits',\n  'msg-param-cumulative-months',\n  'msg-param-months',\n  'msg-param-promo-gift-total',\n  'msg-param-streak-months',\n  'msg-param-viewerCount',\n  'msg-param-threshold',\n];\n\nconst depricatedMessageTags = ['subscriber', 'turbo', 'user-type'];\n\nconst noticeMessageTags = [\n  'msg_banned',\n  'msg_bad_characters',\n  'msg_channel_blocked',\n  'msg_channel_suspended',\n  'msg_duplicate',\n  'msg_emoteonly',\n  'msg_facebook',\n  'msg_followersonly',\n  'msg_followersonly_followed',\n  'msg_followersonly_zero',\n  'msg_r9k',\n  'msg_ratelimit',\n  'msg_rejected',\n  'msg_rejected_mandatory',\n  'msg_room_not_found',\n  'msg_slowmode',\n  'msg_subsonly',\n  'msg_suspended',\n  'msg_timedout',\n  'msg_verified_email',\n];\n\nconst parseMessageEmotes = (raw = '') => {\n  if (!raw) return {};\n\n  return raw.split('/').reduce((acc, emote) => {\n    const [id, indexes] = emote.split(':');\n\n    return {\n      ...acc,\n      [id]: indexes.split(',').map((index) => {\n        const [start, end] = index.split('-');\n\n        return {\n          start: Number.parseInt(start, 10),\n          end: Number.parseInt(end, 10),\n        };\n      }),\n    };\n  }, {});\n};\n\nconst parseBadges = (data = '') => {\n  if (!data) return {};\n\n  return data.split(',').reduce((acc, badge) => {\n    const [name, value] = badge.split('/');\n\n    return {\n      ...acc,\n      [name]: value,\n    };\n  }, {});\n};\n\nconst normalizeTagValue = (name, value) => {\n  if (name === 'emotes') return parseMessageEmotes(value);\n  if (name === 'badges') return parseBadges(value);\n  if (name === 'badge-info') return parseBadges(value);\n\n  if (name === 'followers-only') {\n    let followersOnly = false;\n    if (value === '-1') {\n      followersOnly = false;\n    } else if (value === '0') {\n      followersOnly = true;\n    } else if (typeof value === 'string') {\n      followersOnly = parseInt(value, 10);\n    }\n    return followersOnly;\n  }\n\n  if (name === 'slow') {\n    let slow = false;\n    if (value === '0') {\n      slow = false;\n    } else if (typeof value === 'string') {\n      slow = parseInt(value, 10);\n    }\n    return slow;\n  }\n\n  if (booleanMessageTags.includes(name)) return value === '1';\n  if (numberMessageTags.includes(name)) return parseInt(value, 10);\n\n  if (typeof value === 'string') {\n    return value.replace('\\\\s', ' ');\n  }\n\n  return value;\n};\n\nexport const parseMessageTags = (data = {}) =>\n  Object.entries(data)\n    .filter(([key]) => !depricatedMessageTags.includes(key))\n    .reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [camelCase(key)]: normalizeTagValue(key, value),\n      };\n    }, {});\n\nexport const isBroadcaster = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'broadcaster');\n\nexport const isMod = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'moderator');\n\nexport const isSub = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'subscriber');\n\nexport const isVIP = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'vip');\n\nexport const monthsSubbed = (tags = {}) => {\n  const subbed = tags.subscriber;\n\n  return subbed ? parseInt(subbed, 10) : 0;\n};\n\nexport const getIsAction = (message) =>\n  message.startsWith('\\u0001ACTION ') && message.endsWith('\\u0001');\nexport const normalizeActionMessage = (message) => message.slice(8, -1);\n\nexport const parseMessageData = ({\n  raw,\n  command,\n  tags,\n  middle: params,\n  trailing: message,\n  prefix,\n}) => ({\n  raw,\n  command,\n  tags: parseMessageTags(tags),\n  params,\n  message,\n  prefix,\n});\n\nexport const parseChatMessage = ({\n  message,\n  tags,\n  params,\n  prefix: { user },\n}) => {\n  const isAction = getIsAction(message);\n\n  return {\n    message: isAction ? normalizeActionMessage(message) : message,\n    tags,\n    user,\n    channel: params[0].slice(1),\n    isAction,\n  };\n};\n\nconst parseGlobalUserState = ({ tags }) => ({ tags });\nconst parseState = ({ tags, params: [channel] }) => ({\n  tags,\n  channel: channel.slice(1),\n});\nconst parseUserState = parseState;\nconst parseRoomState = parseState;\n\nconst parseCommand = ({ message, tags, params: [channel] }) => ({\n  message,\n  tags,\n  channel: channel.slice(1),\n});\nconst parseNotice = parseCommand;\nconst parseUserNotice = parseCommand;\nconst parseClearMessage = parseCommand;\nconst parseClearChat = parseCommand;\nconst parseHostTarget = parseCommand;\n\nconst parseWhisper = ({\n  message,\n  tags,\n  params: [channel],\n  prefix: { user },\n}) => ({\n  message,\n  tags,\n  channel,\n  user,\n});\n\nclass Client extends EventEmitter {\n  socket;\n\n  options;\n\n  user;\n\n  channels;\n\n  _queue;\n\n  _messagesQueue;\n\n  constructor(options = {}) {\n    super();\n    this.socket = null;\n    this.channels = {};\n    this.options = options;\n    this.user = null;\n    this._queue = [];\n    this._messagesQueue = {};\n  }\n\n  _onConnect() {\n    const { name, auth } = this.options.identity;\n    this.sendRaw([\n      'CAP REQ :twitch.tv/tags twitch.tv/commands',\n      `PASS oauth:${auth}`,\n      `NICK ${name}`,\n    ]);\n    this.emit('connected');\n  }\n\n  _onClose(hadError) {\n    // TODO\n    const willReconnect = false;\n    this.emit('disconnected', { willReconnect, hadError });\n    if (willReconnect) {\n      this.connect();\n    }\n  }\n\n  _onError(error) {\n    // TODO\n    this.emit('error', error);\n  }\n\n  _onData(rawData) {\n    const data = rawData.trim().split('\\r\\n');\n    data.forEach((line) => this._handleMessage(line));\n  }\n\n  _emmitOwnMessage(tags, channel) {\n    const message = pathOr([], ['_messagesQueue', channel], this).shift();\n\n    if (typeof message !== 'string') return;\n\n    const isAction = message.startsWith('/me ');\n    const messageEventData = {\n      message: isAction ? message.slice(4) : message,\n      tags: {\n        ...tags,\n        id: uuid(),\n        tmiSentTs: new Date().getTime(),\n        userId: this.user.userId,\n      },\n      user: this.options.identity.name,\n      channel,\n      isAction,\n    };\n\n    this.emit('ownmessage', messageEventData);\n  }\n\n  _handleMessage(raw) {\n    const parsedData = tekkoParse(raw);\n    parsedData.raw = raw;\n    const { command } = parsedData;\n\n    if (command === 'PING') {\n      this.sendRaw('PONG :tmi.twitch.tv');\n      this.emit('ping');\n      return;\n    }\n\n    if (parsedData.prefix && parsedData.prefix.user === 'jtv') {\n      // console.log('JTV');\n      // console.log(parsedData);\n      return;\n    }\n\n    if (command === '001') {\n      const name = parsedData.params[0];\n      this.options.identity.name = name;\n      return;\n    }\n\n    // noop\n    if (noopIRCCommands.includes(command)) {\n      return;\n    }\n\n    const data = parseMessageData(parsedData);\n    const channel = pathOr('', ['params', 0], data).slice(1);\n\n    // Sends a message to a channel\n    if (command === 'PRIVMSG') {\n      const eventData = parseChatMessage(data);\n      this.emit('message', eventData);\n      return;\n    }\n\n    // Sends user-state data when a user joins a channel or sends a PRIVMSG to a channel\n    if (command === 'USERSTATE') {\n      const eventData = parseUserState(data);\n\n      this.channels = mergeDeepRight(this.channels, {\n        [channel]: { userState: eventData.tags },\n      });\n\n      const isSendedAfterPrivateMessage =\n        pathOr(0, ['_messagesQueue', channel, 'length'], this) > 0;\n\n      if (isSendedAfterPrivateMessage) {\n        this._emmitOwnMessage(eventData.tags, channel);\n      }\n\n      this.emit('userstate', eventData);\n      return;\n    }\n\n    if (command === 'JOIN') {\n      const eventData = { channel };\n      this.channels = mergeDeepRight(this.channels, { [channel]: {} });\n      this.emit('join', eventData);\n      return;\n    }\n\n    if (command === 'PART') {\n      const eventData = { channel };\n      this.channels = omit([channel], this.channels);\n      this.emit('part', eventData);\n      return;\n    }\n\n    if (command === 'ROOMSTATE') {\n      const eventData = parseRoomState(data);\n      this.channels = mergeDeepRight(this.channels, {\n        [channel]: { roomState: eventData.tags },\n      });\n      this.emit('roomstate', eventData);\n      return;\n    }\n\n    if (command === 'NOTICE') {\n      const eventData = parseNotice(data);\n\n      // Last message was not sent\n      if (noticeMessageTags.includes(data.tags.msgId)) {\n        pathOr([], ['_messagesQueue', channel], this).shift();\n      }\n\n      this.emit('notice', eventData);\n      return;\n    }\n\n    if (command === 'USERNOTICE') {\n      const eventData = parseUserNotice(data);\n      this.emit('usernotice', eventData);\n      return;\n    }\n\n    if (command === 'CLEARCHAT') {\n      const eventData = parseClearChat(data);\n      this.emit('clearchat', eventData);\n      return;\n    }\n\n    if (command === 'CLEARMSG') {\n      const eventData = parseClearMessage(data);\n      this.emit('clearmsg', eventData);\n      return;\n    }\n\n    if (command === 'HOSTTARGET') {\n      const eventData = parseHostTarget(data);\n      this.emit('hosttarget', eventData);\n      return;\n    }\n\n    if (command === 'WHISPER') {\n      const eventData = parseWhisper(data);\n      this.emit('whisper', eventData);\n      return;\n    }\n\n    if (command === 'GLOBALUSERSTATE') {\n      const eventData = parseGlobalUserState(data);\n      this.user = eventData.tags;\n\n      while (this._queue.length) {\n        const ircMessage = this._queue.shift();\n        this.sendRaw(ircMessage);\n      }\n\n      this.emit('globaluserstate', eventData);\n      return;\n    }\n\n    this.emit('unhandled-command', data);\n  }\n\n  sendRaw(message) {\n    const handleError = (err) => {\n      if (err) {\n        this.emit('error', err);\n      }\n    };\n\n    if (Array.isArray(message)) {\n      message.forEach((line) => this.socket.send(`${line}\\r\\n`, handleError));\n    } else {\n      this.socket.send(`${message}\\r\\n`, handleError);\n    }\n  }\n\n  connect() {\n    this.socket = new WebSocket(chatUrl);\n    const { socket } = this;\n\n    socket.addEventListener('open', () => this._onConnect());\n    socket.addEventListener('close', (hadError) => this._onClose(hadError));\n    socket.addEventListener('error', (error) => this._onError(error));\n    socket.addEventListener('message', (data) => this._onData(data.data));\n  }\n\n  say(channel, message) {\n    // TODO: check if conected to the channel before send\n\n    if (!message) return;\n\n    const ircMessage = tekkoFormat({\n      command: 'PRIVMSG',\n      middle: [`#${channel}`],\n      trailing: message,\n    });\n    this.sendRaw(ircMessage);\n\n    this._messagesQueue = mergeDeepWith(concat, this._messagesQueue, {\n      [channel]: [message],\n    });\n  }\n\n  sendCommand(channel, command, params) {\n    const commandParams = Array.isArray(params) ? params.join(' ') : params;\n    const ircMessage = tekkoFormat({\n      command: 'PRIVMSG',\n      middle: [`#${channel}`],\n      trailing: `/${command} ${commandParams}`,\n    });\n    this.sendRaw(ircMessage);\n  }\n\n  join(roomName) {\n    const ircMessage = tekkoFormat({\n      command: 'JOIN',\n      middle: [`#${roomName}`],\n    });\n\n    if (!this.user) {\n      this._queue.push(ircMessage);\n    } else {\n      this.sendRaw(ircMessage);\n    }\n  }\n\n  part(roomName) {\n    const ircMessage = tekkoFormat({\n      command: 'PART',\n      middle: [`#${roomName}`],\n    });\n\n    if (!this.user) {\n      this._queue.push(ircMessage);\n    } else {\n      this.sendRaw(ircMessage);\n    }\n  }\n}\n\nexport default Client;\n","import { parse } from 'tekko';\n\nimport {\n  globalBadgesSelector,\n  channelBadgesSelector,\n} from '../reducers/badges/selectors';\nimport { emotesSelector } from '../reducers/emotes/selectors';\nimport {\n  getIsAction,\n  normalizeActionMessage,\n  parseMessageTags,\n} from './twitchChat';\nimport formatMessage from './formatMessage';\nimport getMessageBadges from './getMessageBadges';\n\nconst normalizeRecentMessages = (state, messages) => {\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n\n  return messages\n    .map((m) => parse(m))\n    .filter((m) => m.command === 'PRIVMSG')\n    .map(({ tags, params: [channel, message], prefix: { user } }) => {\n      const isAction = getIsAction(message);\n      const normalizedMessage = isAction\n        ? normalizeActionMessage(message)\n        : message;\n      const parsedTags = parseMessageTags(tags);\n      return {\n        type: 'MESSAGE',\n        message: normalizedMessage,\n        messageArray: formatMessage(\n          normalizedMessage,\n          parsedTags.emotes,\n          emotesSelector(state),\n        ),\n        tags: parsedTags,\n        badges: getMessageBadges(\n          parsedTags.badges,\n          globalBadges,\n          channelBadges,\n        ),\n        user,\n        channel: channel.slice(1),\n        isAction,\n        isHistory: true,\n      };\n    });\n};\n\nexport default normalizeRecentMessages;\n","import {\n  createAction,\n  createActions,\n  handleActions,\n  combineActions,\n} from 'redux-actions';\nimport { pathOr, mergeDeepRight, concat } from 'ramda';\n\nimport { emotesSelector } from '../emotes/selectors';\nimport {\n  globalBadgesSelector,\n  channelBadgesSelector,\n} from '../badges/selectors';\nimport { fetchRecentMessages as apiFetchRecentMessages } from '../../utils/api';\nimport { CHANNEL_MESSAGES_LIMIT } from '../../utils/constants';\nimport storeFlags from '../../utils/storeFlags';\nimport formatMessage from '../../utils/formatMessage';\nimport getMessageBadges from '../../utils/getMessageBadges';\nimport normalizeRecentMessages from '../../utils/normalizeRecentMessages';\n\nconst defaultState = {\n  // [channel]: {\n  //   history: {\n  //     isLoading: true,\n  //     isLoaded: false,\n  //     isError: false,\n  //     error: null,\n  //   },\n  //   isEven: false,\n  //   items: [],\n  // },\n};\n\nexport const messageTypes = {\n  MESSAGE: 'MESSAGE',\n  NOTICE_MESSAGE: 'NOTICE_MESSAGE',\n  USER_NOTICE_MESSAGE: 'USER_NOTICE_MESSAGE',\n};\n\nconst {\n  addMessageEntity,\n  fetchRecentMessagesRequest,\n  fetchRecentMessagesSuccess,\n  fetchRecentMessagesFailure,\n} = createActions(\n  'ADD_MESSAGE_ENTITY',\n  'FETCH_RECENT_MESSAGES_REQUEST',\n  'FETCH_RECENT_MESSAGES_SUCCESS',\n  'FETCH_RECENT_MESSAGES_FAILURE',\n);\n\nexport const clearChat = createAction('CLEAR_CHAT');\nexport const addRecentMessagesAction = createAction('ADD_RECENT_MESSAGES');\n\nconst sliceMessages = (items) => {\n  const diff = items.length - CHANNEL_MESSAGES_LIMIT;\n  return diff > 0 ? items.slice(diff) : items;\n};\n\nconst getIsEven = (prev, addedItemsCount, isSliced) => {\n  if (isSliced) {\n    return addedItemsCount % 2 ? !prev : prev;\n  }\n  return prev;\n};\n\nexport const addRecentMessages = (channel) => (dispatch, getState) => {\n  const state = getState();\n  const messages = pathOr([], ['messages', channel, 'history', 'items'], state);\n  const data = {\n    channel,\n    items: normalizeRecentMessages(state, messages),\n  };\n\n  dispatch(addRecentMessagesAction(data));\n};\n\nexport const fetchRecentMessages = (channel) => async (dispatch) => {\n  dispatch(fetchRecentMessagesRequest({ channel }));\n  try {\n    const response = await apiFetchRecentMessages(channel);\n    const data = { channel, items: response.messages };\n\n    dispatch(fetchRecentMessagesSuccess(data));\n  } catch (error) {\n    dispatch(fetchRecentMessagesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchRecentMessages = (state, { type, payload }) => {\n  const { channel } = payload;\n\n  if (type === fetchRecentMessagesRequest.toString()) {\n    return mergeDeepRight(state, {\n      [channel]: {\n        history: { ...storeFlags.request },\n      },\n    });\n  }\n\n  if (type === fetchRecentMessagesSuccess.toString()) {\n    return mergeDeepRight(state, {\n      [channel]: {\n        history: { ...storeFlags.success, items: payload.items },\n      },\n    });\n  }\n\n  if (type === fetchRecentMessagesFailure.toString()) {\n    return mergeDeepRight(state, {\n      [channel]: {\n        history: { ...storeFlags.failure, error: payload.error },\n      },\n    });\n  }\n\n  return state;\n};\n\nexport const addMessage = ({ message, tags, ...rest }) => (\n  dispatch,\n  getState,\n) => {\n  const state = getState();\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n\n  const normalizedMessage = {\n    type: messageTypes.MESSAGE,\n    message,\n    messageArray: formatMessage(message, tags.emotes, emotes),\n    tags,\n    badges: getMessageBadges(tags.badges, globalBadges, channelBadges),\n    ...rest,\n  };\n\n  dispatch(addMessageEntity(normalizedMessage));\n};\n\nexport const addNoticeMessage = (message) => (dispatch) => {\n  const normalizedMessage = {\n    ...message,\n    type: messageTypes.NOTICE_MESSAGE,\n  };\n\n  dispatch(addMessageEntity(normalizedMessage));\n};\n\nexport const addUserNoticeMessage = (message) => (dispatch) => {\n  const normalizedMessage = {\n    ...message,\n    type: messageTypes.USER_NOTICE_MESSAGE,\n  };\n\n  dispatch(addMessageEntity(normalizedMessage));\n};\n\nconst handleAddMessageEntity = (state, { payload: message }) => {\n  const { channel } = message;\n  const oldItems = pathOr([], [channel, 'items'], state);\n  const newItems = [...oldItems, message];\n  const slicedMessages = sliceMessages(newItems);\n  const isSliced = newItems.length > slicedMessages.length;\n  const isEven = pathOr(false, [channel, 'isEven'], state);\n\n  return {\n    ...state,\n    [channel]: {\n      ...state[channel],\n      isEven: getIsEven(isEven, 1, isSliced),\n      items: slicedMessages,\n    },\n  };\n};\n\nconst handleAddRecentMessages = (state, { payload: { channel, items } }) => {\n  const newItems = concat(items, pathOr([], [channel, 'items'], state));\n  const slicedMessages = sliceMessages(newItems);\n  const isSliced = newItems.length > slicedMessages.length;\n  const isEven = pathOr(false, [channel, 'isEven'], state);\n\n  return mergeDeepRight(state, {\n    [channel]: {\n      history: { items: [] },\n      items: newItems,\n      isEven: getIsEven(isEven, items.length, isSliced),\n    },\n  });\n};\n\nconst handleClearChat = (state, { payload }) => {\n  const {\n    channel,\n    tags: { targetUserId },\n  } = payload;\n\n  const newItems = state[channel].items.map((message) =>\n    message.tags.userId === targetUserId && !message.isHistory\n      ? { ...message, isDeleted: true }\n      : message,\n  );\n\n  return {\n    ...state,\n    [channel]: {\n      ...state[channel],\n      items: newItems,\n    },\n  };\n};\n\nconst reducer = handleActions(\n  {\n    [addMessageEntity]: handleAddMessageEntity,\n    [addRecentMessagesAction]: handleAddRecentMessages,\n    [combineActions(\n      fetchRecentMessagesRequest,\n      fetchRecentMessagesSuccess,\n      fetchRecentMessagesFailure,\n    )]: handleFetchRecentMessages,\n    [clearChat]: handleClearChat,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","export const TWITCH_API_AUTH_BASE = 'https://id.twitch.tv/oauth2/authorize';\n\nexport const TWITCH_API_CLIENT_ID = process.env.REACT_APP_TWITCH_API_CLIENT_ID;\nexport const TWITCH_API_REDIRECT_URI =\n  process.env.REACT_APP_TWITCH_API_REDIRECT_URI;\n\nexport const CHANNEL_MESSAGES_LIMIT = 500;\n","import { combineReducers } from 'redux';\n\nimport auth from './auth';\nimport badges from './badges';\nimport chat from './chat';\nimport emotes from './emotes/index';\nimport messages from './messages';\n\nexport default combineReducers({\n  auth,\n  badges,\n  chat,\n  emotes,\n  messages,\n});\n","/* eslint-disable no-underscore-dangle */\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from '../reducers';\n\nconst enhancer =\n  process.env.NODE_ENV === 'production'\n    ? applyMiddleware(thunk)\n    : compose(\n        applyMiddleware(thunk),\n        window.__REDUX_DEVTOOLS_EXTENSION__\n          ? window.__REDUX_DEVTOOLS_EXTENSION__()\n          : (noop) => noop,\n      );\n\nconst store = createStore(rootReducer, {}, enhancer);\n\nexport default store;\n","import { useState, useEffect } from 'react';\n\nconst useLocationHash = () => {\n  const [hash, setHash] = useState(window.location.hash);\n\n  useEffect(() => {\n    const handleHashChange = () => setHash(window.location.hash);\n\n    window.addEventListener('hashchange', handleHashChange);\n\n    return () => window.removeEventListener('hashchange', handleHashChange);\n  }, []);\n\n  return hash;\n};\n\nexport default useLocationHash;\n","import { useEffect } from 'react';\n\nconst useDocumentTitle = (title) => {\n  useEffect(() => {\n    document.title = title\n      ? `#${title} - ${process.env.REACT_APP_NAME} `\n      : process.env.REACT_APP_NAME;\n  }, [title]);\n};\n\nexport default useDocumentTitle;\n","import { pathOr } from 'ramda';\n\nimport { currentChannelSelector } from '../chat';\n\nexport const messagesSelector = (state) =>\n  pathOr([], ['messages', currentChannelSelector(state), 'items'], state);\n\nexport const isHistoryLoadingSelector = (state) =>\n  pathOr(false, [\n    'messages',\n    currentChannelSelector(state),\n    'history',\n    'isLoading',\n  ])(state);\n\nexport const isHistoryLoadedSelector = (state) =>\n  pathOr(false, [\n    'messages',\n    currentChannelSelector(state),\n    'history',\n    'isLoaded',\n  ])(state);\n","import { pathOr } from 'ramda';\n\nimport { currentChannelSelector } from './chat';\n\nexport const channelIdSelector = (state) =>\n  pathOr(\n    null,\n    ['chat', 'channels', currentChannelSelector(state), 'roomState', 'roomId'],\n    state,\n  );\n\nexport const isEvenSelector = (state) =>\n  pathOr(false, ['messages', currentChannelSelector(state), 'isEven'], state);\n","import emojilib from 'emojilib/emojis';\n\nconst replaceEmojis = (text) =>\n  text\n    .split(' ')\n    .map((word) => {\n      if (word[0] !== ':' || word[word.length - 1] !== ':') {\n        return word;\n      }\n\n      const name = word.slice(1, -1);\n      const emoji = emojilib[name];\n\n      return emoji && emoji.char ? emoji.char : word;\n    })\n    .join(' ');\n\nexport default replaceEmojis;\n","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst ChatInputRoot = styled.form`\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n  background-color: #18181b;\n\n  & > :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n\n  & > :not(:last-child) {\n    margin-right: 20px;\n  }\n`;\nconst SendButton = styled.button`\n  padding: 0 10px;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #9147ff;\n  outline: none;\n  font-size: 12px;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #772ce8;\n  }\n\n  &:active {\n    background-color: #5c16c5;\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n\n  &[disabled] {\n    background-color: rgba(255, 255, 255, 0.26);\n    color: rgba(255, 255, 255, 0.8);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\nconst Textarea = styled.textarea`\n  display: block;\n  padding: 10px;\n  width: 100%;\n  height: 38px;\n  max-height: 91px;\n  min-height: 40px;\n  overflow: hidden;\n  border: 2px solid transparent;\n  background-color: rgba(255, 255, 255, 0.15);\n  font-family: inherit;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\nconst StyledLink = styled(Link)`\n  color: #bf94ff;\n  text-decoration: none;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\n\nconst ChatInput = ({ isAuth, isDisabled, onSubmit }) => {\n  const textareaRef = useRef(null);\n  const [text, setText] = useState('');\n\n  const handleChange = (e) => setText(e.target.value);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(text);\n    setText('');\n  };\n\n  const handleKeyDown = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        const message = text.trim();\n        if (message) {\n          onSubmit(message);\n          setText('');\n        }\n      }\n    },\n    [onSubmit, setText, text],\n  );\n\n  useEffect(() => {\n    const textareaNode = textareaRef.current;\n\n    textareaNode.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      textareaNode.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [handleKeyDown]);\n\n  return (\n    <ChatInputRoot onSubmit={handleSubmit}>\n      <Textarea\n        placeholder=\"Send a message\"\n        ref={textareaRef}\n        maxLength={500}\n        disabled={isDisabled}\n        onChange={handleChange}\n        value={text}\n      />\n      <Controls>\n        {!isAuth && (\n          <StyledLink to=\"/chat/auth\">Sign in with Twitch</StyledLink>\n        )}\n        <SendButton disabled={isDisabled} type=\"submit\">\n          Chat\n        </SendButton>\n      </Controls>\n    </ChatInputRoot>\n  );\n};\n\nChatInput.defaultProps = {\n  isDisabled: false,\n};\n\nChatInput.propTypes = {\n  isAuth: pt.bool.isRequired,\n  isDisabled: pt.bool,\n  onSubmit: pt.func.isRequired,\n};\n\nexport default ChatInput;\n","import pt from 'prop-types';\n\nimport { messageTypes } from '../../reducers/messages';\nimport {\n  twitchEmoteType,\n  bttvEmoteType,\n  ffzEmoteType,\n  emojiType,\n  mentionType,\n  linkType,\n} from '../../utils/formatMessage';\n\nexport const messageType = pt.shape({\n  type: pt.oneOf([messageTypes.MESSAGE]).isRequired,\n  message: pt.string.isRequired,\n  messageArray: pt.arrayOf(\n    pt.oneOfType([\n      pt.string,\n      pt.shape({}),\n      twitchEmoteType,\n      bttvEmoteType,\n      ffzEmoteType,\n      emojiType,\n      mentionType,\n      linkType, // TODO: fix warning with link type\n    ]),\n  ).isRequired,\n  tags: pt.shape({\n    badgeInfo: pt.shape({\n      subscriber: pt.string,\n    }),\n    badges: pt.shape({}),\n    color: pt.string,\n    displayName: pt.string.isRequired,\n    emotes: pt.shape({}),\n    flags: pt.string,\n    id: pt.string,\n    mod: pt.bool,\n    roomId: pt.string,\n    tmiSentId: pt.oneOfType([pt.string, pt.number]),\n    userId: pt.string,\n  }).isRequired,\n  badges: pt.arrayOf(\n    pt.shape({\n      alt: pt.string,\n      label: pt.string,\n      src: pt.string.isRequired,\n      srcSet: pt.string,\n    }),\n  ),\n  user: pt.string.isRequired,\n  isHistory: pt.bool,\n  isAction: pt.bool,\n  isDeleted: pt.bool,\n});\n\nexport const noticeType = pt.shape({\n  type: pt.oneOf([messageTypes.NOTICE_MESSAGE]).isRequired,\n  message: pt.string.isRequired,\n  channel: pt.string.isRequired,\n  tags: pt.shape({\n    msgId: pt.string.isRequired,\n  }).isRequired,\n});\n\nexport const userNoticeType = pt.shape({\n  type: pt.oneOf([messageTypes.USER_NOTICE_MESSAGE]).isRequired,\n  message: pt.string,\n  channel: pt.string.isRequired,\n  tags: pt.shape({\n    badgeInfo: pt.shape({\n      subscriber: pt.string,\n    }),\n    badges: pt.shape({}),\n    color: pt.string,\n    displayName: pt.string.isRequired,\n    emotes: pt.shape({}),\n    id: pt.string,\n    login: pt.string,\n    mod: pt.bool,\n    msgId: pt.string,\n    systemMsg: pt.string,\n    tmiSentId: pt.oneOfType([pt.string, pt.number]),\n    userId: pt.string,\n    msgParamCumulativeMonths: pt.number,\n    msgParamDisplayName: pt.string,\n    msgParamLogin: pt.string,\n    msgParamMonths: pt.number,\n    msgParamPromoGiftTotal: pt.number,\n    msgParamPromoName: pt.string,\n    msgParamRecipientDisplayName: pt.string,\n    msgParamRecipientId: pt.string,\n    msgParamRecipientUserName: pt.string,\n    msgParamSenderLogin: pt.string,\n    msgParamSenderName: pt.string,\n    msgParamShouldShareStreak: pt.bool,\n    msgParamStreakMonths: pt.number,\n    msgParamSubPlan: pt.string,\n    msgParamSubPlanName: pt.string,\n    msgParamViewerCount: pt.number,\n    msgParamRitualName: pt.string,\n    msgParamThreshold: pt.number,\n  }).isRequired,\n});\n","import React, { useState } from 'react';\nimport pt from 'prop-types';\nimport styled, { css } from 'styled-components';\n\nimport { messageType } from './types';\n\nconst getChatMessageBg = (p) => {\n  if (p.isMention) return 'rgba(255, 0, 0, 0.3)';\n  if (p.isEven) return '#1f1925';\n  return 'transparent';\n};\n\nconst MessageRoot = styled.div`\n  padding: 5px 20px;\n  color: ${(p) => (p.isAction ? p.color : '#fff')};\n  opacity: ${(p) => (p.isHistory || p.isDeleted ? '0.5' : '1')};\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${getChatMessageBg};\n`;\nconst Name = styled.span`\n  font-weight: bold;\n  color: ${(p) => p.color};\n`;\nconst Emote = styled.img`\n  display: inline-block;\n  margin: -5px 0;\n  vertical-align: middle;\n`;\nconst Emoji = styled.img`\n  display: inline-block;\n  margin-top: -5px;\n  margin-bottom: -4px;\n  width: 20px;\n  height: auto;\n  vertical-align: middle;\n`;\nconst Mention = styled.span`\n  ${(p) =>\n    p.isActive &&\n    css`\n      padding: 2px 4px;\n      background-color: #fafafa;\n      color: #18181b;\n    `}\n`;\nconst Link = styled.a`\n  color: #bf94ff;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Badge = styled.img`\n  margin-bottom: 2px;\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst renderMessageArray = (user, login) => (item, key) => {\n  if (typeof item !== 'object') return item;\n\n  if (\n    item.type === 'twitch-emote' ||\n    item.type === 'bttv-emote' ||\n    item.type === 'ffz-emote'\n  ) {\n    return (\n      <Emote key={key} src={item.src} srcSet={item.srcSet} alt={item.alt} />\n    );\n  }\n\n  if (item.type === 'emoji') {\n    return (\n      <Emoji key={key} src={item.src} srcSet={item.srcSet} alt={item.alt} />\n    );\n  }\n\n  if (item.type === 'mention') {\n    const isActive = item.target === login || user === login;\n    return (\n      <Mention key={key} isActive={isActive}>\n        {item.text}\n      </Mention>\n    );\n  }\n\n  if (item.type === 'link') {\n    return (\n      <Link\n        key={key}\n        href={item.href}\n        rel=\"noreferrer noopener\"\n        target=\"_blank\"\n      >\n        {item.text}\n      </Link>\n    );\n  }\n\n  return null;\n};\n\nconst renderBadges = (badges) =>\n  badges.map(({ alt, label, src, srcSet }, key) => (\n    // eslint-disable-next-line react/no-array-index-key\n    <Badge key={key} alt={alt} aria-label={label} src={src} srcSet={srcSet} />\n  ));\n\nconst MESSAGE_DELETED_LABED = '<message deleted>';\n\nconst Message = ({\n  message: {\n    message,\n    messageArray,\n    tags: { color, displayName },\n    badges,\n    user,\n    isHistory,\n    isAction,\n    isDeleted,\n  },\n  login,\n  isEven,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const isMention = user !== login && RegExp(login, 'gi').test(message);\n\n  return (\n    <MessageRoot\n      isHistory={isHistory}\n      isAction={isAction}\n      isEven={isEven}\n      isMention={isMention}\n      isDeleted={isDeleted}\n      color={color}\n    >\n      {badges.length > 0 && renderBadges(badges)}\n      <Name color={color}>{displayName}</Name>\n      {isAction ? ' ' : ': '}\n      {isDeleted && !isVisible ? (\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n        <Link onClick={() => setIsVisible(true)}>{MESSAGE_DELETED_LABED}</Link>\n      ) : (\n        messageArray.map(renderMessageArray(user, login))\n      )}\n    </MessageRoot>\n  );\n};\n\nMessage.defaultProps = {\n  isEven: false,\n};\n\nMessage.propTypes = {\n  message: messageType.isRequired,\n  login: pt.string.isRequired,\n  isEven: pt.bool,\n};\n\nexport default Message;\n","import React from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport { noticeType } from './types';\n\nconst NoticeRoot = styled.div`\n  padding: 5px 20px;\n  color: rgba(255, 255, 255, 0.6);\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${(p) => (p.isEven ? '#1f1925' : 'transparent')};\n`;\n\nconst Notice = ({ message: { message }, isEven }) => (\n  <NoticeRoot isEven={isEven}>{message}</NoticeRoot>\n);\n\nNotice.defaultProps = {\n  isEven: false,\n};\n\nNotice.propTypes = {\n  message: noticeType.isRequired,\n  isEven: pt.bool,\n};\n\nexport default Notice;\n","import React from 'react';\n// import pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport { userNoticeType } from './types';\n\nconst UserNoticeRoot = styled.div`\n  padding: 5px 20px 5px 16px;\n  line-height: 20px;\n  word-wrap: break-word;\n  border-left: 4px solid #9147ff;\n  color: #fff;\n`;\n\nconst UserNotice = ({\n  message: {\n    tags: { systemMsg },\n  },\n}) => <UserNoticeRoot>{systemMsg}</UserNoticeRoot>;\n\nUserNotice.propTypes = {\n  message: userNoticeType.isRequired,\n};\n\nexport default UserNotice;\n","import React from 'react';\nimport pt from 'prop-types';\n\nimport { messageTypes } from '../../reducers/messages';\nimport { messageType, noticeType, userNoticeType } from './types';\n\nimport Message from './Message';\nimport Notice from './Notice';\nimport UserNotice from './UserNotice';\n\nconst ChatMessage = ({ message, login, isEven }) => {\n  if (message.type === messageTypes.MESSAGE) {\n    return <Message message={message} login={login} isEven={isEven} />;\n  }\n\n  if (message.type === messageTypes.NOTICE_MESSAGE) {\n    return <Notice message={message} isEven={isEven} />;\n  }\n\n  if (message.type === messageTypes.USER_NOTICE_MESSAGE) {\n    return <UserNotice message={message} />;\n  }\n\n  return null;\n};\n\nChatMessage.defaultProps = {\n  isEven: false,\n};\n\nChatMessage.propTypes = {\n  message: pt.oneOfType([messageType, noticeType, userNoticeType]).isRequired,\n  login: pt.string.isRequired,\n  isEven: pt.bool,\n};\n\nexport default ChatMessage;\n","import React, { useState, useEffect, useRef } from 'react';\nimport pt from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport Scrollbar from 'react-scrollbars-custom';\n\nimport { messagesSelector } from '../reducers/messages/selectors';\nimport { isEvenSelector } from '../reducers/chat/selectors';\nimport ChatInput from './ChatInput';\nimport ChatMessage from './ChatMessage';\n\nconst MORE_MESSAGES_OFFSET = 100;\n\nconst ChatRoot = styled.div`\n  height: 100vh;\n  font-size: 12px;\n`;\nconst ChatWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background-color: #18181b;\n`;\nconst MessagesWrapper = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\nconst Messages = styled(Scrollbar).attrs({\n  disableTracksWidthCompensation: true,\n})`\n  overflow-y: auto;\n\n  .ScrollbarsCustom-TrackY {\n    background: none !important;\n  }\n\n  .ScrollbarsCustom-ThumbY {\n    margin-left: auto;\n    margin-right: auto;\n    width: 6px !important;\n  }\n\n  .ScrollbarsCustom-Content {\n    padding-bottom: 10px !important;\n  }\n`;\nconst MoreMessagesButton = styled.button`\n  position: absolute;\n  left: 50%;\n  bottom: 10px;\n  display: ${(p) => (p.visible ? 'block' : 'none')};\n  padding: 5px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  transform: translateX(-50%);\n`;\n\nconst Chat = ({ onSendMessage }) => {\n  const isAuth = useSelector((state) => state.auth.isAuth);\n  const messages = useSelector(messagesSelector);\n  // TODO: check if the user has a rights to send messages\n  const isConnected = useSelector((state) => state.chat.isConnected);\n  const isEven = useSelector(isEvenSelector);\n  const login = useSelector((state) => state.auth.user.login);\n  const [\n    isMoreMessagesButtonVisible,\n    setIsMoreMessagesButtonVisible,\n  ] = useState(false);\n  const messagesRef = useRef(null);\n\n  const handleScrollToBottom = () => {\n    if (messagesRef.current && messagesRef.current.scrollToBottom) {\n      messagesRef.current.scrollToBottom();\n    }\n  };\n\n  useEffect(() => {\n    if (!isMoreMessagesButtonVisible) {\n      handleScrollToBottom();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages]);\n\n  const handleScrollUpdate = ({\n    clientHeight,\n    contentScrollHeight,\n    scrollTop,\n  }) => {\n    const maxScrollTop = contentScrollHeight - clientHeight;\n    const isVisible = scrollTop + MORE_MESSAGES_OFFSET < maxScrollTop;\n\n    setIsMoreMessagesButtonVisible(isVisible);\n  };\n\n  return (\n    <ChatRoot>\n      <ChatWrapper>\n        <MessagesWrapper>\n          <Messages onUpdate={handleScrollUpdate} ref={messagesRef}>\n            {messages.map((message, key) => (\n              <ChatMessage\n                key={message.tags.id}\n                message={message}\n                login={login}\n                isEven={isEven ? key % 2 === 1 : key % 2 === 0}\n              />\n            ))}\n          </Messages>\n          <MoreMessagesButton\n            onClick={handleScrollToBottom}\n            visible={isMoreMessagesButtonVisible}\n          >\n            More messages below\n          </MoreMessagesButton>\n        </MessagesWrapper>\n        <ChatInput\n          onSubmit={onSendMessage}\n          isDisabled={!isAuth || !isConnected}\n          isAuth={isAuth}\n        />\n      </ChatWrapper>\n    </ChatRoot>\n  );\n};\n\nChat.propTypes = {\n  onSendMessage: pt.func.isRequired,\n};\n\nexport default Chat;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport uuid from 'uuid/v4';\n\nimport useLocationHash from '../hooks/useLocationHash';\nimport useDocumentTitle from '../hooks/useDocumentTitle';\nimport { fetchTwitchEmotes } from '../reducers/emotes/twitch';\nimport {\n  fetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes,\n} from '../reducers/emotes/bttv';\nimport {\n  fetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes,\n} from '../reducers/emotes/ffz';\nimport { isEmotesLoadedSelector } from '../reducers/emotes/selectors';\nimport {\n  addMessage,\n  addNoticeMessage,\n  addUserNoticeMessage,\n  fetchRecentMessages,\n  addRecentMessages,\n  clearChat,\n} from '../reducers/messages';\nimport { isHistoryLoadedSelector } from '../reducers/messages/selectors';\nimport {\n  setCurrentChannel,\n  setIsConnected,\n  updateGlobalUserState,\n  updateUserState,\n  updateRoomState,\n  currentChannelSelector,\n} from '../reducers/chat';\nimport { fetchGlobalBadges, fetchChannelBadges } from '../reducers/badges';\nimport { isBadgesLoadedSelector } from '../reducers/badges/selectors';\nimport { channelIdSelector } from '../reducers/chat/selectors';\nimport { setIsAuth } from '../reducers/auth';\nimport Client from '../utils/twitchChat';\nimport replaceEmojis from '../utils/replaceEmojis';\n\nimport Chat from './Chat';\n\nlet client = null;\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const isAuth = useSelector((state) => state.auth.isAuth);\n  const login = useSelector((state) => state.auth.user.login);\n  const userId = useSelector((state) => state.auth.user.id);\n  const currentChannel = useSelector(currentChannelSelector);\n  const currentChannelId = useSelector(channelIdSelector);\n  const isEmotesLoaded = useSelector(isEmotesLoadedSelector);\n  const isBadgesLoaded = useSelector(isBadgesLoadedSelector);\n  const isHistoryLoaded = useSelector(isHistoryLoadedSelector);\n  const hash = useLocationHash();\n\n  useDocumentTitle(currentChannel);\n\n  useEffect(() => {\n    const rawUser = localStorage.getItem('user');\n\n    if (rawUser) {\n      const user = JSON.parse(rawUser);\n\n      dispatch(setIsAuth({ isAuth: true, user }));\n    }\n\n    // TODO: try to connect to the chat. if there is an error, set isAuth to false and connect without login\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (hash && hash.length > 1) {\n      const channel = hash.slice(1);\n      dispatch(setCurrentChannel(channel));\n      localStorage.setItem('lastChannel', channel);\n    }\n  }, [dispatch, hash]);\n\n  useEffect(() => {\n    if (currentChannel && isAuth) {\n      const options = {\n        identity: {\n          name: login,\n          auth: localStorage.accessToken,\n        },\n      };\n\n      const handleMessage = (data) => dispatch(addMessage(data));\n\n      const handleClearChat = (data) => {\n        if (!data.tags.targetUserId) return;\n\n        dispatch(clearChat(data));\n      };\n\n      const handleNotice = (data) => {\n        const normalizedMessage = {\n          ...data,\n          tags: { ...data.tags, id: uuid() },\n        };\n        dispatch(addNoticeMessage(normalizedMessage));\n      };\n\n      if (!client) {\n        client = new Client(options);\n        client.connect();\n\n        client.on('connected', () => dispatch(setIsConnected(true)));\n        client.on('disconnected', () => dispatch(setIsConnected(false)));\n\n        client.on('globaluserstate', (data) =>\n          dispatch(updateGlobalUserState(data)),\n        );\n        client.on('userstate', (data) => dispatch(updateUserState(data)));\n        client.on('roomstate', (data) => dispatch(updateRoomState(data)));\n\n        client.on('clearchat', handleClearChat);\n\n        client.on('message', handleMessage);\n        client.on('ownmessage', handleMessage);\n        client.on('notice', handleNotice);\n        client.on('usernotice', (data) => dispatch(addUserNoticeMessage(data)));\n      }\n\n      // TODO: Part the previous channel before join\n      client.join(currentChannel);\n    }\n  }, [dispatch, login, currentChannel, isAuth]);\n\n  useEffect(() => {\n    dispatch(fetchBttvGlobalEmotes());\n    dispatch(fetchFfzGlobalEmotes());\n    dispatch(fetchGlobalBadges());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (currentChannel) {\n      dispatch(fetchRecentMessages(currentChannel));\n    }\n  }, [dispatch, currentChannel]);\n\n  useEffect(() => {\n    if (currentChannel && isEmotesLoaded && isBadgesLoaded && isHistoryLoaded) {\n      dispatch(addRecentMessages(currentChannel));\n    }\n  }, [\n    dispatch,\n    currentChannel,\n    isEmotesLoaded,\n    isBadgesLoaded,\n    isHistoryLoaded,\n  ]);\n\n  useEffect(() => {\n    if (userId) {\n      dispatch(fetchTwitchEmotes(userId));\n    }\n  }, [dispatch, userId]);\n\n  useEffect(() => {\n    // TODO: check if emotes for the current channel is already in the store\n    if (currentChannel && currentChannelId) {\n      dispatch(fetchBttvChannelEmotes(currentChannelId, currentChannel));\n      dispatch(fetchFfzChannelEmotes(currentChannelId, currentChannel));\n      dispatch(fetchChannelBadges(currentChannelId, currentChannel));\n    }\n  }, [dispatch, currentChannel, currentChannelId]);\n\n  const handleSendMessage = (message) => {\n    const normalizedMessage = replaceEmojis(message.trim());\n    client.say(currentChannel, normalizedMessage);\n  };\n\n  return <Chat onSendMessage={handleSendMessage} />;\n};\n\nexport default Home;\n","import {\n  TWITCH_API_AUTH_BASE,\n  TWITCH_API_CLIENT_ID,\n  TWITCH_API_REDIRECT_URI,\n} from './constants';\n\nconst authParams = {\n  client_id: TWITCH_API_CLIENT_ID,\n  redirect_uri: TWITCH_API_REDIRECT_URI,\n  response_type: 'token+id_token',\n  scope: [\n    'openid',\n    'channel:moderate',\n    'chat:edit',\n    'chat:read',\n    'whispers:read',\n    'whispers:edit',\n    'user_blocks_read',\n    'user_blocks_edit',\n    'user_subscriptions',\n  ].join('+'),\n  claims: JSON.stringify({\n    id_token: { email_verified: null, picture: null, preferred_username: null },\n  }),\n  // state: uid(),\n};\n\nconst getAuthUrl = () => {\n  const search = Object.entries(authParams)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n\n  return `${TWITCH_API_AUTH_BASE}?${search}`;\n};\n\nexport default getAuthUrl;\n","import getAuthUrl from '../utils/getAuthUrl';\n\nconst Auth = () => {\n  window.location.href = getAuthUrl();\n\n  return null;\n};\n\nexport default Auth;\n","import { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport jwt from 'jsonwebtoken';\n\nimport { fetchUser } from '../reducers/auth';\n\nconst AuthCallback = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  if (!window.location.hash) return null;\n\n  const params = new URLSearchParams(window.location.hash.slice(1));\n\n  const accessToken = params.get('access_token');\n  const idToken = params.get('id_token');\n\n  if (!accessToken || !idToken) return null;\n\n  localStorage.setItem('accessToken', accessToken);\n  localStorage.setItem('idToken', idToken);\n\n  const { sub: id } = jwt.decode(idToken);\n\n  dispatch(fetchUser(id));\n\n  const lastChannel = localStorage.getItem('lastChannel');\n\n  history.push(lastChannel ? `/chat/#${lastChannel}` : '/chat/');\n\n  return null;\n};\n\nexport default AuthCallback;\n","import { css } from 'styled-components';\n\nexport default css`\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    margin: 0;\n    font-family: Roobert, Helvetica Neue, Helvetica, Arial, sans-serif;\n  }\n`;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { createGlobalStyle } from 'styled-components';\n\nimport common from './common';\nimport colors from './colors';\nimport vars from './vars';\n\nexport default createGlobalStyle`\n  :root {\n    ${colors};\n    ${vars};\n  }\n  ${common};\n`;\n","import React from 'react';\nimport pt from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport isAuthRedirect from './utils/isAuthRedirect';\nimport Home from './components/Home';\nimport Auth from './components/Auth';\nimport AuthCallback from './components/AuthCallback';\nimport GlobalStyles from './styles';\n\nconst getHomeComponent = () =>\n  isAuthRedirect(window.location.hash) ? AuthCallback : Home;\n\nconst App = ({ store }) => (\n  <>\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/chat/\" component={getHomeComponent()} />\n          <Route exact path=\"/chat/auth\" component={Auth} />\n        </Switch>\n      </Router>\n    </Provider>\n    <GlobalStyles />\n  </>\n);\n\nApp.propTypes = {\n  store: pt.shape({}).isRequired,\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactGA from 'react-ga';\n\nimport isAuthRedirect from './utils/isAuthRedirect';\nimport store from './store';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nif (process.env.NODE_ENV === 'production') {\n  ReactGA.initialize('UA-139550930-3');\n\n  if (!isAuthRedirect(window.location.hash)) {\n    const page =\n      window.location.pathname + window.location.search + window.location.hash;\n    ReactGA.pageview(page);\n  }\n}\n\nReactDOM.render(<App store={store} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}