{"version":3,"sources":["features/emotes/utils/getEmotesByText.ts","features/emotes/utils/emotesUsageStatistic.ts","features/messageCards/messageCardsSelectors.ts","features/blockedUsers/blockedUsersSlice.ts","utils/normalizeHref.ts","features/messages/utils/htmlEntity.ts","features/chat/chatSelectors.ts","features/auth/authSelectors.ts","utils/fetchRequest.ts","api/twitch.ts","api/bttv.ts","api/ffz.ts","api/chatHistory.ts","api/youtube.ts","assets/ts-tink.ogg","features/emotes/utils/findEmote.ts","features/emotes/utils/createEmoteCategories.ts","features/emotes/emotesSelectors.ts","features/chat/utils/parseApiResponse.ts","features/options/optionsSelectors.ts","features/chat/chatSlice.ts","features/badges/badgesSelectors.ts","features/auth/useInitializeAuth.ts","features/messages/messagesSelectors.ts","features/chat/hooks/useFetchChatData.ts","features/chat/hooks/useCurrentChannel.ts","features/messages/utils/replaceEmojis.ts","features/chat/hooks/useTwitchClient.ts","features/chat/utils/getUsersByBeginText.ts","features/chat/hooks/useChatInput.ts","icons/close.svg","components/IconButton.tsx","components/ChatModal.tsx","icons/smiley-face.svg","components/Scrollbar.tsx","icons/search.svg","features/emotes/EmotePicker.tsx","features/chat/ChatInput.tsx","icons/gears.svg","icons/twitch.svg","components/Button.tsx","components/Switch.tsx","features/options/Options.tsx","features/chat/ChatControls.tsx","utils/colors.ts","features/messageCards/MessageCard.tsx","features/messages/Message.tsx","features/messages/Notice.tsx","features/messages/UserNotice.tsx","features/messages/ChatMessage.tsx","features/messages/Messages.tsx","features/chat/JoinChannel.tsx","features/chat/Chat.tsx","features/auth/Auth.tsx","features/auth/Logout.tsx","features/auth/AuthCallback.tsx","styles/common.js","styles/colors.js","styles/vars.js","styles/index.js","app/App.tsx","serviceWorker.ts","app/rootReducer.ts","app/store.ts","index.tsx","features/auth/authSlice.ts","features/messages/utils/parseMessageEntities.ts","features/messages/utils/checkIsHighlighted.ts","features/messageCards/utils/getMessageCardFromEntities.ts","features/messages/utils/normalizeMessages.ts","features/messages/utils/sliceItemsByLimit.ts","features/messages/messagesSlice.ts","utils/constants.ts","features/auth/authUtils.ts","features/emotes/emotesSlice.ts","utils/assertNever.ts","features/messageCards/messageCardsSlice.ts","features/blockedUsers/blockedUsersSelectors.ts","features/badges/badgesSlice.ts","features/options/optionsUtils.ts","features/options/optionsSlice.ts"],"names":["getEmotesByText","text","emotes","limit","result","begins","contains","textLower","toLowerCase","findEmote","bttv","byText","bttvChannel","ffz","ffzChannel","twitch","twitchUser","twitchGlobal","bttvGlobal","ffzGlobal","emoji","readEmotesUsageStatistic","statistic","localStorage","getItem","LS_EMOTES_USAGE_STATISTIC","JSON","parse","e","getUsageStatisticFromEntities","R","v","items","type","id","lastUpdatedAt","Date","now","uses","length","mergeFn","key","left","right","writeEmotesUsageStatistic","entries","history","newHistory","setItem","stringify","normalizeHistory","getEmotesFromUsageStatistic","item","emoteEntity","byId","push","messageCardSelector","card","state","messageCards","twitchClips","twitchVideos","youtubeVideos","assertNever","fetchBlockedUsers","createAsyncThunk","userId","api","blockedUsers","createSlice","name","initialState","status","error","reducers","extraReducers","builder","addCase","pending","fulfilled","payload","parseBlockedUsers","rejected","isStartsWithProtocolRegex","normalizeHref","href","test","regexEmotesMap","getFfzSrcSet","dpi","url","createTwitchEmote","code","alt","src","TWITCH_EMOTES_CDN","srcSet","createBttvEmote","BTTV_EMOTES_CDN","createFfzEmote","urls","createEmoji","short","unified","createMention","target","createLink","createBadges","badges","globalBadges","channelBadges","version","badge","versions","title","description","image_url_1x","imageUrl1x","image_url_2x","imageUrl2x","image_url_4x","imageUrl4x","label","createBadge","Boolean","currentChannelSelector","chat","currentChannel","isConnectedSelector","isConnected","currentChannelIdSelector","params","byChannels","room","roomId","userColorSelector","user","color","userDisplayNameSelector","displayName","userBadgesSelector","isAuthReadySelector","auth","isAuthSelector","userLoginSelector","userLogin","userIdSelector","fetchRequest","async","timeout","restOptions","options","fetchTimeout","API_REQUESTS_TIMEOUT","controller","AbortController","signal","setTimeout","abort","response","fetch","ok","Error","statusText","json","apiRequestHelix","headers","process","Authorization","LS_ACCESS_TOKEN","apiRequestKraken","Accept","fetchUser","fetchTwitchEmotes","fetchGlobalBadges","language","fetchChannelBadges","channelId","fetchTwitchClip","fetchTwitchVideo","fetchBttvGlobalEmotes","fetchBttvChannelEmotes","fetchFfzGlobalEmotes","fetchFfzChannelEmotes","fetchChatHistory","channel","fetchYoutubeVideo","module","exports","findTwitchEmoteByIdInSets","sets","set","Object","values","htmlEntity","emotesMap","555555557","555555559","555555561","555555562","555555568","555555576","555555579","555555583","555555584","555555588","555555590","555555594","555555598","555555600","findTwitchEmoteByNameInSets","includes","byName","emote","index","indexOf","findById","findByName","byChar","char","emojisMap","keywords","keyword","emojiEntity","getTwitchUserEmoteCategories","getMainEmoteCategories","createSelector","map","filter","createEmoteCategories","mainEmoteCategories","frequentlyUsed","isTwitchEmotesLoadedSelector","isBttvGlobalEmotesLoadedSelector","global","isBttvChannelEmotesLoadedSelector","isFfzGlobalEmotesLoadedSelector","isFfzChannelEmotesLoadedSelector","isEmotesLoadedSelector","twitchEmotesSelector","twitchGlobalEmotesSelector","twitchUserEmotesSelector","emotesSelector","isEmotesLoaded","emoteCategoriesSelector","search","parseTwitchEmotes","parseBttvGlobalEmotes","data","parseBttvChannelEmotes","channelEmotes","sharedEmotes","parseFfzGlobalEmotes","default_sets","defaultSets","parseFfzChannelEmotes","parseBadges","parseTwitchClip","thumbnail_url","thumbnailUrl","creator_name","creatorName","x1","replace","parseTwitchVideo","user_name","userName","published_at","publishedAt","date","format","parseYoutubeVideo","snippet","channelTitle","thumbnails","default","medium","x2","high","x4","optionsSelector","value","showTimestamps","splitChat","fixedWidth","highlightNotifications","showTwitchCards","showYoutubeCards","isShowTimestampsSelector","isSplitChatSelector","isFixedWidthSelector","isHighlightNotificationsSelector","isShowTwitchCardsSelector","isShowYoutubeCardsSelector","updateIsConnected","updateCurrentChannel","updateGlobalUserParams","tags","updateUserParams","updateRoomParams","actions","isGlobalBadgesLoadedSelector","isChannelBadgesLoadedSelector","globalBadgesSelector","channelBadgesSelector","userBadgesImagesSelector","useInitializeAuth","dispatch","useDispatch","isAuthReady","useSelector","useEffect","idToken","readUserFromLocatStorage","login","isAuth","initializeAuth","jwtData","jwt","decode","sub","messagesSelector","messages","usersSelector","users","recentUserMessagesSelector","recentUserMessages","isHistoryLoadedSelector","isHistoryAddedSelector","isAdded","isEvenSelector","isEven","useFetchChatData","currentChannelId","isTwitchEmotesLoaded","isBttvGlobalEmotesLoaded","isBttvChannelEmotesLoaded","isFfzGlobalEmotesLoaded","isFfzChannelEmotesLoaded","isGlobalBadgesLoaded","isChannelBadgesLoaded","isHistoryLoaded","isBlockedUsersLoaded","isBlockedUsersLoadedSelector","isHistoryAdded","isReadyToAddHistory","addChatHistory","useCurrentChannel","useHistory","hash","location","slice","LS_LAST_CHANNEL","document","lastChannel","pathname","replaceEmojis","split","word","join","useTwitchClient","prevChannel","usePrevious","clientRef","useRef","registerEvents","useCallback","client","current","on","message","recieveMessage","invalidateAuth","disconnect","targetUserId","clearChat","part","twitchIrc","connect","useMemo","say","trim","normalizedMessage","handleUserState","ownMessage","removeListeners","handleNotice","NOTICE_MESSAGE_TAGS","msgId","off","getUsersByBeginText","beginText","beginTextLower","nameLower","startsWith","suggestionsInitialState","isActive","activeIndex","start","end","setSuggestionsIndexUp","rest","setSuggestionsIndexDown","replaceSuggestionText","currentItem","insertedText","substring","useChatInput","setText","onSendMessage","chatInputRef","recentUserMessageIndexRef","suggestions","setSuggestions","useSetState","deps","recentUserMessageIndex","setRecentUserMessageIndex","getDeps","handleChange","d","selectionStart","spaceIndexBefore","lastIndexOf","spaceIndexAfter","usersMatch","SUGGESTION_TYPES","regex","exec","emotesMatch","handleKeyUp","handleKeyDown","preventDefault","t","newIndex","defaultValue","handleSuggestionMouseEnter","handleSuggestionClick","focus","handleBlur","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","this","_ref","createElement","fill","SvgClose","svgRef","props","viewBox","ref","ForwardRef","forwardRef","sizes","small","css","IconButton","styled","button","attrs","p","$size","ChatModalRoot","div","CloseButton","CloseIcon","CloseIconSvg","ChatModal","children","onClose","onClick","fillRule","clipRule","SvgSmileyFace","Scrollbar","CustomScrollbar","disableTracksWidthCompensation","SvgSearch","EmotePickerRoot","Categories","Category","CategoryHeader","CategoryItems","Emote","img","SearchBlock","SearchInput","input","SearchIcon","SearchIconSvg","EmotePicker","onEmoteClick","setSearch","useState","searchInputRef","emoteCategories","placeholder","onChange","ChatInputRoot","ChatInputInner","Suggestions","SuggestionItem","$isActive","SuggestionImage","TextareaInput","TextareaWrapper","$isSuggestions","EmotesModal","Textarea","TextareaAutosize","$showScroll","EmotesButton","SmileyFaceIcon","SmileyFaceIconSvg","ChatInput","React","isDisabled","onKeyUp","onKeyDown","onBlur","onSuggestionMouseEnter","onSuggestionClick","textareaRef","suggestionsRef","useOnClickOutside","refs","isShowTextareaScroll","setIsShowTextareaScroll","isEmotesModalVisible","setIsEmotesModalVisible","handleCloseEmotesModal","renderUser","onMouseEnter","renderEmote","renderSuggestions","maxLength","maxRows","disabled","onHeightChange","height","memo","SvgGears","_ref2","_ref3","SvgTwitch","Button","SwitchRoot","Label","Input","Switch","checked","readOnly","aria-label","htmlFor","defaultProps","OptionsRoot","Header","h2","Option","OptionText","span","Profile","UserName","LogOutButton","Link","Badge","Options","userDisplayName","userColor","userBadgesImages","renderOption","changeOption","renderOptionsCategory","to","ChatControlsRoot","Controls","OptionsModal","OptionsButton","GearsIcon","GearsIconSvg","TwitchIcon","TwitchIconSvg","isOptionsModalVisible","setIsOptionsModalVisible","handleCloseOptionsModal","optionsRef","as","prev","hueToRgb","pp","qq","calculateColorBackground","parseInt","substr","calculateColorReplacement","background","light","factor","hsl","r","g","b","max","Math","min","l","h","s","rgbToHsl","rgb","round","q","hslToRgb","toString","padStart","colorCache","Map","MessageCardRoot","a","rel","$clickable","Preview","Image","PreviewLoading","Content","textStyles","Title","Description","textLoadingStyle","TitleLoading","DescriptionLoading","errorImageSrc","errorImageSrcSet","errorDescription","MessageCard","cardInfo","MessageRoot","$isAction","$color","$isHistory","$isDeleted","$isHighlighted","$isEven","Name","Emoji","EmoteWrapper","Mention","$isOwnMessage","Timestamp","entities","timestamp","isHistory","isAction","isDeleted","isHighlighted","isShowTimestamps","onNameRightClick","isVisible","setIsVisible","newColor","darkenedMode","cacheKey","has","get","bgColor","size","delete","next","calculateColor","renderBadges","onContextMenu","messageLogin","data-emote-id","renderMessageArray","NoticeRoot","Notice","UserNoticeRoot","UserNotice","systemMessage","MessagesRoot","StyledScrollbar","MoreMessagesButton","$isVisible","Messages","isMoreMessagesButtonVisible","setIsMoreMessagesButtonVisible","isSplitChat","scrollbarRef","handleScrollToBottom","scrollToBottom","getIsEven","onUpdate","clientHeight","contentScrollHeight","scrollTop","JoinChannelRoot","JoinButton","JoinChannel","setValue","inputRef","handleChangeChannel","onKeyPress","ChatRoot","ChatWrapper","$isFixedWidth","Chat","isFixedWidth","textRef","handleSendMessage","chatInput","handleNameRightClick","trimLeft","handleEmoteClick","Auth","window","getAuthUrl","Logout","removeItem","LS_ID_TOKEN","LS_USER","AuthCallback","URLSearchParams","accessToken","createGlobalStyle","colors","vars","common","getHomeComponent","isAuthRedirect","App","exact","path","render","component","isLocalhost","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","console","log","onSuccess","catch","rootReducer","combineReducers","store","configureStore","reducer","ReactGA","initialize","page","pageview","require","ReactDOM","getElementById","URL","origin","addEventListener","contentType","ready","unregister","reload","checkValidServiceWorker","writeUserToLocatStorage","mentionRegex","linkRegex","urlRegex","strict","normalizeEmbeddedEmotes","embeddedEmotes","reduce","Number","acc","findEntity","parseTwitch","twitchEmote","mentionMatch","linkMatch","parseMessageEntities","isOwnMessage","offset","arrayOffset","spaceIndex","startIndex","endIndex","entity","keys","textBefore","Array","isArray","entityObject","difference","textAfter","checkIsHighlighted","messageUser","messageText","RegExp","twitchClipRegex","twitchVideoRegex","youtubeVideoRegex","getMessageCardFromEntities","parseYoutube","m","tink","Howl","tinkSfx","normalizeHistoryMessages","rawMessages","blockedUsersSelector","rawMessage","tekko","command","prefix","parsedTags","tmiSentTs","normalizeHistoryMessage","sliceItemsByLimit","addedItemsCount","diff","isSliced","messagesSlice","recieveMessagesAction","newItems","newIsEven","CHANNEL_MESSAGES_LIMIT","forEach","newUsers","STORE_USERS_LIMIT","splice","unshift","newRecentUserMessages","RECENT_USER_MESSAGES_LIMIT","meta","arg","normalizePayload","isHighlightNotifications","isShowTwitchCards","isShowYoutubeCards","play","normalizeMessage","nanoid","noticeType","normalizeNotice","systemMsg","normalizeUserNotice","normalizeOwnMessage","getState","slicedRawHistory","TWITCH_API_AUTH_BASE","TWITCH_API_CLIENT_ID","TWITCH_API_REDIRECT_URI","LS_OPTIONS","authParams","client_id","redirect_uri","response_type","scope","claims","id_token","email_verified","picture","preferred_username","readOptionsFromLocalStorage","blacklistKeywords","highlightKeywords","prepare"],"mappings":"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","file":"static/js/main.0f7dbe6c.chunk.js","sourcesContent":["/* eslint-disable no-restricted-syntax */\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport findEmote from 'features/emotes/utils/findEmote';\n\nexport type EmotesByText = {\n  begins: htmlEntity.Emote[];\n  contains: htmlEntity.Emote[];\n};\n\nconst getEmotesByText = (\n  text: string,\n  emotes: StateEmotes,\n  limit = -1,\n): htmlEntity.Emote[] => {\n  if (!emotes) return [];\n\n  const result: EmotesByText = {\n    begins: [],\n    contains: [],\n  };\n  const textLower = text.toLowerCase();\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const isOver =\n    findEmote.bttv.byText(result, emotes.bttvChannel, textLower, limit) ||\n    findEmote.ffz.byText(result, emotes.ffzChannel, textLower, limit) ||\n    findEmote.twitch.byText(result, emotes.twitchUser, textLower, limit) ||\n    findEmote.twitch.byText(result, emotes.twitchGlobal, textLower, limit) ||\n    findEmote.bttv.byText(result, emotes.bttvGlobal, textLower, limit) ||\n    findEmote.ffz.byText(result, emotes.ffzGlobal, textLower, limit) ||\n    findEmote.emoji.byText(result, textLower, limit);\n\n  return [...result.begins, ...result.contains];\n};\n\nexport default getEmotesByText;\n","import * as R from 'ramda';\n\nimport { LS_EMOTES_USAGE_STATISTIC } from 'utils/constants';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport findEmote from 'features/emotes/utils/findEmote';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport type { MessageEntity } from 'features/messages/messagesSlice';\n\ntype Type = 'twitch-emote' | 'bttv-emote' | 'ffz-emote';\n\ntype AUsageItem = {\n  lastUpdatedAt: number;\n  uses: number;\n};\n\ntype UsageItemTwitchFfz = AUsageItem & {\n  type: 'twitch-emote' | 'ffz-emote';\n  id: number;\n};\n\ntype UsageItemBttv = AUsageItem & {\n  type: 'bttv-emote';\n  id: string;\n};\n\ntype UsageItem = UsageItemTwitchFfz | UsageItemBttv;\n\ntype EmotesUsageStatistic = Record<Type, Record<string, UsageItem>>;\n\nexport const readEmotesUsageStatistic = (): Partial<EmotesUsageStatistic> => {\n  try {\n    const statistic = localStorage.getItem(LS_EMOTES_USAGE_STATISTIC);\n\n    return JSON.parse(statistic as string) || {};\n  } catch (e) {\n    return {};\n  }\n};\n\nexport const getUsageStatisticFromEntities = R.pipe<\n  MessageEntity[],\n  any,\n  any,\n  any\n>(\n  R.filter((v: any) =>\n    R.includes(R.prop('type', v), ['twitch-emote', 'bttv-emote', 'ffz-emote']),\n  ),\n  R.groupBy<any>(R.prop('type')),\n  R.map(\n    R.pipe<any, any, any>(\n      R.groupBy<any>(R.prop('id')),\n      R.map((items: any) => ({\n        type: items[0].type,\n        id: items[0].id,\n        lastUpdatedAt: Date.now(),\n        uses: items.length,\n      })),\n    ),\n  ),\n);\n\nconst mergeFn = (key: string, left: any, right: any) =>\n  key === 'uses' ? left + right : right;\n\nexport const writeEmotesUsageStatistic = (entries: MessageEntity[]) => {\n  const statistic = getUsageStatisticFromEntities(entries) as Partial<\n    EmotesUsageStatistic\n  >;\n\n  if (R.isEmpty(statistic)) return;\n\n  const history = readEmotesUsageStatistic();\n\n  const newHistory = R.mergeDeepWithKey(mergeFn, history, statistic);\n\n  localStorage.setItem(LS_EMOTES_USAGE_STATISTIC, JSON.stringify(newHistory));\n};\n\nconst normalizeHistory = R.pipe<any, any, any, any, UsageItem[]>(\n  R.values,\n  R.map(R.values),\n  R.flatten,\n  R.sortWith([R.descend(R.prop('uses')), R.descend(R.prop('lastUpdatedAt'))]),\n);\n\nexport const getEmotesFromUsageStatistic = (\n  emotes: StateEmotes,\n  limit = 27,\n) => {\n  if (!emotes) return [];\n\n  const result: htmlEntity.Emote[] = [];\n  const history = R.pipe(readEmotesUsageStatistic, normalizeHistory)();\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const item of history) {\n    if (result.length === limit) return result;\n\n    let emoteEntity = null;\n\n    if (item.type === 'twitch-emote') {\n      emoteEntity = findEmote.twitch.byId(item.id, emotes);\n    }\n\n    if (item.type === 'bttv-emote') {\n      emoteEntity = findEmote.bttv.byId(item.id, emotes);\n    }\n\n    if (item.type === 'ffz-emote') {\n      emoteEntity = findEmote.ffz.byId(item.id, emotes);\n    }\n\n    if (emoteEntity) {\n      result.push(emoteEntity);\n    }\n  }\n\n  return result;\n};\n","import type { RootState } from 'app/rootReducer';\nimport assertNever from 'utils/assertNever';\nimport type { MessageCardInfo } from 'features/messages/messagesSlice';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const messageCardSelector = (\n  card: Omit<MessageCardInfo, 'url'> | null,\n) => (state: RootState) => {\n  if (!card) return null;\n\n  if (card.type === 'twitch-clip') {\n    return state.messageCards.twitchClips[card.id];\n  }\n\n  if (card.type === 'twitch-video') {\n    return state.messageCards.twitchVideos[card.id];\n  }\n\n  if (card.type === 'youtube-video') {\n    return state.messageCards.youtubeVideos[card.id];\n  }\n\n  return assertNever(card.type);\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchResult } from 'utils/types';\nimport { parseBlockedUsers } from 'features/chat/utils/parseApiResponse';\n\ntype BlockedUsersState = FetchResult<string[]>;\n\nconst initialState: BlockedUsersState = {\n  status: 'idle',\n  error: {},\n  items: [],\n};\n\nexport const fetchBlockedUsers = createAsyncThunk(\n  'chat/fetchBlockedUsers',\n  (userId: string) => api.fetchBlockedUsers(userId),\n);\n\nconst blockedUsers = createSlice({\n  name: 'blockedUsers',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchBlockedUsers.pending, (state) => {\n      state.status = 'loading';\n      state.error = {};\n    });\n\n    builder.addCase(fetchBlockedUsers.fulfilled, (state, { payload }) => {\n      state.status = 'success';\n      state.items = parseBlockedUsers(payload);\n    });\n\n    builder.addCase(fetchBlockedUsers.rejected, (state, { error }) => {\n      state.status = 'error';\n      state.error = error;\n    });\n  },\n});\n\nexport default blockedUsers.reducer;\n","// https://regex101.com/r/cpaNXh/1\nconst isStartsWithProtocolRegex = /^(?:(?:[a-z]+:)?\\/\\/)/;\n\nconst normalizeHref = (href: string) =>\n  isStartsWithProtocolRegex.test(href) ? href : `//${href}`;\n\nexport default normalizeHref;\n","import * as R from 'ramda';\nimport type twitchIrc from 'twitch-simple-irc';\n\nimport * as api from 'api';\nimport normalizeHref from 'utils/normalizeHref';\nimport { TWITCH_EMOTES_CDN, BTTV_EMOTES_CDN } from 'utils/constants';\n\nexport type TwitchEmote = {\n  type: 'twitch-emote';\n  id: number;\n  alt: string;\n  src: string;\n  srcSet: string;\n};\nexport type BttvEmote = {\n  type: 'bttv-emote';\n  id: string;\n  alt: string;\n  src: string;\n  srcSet: string;\n};\nexport type FfzEmote = {\n  type: 'ffz-emote';\n  id: number;\n  alt: string;\n  src: string;\n  srcSet: string;\n};\nexport type Emoji = {\n  type: 'emoji';\n  alt: string;\n  src: string;\n  srcSet?: string;\n};\nexport type Mention = {\n  type: 'mention';\n  text: string;\n  target: string;\n};\nexport type Link = {\n  type: 'link';\n  text: string;\n  href: string;\n};\nexport type Badge = {\n  alt: string;\n  label: string;\n  src: string;\n  srcSet: string;\n};\n\nexport type Emote = TwitchEmote | BttvEmote | FfzEmote | Emoji;\n\n// prettier-ignore\nexport const regexEmotesMap: Record<string, string> = {\n  '[oO](_|\\\\.)[oO]': 'O_o',\n  '\\\\&gt\\\\;\\\\(':     '>(',\n  '\\\\&lt\\\\;3':       '<3',\n  '\\\\:-?(o|O)':      ':O',\n  '\\\\:-?(p|P)':      ':P',\n  '\\\\:-?[\\\\\\\\/]':    ':/',\n  '\\\\:-?[z|Z|\\\\|]':  ':Z',\n  '\\\\:-?\\\\(':        ':(',\n  '\\\\:-?\\\\)':        ':)',\n  '\\\\:-?D':          ':D',\n  '\\\\;-?(p|P)':      ';P',\n  '\\\\;-?\\\\)':        ';)',\n  'R-?\\\\)':          'R)',\n  'B-?\\\\)':          'B)',\n};\n\nexport const getFfzSrcSet = R.pipe<any, [string, string][], string[], string>(\n  R.toPairs,\n  R.map(([dpi, url]) => `${url} ${dpi}x`),\n  R.join(', '),\n);\n\nexport const createTwitchEmote = ({\n  id,\n  code,\n}: api.TwitchEmote): TwitchEmote => ({\n  type: 'twitch-emote',\n  id,\n  alt: regexEmotesMap[code] || code,\n  src: `${TWITCH_EMOTES_CDN}/${id}/1.0`,\n  srcSet: `${TWITCH_EMOTES_CDN}/${id}/1.0 1x, ${TWITCH_EMOTES_CDN}/${id}/2.0 2x, ${TWITCH_EMOTES_CDN}/${id}/3.0 4x`,\n});\n\nexport const createBttvEmote = ({\n  id,\n  code,\n}: api.BttvGlobalEmote | api.BttvChannelEmote): BttvEmote => ({\n  type: 'bttv-emote',\n  id,\n  alt: code,\n  src: `${BTTV_EMOTES_CDN}/${id}/1x`,\n  srcSet: `${BTTV_EMOTES_CDN}/${id}/2x 2x, ${BTTV_EMOTES_CDN}/${id}/3x 4x`,\n});\n\nexport const createFfzEmote = ({ id, name, urls }: api.FfzEmote): FfzEmote => ({\n  type: 'ffz-emote',\n  id,\n  alt: name,\n  src: urls[1],\n  srcSet: getFfzSrcSet(urls),\n});\n\nexport const createEmoji = ({\n  short,\n  unified,\n}: {\n  short: string;\n  unified: string;\n}): Emoji => ({\n  type: 'emoji',\n  alt: `:${short}:`,\n  src: `//twemoji.maxcdn.com/v/latest/72x72/${unified}.png`,\n});\n\nexport const createMention = (text: string, target: string): Mention => ({\n  type: 'mention',\n  text,\n  target,\n});\n\nexport const createLink = (href: string): Link => ({\n  type: 'link',\n  text: href,\n  href: normalizeHref(href),\n});\n\nexport const createBadge = ({\n  title,\n  description,\n  image_url_1x: imageUrl1x,\n  image_url_2x: imageUrl2x,\n  image_url_4x: imageUrl4x,\n}: api.TwitchBadgeVersion): Badge => ({\n  alt: title,\n  label: description,\n  src: imageUrl1x,\n  srcSet: `${imageUrl1x} 1x, ${imageUrl2x} 2x, ${imageUrl4x} 4x`,\n});\n\nexport const createBadges = (\n  badges: twitchIrc.Badges,\n  globalBadges: Record<string, api.TwitchBadge>,\n  channelBadges: Record<string, api.TwitchBadge>,\n): Badge[] => {\n  const mapBadges = ([name, version]: [string, string]): Badge | false => {\n    const badge =\n      channelBadges[name]?.versions[version] ||\n      globalBadges[name]?.versions[version];\n\n    return badge ? createBadge(badge) : false;\n  };\n\n  return R.pipe<any, [string, string][], any[], any[]>(\n    R.toPairs,\n    R.map(mapBadges),\n    R.filter(Boolean),\n  )(badges);\n};\n","import type { RootState } from 'app/rootReducer';\n\nexport const currentChannelSelector = (state: RootState) =>\n  state.chat.currentChannel;\n\nexport const isConnectedSelector = (state: RootState) => state.chat.isConnected;\n\nexport const currentChannelIdSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.room?.roomId ||\n  '';\n\nexport const userColorSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user?.color ||\n  '';\n\nexport const userDisplayNameSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user\n    ?.displayName || '';\n\nexport const userBadgesSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user?.badges ||\n  {};\n","import type { RootState } from 'app/rootReducer';\n\nexport const isAuthReadySelector = (state: RootState) =>\n  state.auth.status !== 'idle' && state.auth.status !== 'loading';\n\nexport const isAuthSelector = (state: RootState) =>\n  state.auth.status === 'success';\n\nexport const userLoginSelector = (state: RootState) => state.auth.userLogin;\n\nexport const userIdSelector = (state: RootState) => state.auth.userId;\n","import { API_REQUESTS_TIMEOUT } from 'utils/constants';\n\nexport interface FetchRequestOptions extends RequestInit {\n  timeout?: number;\n}\n\nconst fetchRequest = async (\n  url: string,\n  { timeout, ...restOptions }: FetchRequestOptions = {},\n) => {\n  let options = { ...restOptions };\n  const fetchTimeout = timeout || API_REQUESTS_TIMEOUT;\n\n  if (fetchTimeout) {\n    const controller = new AbortController();\n\n    options = { ...options, signal: controller.signal };\n\n    setTimeout(() => controller.abort(), fetchTimeout);\n  }\n\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  const body = await response.json();\n\n  return body;\n};\n\nexport default fetchRequest;\n","import { LS_ACCESS_TOKEN } from 'utils/constants';\nimport fetchRequest from 'utils/fetchRequest';\nimport type { FetchRequestOptions } from 'utils/fetchRequest';\n\nconst TWITCH_API_HELIX = 'https://api.twitch.tv/helix';\nconst TWITCH_API_KRAKEN = 'https://api.twitch.tv/kraken';\n\nconst getHelixHeaders = () => ({\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `Bearer ${localStorage.getItem(LS_ACCESS_TOKEN)}`,\n});\n\nconst getKrakenHeaders = () => ({\n  Accept: 'application/vnd.twitchtv.v5+json',\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `OAuth ${localStorage.getItem(LS_ACCESS_TOKEN)}`,\n});\n\nconst apiRequestHelix = (url: string, options?: FetchRequestOptions) =>\n  fetchRequest(`${TWITCH_API_HELIX}${url}`, {\n    ...options,\n    headers: getHelixHeaders(),\n  } as FetchRequestOptions);\n\nconst apiRequestKraken = (url: string, options?: FetchRequestOptions) =>\n  fetchRequest(`${TWITCH_API_KRAKEN}${url}`, {\n    ...options,\n    headers: getKrakenHeaders(),\n  } as FetchRequestOptions);\n\nexport interface TwitchUser {\n  id: string;\n  login: string;\n  display_name: string;\n  type: string;\n  broadcaster_type: string;\n  description: string;\n  profile_image_url: string;\n  offline_image_url: string;\n  view_count: number;\n}\n\nexport interface TwitchUsersResponse {\n  data: TwitchUser[];\n}\n\nexport interface TwitchEmote {\n  id: number;\n  code: string;\n}\n\nexport interface TwitchEmotesResponse {\n  emoticon_sets: Record<string, TwitchEmote[]>;\n}\n\nexport interface TwitchBadgeVersion {\n  image_url_1x: string;\n  image_url_2x: string;\n  image_url_4x: string;\n  description: string;\n  title: string;\n  click_action: string;\n  click_url: string;\n  last_updated: null;\n}\n\nexport interface TwitchBadge {\n  versions: Record<string, TwitchBadgeVersion>;\n}\n\nexport interface TwitchBadgesResponse {\n  badge_sets: Record<string, TwitchBadge>;\n}\n\nexport interface TwitchBlockedUser {\n  display_name: string;\n  _id: string;\n  name: string;\n  type: string;\n  bio: string | null;\n  created_at: string;\n  updated_at: string;\n  logo: string;\n}\n\nexport interface TwitchBlockedUsersResponse {\n  _total: number;\n  blocks: {\n    user: TwitchBlockedUser;\n  }[];\n}\n\ninterface TwitchClipData {\n  id: string;\n  url: string;\n  embed_url: string;\n  broadcaster_id: string;\n  broadcaster_name: string;\n  creator_id: string;\n  creator_name: string;\n  video_id: string;\n  game_id: string;\n  language: string;\n  title: string;\n  view_count: number;\n  created_at: string;\n  thumbnail_url: string;\n}\n\nexport interface TwitchClipResponse {\n  data: TwitchClipData[];\n  pagination: {};\n}\n\ninterface TwitchVideoData {\n  id: string;\n  user_id: string;\n  user_name: string;\n  title: string;\n  description: string;\n  created_at: string;\n  published_at: string;\n  url: string;\n  thumbnail_url: string;\n  viewable: 'public' | 'private';\n  view_count: number;\n  language: string;\n  type: 'upload' | 'archive' | 'highlight';\n  duration: string;\n}\n\nexport interface TwitchVideoResponse {\n  data: TwitchVideoData[];\n  pagination: {};\n}\n\nexport const fetchUser = (userId: string): Promise<TwitchUsersResponse> =>\n  apiRequestHelix(`/users?id=${userId}`);\n\nexport const fetchTwitchEmotes = (\n  userId: string,\n): Promise<TwitchEmotesResponse> => apiRequestKraken(`/users/${userId}/emotes`);\n\nexport const fetchGlobalBadges = (\n  language = 'en',\n): Promise<TwitchBadgesResponse> =>\n  fetchRequest(\n    `https://badges.twitch.tv/v1/badges/global/display?language=${language}`,\n  );\n\nexport const fetchChannelBadges = (\n  channelId: string,\n  language = 'en',\n): Promise<TwitchBadgesResponse> =>\n  fetchRequest(\n    `https://badges.twitch.tv/v1/badges/channels/${channelId}/display?language=${language}`,\n  );\n\nexport const fetchBlockedUsers = (\n  userId: string,\n): Promise<TwitchBlockedUsersResponse> =>\n  apiRequestKraken(`/users/${userId}/blocks`);\n\nexport const fetchTwitchClip = (id: string): Promise<TwitchClipResponse> =>\n  apiRequestHelix(`/clips?id=${id}`);\n\nexport const fetchTwitchVideo = (id: string): Promise<TwitchVideoResponse> =>\n  apiRequestHelix(`/videos?id=${id}`);\n","import fetchRequest from 'utils/fetchRequest';\n\nexport interface BttvEmote {\n  id: string;\n  code: string;\n  imageType: 'png' | 'gif';\n}\n\nexport interface BttvGlobalEmote extends BttvEmote {\n  userId: string;\n}\n\nexport interface BttvChannelEmote extends BttvEmote {\n  user: {\n    id: string;\n    name: string;\n    displayName: string;\n    providerId: string;\n  };\n}\n\nexport type BttvGlobalEmotesResponse = BttvGlobalEmote[];\n\nexport interface BttvChannelEmotesResponse {\n  id: string;\n  bots: string[];\n  channelEmotes: BttvChannelEmote[];\n  sharedEmotes: BttvChannelEmote[];\n}\n\nexport const fetchBttvGlobalEmotes = (): Promise<BttvGlobalEmotesResponse> =>\n  fetchRequest('https://api.betterttv.net/3/cached/emotes/global');\n\nexport const fetchBttvChannelEmotes = (\n  channelId: string,\n): Promise<BttvChannelEmotesResponse> =>\n  fetchRequest(`https://api.betterttv.net/3/cached/users/twitch/${channelId}`);\n","import fetchRequest from 'utils/fetchRequest';\n\nexport interface FfzEmote {\n  css: null;\n  height: number;\n  hidden: boolean;\n  id: number;\n  margins: null;\n  modifier: boolean;\n  name: string;\n  offset: null;\n  owner: {\n    _id: number;\n    display_name: string;\n    name: string;\n  };\n  public: boolean;\n  urls: {\n    '1': string;\n    '2'?: string;\n    '4'?: string;\n  };\n  width: number;\n}\n\ninterface FfzEmoteSet {\n  _type: number;\n  css: null;\n  description: null;\n  emoticons: FfzEmote[];\n  icon: null;\n  id: number;\n  title: string;\n}\n\nexport interface FfzGlobalEmotesResponse {\n  default_sets: number[];\n  sets: Record<string, FfzEmoteSet>;\n  users: Record<string, string[]>;\n}\n\nexport interface FfzChannelEmotesResponse {\n  room: {\n    _id: number;\n    css: null;\n    display_name: string;\n    id: string;\n    is_group: boolean;\n    mod_urls: null;\n    moderator_badge: null;\n    set: number;\n    twitch_id: number;\n    user_badges: {};\n  };\n  sets: Record<string, FfzEmoteSet>;\n}\n\nexport const fetchFfzGlobalEmotes = (): Promise<FfzGlobalEmotesResponse> =>\n  fetchRequest('https://api.frankerfacez.com/v1/set/global');\n\nexport const fetchFfzChannelEmotes = (\n  channelId: string,\n): Promise<FfzChannelEmotesResponse> =>\n  fetchRequest(`https://api.frankerfacez.com/v1/room/id/${channelId}`);\n","import fetchRequest from 'utils/fetchRequest';\n\nexport interface ChatHistoryResponse {\n  messages: string[];\n  error: null;\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport const fetchChatHistory = (\n  channel: string,\n): Promise<ChatHistoryResponse> =>\n  fetchRequest(\n    `https://recent-messages.robotty.de/api/v2/recent-messages/${channel}?clearchatToNotice=true`,\n  );\n","import fetchRequest from 'utils/fetchRequest';\n\nconst YOUTUBE_API_BASE = 'https://www.googleapis.com/youtube/v3';\n\ninterface YoutubeThumbnail {\n  url: string;\n  width: number;\n  height: number;\n}\n\ninterface YoutubeVideoItem {\n  kind: string;\n  etag: string;\n  id: string;\n  snippet: {\n    publishedAt: string;\n    channelId: string;\n    title: string;\n    description: string;\n    thumbnails: {\n      default: YoutubeThumbnail;\n      medium: YoutubeThumbnail;\n      high: YoutubeThumbnail;\n      standard: YoutubeThumbnail;\n      maxres: YoutubeThumbnail;\n    };\n    channelTitle: string;\n    tags: string[];\n    categoryId: string;\n    liveBroadcastContent: string;\n    defaultLanguage: string;\n    localized: {\n      title: string;\n      description: string;\n    };\n    defaultAudioLanguage: string;\n  };\n}\n\nexport interface YoutubeVideoResponse {\n  kind: string;\n  etag: string;\n  items: YoutubeVideoItem[];\n  pageInfo: {\n    totalResults: number;\n    resultsPerPage: number;\n  };\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport const fetchYoutubeVideo = (id: string): Promise<YoutubeVideoResponse> =>\n  fetchRequest(\n    `${YOUTUBE_API_BASE}/videos?part=snippet&id=${id}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`,\n  );\n","module.exports = __webpack_public_path__ + \"static/media/ts-tink.4251bf04.ogg\";","import * as R from 'ramda';\n\nimport * as api from 'api';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport type { EmotesByText } from 'features/emotes/utils/getEmotesByText';\nimport emojisMap from 'features/emotes/emojisMap.json';\n\n// by id\n\nconst findTwitchEmoteByIdInSets = (\n  id: number,\n  sets: Record<string, api.TwitchEmote[]>,\n) => {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const set of Object.values(sets)) {\n    const result = R.find(R.propEq('id', id), set);\n\n    if (result) return htmlEntity.createTwitchEmote(result);\n  }\n\n  return null;\n};\n\nconst findTwitchEmoteById = (\n  id: number,\n  { twitchGlobal, twitchUser }: NonNullable<StateEmotes>,\n) =>\n  findTwitchEmoteByIdInSets(id, twitchGlobal) ||\n  findTwitchEmoteByIdInSets(id, twitchUser);\n\nconst findBttvEmoteById = (\n  id: string,\n  { bttvGlobal, bttvChannel }: NonNullable<StateEmotes>,\n) => {\n  const findById = R.find<api.BttvGlobalEmote | api.BttvChannelEmote>(\n    R.propEq('id', id),\n  );\n  const result = findById(bttvGlobal) || findById(bttvChannel);\n\n  return result ? htmlEntity.createBttvEmote(result) : null;\n};\n\nconst findFfzEmoteById = (\n  id: number,\n  { ffzGlobal, ffzChannel }: NonNullable<StateEmotes>,\n) => {\n  const findById = R.find<api.FfzEmote>(R.propEq('id', id));\n  const result = findById(ffzGlobal) || findById(ffzChannel);\n\n  return result ? htmlEntity.createFfzEmote(result) : null;\n};\n\nconst findEmojiByChar = (char: string) => {\n  const result = R.find(R.propEq('char', char), Object.values(emojisMap));\n\n  return result ? htmlEntity.createEmoji(result) : null;\n};\n\n// by name\n\nconst emotesMap: Record<string, string[]> = {\n  555555557: [':-)', ':)'],\n  555555559: [':-(', ':('],\n  555555561: [':-D', ':D'],\n  555555562: ['>('],\n  555555568: [':-z', ':-Z', ':-|', ':z', ':Z', ':|'],\n  555555576: ['o_o', 'O_o', 'O_O', 'o_O', 'o.o', 'O.o', 'O.O', 'o.O'],\n  555555579: ['B-)', 'B)'],\n  555555583: [':-o', ':-O', ':o', ':O'],\n  555555584: ['<3'],\n  555555588: [':-\\\\', ':-/', ':\\\\', ':/'],\n  555555590: [';-\\\\', ';\\\\'],\n  555555594: [':-p', ':-P', ':p', ':P'],\n  555555598: [';-p', ';-P', ';p', ';P'],\n  555555600: ['R-)', 'R)'],\n};\n\nconst findTwitchEmoteByNameInSets = (\n  name: string,\n  sets: Record<string, api.TwitchEmote[]>,\n) => {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const set of Object.values(sets)) {\n    const result = R.find(\n      ({ id, code }) =>\n        emotesMap[id] ? emotesMap[id].includes(name) : name === code,\n      set,\n    );\n\n    if (result) return htmlEntity.createTwitchEmote(result);\n  }\n\n  return null;\n};\n\nconst findTwitchEmoteByName = (\n  name: string,\n  { twitchGlobal, twitchUser }: NonNullable<StateEmotes>,\n) =>\n  findTwitchEmoteByNameInSets(name, twitchGlobal) ||\n  findTwitchEmoteByNameInSets(name, twitchUser);\n\nconst findBttvEmoteByName = (\n  name: string,\n  { bttvGlobal, bttvChannel }: NonNullable<StateEmotes>,\n) => {\n  const findByName = R.find<api.BttvGlobalEmote | api.BttvChannelEmote>(\n    R.propEq('code', name),\n  );\n  const result = findByName(bttvGlobal) || findByName(bttvChannel);\n\n  return result ? htmlEntity.createBttvEmote(result) : null;\n};\n\nconst findFfzEmoteByName = (\n  name: string,\n  { ffzGlobal, ffzChannel }: NonNullable<StateEmotes>,\n) => {\n  const findByName = R.find<api.FfzEmote>(R.propEq('name', name));\n  const result = findByName(ffzGlobal) || findByName(ffzChannel);\n\n  return result ? htmlEntity.createFfzEmote(result) : null;\n};\n\n// by text\n\n/* eslint-disable no-restricted-syntax */\nconst findTwitchEmotesByText = (\n  result: EmotesByText,\n  sets: Record<string, api.TwitchEmote[]>,\n  text: string,\n  limit: number,\n) => {\n  for (const items of Object.values(sets)) {\n    for (const emote of items) {\n      if (result.begins.length + result.contains.length === limit) return true;\n\n      const index = emote.code.toLowerCase().indexOf(text);\n\n      if (index !== -1) {\n        const type = index === 0 ? 'begins' : 'contains';\n\n        result[type].push(htmlEntity.createTwitchEmote(emote));\n      }\n    }\n  }\n\n  return false;\n};\n\nconst findBttvEmotesByText = (\n  result: EmotesByText,\n  bttv: api.BttvGlobalEmote[] | api.BttvChannelEmote[],\n  text: string,\n  limit: number,\n) => {\n  for (const emote of bttv) {\n    if (result.begins.length + result.contains.length === limit) return true;\n\n    const index = emote.code.toLowerCase().indexOf(text);\n\n    if (index !== -1) {\n      const type = index === 0 ? 'begins' : 'contains';\n\n      result[type].push(htmlEntity.createBttvEmote(emote));\n    }\n  }\n\n  return false;\n};\n\nconst findFfzEmotesByText = (\n  result: EmotesByText,\n  ffz: api.FfzEmote[],\n  text: string,\n  limit: number,\n) => {\n  for (const emote of ffz) {\n    if (result.begins.length + result.contains.length === limit) return true;\n\n    const index = emote.name.toLowerCase().indexOf(text);\n\n    if (index !== -1) {\n      const type = index === 0 ? 'begins' : 'contains';\n\n      result[type].push(htmlEntity.createFfzEmote(emote));\n    }\n  }\n\n  return false;\n};\n\nconst findEmojisByText = (\n  result: EmotesByText,\n  text: string,\n  limit: number,\n) => {\n  for (const emoji of Object.values(emojisMap)) {\n    if (result.begins.length + result.contains.length === limit) return true;\n\n    const { short, keywords } = emoji;\n\n    let index = short.toLowerCase().indexOf(text);\n\n    if (index !== -1) {\n      const type = index === 0 ? 'begins' : 'contains';\n      const emojiEntity = htmlEntity.createEmoji(emoji);\n\n      result[type].push(emojiEntity);\n\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    for (const keyword of keywords) {\n      index = keyword.toLowerCase().indexOf(text);\n\n      if (index !== -1) {\n        const emojiEntity = htmlEntity.createEmoji(emoji);\n\n        result.contains.push(emojiEntity);\n\n        break;\n      }\n    }\n  }\n\n  return false;\n};\n/* eslint-enable no-restricted-syntax */\n\nconst findEmote = {\n  twitch: {\n    byId: findTwitchEmoteById,\n    byName: findTwitchEmoteByName,\n    byText: findTwitchEmotesByText,\n  },\n  bttv: {\n    byId: findBttvEmoteById,\n    byName: findBttvEmoteByName,\n    byText: findBttvEmotesByText,\n  },\n  ffz: {\n    byId: findFfzEmoteById,\n    byName: findFfzEmoteByName,\n    byText: findFfzEmotesByText,\n  },\n  emoji: {\n    byChar: findEmojiByChar,\n    byText: findEmojisByText,\n  },\n};\n\nexport default findEmote;\n","import * as R from 'ramda';\nimport { createSelector } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport getEmotesByText from 'features/emotes/utils/getEmotesByText';\nimport { getEmotesFromUsageStatistic } from 'features/emotes/utils/emotesUsageStatistic';\n\nexport type EmoteCategory = {\n  title?: string;\n  items: htmlEntity.Emote[];\n};\n\nconst getTwitchUserEmoteCategories = R.pipe<\n  Record<string, api.TwitchEmote[]>,\n  api.TwitchEmote[][],\n  EmoteCategory[]\n>(\n  R.values,\n  R.map((items) => ({ items: R.map(htmlEntity.createTwitchEmote, items) })),\n);\n\nconst createMainEmoteCategories = (emotes: StateEmotes) => {\n  if (!emotes) return [];\n\n  const {\n    twitchGlobal,\n    twitchUser,\n    bttvGlobal,\n    bttvChannel,\n    ffzGlobal,\n    ffzChannel,\n  } = emotes;\n\n  return [\n    {\n      title: 'BetterTTV Channel Emotes',\n      items: bttvChannel.map(htmlEntity.createBttvEmote),\n    },\n    {\n      title: 'FrankerFaceZ Channel Emotes',\n      items: ffzChannel.map(htmlEntity.createFfzEmote),\n    },\n    ...getTwitchUserEmoteCategories(twitchUser),\n    {\n      title: 'Twitch',\n      items: R.map(\n        htmlEntity.createTwitchEmote,\n        R.propOr([], '0', twitchGlobal),\n      ),\n    },\n    {\n      title: 'BetterTTV',\n      items: bttvGlobal.map(htmlEntity.createBttvEmote),\n    },\n    {\n      title: 'FrankerFaceZ',\n      items: ffzGlobal.map(htmlEntity.createFfzEmote),\n    },\n  ].filter(R.path(['items', 'length'])) as EmoteCategory[];\n};\n\nconst getMainEmoteCategories = createSelector(\n  (emotes: StateEmotes) => emotes,\n  createMainEmoteCategories,\n);\n\nconst createEmoteCategories = (emotes: StateEmotes, text: string) => {\n  if (!emotes) return [];\n\n  if (text) {\n    const items = getEmotesByText(text, emotes);\n    const title = `${items.length ? '' : 'No '}Search Results for \"${text}\"`;\n\n    return [{ title, items }];\n  }\n\n  const mainEmoteCategories = getMainEmoteCategories(emotes);\n  const frequentlyUsed = getEmotesFromUsageStatistic(emotes);\n\n  if (!frequentlyUsed.length) {\n    return mainEmoteCategories;\n  }\n\n  const frequentlyUsedCategory = {\n    title: 'Frequently Used',\n    items: frequentlyUsed,\n  };\n\n  return [frequentlyUsedCategory, ...mainEmoteCategories] as EmoteCategory[];\n};\n\nexport default createEmoteCategories;\n","import * as R from 'ramda';\nimport { createSelector } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { RootState } from 'app/rootReducer';\nimport { currentChannelSelector } from 'features/chat/chatSelectors';\nimport createEmoteCategories from 'features/emotes/utils/createEmoteCategories';\n\nexport type StateEmotes = {\n  twitchGlobal: Record<string, api.TwitchEmote[]>;\n  twitchUser: Record<string, api.TwitchEmote[]>;\n  bttvGlobal: api.BttvGlobalEmote[];\n  bttvChannel: api.BttvChannelEmote[];\n  ffzGlobal: api.FfzEmote[];\n  ffzChannel: api.FfzEmote[];\n} | null;\n\n// emotes isLoaded\nexport const isTwitchEmotesLoadedSelector = (state: RootState) =>\n  state.emotes.twitch.status === 'success' ||\n  state.emotes.twitch.status === 'error';\n\nexport const isBttvGlobalEmotesLoadedSelector = (state: RootState) =>\n  state.emotes.bttv.global.status === 'success' ||\n  state.emotes.bttv.global.status === 'error';\n\nexport const isBttvChannelEmotesLoadedSelector = (state: RootState) => {\n  const currentChannel = currentChannelSelector(state);\n\n  return (\n    state.emotes.bttv.byChannels[currentChannel]?.status === 'success' ||\n    state.emotes.bttv.byChannels[currentChannel]?.status === 'error' ||\n    false\n  );\n};\n\nexport const isBttvEmotesLoadedSelector = (state: RootState) =>\n  isBttvGlobalEmotesLoadedSelector(state) &&\n  isBttvChannelEmotesLoadedSelector(state);\n\nexport const isFfzGlobalEmotesLoadedSelector = (state: RootState) =>\n  state.emotes.ffz.global.status === 'success' ||\n  state.emotes.ffz.global.status === 'error';\n\nexport const isFfzChannelEmotesLoadedSelector = (state: RootState) => {\n  const currentChannel = currentChannelSelector(state);\n\n  return (\n    state.emotes.ffz.byChannels[currentChannel]?.status === 'success' ||\n    state.emotes.ffz.byChannels[currentChannel]?.status === 'error' ||\n    false\n  );\n};\n\nexport const isFfzEmotesLoadedSelector = (state: RootState) =>\n  isFfzGlobalEmotesLoadedSelector(state) &&\n  isFfzChannelEmotesLoadedSelector(state);\n\nexport const isEmotesLoadedSelector = (state: RootState) =>\n  isTwitchEmotesLoadedSelector(state) &&\n  isBttvGlobalEmotesLoadedSelector(state) &&\n  isBttvChannelEmotesLoadedSelector(state) &&\n  isFfzGlobalEmotesLoadedSelector(state) &&\n  isFfzChannelEmotesLoadedSelector(state);\n\n// emotes\nconst twitchEmotesSelector = (state: RootState) => state.emotes.twitch.items;\nconst twitchGlobalEmotesSelector = createSelector(\n  twitchEmotesSelector,\n  R.pick(['0']),\n);\nconst twitchUserEmotesSelector = createSelector(\n  twitchEmotesSelector,\n  R.omit(['0']),\n);\n\nconst bttvGlobalEmotesSelector = (state: RootState) =>\n  state.emotes.bttv.global.items;\nconst bttvChannelEmotesSelector = (state: RootState) =>\n  state.emotes.bttv.byChannels[currentChannelSelector(state)]?.items || [];\n\nconst ffzGlobalEmotesSelector = (state: RootState) =>\n  state.emotes.ffz.global.items;\nconst ffzChannelEmotesSelector = (state: RootState) =>\n  state.emotes.ffz.byChannels[currentChannelSelector(state)]?.items || [];\n\nexport const emotesSelector = createSelector(\n  isEmotesLoadedSelector,\n  twitchGlobalEmotesSelector,\n  twitchUserEmotesSelector,\n  bttvGlobalEmotesSelector,\n  bttvChannelEmotesSelector,\n  ffzGlobalEmotesSelector,\n  ffzChannelEmotesSelector,\n  (\n    isEmotesLoaded,\n    twitchGlobal,\n    twitchUser,\n    bttvGlobal,\n    bttvChannel,\n    ffzGlobal,\n    ffzChannel,\n  ) => {\n    if (!isEmotesLoaded) return null;\n\n    return {\n      twitchGlobal,\n      twitchUser,\n      bttvGlobal,\n      bttvChannel,\n      ffzGlobal,\n      ffzChannel,\n    } as StateEmotes;\n  },\n);\n\nexport const emoteCategoriesSelector = (state: RootState, search: string) => {\n  const emotes = emotesSelector(state);\n\n  return createEmoteCategories(emotes, search);\n};\n","import * as R from 'ramda';\nimport { format } from 'date-fns/fp';\n\nimport * as api from 'api';\n\nexport const parseTwitchEmotes = R.prop('emoticon_sets');\n\nexport const parseBttvGlobalEmotes = (\n  data: api.BttvGlobalEmotesResponse,\n): api.BttvGlobalEmote[] => data;\n\nexport const parseBttvChannelEmotes = (\n  data: api.BttvChannelEmotesResponse,\n): api.BttvChannelEmote[] => [...data.channelEmotes, ...data.sharedEmotes];\n\nexport const parseFfzGlobalEmotes = ({\n  default_sets: defaultSets,\n  sets,\n}: api.FfzGlobalEmotesResponse): api.FfzEmote[] =>\n  R.pipe<any, any, any, any, api.FfzEmote[]>(\n    R.pick((defaultSets as unknown) as string[]),\n    R.values,\n    R.map(R.propOr([], 'emoticons')),\n    R.flatten,\n  )(sets);\n\nexport const parseFfzChannelEmotes: (\n  data: api.FfzChannelEmotesResponse,\n) => api.FfzEmote[] = R.pipe(\n  R.pathOr({}, ['sets']),\n  R.values,\n  R.map(R.pathOr([], ['emoticons'])),\n  R.flatten,\n);\n\nexport const parseBlockedUsers = R.pipe<\n  api.TwitchBlockedUsersResponse,\n  {}[],\n  string[]\n>(R.prop('blocks'), R.map<any, any>(R.path(['user', 'name'])));\n\nexport const parseBadges = R.prop('badge_sets');\n\n// TODO: if message card was loaded, the second message with different timing doesn't work\n\nexport const parseTwitchClip = ({ data }: api.TwitchClipResponse) => {\n  if (data.length === 0) return null;\n\n  const {\n    id,\n    thumbnail_url: thumbnailUrl,\n    title,\n    creator_name: creatorName,\n  } = data[0];\n\n  const x1 = thumbnailUrl.replace('480x272', '86x45');\n  const x2 = thumbnailUrl.replace('480x272', '260x147');\n\n  return {\n    id,\n    src: x1,\n    srcSet: `${x1} 1x, ${x2} 2x`,\n    title,\n    description: `Clipped by ${creatorName}`,\n  };\n};\n\nexport const parseTwitchVideo = ({ data }: api.TwitchVideoResponse) => {\n  if (data.length === 0) return null;\n\n  const {\n    id,\n    thumbnail_url: thumbnailUrl,\n    title,\n    user_name: userName,\n    published_at: publishedAt,\n  } = data[0];\n\n  const date = format('PP', new Date(publishedAt));\n\n  const thumbnailReplace = '%{width}x%{height}';\n\n  const x1 = thumbnailUrl.replace(thumbnailReplace, '80x45');\n  const x2 = thumbnailUrl.replace(thumbnailReplace, '160x90');\n  const x4 = thumbnailUrl.replace(thumbnailReplace, '320x180');\n\n  return {\n    id,\n    src: x1,\n    srcSet: `${x1} 1x, ${x2} 2x, ${x4} 4x`,\n    title,\n    description: `${date} · ${userName}`,\n  };\n};\n\nexport const parseYoutubeVideo = ({ items }: api.YoutubeVideoResponse) => {\n  if (items.length === 0) return null;\n\n  const {\n    id,\n    snippet: {\n      title,\n      publishedAt,\n      channelTitle,\n      thumbnails: {\n        default: { url: x1 },\n        medium: { url: x2 },\n        high: { url: x4 },\n      },\n    },\n  } = items[0];\n\n  const date = format('PP', new Date(publishedAt));\n\n  return {\n    id,\n    src: x1,\n    srcSet: `${x1} 1x, ${x2} 2x, ${x4} 4x`,\n    title,\n    description: `${date} · ${channelTitle}`,\n  };\n};\n","import type { RootState } from 'app/rootReducer';\n\ntype OptionItem = {\n  type: 'switch' | 'input';\n  id: string;\n  name: string;\n  title: string;\n  description: string;\n  value: boolean | string;\n};\n\ntype OptionCategories = {\n  title: string;\n  items: OptionItem[];\n};\n\nexport const optionsSelector = (state: RootState): OptionCategories[] => [\n  {\n    title: 'My preferences',\n    items: [\n      {\n        type: 'switch',\n        id: 'show-timestamps',\n        name: 'showTimestamps',\n        title: 'Show Timestamps',\n        description: '',\n        value: state.options.showTimestamps,\n      },\n      {\n        type: 'switch',\n        id: 'split-chat',\n        name: 'splitChat',\n        title: 'Split Chat',\n        description: '',\n        value: state.options.splitChat,\n      },\n      {\n        type: 'switch',\n        id: 'fixed-width',\n        name: 'fixedWidth',\n        title: 'Fixed Width',\n        description: '',\n        value: state.options.fixedWidth,\n      },\n      {\n        type: 'switch',\n        id: 'highlight-notifications',\n        name: 'highlightNotifications',\n        title: 'Play a sound on highlights',\n        description: 'Plays a sound for messages directed at you',\n        value: state.options.highlightNotifications,\n      },\n      {\n        type: 'switch',\n        id: 'show-twitch-cards',\n        name: 'showTwitchCards',\n        title: 'Show Twitch clips and vods in the chat',\n        description: 'Show previews for Twitch clips and vods in the chat',\n        value: state.options.showTwitchCards,\n      },\n      {\n        type: 'switch',\n        id: 'show-youtube-cards',\n        name: 'showYoutubeCards',\n        title: 'Show Youtube videos in the chat',\n        description: 'Show previews for Youtube videos in the chat',\n        value: state.options.showYoutubeCards,\n      },\n      // {\n      //   type: 'input',\n      //   id: 'blacklist-keywords',\n      //   name: 'blacklistKeywords',\n      //   title: 'Set Blacklist Keywords',\n      //   description: '',\n      //   value: state.options.blacklistKeywords,\n      // },\n      // {\n      //   type: 'input',\n      //   id: 'highlight-keywords',\n      //   name: 'highlightKeywords',\n      //   title: 'Set Highlight Keywords',\n      //   description: '',\n      //   value: state.options.highlightKeywords,\n      // },\n    ],\n  },\n];\n\nexport const isShowTimestampsSelector = (state: RootState) =>\n  state.options.showTimestamps;\n\nexport const isSplitChatSelector = (state: RootState) =>\n  state.options.splitChat;\n\nexport const isFixedWidthSelector = (state: RootState) =>\n  state.options.fixedWidth;\n\nexport const isHighlightNotificationsSelector = (state: RootState) =>\n  state.options.highlightNotifications;\n\nexport const isShowTwitchCardsSelector = (state: RootState) =>\n  state.options.showTwitchCards;\n\nexport const isShowYoutubeCardsSelector = (state: RootState) =>\n  state.options.showYoutubeCards;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\nimport type twitchIrc from 'twitch-simple-irc';\n\ntype Params = {\n  room: twitchIrc.RoomStateTags | null;\n  user: twitchIrc.UserStateTags | null;\n};\n\ntype ChatState = {\n  isConnected: boolean;\n  currentChannel: string;\n  params: {\n    global: twitchIrc.GlobalUserStateTags | null;\n    byChannels: Record<string, Params>;\n  };\n};\n\nconst initialState: ChatState = {\n  isConnected: false,\n  currentChannel: '',\n  params: {\n    global: null,\n    byChannels: {},\n  },\n};\n\nconst chat = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    updateIsConnected: (state, { payload }: PayloadAction<boolean>) => {\n      state.isConnected = payload;\n    },\n\n    updateCurrentChannel: (state, { payload }: PayloadAction<string>) => {\n      state.currentChannel = payload;\n    },\n\n    updateGlobalUserParams: (\n      state,\n      { payload }: PayloadAction<twitchIrc.GlobalUserStateEvent>,\n    ) => {\n      state.params.global = payload.tags;\n    },\n\n    updateUserParams: (\n      state,\n      { payload }: PayloadAction<twitchIrc.UserStateEvent>,\n    ) => {\n      const { channel, tags } = payload;\n\n      if (!state.params.byChannels[channel]) {\n        state.params.byChannels[channel] = {\n          room: null,\n          user: null,\n        };\n      }\n\n      state.params.byChannels[channel].user = tags;\n    },\n\n    updateRoomParams: (\n      state,\n      { payload }: PayloadAction<twitchIrc.RoomStateEvent>,\n    ) => {\n      const { channel, tags } = payload;\n\n      if (!state.params.byChannels[channel]) {\n        state.params.byChannels[channel] = {\n          room: null,\n          user: null,\n        };\n      }\n\n      // TODO: merge tags\n      state.params.byChannels[channel].room = tags;\n    },\n  },\n});\n\nexport const {\n  updateIsConnected,\n  updateCurrentChannel,\n\n  // params\n  updateGlobalUserParams,\n  updateUserParams,\n  updateRoomParams,\n} = chat.actions;\n\nexport default chat.reducer;\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport type { RootState } from 'app/rootReducer';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport {\n  currentChannelSelector,\n  userBadgesSelector,\n} from 'features/chat/chatSelectors';\n\nexport const isGlobalBadgesLoadedSelector = (state: RootState) =>\n  state.badges.global.status === 'success' ||\n  state.badges.global.status === 'error';\n\nexport const isChannelBadgesLoadedSelector = (state: RootState) =>\n  state.badges.byChannels[currentChannelSelector(state)]?.status ===\n    'success' ||\n  state.badges.byChannels[currentChannelSelector(state)]?.status === 'error';\n\nexport const isBadgesLoadedSelector = (state: RootState) =>\n  isGlobalBadgesLoadedSelector(state) && isChannelBadgesLoadedSelector(state);\n\nexport const globalBadgesSelector = (state: RootState) =>\n  state.badges.global.items;\n\nexport const channelBadgesSelector = (state: RootState) =>\n  state.badges.byChannels[currentChannelSelector(state)]?.items || {};\n\nexport const userBadgesImagesSelector = createSelector(\n  userBadgesSelector,\n  globalBadgesSelector,\n  channelBadgesSelector,\n  htmlEntity.createBadges,\n);\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport jwt from 'jsonwebtoken';\n\nimport { initializeAuth, fetchUser } from 'features/auth/authSlice';\nimport { isAuthReadySelector } from 'features/auth/authSelectors';\nimport { readUserFromLocatStorage } from 'features/auth/authUtils';\n\nconst useInitializeAuth = () => {\n  const dispatch = useDispatch();\n  const isAuthReady = useSelector(isAuthReadySelector);\n\n  useEffect(() => {\n    if (isAuthReady) return;\n\n    const { idToken } = localStorage;\n    const user = readUserFromLocatStorage();\n\n    if (!idToken) {\n      dispatch(initializeAuth({ isAuth: false }));\n      return;\n    }\n\n    if (user) {\n      const { id, login } = user;\n      const params = { isAuth: true, userId: id, userLogin: login };\n\n      dispatch(initializeAuth(params));\n    } else {\n      const jwtData = jwt.decode(idToken);\n\n      if (jwtData) {\n        dispatch(fetchUser(jwtData.sub));\n      } else {\n        dispatch(initializeAuth({ isAuth: false }));\n      }\n    }\n  }, [dispatch, isAuthReady]);\n};\n\nexport default useInitializeAuth;\n","import type { RootState } from 'app/rootReducer';\nimport { currentChannelSelector } from 'features/chat/chatSelectors';\n\nexport const messagesSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.items || [];\n\nexport const usersSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.users || [];\n\nexport const recentUserMessagesSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.recentUserMessages || [];\n\nexport const isHistoryLoadedSelector = (state: RootState) => {\n  const currentChannel = currentChannelSelector(state);\n\n  return (\n    state.messages[currentChannel]?.history.status === 'success' ||\n    state.messages[currentChannel]?.history.status === 'error' ||\n    false\n  );\n};\n\nexport const isHistoryAddedSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.history.isAdded || false;\n\nexport const isEvenSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.isEven || false;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  currentChannelSelector,\n  currentChannelIdSelector,\n} from 'features/chat/chatSelectors';\nimport {\n  isHistoryAddedSelector,\n  isHistoryLoadedSelector,\n} from 'features/messages/messagesSelectors';\nimport {\n  isTwitchEmotesLoadedSelector,\n  isBttvGlobalEmotesLoadedSelector,\n  isBttvChannelEmotesLoadedSelector,\n  isFfzGlobalEmotesLoadedSelector,\n  isFfzChannelEmotesLoadedSelector,\n} from 'features/emotes/emotesSelectors';\nimport {\n  isGlobalBadgesLoadedSelector,\n  isChannelBadgesLoadedSelector,\n} from 'features/badges/badgesSelectors';\nimport { isBlockedUsersLoadedSelector } from 'features/blockedUsers/blockedUsersSelectors';\nimport {\n  isAuthReadySelector,\n  isAuthSelector,\n  userIdSelector,\n} from 'features/auth/authSelectors';\nimport {\n  addChatHistory,\n  fetchChatHistory,\n} from 'features/messages/messagesSlice';\nimport {\n  fetchTwitchEmotes,\n  fetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes,\n  fetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes,\n} from 'features/emotes/emotesSlice';\nimport {\n  fetchChannelBadges,\n  fetchGlobalBadges,\n} from 'features/badges/badgesSlice';\nimport { fetchBlockedUsers } from 'features/blockedUsers/blockedUsersSlice';\n\nconst useFetchChatData = () => {\n  const dispatch = useDispatch();\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n  const userId = useSelector(userIdSelector);\n  const currentChannel = useSelector(currentChannelSelector);\n  const currentChannelId = useSelector(currentChannelIdSelector);\n\n  const isTwitchEmotesLoaded = useSelector(isTwitchEmotesLoadedSelector);\n  const isBttvGlobalEmotesLoaded = useSelector(\n    isBttvGlobalEmotesLoadedSelector,\n  );\n  const isBttvChannelEmotesLoaded = useSelector(\n    isBttvChannelEmotesLoadedSelector,\n  );\n  const isFfzGlobalEmotesLoaded = useSelector(isFfzGlobalEmotesLoadedSelector);\n  const isFfzChannelEmotesLoaded = useSelector(\n    isFfzChannelEmotesLoadedSelector,\n  );\n  const isGlobalBadgesLoaded = useSelector(isGlobalBadgesLoadedSelector);\n  const isChannelBadgesLoaded = useSelector(isChannelBadgesLoadedSelector);\n  const isHistoryLoaded = useSelector(isHistoryLoadedSelector);\n  const isBlockedUsersLoaded = useSelector(isBlockedUsersLoadedSelector);\n  const isHistoryAdded = useSelector(isHistoryAddedSelector);\n\n  const isAllEmotesLoaded =\n    (isAuth ? isTwitchEmotesLoaded : true) &&\n    isBttvGlobalEmotesLoaded &&\n    isBttvChannelEmotesLoaded &&\n    isFfzGlobalEmotesLoaded &&\n    isFfzChannelEmotesLoaded;\n\n  const isReadyToAddHistory =\n    isAuthReady &&\n    currentChannel &&\n    !isHistoryAdded &&\n    isAllEmotesLoaded &&\n    (isAuth ? isBlockedUsersLoaded : true) &&\n    isGlobalBadgesLoaded &&\n    isChannelBadgesLoaded &&\n    isHistoryLoaded;\n\n  useEffect(() => {\n    dispatch(fetchBttvGlobalEmotes());\n    dispatch(fetchFfzGlobalEmotes());\n    dispatch(fetchGlobalBadges());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (isReadyToAddHistory) {\n      dispatch(addChatHistory(currentChannel));\n    }\n  }, [dispatch, currentChannel, isReadyToAddHistory]);\n\n  useEffect(() => {\n    if (!isHistoryAdded && currentChannel) {\n      dispatch(fetchChatHistory(currentChannel));\n    }\n  }, [dispatch, currentChannel, isHistoryAdded]);\n\n  useEffect(() => {\n    if (isAuthReady && isAuth && userId) {\n      dispatch(fetchTwitchEmotes(userId));\n      dispatch(fetchBlockedUsers(userId));\n    }\n  }, [dispatch, isAuthReady, isAuth, userId]);\n\n  // TODO: check if emotes and badges is already in the store\n\n  useEffect(() => {\n    if (currentChannel && currentChannelId) {\n      const params = {\n        channel: currentChannel,\n        channelId: currentChannelId,\n      };\n\n      dispatch(fetchBttvChannelEmotes(params));\n      dispatch(fetchFfzChannelEmotes(params));\n      dispatch(fetchChannelBadges(params));\n    }\n  }, [dispatch, currentChannel, currentChannelId]);\n};\n\nexport default useFetchChatData;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { LS_LAST_CHANNEL } from 'utils/constants';\nimport { updateCurrentChannel } from 'features/chat/chatSlice';\n\n// TODO: remove lastChannel if can't connect to the channel\n\nconst useCurrentChannel = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { hash } = history.location;\n\n  useEffect(() => {\n    if (hash && hash.length > 1) {\n      const channel = hash.slice(1);\n\n      dispatch(updateCurrentChannel(channel));\n\n      localStorage.setItem(LS_LAST_CHANNEL, channel);\n\n      document.title = channel\n        ? `#${channel} - ${process.env.REACT_APP_NAME} `\n        : (process.env.REACT_APP_NAME as string);\n\n      return;\n    }\n\n    const lastChannel = localStorage.getItem(LS_LAST_CHANNEL);\n\n    if (lastChannel) {\n      history.push({ pathname: '/chat/', hash: lastChannel });\n\n      dispatch(updateCurrentChannel(lastChannel));\n    } else {\n      dispatch(updateCurrentChannel(''));\n    }\n  }, [dispatch, history, hash]);\n};\n\nexport default useCurrentChannel;\n","import emojisMap from 'features/emotes/emojisMap.json';\n\nconst replaceEmojis = (text: string) =>\n  text\n    .split(' ')\n    .map((word: string) => {\n      if (word[0] !== ':' || word[word.length - 1] !== ':') {\n        return word;\n      }\n\n      const name = word.slice(1, -1);\n      const emoji = emojisMap[name];\n\n      return emoji && emoji.char ? emoji.char : word;\n    })\n    .join(' ');\n\nexport default replaceEmojis;\n","import { useEffect, useRef, useMemo, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as twitchIrc from 'twitch-simple-irc';\nimport { usePrevious } from 'react-use';\n\nimport { NOTICE_MESSAGE_TAGS, LS_ACCESS_TOKEN } from 'utils/constants';\nimport {\n  updateIsConnected,\n  updateGlobalUserParams,\n  updateUserParams,\n  updateRoomParams,\n} from 'features/chat/chatSlice';\nimport { recieveMessage, clearChat } from 'features/messages/messagesSlice';\nimport { invalidateAuth } from 'features/auth/authSlice';\nimport {\n  currentChannelSelector,\n  isConnectedSelector,\n} from 'features/chat/chatSelectors';\nimport {\n  isAuthSelector,\n  isAuthReadySelector,\n  userLoginSelector,\n} from 'features/auth/authSelectors';\nimport replaceEmojis from 'features/messages/utils/replaceEmojis';\n\nconst useTwitchClient = () => {\n  const dispatch = useDispatch();\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n  const userLogin = useSelector(userLoginSelector);\n  const isConnected = useSelector(isConnectedSelector);\n  const currentChannel = useSelector(currentChannelSelector);\n  const prevChannel = usePrevious(currentChannel);\n  const clientRef = useRef<twitchIrc.Client | null>(null);\n\n  const registerEvents = useCallback(\n    (client: typeof clientRef) => {\n      if (!client.current) return;\n\n      const handleRegister = () => dispatch(updateIsConnected(true));\n\n      const handleDisconnect = () => dispatch(updateIsConnected(false));\n\n      const handleGlobalUserState = (data: twitchIrc.GlobalUserStateEvent) =>\n        dispatch(updateGlobalUserParams(data));\n\n      const handleUserState = (data: twitchIrc.UserStateEvent) =>\n        dispatch(updateUserParams(data));\n\n      const handleRoomState = (data: twitchIrc.RoomStateEvent) =>\n        dispatch(updateRoomParams(data));\n\n      const handleMessage = (message: twitchIrc.MessageEvent) => {\n        dispatch(recieveMessage({ type: 'message', message }));\n      };\n\n      const handleNotice = (message: twitchIrc.NoticeEvent) => {\n        if (\n          client.current &&\n          message.message === 'Login authentication failed'\n        ) {\n          dispatch(invalidateAuth());\n          client.current.disconnect();\n          // eslint-disable-next-line no-param-reassign\n          client.current = null;\n          return;\n        }\n\n        dispatch(recieveMessage({ type: 'notice', message }));\n      };\n\n      const handleUserNotice = (message: twitchIrc.UserNoticeEvent) =>\n        dispatch(recieveMessage({ type: 'user-notice', message }));\n\n      const handleClearChat = (data: twitchIrc.ClearChatEvent) => {\n        if (!data.tags.targetUserId) return;\n        dispatch(clearChat(data));\n      };\n\n      client.current.on('register', handleRegister);\n      client.current.on('disconnect', handleDisconnect);\n      client.current.on('globaluserstate', handleGlobalUserState);\n      client.current.on('userstate', handleUserState);\n      client.current.on('roomstate', handleRoomState);\n      client.current.on('message', handleMessage);\n      client.current.on('notice', handleNotice);\n      client.current.on('usernotice', handleUserNotice);\n      client.current.on('clearchat', handleClearChat);\n    },\n    [dispatch],\n  );\n\n  useEffect(() => {\n    return () => {\n      if (clientRef.current) {\n        clientRef.current.disconnect();\n        clientRef.current = null;\n      }\n    };\n  }, [clientRef]);\n\n  useEffect(() => {\n    if (!currentChannel || !isAuthReady) return;\n\n    if (!clientRef.current) {\n      const options = isAuth\n        ? {\n            name: userLogin as string,\n            auth: localStorage.getItem(LS_ACCESS_TOKEN) as string,\n          }\n        : null;\n\n      (async () => {\n        clientRef.current = new twitchIrc.Client(options);\n\n        registerEvents(clientRef);\n\n        await clientRef.current.connect();\n\n        clientRef.current.join(currentChannel);\n      })();\n\n      return;\n    }\n\n    if (prevChannel && prevChannel !== currentChannel) {\n      clientRef.current.part(prevChannel);\n      clientRef.current.join(currentChannel);\n    }\n  }, [\n    dispatch,\n    registerEvents,\n    isAuth,\n    isAuthReady,\n    isConnected,\n    userLogin,\n    currentChannel,\n    prevChannel,\n  ]);\n\n  const client = () => ({\n    say(channel: string, message: string) {\n      if (!clientRef.current || !message.trim()) return;\n\n      const normalizedMessage = replaceEmojis(message.trim());\n\n      clientRef.current.say(channel, normalizedMessage);\n\n      function handleUserState(data: twitchIrc.UserStateEvent) {\n        if (data.channel === channel) {\n          const ownMessage = {\n            message: normalizedMessage,\n            channel,\n            tags: data.tags,\n          };\n\n          dispatch(\n            recieveMessage({ type: 'own-message', message: ownMessage }),\n          );\n\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          removeListeners();\n        }\n      }\n\n      function handleNotice(data: twitchIrc.NoticeEvent) {\n        if (\n          data.channel === channel &&\n          NOTICE_MESSAGE_TAGS.includes(data.tags.msgId)\n        ) {\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          removeListeners();\n        }\n      }\n\n      function removeListeners() {\n        if (!clientRef.current) return;\n\n        clientRef.current.off('notice', handleNotice);\n        clientRef.current.off('userstate', handleUserState);\n      }\n\n      clientRef.current.on('notice', handleNotice);\n      clientRef.current.on('userstate', handleUserState);\n\n      setTimeout(() => removeListeners(), 10000);\n    },\n  });\n\n  return useMemo(client, [clientRef, dispatch]);\n};\n\nexport default useTwitchClient;\n","const getUsersByBeginText = (beginText: string, users: string[], limit = 5) => {\n  const result = [];\n  const beginTextLower = beginText.toLowerCase();\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const name of users) {\n    if (result.length === limit) return result;\n\n    const nameLower = name.toLowerCase();\n\n    if (beginTextLower === '' || nameLower.startsWith(beginTextLower)) {\n      result.push(name);\n    }\n  }\n\n  return result;\n};\n\nexport default getUsersByBeginText;\n","import { useRef, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useSetState } from 'react-use';\n\nimport { SUGGESTION_TYPES } from 'utils/constants';\nimport getUsersByBeginText from 'features/chat/utils/getUsersByBeginText';\nimport getEmotesByText from 'features/emotes/utils/getEmotesByText';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport {\n  usersSelector,\n  recentUserMessagesSelector,\n} from 'features/messages/messagesSelectors';\nimport { emotesSelector } from 'features/emotes/emotesSelectors';\n\ninterface ASuggestions {\n  isActive: boolean;\n  activeIndex: number;\n  start: number;\n  end: number;\n}\ninterface UserSuggestions extends ASuggestions {\n  type: 'users';\n  items: string[];\n}\ninterface EmoteSuggestions extends ASuggestions {\n  type: 'emotes';\n  items: htmlEntity.Emote[];\n}\nexport type SuggestionsState = UserSuggestions | EmoteSuggestions;\n\nconst suggestionsInitialState: SuggestionsState = {\n  type: 'users',\n  isActive: false,\n  items: [],\n  activeIndex: 0,\n  start: 0,\n  end: 0,\n};\n\nconst setSuggestionsIndexUp = ({\n  activeIndex,\n  items,\n  ...rest\n}: SuggestionsState) =>\n  ({\n    activeIndex: activeIndex === 0 ? items.length - 1 : activeIndex - 1,\n    items,\n    ...rest,\n  } as SuggestionsState);\n\nconst setSuggestionsIndexDown = ({\n  activeIndex,\n  items,\n  ...rest\n}: SuggestionsState) =>\n  ({\n    activeIndex: activeIndex === items.length - 1 ? 0 : activeIndex + 1,\n    items,\n    ...rest,\n  } as SuggestionsState);\n\nconst replaceSuggestionText = (\n  text: string,\n  { type, items, activeIndex, start, end }: SuggestionsState,\n) => {\n  if (items.length === 0) return text;\n\n  const currentItem = items[activeIndex];\n  const insertedText =\n    type === 'users'\n      ? `@${currentItem}`\n      : (currentItem as htmlEntity.Emote).alt;\n\n  const textBefore = text.substring(0, start);\n  const testAfter = text.substring(end) || ' ';\n\n  return `${textBefore}${insertedText}${testAfter}`;\n};\n\nconst useChatInput = (\n  setText: (value: React.SetStateAction<string>) => void,\n  onSendMessage: () => void,\n  chatInputRef: React.RefObject<HTMLElement>,\n  recentUserMessageIndexRef: React.RefObject<{\n    recentUserMessageIndex: number;\n    setRecentUserMessageIndex: React.Dispatch<React.SetStateAction<number>>;\n  }>,\n) => {\n  const [suggestions, setSuggestions] = useSetState<SuggestionsState>(\n    suggestionsInitialState,\n  );\n\n  const emotes = useSelector(emotesSelector);\n  const users = useSelector(usersSelector);\n  const recentUserMessages = useSelector(recentUserMessagesSelector);\n\n  const getDeps = () => ({\n    setText,\n    onSendMessage,\n    chatInputRef,\n    suggestions,\n    setSuggestions,\n    emotes,\n    users,\n    recentUserMessages: [...recentUserMessages, ''],\n    recentUserMessageIndex: recentUserMessageIndexRef.current\n      ?.recentUserMessageIndex as number,\n    setRecentUserMessageIndex: recentUserMessageIndexRef.current\n      ?.setRecentUserMessageIndex as React.Dispatch<\n      React.SetStateAction<number>\n    >,\n  });\n\n  const deps = useRef({} as ReturnType<typeof getDeps>);\n\n  deps.current = getDeps();\n\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      const d = deps.current;\n      const { value, selectionStart } = e.target;\n\n      d.setText(value);\n\n      const spaceIndexBefore = value.lastIndexOf(' ', selectionStart - 1);\n      const spaceIndexAfter = value.indexOf(' ', selectionStart);\n\n      const start = spaceIndexBefore === -1 ? 0 : spaceIndexBefore + 1;\n      const end = spaceIndexAfter === -1 ? value.length : spaceIndexAfter;\n\n      const word = value.substring(start, end);\n\n      const usersMatch = SUGGESTION_TYPES.users.regex.exec(word);\n\n      if (usersMatch) {\n        const [, beginText] = usersMatch;\n        const items = getUsersByBeginText(\n          beginText,\n          d.users,\n          SUGGESTION_TYPES.users.limit,\n        );\n\n        d.setSuggestions({\n          type: 'users',\n          isActive: true,\n          items,\n          activeIndex: 0,\n          start,\n          end,\n        });\n\n        return;\n      }\n\n      const emotesMatch = SUGGESTION_TYPES.emotes.regex.exec(word);\n\n      if (emotesMatch && d.emotes) {\n        const [, text] = emotesMatch;\n        const items = getEmotesByText(\n          text,\n          d.emotes,\n          SUGGESTION_TYPES.emotes.limit,\n        );\n\n        d.setSuggestions({\n          type: 'emotes',\n          isActive: true,\n          items,\n          activeIndex: 0,\n          start,\n          end,\n        });\n\n        return;\n      }\n\n      if (d.suggestions.isActive) {\n        d.setSuggestions(suggestionsInitialState);\n      }\n    },\n    [deps],\n  );\n\n  const handleKeyUp = useCallback(\n    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {},\n    [],\n  );\n\n  const handleKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n      const d = deps.current;\n\n      if (d.suggestions.isActive) {\n        if (e.key === 'Enter' || e.key === 'Tab') {\n          e.preventDefault();\n          d.setText((t) => replaceSuggestionText(t, d.suggestions));\n          d.setSuggestions(suggestionsInitialState);\n\n          return;\n        }\n\n        if (e.key === 'ArrowUp') {\n          e.preventDefault();\n          d.setSuggestions(setSuggestionsIndexUp);\n          return;\n        }\n\n        if (e.key === 'ArrowDown') {\n          e.preventDefault();\n          d.setSuggestions(setSuggestionsIndexDown);\n          return;\n        }\n\n        if (e.key === 'Escape') {\n          d.setSuggestions({ isActive: false });\n          return;\n        }\n      }\n\n      if (!d.suggestions.isActive) {\n        if (e.key === 'Enter') {\n          e.preventDefault();\n          d.onSendMessage();\n          return;\n        }\n\n        if (e.key === 'ArrowUp') {\n          const isCaretAtBegin =\n            (e.target as HTMLTextAreaElement).selectionStart === 0;\n\n          if (!isCaretAtBegin) return;\n          if (d.recentUserMessageIndex >= d.recentUserMessages.length - 1)\n            return;\n\n          const newIndex = d.recentUserMessageIndex + 1;\n\n          d.setText(d.recentUserMessages[newIndex]);\n          d.setRecentUserMessageIndex(newIndex);\n\n          return;\n        }\n\n        if (e.key === 'ArrowDown') {\n          const isCaretAtEnd =\n            (e.target as HTMLTextAreaElement).selectionStart ===\n            (e.target as HTMLTextAreaElement).defaultValue.length;\n\n          if (!isCaretAtEnd) return;\n          if (d.recentUserMessageIndex <= 0) return;\n\n          const newIndex = d.recentUserMessageIndex - 1;\n\n          d.setText(d.recentUserMessages[newIndex]);\n          d.setRecentUserMessageIndex(newIndex);\n\n          // eslint-disable-next-line no-useless-return\n          return;\n        }\n      }\n    },\n    [deps],\n  );\n\n  const handleSuggestionMouseEnter = useCallback(\n    (activeIndex: number) => setSuggestions({ activeIndex }),\n    [setSuggestions],\n  );\n\n  const handleSuggestionClick = useCallback(\n    (activeIndex: number) => {\n      const d = deps.current;\n\n      d.setText((t) =>\n        replaceSuggestionText(t, { ...d.suggestions, activeIndex }),\n      );\n\n      if (d.chatInputRef.current) {\n        d.chatInputRef.current.focus();\n      }\n\n      d.setSuggestions(suggestionsInitialState);\n    },\n    [deps],\n  );\n\n  const handleBlur = useCallback(() => {\n    setSuggestions({ isActive: false });\n  }, [setSuggestions]);\n\n  return {\n    suggestions,\n    handleChange,\n    handleKeyUp,\n    handleKeyDown,\n    handleBlur,\n    handleSuggestionMouseEnter,\n    handleSuggestionClick,\n  };\n};\n\nexport default useChatInput;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M8.5 10L4 5.5 5.5 4 10 8.5 14.5 4 16 5.5 11.5 10l4.5 4.5-1.5 1.5-4.5-4.5L5.5 16 4 14.5 8.5 10z\"\n});\n\nconst SvgClose = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 20 20\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref);\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgClose, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/close.992b249e.svg\";\nexport { ForwardRef as ReactComponent };","import styled, { css } from 'styled-components';\n\nconst sizes = {\n  small: css`\n    width: 24px;\n    height: 24px;\n  `,\n  medium: css`\n    width: 30px;\n    height: 30px;\n  `,\n  // large: css``,\n};\n\nconst IconButton = styled.button.attrs({\n  type: 'button',\n})<{ $size?: 'small' | 'medium' }>`\n  margin: 0;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: none;\n  border: none;\n  outline: none;\n  color: #fff;\n  border-radius: 4px;\n  cursor: pointer;\n\n  ${(p) => sizes[p.$size || 'medium']};\n\n  &:hover,\n  &:focus {\n    background-color: rgba(255, 255, 255, 0.15);\n  }\n\n  &:active {\n    background-color: rgba(255, 255, 255, 0.2);\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n`;\n\nexport default IconButton;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { ReactComponent as CloseIconSvg } from 'icons/close.svg';\nimport IconButton from 'components/IconButton';\n\nconst ChatModalRoot = styled.div`\n  height: 100%;\n  box-shadow: rgba(0, 0, 0, 0.4) 0px 4px 8px 0px,\n    rgba(0, 0, 0, 0.4) 0px 0px 4px 0px;\n  background-color: #18181b;\n  white-space: normal;\n  color: #fff;\n  border-radius: 4px;\n`;\nconst CloseButton = styled(IconButton).attrs({ $size: 'small' })`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n`;\nconst CloseIcon = styled(CloseIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  children: React.ReactNode;\n  onClose: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n};\n\nconst ChatModal = ({ children, onClose }: Props) => (\n  <ChatModalRoot>\n    <CloseButton onClick={onClose}>\n      <CloseIcon />\n    </CloseButton>\n    {children}\n  </ChatModalRoot>\n);\n\nexport default ChatModal;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"currentColor\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M7 11a1 1 0 100-2 1 1 0 000 2zm7-1a1 1 0 11-2 0 1 1 0 012 0zm-4 4a2 2 0 002-2H8a2 2 0 002 2z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-2 0a6 6 0 11-12 0 6 6 0 0112 0z\",\n  clipRule: \"evenodd\"\n}));\n\nconst SvgSmileyFace = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 20 20\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref);\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgSmileyFace, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/smiley-face.1cc055ed.svg\";\nexport { ForwardRef as ReactComponent };","import CustomScrollbar from 'react-scrollbars-custom';\nimport styled from 'styled-components';\n\nconst Scrollbar = styled(CustomScrollbar).attrs({\n  disableTracksWidthCompensation: true,\n})`\n  overflow-y: auto;\n\n  .ScrollbarsCustom-Content {\n    padding: 0 !important;\n  }\n\n  .ScrollbarsCustom-TrackY {\n    background: none !important;\n  }\n\n  .ScrollbarsCustom-ThumbY {\n    margin-left: auto;\n    margin-right: auto;\n    width: 6px !important;\n  }\n`;\n\nexport default Scrollbar;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  fillRule: \"evenodd\",\n  d: \"M13.192 14.606a7 7 0 111.414-1.414l3.101 3.1-1.414 1.415-3.1-3.1zM14 9A5 5 0 114 9a5 5 0 0110 0z\",\n  clipRule: \"evenodd\"\n});\n\nconst SvgSearch = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 20 20\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref);\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgSearch, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/search.a2f0945f.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport type { RootState } from 'app/rootReducer';\nimport Scrollbar from 'components/Scrollbar';\nimport { emoteCategoriesSelector } from 'features/emotes/emotesSelectors';\nimport type { EmoteCategory } from 'features/emotes/utils/createEmoteCategories';\nimport { ReactComponent as SearchIconSvg } from 'icons/search.svg';\n\nconst EmotePickerRoot = styled.div`\n  padding-top: 30px;\n  padding-bottom: 16px;\n  height: 100%;\n`;\nconst Categories = styled.div`\n  height: calc(100% - 30px);\n`;\nconst Category = styled.div`\n  padding-top: 10px;\n  padding-right: 16px;\n  padding-left: 16px;\n\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding-bottom: 10px;\n  font-size: 12px;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst CategoryItems = styled.div``;\nconst Emote = styled.img`\n  padding: 2px;\n  width: 32px;\n  height: 32px;\n  object-fit: contain;\n\n  &:hover {\n    background-color: rgba(119, 44, 232, 0.2);\n    cursor: pointer;\n  }\n`;\nconst SearchBlock = styled.div`\n  position: relative;\n  padding: 0 16px;\n  color: #adadb8;\n`;\nconst SearchInput = styled.input`\n  padding-left: 30px;\n  padding-right: 10px;\n  width: 100%;\n  height: 30px;\n  color: #efeff1;\n  font-family: inherit;\n  line-height: 1.5;\n  background-clip: padding-box;\n  background-color: rgba(255, 255, 255, 0.15);\n  border: 2px solid rgba(255, 255, 255, 0.15);\n  outline: 0;\n  border-radius: 4px;\n  appearance: none;\n  transition: box-shadow 0.1s ease-in, border 0.1s ease-in,\n    background-color 0.1s ease-in;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n`;\nconst SearchIcon = styled(SearchIconSvg)`\n  position: absolute;\n  top: 50%;\n  left: 21px;\n  display: block;\n  width: 20px;\n  height: 20px;\n  transform: translateY(-50%);\n`;\n\ntype Props = {\n  onEmoteClick: (name: string) => void;\n};\n\nconst EmotePicker = ({ onEmoteClick }: Props) => {\n  const [search, setSearch] = useState('');\n  const searchInputRef = useRef<HTMLInputElement>(null);\n  const emoteCategories = useSelector((state: RootState) =>\n    emoteCategoriesSelector(state, search),\n  );\n\n  useEffect(() => {\n    if (searchInputRef.current) {\n      searchInputRef.current.focus();\n    }\n\n    return () => setSearch('');\n  }, []);\n\n  const renderCategory = ({ title, items }: EmoteCategory, key: number) => (\n    <Category key={key}>\n      {!!title && <CategoryHeader>{title}</CategoryHeader>}\n      <CategoryItems>\n        {items.map(({ alt, src, srcSet }) => (\n          <Emote\n            key={alt}\n            alt={alt}\n            src={src}\n            srcSet={srcSet}\n            onClick={() => onEmoteClick(alt)}\n          />\n        ))}\n      </CategoryItems>\n    </Category>\n  );\n\n  return (\n    <EmotePickerRoot>\n      <SearchBlock>\n        <SearchIcon />\n        <SearchInput\n          ref={searchInputRef}\n          placeholder=\"Search for Emotes\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n        />\n      </SearchBlock>\n      <Categories>\n        <Scrollbar>{emoteCategories.map(renderCategory)}</Scrollbar>\n      </Categories>\n    </EmotePickerRoot>\n  );\n};\n\nexport default EmotePicker;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport useOnClickOutside from 'react-cool-onclickoutside';\n\nimport ChatModal from 'components/ChatModal';\nimport IconButton from 'components/IconButton';\nimport { ReactComponent as SmileyFaceIconSvg } from 'icons/smiley-face.svg';\nimport EmotePicker from 'features/emotes/EmotePicker';\nimport type { SuggestionsState } from 'features/chat/hooks/useChatInput';\nimport { isEmotesLoadedSelector } from 'features/emotes/emotesSelectors';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\n\nconst ChatInputRoot = styled.div`\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n  background-color: #18181b;\n\n  & > :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nconst ChatInputInner = styled.div`\n  position: relative;\n`;\nconst Suggestions = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 100%;\n  margin-left: -5px;\n  margin-bottom: -5px;\n  margin-right: -5px;\n  margin-bottom: 0;\n  padding-top: 10px;\n  padding-bottom: 5px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border: 1px solid rgba(255, 255, 255, 0.15);\n  border-bottom: none;\n  background-color: #18181b;\n  color: #fff;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n  /* box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15), 0 0px 2px rgba(0, 0, 0, 0.1); */\n`;\nconst SuggestionItem = styled.div<{ $isActive: boolean }>`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border-radius: 2px;\n  background-color: ${(p) =>\n    p.$isActive ? 'rgba(255, 255, 255, 0.15)' : 'transparent'};\n  cursor: pointer;\n`;\nconst SuggestionImage = styled.img`\n  margin-right: 8px;\n  width: 28px;\n  height: 28px;\n  object-fit: contain;\n`;\nconst TextareaInput = styled.div`\n  position: relative;\n`;\nconst TextareaWrapper = styled.div<{ $isSuggestions: boolean }>`\n  ${(p) =>\n    p.$isSuggestions &&\n    css`\n      margin-left: -5px;\n      margin-bottom: -5px;\n      margin-right: -5px;\n      padding: 5px;\n      border: 1px solid rgba(255, 255, 255, 0.15);\n      border-top: none;\n      border-bottom-left-radius: 6px;\n      border-bottom-right-radius: 6px;\n      /* box-shadow: 0 2px 3px -1px rgba(0, 0, 0, 0.1),\n        0 2px 2px -2px rgba(0, 0, 0, 0.02); */\n\n      & > ${TextareaInput} {\n        margin-left: -1px;\n        margin-bottom: -1px;\n        margin-right: -1px;\n      }\n    `};\n`;\nconst EmotesModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 0;\n  bottom: 100%;\n  margin-bottom: 8px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nconst Textarea = styled(TextareaAutosize)<{ $showScroll: boolean }>`\n  display: block;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  padding-left: 10px;\n  padding-right: 32px;\n  width: 100%;\n  height: 38px;\n  max-height: 91px;\n  min-height: 40px;\n  overflow-x: hidden;\n  overflow-y: ${(p) => (p.$showScroll ? 'auto' : 'hidden')};\n  border: 2px solid transparent;\n  background-color: rgba(255, 255, 255, 0.15);\n  font-family: inherit;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\nconst EmotesButton = styled(IconButton)`\n  position: absolute;\n  right: 5px;\n  bottom: 5px;\n`;\nconst SmileyFaceIcon = styled(SmileyFaceIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  text: string;\n  suggestions: SuggestionsState;\n  isDisabled: boolean;\n  onEmoteClick: (name: string) => void;\n  onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onKeyUp: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur: () => void;\n  onSuggestionMouseEnter: (index: number) => void;\n  onSuggestionClick: (index: number) => void;\n};\n\nconst ChatInput = React.forwardRef<HTMLTextAreaElement, Props>(\n  (\n    {\n      text,\n      suggestions,\n      isDisabled,\n      onEmoteClick,\n      onChange,\n      onKeyUp,\n      onKeyDown,\n      onBlur,\n      onSuggestionMouseEnter,\n      onSuggestionClick,\n    },\n    textareaRef,\n  ) => {\n    const suggestionsRef = useRef<HTMLDivElement>(null);\n\n    useOnClickOutside(() => onBlur(), {\n      refs: [textareaRef as React.RefObject<HTMLElement>, suggestionsRef],\n    });\n\n    const [isShowTextareaScroll, setIsShowTextareaScroll] = useState(false);\n    const [isEmotesModalVisible, setIsEmotesModalVisible] = useState(false);\n    const isEmotesLoaded = useSelector(isEmotesLoadedSelector);\n    const handleCloseEmotesModal = () => setIsEmotesModalVisible(false);\n\n    const chatInputRef = useOnClickOutside(handleCloseEmotesModal);\n\n    const renderSuggestions = ({\n      type,\n      items,\n      activeIndex,\n    }: SuggestionsState) => {\n      const renderUser = (name: string, index: number) => (\n        <SuggestionItem\n          key={name}\n          $isActive={index === activeIndex}\n          onMouseEnter={() => onSuggestionMouseEnter(index)}\n          onClick={() => onSuggestionClick(index)}\n        >\n          {name}\n        </SuggestionItem>\n      );\n\n      const renderEmote = (\n        { src, srcSet, alt }: htmlEntity.Emote,\n        index: number,\n      ) => (\n        <SuggestionItem\n          key={alt}\n          $isActive={index === activeIndex}\n          onMouseEnter={() => onSuggestionMouseEnter(index)}\n          onClick={() => onSuggestionClick(index)}\n        >\n          <SuggestionImage src={src} srcSet={srcSet} alt={alt} />\n          {alt}\n        </SuggestionItem>\n      );\n\n      const renderItems = () =>\n        type === 'users'\n          ? (items as string[]).map(renderUser)\n          : (items as htmlEntity.Emote[]).map(renderEmote);\n\n      return (\n        <Suggestions ref={suggestionsRef}>\n          {items.length ? renderItems() : 'No matches'}\n        </Suggestions>\n      );\n    };\n\n    const renderEmotesButton = () => (\n      <EmotesButton\n        onClick={() => setIsEmotesModalVisible(!isEmotesModalVisible)}\n      >\n        <SmileyFaceIcon />\n      </EmotesButton>\n    );\n\n    const renderEmotesModal = () => (\n      <EmotesModal>\n        <ChatModal onClose={handleCloseEmotesModal}>\n          <EmotePicker onEmoteClick={onEmoteClick} />\n        </ChatModal>\n      </EmotesModal>\n    );\n\n    const handleHeightChange = (height: number) =>\n      setIsShowTextareaScroll(height >= 96);\n\n    return (\n      <ChatInputRoot ref={chatInputRef}>\n        <ChatInputInner>\n          {suggestions.isActive && renderSuggestions(suggestions)}\n          <TextareaWrapper $isSuggestions={suggestions.isActive}>\n            <TextareaInput>\n              <Textarea\n                ref={textareaRef}\n                value={text}\n                placeholder=\"Send a message\"\n                maxLength={500}\n                maxRows={4}\n                disabled={isDisabled}\n                $showScroll={isShowTextareaScroll}\n                onChange={onChange}\n                onKeyUp={onKeyUp}\n                onKeyDown={onKeyDown}\n                onHeightChange={handleHeightChange}\n              />\n              {isEmotesLoaded && renderEmotesButton()}\n            </TextareaInput>\n          </TextareaWrapper>\n          {isEmotesModalVisible && renderEmotesModal()}\n        </ChatInputInner>\n      </ChatInputRoot>\n    );\n  },\n);\n\nexport default React.memo(ChatInput);\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"currentColor\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 8a2 2 0 100 4 2 2 0 000-4z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M9 2h2a2.01 2.01 0 001.235 1.855l.53.22a2.01 2.01 0 002.185-.439l1.414 1.414a2.01 2.01 0 00-.439 2.185l.22.53A2.01 2.01 0 0018 9v2a2.01 2.01 0 00-1.855 1.235l-.22.53a2.01 2.01 0 00.44 2.185l-1.415 1.414a2.01 2.01 0 00-2.184-.439l-.531.22A2.01 2.01 0 0011 18H9a2.01 2.01 0 00-1.235-1.854l-.53-.22a2.009 2.009 0 00-2.185.438L3.636 14.95a2.009 2.009 0 00.438-2.184l-.22-.531A2.01 2.01 0 002 11V9c.809 0 1.545-.487 1.854-1.235l.22-.53a2.009 2.009 0 00-.438-2.185L5.05 3.636a2.01 2.01 0 002.185.438l.53-.22A2.01 2.01 0 009 2zm-4 8l1.464 3.536L10 15l3.535-1.464L15 10l-1.465-3.536L10 5 6.464 6.464 5 10z\",\n  clipRule: \"evenodd\"\n}));\n\nconst SvgGears = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 20 20\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref);\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgGears, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/gears.5f76af43.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M13 8l-5 5v18h6v5l5-5h4l9-9V8z\"\n});\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#9147ff\",\n  d: \"M26 25l4-4V10H14v15h4v4l4-4z\"\n});\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M20 14h2v6h-2v-6zm7 0v6h-2v-6h2z\"\n});\n\nconst SvgTwitch = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 40 40\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref, _ref2, _ref3);\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgTwitch, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/twitch.75e6e194.svg\";\nexport { ForwardRef as ReactComponent };","import styled from 'styled-components';\n\nconst Button = styled.button.attrs({ type: 'button' })`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0 10px;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #9147ff;\n  outline: none;\n  font-size: 12px;\n  border-radius: 4px;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #772ce8;\n  }\n\n  &:active {\n    background-color: #5c16c5;\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n\n  &[disabled] {\n    background-color: rgba(255, 255, 255, 0.26);\n    color: rgba(255, 255, 255, 0.8);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst SwitchRoot = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  line-height: 20px;\n`;\nconst Label = styled.label`\n  content: '';\n  position: relative;\n  display: inline-block;\n  order: 0;\n  width: 35px;\n  height: 20px;\n  vertical-align: bottom;\n  border-radius: 10px/50%;\n  background-color: rgba(0, 0, 0, 0.3);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15), 0 0 2px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.1s ease;\n  cursor: pointer;\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    bottom: 2px;\n    display: block;\n    width: 16px;\n    border-radius: 50%;\n    background-color: #fff;\n    transition: left 0.1s ease;\n  }\n`;\nconst Input = styled.input.attrs({ type: 'checkbox' })`\n  position: absolute;\n  opacity: 0;\n\n  &:checked + ${Label} {\n    background-color: #9147ff;\n\n    &:after {\n      content: '';\n      top: 2px;\n      left: calc(100% - 18px);\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 9px;\n      left: 10px;\n      display: block;\n      height: 3px;\n      width: 7px;\n      border-bottom: 2px solid #fff;\n      border-left: 2px solid #fff;\n      transform: translate3d(-50%, -50%, 0) rotate(-45deg);\n    }\n  }\n`;\n\ntype Props = {\n  id: string;\n  label: string;\n  checked?: boolean;\n  readOnly?: boolean;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst Switch = ({ id, label, checked, readOnly, onChange }: Props) => (\n  <SwitchRoot>\n    <Input\n      id={id}\n      aria-label={label}\n      checked={checked}\n      readOnly={readOnly}\n      onChange={onChange}\n    />\n    <Label htmlFor={id} />\n  </SwitchRoot>\n);\n\nSwitch.defaultProps = {\n  checked: false,\n  readOnly: false,\n  onChange: () => {},\n};\n\nexport default Switch;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport Scrollbar from 'components/Scrollbar';\nimport Switch from 'components/Switch';\nimport { optionsSelector } from 'features/options/optionsSelectors';\nimport { isAuthSelector } from 'features/auth/authSelectors';\nimport {\n  userDisplayNameSelector,\n  userColorSelector,\n} from 'features/chat/chatSelectors';\nimport { userBadgesImagesSelector } from 'features/badges/badgesSelectors';\nimport { changeOption } from 'features/options/optionsSlice';\n\nconst OptionsRoot = styled.div`\n  padding: 16px;\n  height: 100%;\n`;\nconst Header = styled.h2`\n  margin: 0;\n  padding: 0;\n  font-size: 14px;\n  text-align: center;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst Categories = styled(Scrollbar)`\n  height: 100%;\n`;\nconst Category = styled.div`\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding: 8px 0;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst CategoryItems = styled.div``;\nconst Option = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 4px 0;\n  cursor: pointer;\n`;\nconst OptionText = styled.span``;\nconst Profile = styled.div`\n  display: flex;\n  align-items: center;\n`;\nconst UserName = styled.div`\n  font-weight: bold;\n  color: ${(p) => p.color};\n`;\nconst LogOutButton = styled(Link)`\n  margin-left: auto;\n  color: #bf94ff;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Badge = styled.img`\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst Options = () => {\n  const dispatch = useDispatch();\n  const options = useSelector(optionsSelector);\n\n  const isAuth = useSelector(isAuthSelector);\n\n  const userDisplayName = useSelector(userDisplayNameSelector);\n  const userColor = useSelector(userColorSelector);\n  const userBadgesImages = useSelector(userBadgesImagesSelector);\n\n  const renderOption = useCallback(\n    ({ id, name, title, description, value }) => (\n      <Option\n        key={id}\n        onClick={() => dispatch(changeOption({ name, value: !value }))}\n        title={description}\n      >\n        <OptionText>{title}</OptionText>\n        <Switch\n          id={id}\n          label={title}\n          checked={value}\n          onChange={() => dispatch(changeOption({ name, value }))}\n        />\n      </Option>\n    ),\n    [dispatch],\n  );\n\n  const renderProfileCategory = () => {\n    return (\n      <Category>\n        <CategoryHeader>Profile</CategoryHeader>\n        <CategoryItems>\n          <Profile>\n            {userBadgesImages.map(({ alt, label, src, srcSet }, key) => (\n              <Badge\n                // eslint-disable-next-line react/no-array-index-key\n                key={key}\n                alt={alt}\n                aria-label={label}\n                src={src}\n                srcSet={srcSet}\n              />\n            ))}\n            <UserName color={userColor}>{userDisplayName}</UserName>\n            <LogOutButton to=\"/chat/logout\">Log Out</LogOutButton>\n          </Profile>\n        </CategoryItems>\n      </Category>\n    );\n  };\n\n  const renderOptionsCategory = useCallback(\n    ({ title, items }, key) => (\n      <Category key={key}>\n        {!!title && <CategoryHeader>{title}</CategoryHeader>}\n        <CategoryItems>{items.map(renderOption)}</CategoryItems>\n      </Category>\n    ),\n    [renderOption],\n  );\n\n  return (\n    <OptionsRoot>\n      <Header>Chat settings</Header>\n      <Categories>\n        {isAuth && renderProfileCategory()}\n        {options.map(renderOptionsCategory)}\n      </Categories>\n    </OptionsRoot>\n  );\n};\n\nexport default Options;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nimport useOnClickOutside from 'react-cool-onclickoutside';\nimport { ReactComponent as GearsIconSvg } from 'icons/gears.svg';\nimport { ReactComponent as TwitchIconSvg } from 'icons/twitch.svg';\nimport Button from 'components/Button';\nimport IconButton from 'components/IconButton';\nimport ChatModal from 'components/ChatModal';\nimport Options from 'features/options/Options';\nimport {\n  isAuthSelector,\n  isAuthReadySelector,\n} from 'features/auth/authSelectors';\n\nconst ChatControlsRoot = styled.div`\n  position: relative;\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n`;\nconst Controls = styled.div`\n  display: flex;\n  align-items: center;\n\n  & > :not(:last-child) {\n    margin-right: 8px;\n  }\n`;\nconst OptionsModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 10px;\n  bottom: 100%;\n  margin-bottom: 10px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nconst OptionsButton = styled(IconButton)`\n  margin-left: auto;\n`;\nconst GearsIcon = styled(GearsIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\nconst TwitchIcon = styled(TwitchIconSvg)`\n  display: block;\n  margin-right: 4px;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  isDisabled: boolean;\n  onSendMessage: () => void;\n};\n\nconst ChatControls = ({ isDisabled, onSendMessage }: Props) => {\n  const [isOptionsModalVisible, setIsOptionsModalVisible] = useState(false);\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n\n  const handleCloseOptionsModal = () => setIsOptionsModalVisible(false);\n  const optionsRef = useOnClickOutside(handleCloseOptionsModal);\n\n  const renderSignInButton = () => (\n    <Button as={Link} to=\"/chat/auth\">\n      <TwitchIcon />\n      Sign in with Twitch\n    </Button>\n  );\n\n  const renderOptionsModal = () => (\n    <OptionsModal ref={optionsRef}>\n      <ChatModal onClose={handleCloseOptionsModal}>\n        <Options />\n      </ChatModal>\n    </OptionsModal>\n  );\n\n  return (\n    <ChatControlsRoot>\n      <Controls>\n        {isAuthReady && !isAuth && renderSignInButton()}\n        <OptionsButton\n          ref={optionsRef}\n          onClick={() => setIsOptionsModalVisible((prev) => !prev)}\n        >\n          <GearsIcon />\n        </OptionsButton>\n        <Button disabled={isDisabled} onClick={onSendMessage}>\n          Chat\n        </Button>\n      </Controls>\n      {isOptionsModalVisible && renderOptionsModal()}\n    </ChatControlsRoot>\n  );\n};\n\nexport default React.memo(ChatControls);\n","/* eslint-disable no-param-reassign */\n// source: https://github.com/night/betterttv/blob/master/src/utils/colors.js\n\n/**\n * Converts an RGB color value to HSL. Conversion formula\n * adapted from https://en.wikipedia.org/wiki/HSL_color_space\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and l in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSL representation\n */\nconst rgbToHsl = (r: number, g: number, b: number) => {\n  // Convert RGB to HSL, not ideal but it's faster than HCL or full YIQ conversion\n  // based on http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = Math.min(Math.max(0, (max + min) / 2), 1);\n  const d = Math.min(Math.max(0, max - min), 1);\n\n  if (d === 0) {\n    return [d, d, l]; // achromatic\n  }\n\n  let h = 0;\n\n  // eslint-disable-next-line default-case\n  switch (max) {\n    case r:\n      h = Math.min(Math.max(0, (g - b) / d + (g < b ? 6 : 0)), 6);\n      break;\n    case g:\n      h = Math.min(Math.max(0, (b - r) / d + 2), 6);\n      break;\n    case b:\n      h = Math.min(Math.max(0, (r - g) / d + 4), 6);\n      break;\n  }\n\n  h /= 6;\n\n  let s = l > 0.5 ? d / (2 * (1 - l)) : d / (2 * l);\n\n  s = Math.min(Math.max(0, s), 1);\n\n  return [h, s, l];\n};\n\n// Convert HSL to RGB, based on http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\nconst hueToRgb = (pp: number, qq: number, t: number) => {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1 / 6) return pp + (qq - pp) * 6 * t;\n  if (t < 1 / 2) return qq;\n  if (t < 2 / 3) return pp + (qq - pp) * (2 / 3 - t) * 6;\n\n  return pp;\n};\n\n/**\n * Converts an HSL color value to RGB. Conversion formula\n * adapted from https://en.wikipedia.org/wiki/HSL_color_space\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set of integers [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  l       The lightness\n * @return  Array           The RGB representation\n */\nconst hslToRgb = (h: number, s: number, l: number) => {\n  if (s === 0) {\n    const rgb = Math.round(Math.min(Math.max(0, 255 * l), 255)); // achromatic\n\n    return [rgb, rgb, rgb];\n  }\n\n  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  const p = 2 * l - q;\n\n  return [\n    Math.round(Math.min(Math.max(0, 255 * hueToRgb(p, q, h + 1 / 3)), 255)),\n    Math.round(Math.min(Math.max(0, 255 * hueToRgb(p, q, h)), 255)),\n    Math.round(Math.min(Math.max(0, 255 * hueToRgb(p, q, h - 1 / 3)), 255)),\n  ];\n};\n\nconst calculateColorBackground = (color: string) => {\n  // Converts HEX to YIQ to judge what color background the color would look best on\n  color = color.replace(/[^0-9a-f]/gi, '');\n\n  if (color.length < 6) {\n    color = color[0] + color[0] + color[1] + color[1] + color[2] + color[2];\n  }\n\n  const r = parseInt(color.substr(0, 2), 16);\n  const g = parseInt(color.substr(2, 2), 16);\n  const b = parseInt(color.substr(4, 2), 16);\n\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n\n  return yiq >= 128 ? 'dark' : 'light';\n};\n\nconst calculateColorReplacement = (\n  color: string,\n  background: 'dark' | 'light' = 'dark',\n) => {\n  // Modified from http://www.sitepoint.com/javascript-generate-lighter-darker-color/\n  // Modified further to use HSL as an intermediate format, to avoid hue-shifting\n  // toward primaries when darkening and toward secondaries when lightening\n  const light = background === 'light';\n  const factor = light ? 0.1 : -0.1;\n\n  color = color.replace(/[^0-9a-f]/gi, '');\n\n  if (color.length < 6) {\n    color = color[0] + color[0] + color[1] + color[1] + color[2] + color[2];\n  }\n\n  const hsl = rgbToHsl(\n    parseInt(color.substr(0, 2), 16),\n    parseInt(color.substr(2, 2), 16),\n    parseInt(color.substr(4, 2), 16),\n  );\n\n  // more thoroughly lightens dark colors, with no problems at black\n  let l = light ? 1 - (1 - factor) * (1 - hsl[2]) : (1 + factor) * hsl[2];\n\n  l = Math.min(Math.max(0, l), 1);\n\n  const rgb = hslToRgb(hsl[0], hsl[1], l);\n  const r = rgb[0].toString(16).padStart(2, '0');\n  const g = rgb[1].toString(16).padStart(2, '0');\n  const b = rgb[2].toString(16).padStart(2, '0');\n\n  return `#${r}${g}${b}`;\n};\n\nconst colorCache = new Map();\n\n// eslint-disable-next-line import/prefer-default-export\nexport const calculateColor = (color: string, darkenedMode = true): string => {\n  const cacheKey = `${color}:${darkenedMode}`;\n\n  if (colorCache.has(cacheKey)) return colorCache.get(cacheKey);\n\n  const colorRegex = /^#[0-9a-f]+$/i;\n\n  if (!colorRegex.test(color)) return color;\n\n  let bgColor: 'dark' | 'light';\n\n  for (let i = 20; i >= 0; i -= 1) {\n    bgColor = calculateColorBackground(color);\n\n    if (bgColor === 'light' && !darkenedMode) break;\n    if (bgColor === 'dark' && darkenedMode) break;\n\n    color = calculateColorReplacement(color, bgColor);\n  }\n\n  colorCache.set(cacheKey, color);\n\n  if (colorCache.size > 1000) {\n    colorCache.delete(colorCache.entries().next().value[0]);\n  }\n\n  return color;\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\n\nimport { TWITCH_EMOTES_CDN } from 'utils/constants';\nimport type { MessageCardInfo } from 'features/messages/messagesSlice';\nimport { messageCardSelector } from 'features/messageCards/messageCardsSelectors';\n\nconst MessageCardRoot = styled.a.attrs({\n  target: '_blank',\n  rel: 'noreferrer noopener',\n})<{ $clickable?: boolean }>`\n  display: flex;\n  flex-wrap: nowrap;\n  padding: 5px;\n  border-radius: 4px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.9), 0 0 2px rgba(0, 0, 0, 0.9);\n  background-color: #18181b;\n  text-decoration: none;\n\n  ${(p) =>\n    p.$clickable &&\n    css`\n      &:hover {\n        background-color: #3a3a3d;\n      }\n\n      &:active {\n        background-color: #464649;\n      }\n    `}\n`;\nconst Preview = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 45px;\n  width: 80px;\n  background-color: #26262c;\n  overflow: hidden;\n`;\nconst Image = styled.img`\n  max-height: 100%;\n`;\nconst PreviewLoading = styled.div`\n  height: 45px;\n  width: 80px;\n  background-color: #46464b;\n`;\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding-left: 10px;\n  overflow: hidden;\n`;\nconst textStyles = css`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin: 0;\n  font-size: 12px;\n  line-height: 1.5;\n`;\nconst Title = styled.p`\n  ${textStyles};\n  font-weight: bold;\n  color: #efeff1;\n`;\nconst Description = styled.p`\n  ${textStyles};\n  color: #adadb8;\n`;\nconst textLoadingStyle = css`\n  margin-top: 3px;\n  margin-bottom: 4px;\n\n  height: 12px;\n  background-color: #232326;\n  border-radius: 2px;\n`;\nconst TitleLoading = styled.div`\n  ${textLoadingStyle};\n  width: 180px;\n`;\nconst DescriptionLoading = styled.div`\n  ${textLoadingStyle};\n  width: 120px;\n`;\n\nconst emoteId = '58765';\nconst errorImageSrc = `${TWITCH_EMOTES_CDN}/${emoteId}/1.0`;\nconst errorImageSrcSet = `${TWITCH_EMOTES_CDN}/${emoteId}/1.0 1x, ${TWITCH_EMOTES_CDN}/${emoteId}/2.0 2x, ${TWITCH_EMOTES_CDN}/${emoteId}/3.0 4x`;\n\nconst errorTitle = 'Something went wrong';\nconst errorDescription = {\n  'twitch-clip': \"We couldn't find that Clip\",\n  'twitch-video': \"We couldn't find that Video\",\n  'youtube-video': \"We couldn't find that Video\",\n};\n\nconst renderLoading = () => (\n  <MessageCardRoot>\n    <PreviewLoading />\n    <Content>\n      <TitleLoading />\n      <DescriptionLoading />\n    </Content>\n  </MessageCardRoot>\n);\n\nconst renderError = (type: MessageCardInfo['type']) => (\n  <MessageCardRoot>\n    <Preview>\n      <Image src={errorImageSrc} srcSet={errorImageSrcSet} alt=\"\" />\n    </Preview>\n    <Content>\n      <Title>{errorTitle}</Title>\n      <Description>{errorDescription[type]}</Description>\n    </Content>\n  </MessageCardRoot>\n);\n\ntype Props = MessageCardInfo;\n\nconst MessageCard = (cardInfo: Props) => {\n  const card = useSelector(messageCardSelector(cardInfo));\n\n  if (!card || card.status === 'loading') {\n    return renderLoading();\n  }\n\n  if (card.status === 'error') {\n    return renderError(cardInfo.type);\n  }\n\n  const { id, src, srcSet, title, description } = card;\n\n  const url =\n    cardInfo.type === 'twitch-clip'\n      ? `https://clips.twitch.tv/${id}`\n      : cardInfo.url;\n\n  return (\n    <MessageCardRoot href={url} $clickable>\n      <Preview>\n        <Image src={src} srcSet={srcSet} alt={title} />\n      </Preview>\n      <Content>\n        <Title>{title}</Title>\n        <Description>{description}</Description>\n      </Content>\n    </MessageCardRoot>\n  );\n};\n\nexport default MessageCard;\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { format } from 'date-fns/fp';\n\nimport { calculateColor } from 'utils/colors';\nimport MessageCard from 'features/messageCards/MessageCard';\nimport type {\n  Message as MessageType,\n  MessageEntity,\n} from 'features/messages/messagesSlice';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\n\ntype MessageRootProps = {\n  $isAction: boolean;\n  $isHistory: boolean;\n  $isDeleted: boolean;\n  $isHighlighted: boolean;\n  $isEven: boolean;\n  $color: string;\n};\n\nconst getChatMessageBg = (p: MessageRootProps) => {\n  if (p.$isHighlighted) return 'rgba(255, 0, 0, 0.3)';\n  if (p.$isEven) return '#1f1925';\n  return 'transparent';\n};\n\nconst MessageRoot = styled.div<MessageRootProps>`\n  padding: 5px 20px;\n  color: ${(p) => (p.$isAction ? p.$color : '#fff')};\n  opacity: ${(p) => (p.$isHistory || p.$isDeleted ? '0.5' : '1')};\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${getChatMessageBg};\n`;\nconst Name = styled.span<{ $color: string }>`\n  font-weight: bold;\n  color: ${(p) => p.$color};\n  cursor: pointer;\n`;\nconst Emoji = styled.img`\n  display: inline-block;\n  margin-top: -5px;\n  margin-bottom: -4px;\n  width: 20px;\n  height: auto;\n  vertical-align: middle;\n`;\nconst Emote = styled.img`\n  display: inline-block;\n  margin: -5px 0;\n  vertical-align: middle;\n`;\n// https://github.com/night/BetterTTV/blob/master/src/modules/emotes/style.css\n// prettier-ignore\nconst EmoteWrapper = styled.span`\n  display: inline-block;\n\n  /* Prevent stacking of IceCold, SoSnowy */\n  &[data-emote-id='5849c9a4f52be01a7ee5f79d'] + &[data-emote-id='5849c9a4f52be01a7ee5f79d'],\n  &[data-emote-id='567b5b520e984428652809b6'] + &[data-emote-id='567b5b520e984428652809b6'] {\n    display: none;\n  }\n\n  /* IceCold */\n  &        + &[data-emote-id='5849c9a4f52be01a7ee5f79d'],\n  ${Emoji} + &[data-emote-id='5849c9a4f52be01a7ee5f79d'] {\n    margin-left: -33px;\n  }\n\n  /* SoSnowy */\n  &        + &[data-emote-id='567b5b520e984428652809b6'],\n  ${Emoji} + &[data-emote-id='567b5b520e984428652809b6'] {\n    margin-left: -32px;\n  }\n\n  /* SantaHat */\n  &        + &[data-emote-id='58487cc6f52be01a7ee5f205'],\n  ${Emoji} + &[data-emote-id='58487cc6f52be01a7ee5f205'] {\n    margin-left: -34px;\n    margin-top: -18px;\n  }\n\n  /* TopHat, CandyCane, ReinDeer */\n  &        + &[data-emote-id='5849c9c8f52be01a7ee5f79e'],\n  ${Emoji} + &[data-emote-id='5849c9c8f52be01a7ee5f79e'],\n  &        + &[data-emote-id='567b5c080e984428652809ba'],\n  ${Emoji} + &[data-emote-id='567b5c080e984428652809ba'],\n  &        + &[data-emote-id='567b5dc00e984428652809bd'],\n  ${Emoji} + &[data-emote-id='567b5dc00e984428652809bd'] {\n    margin-left: -31px;\n    margin-top: -18px;\n  }\n\n  /* cvHazmat, cvMask */\n  &        + &[data-emote-id='5e76d338d6581c3724c0f0b2'],\n  ${Emoji} + &[data-emote-id='5e76d338d6581c3724c0f0b2'],\n  &        + &[data-emote-id='5e76d399d6581c3724c0f0b8'],\n  ${Emoji} + &[data-emote-id='5e76d399d6581c3724c0f0b8'] {\n    margin-left: -34px;\n  }\n  &        + &[data-emote-id='5e76d338d6581c3724c0f0b2'] ${Emote},\n  ${Emoji} + &[data-emote-id='5e76d338d6581c3724c0f0b2'] ${Emote},\n  &        + &[data-emote-id='5e76d399d6581c3724c0f0b8'] ${Emote},\n  ${Emoji} + &[data-emote-id='5e76d399d6581c3724c0f0b8'] ${Emote} {\n    height: 34px;\n    width: 34px;\n  }\n`;\nconst Mention = styled.span<{ $isActive: boolean; $isOwnMessage: boolean }>`\n  ${(p) =>\n    (p.$isActive || p.$isOwnMessage) &&\n    css`\n      padding: 2px 4px;\n    `};\n  ${(p) =>\n    p.$isOwnMessage &&\n    css`\n      background-color: #40404a;\n      color: #fff;\n    `};\n  ${(p) =>\n    p.$isActive &&\n    css`\n      background-color: #fafafa;\n      color: #18181b;\n    `};\n`;\nconst Link = styled.a`\n  color: #bf94ff;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Timestamp = styled.span`\n  margin-right: 5px;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst Badge = styled.img`\n  margin-bottom: 2px;\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst renderMessageArray = (messageLogin: string, userLogin: string | null) => (\n  item: MessageEntity,\n  key: number,\n) => {\n  if (typeof item !== 'object') return item;\n\n  if (\n    item.type === 'twitch-emote' ||\n    item.type === 'bttv-emote' ||\n    item.type === 'ffz-emote'\n  ) {\n    return (\n      <EmoteWrapper key={key} data-emote-id={item.id}>\n        <Emote src={item.src} srcSet={item.srcSet} alt={item.alt} />\n      </EmoteWrapper>\n    );\n  }\n\n  if (item.type === 'emoji') {\n    return (\n      <EmoteWrapper key={key}>\n        <Emoji src={item.src} alt={item.alt} />\n      </EmoteWrapper>\n    );\n  }\n\n  if (item.type === 'mention') {\n    return (\n      <Mention\n        key={key}\n        $isActive={item.target === userLogin}\n        $isOwnMessage={messageLogin === userLogin}\n      >\n        {item.text}\n      </Mention>\n    );\n  }\n\n  if (item.type === 'link') {\n    return (\n      <Link\n        key={key}\n        href={item.href}\n        rel=\"noreferrer noopener\"\n        target=\"_blank\"\n      >\n        {item.text}\n      </Link>\n    );\n  }\n\n  return null;\n};\n\nconst renderBadges = (badges: htmlEntity.Badge[]) =>\n  badges.map(({ alt, label, src, srcSet }, key: number) => (\n    // eslint-disable-next-line react/no-array-index-key\n    <Badge key={key} alt={alt} aria-label={label} src={src} srcSet={srcSet} />\n  ));\n\ntype Props = {\n  message: MessageType;\n  userLogin: string | null;\n  isEven: boolean;\n  isShowTimestamps: boolean;\n  onNameRightClick: (name: string) => void;\n};\n\nconst MESSAGE_DELETED_LABEL = '<message deleted>';\n\nconst Message = ({\n  message: {\n    entities,\n    user: { login, color, displayName, badges },\n    timestamp,\n    card,\n    isHistory,\n    isAction,\n    isDeleted,\n    isHighlighted,\n  },\n  userLogin,\n  isEven,\n  isShowTimestamps,\n  // onNameClick,\n  onNameRightClick,\n}: Props) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const handleNameRightClick = (\n    e: React.MouseEvent<HTMLSpanElement, MouseEvent>,\n  ) => {\n    onNameRightClick(displayName);\n    e.preventDefault();\n  };\n\n  const newColor = color ? calculateColor(color) : '';\n\n  return (\n    <MessageRoot\n      $isHistory={isHistory}\n      $isAction={isAction}\n      $isEven={isEven}\n      $isHighlighted={isHighlighted}\n      $isDeleted={isDeleted}\n      $color={newColor}\n    >\n      {isShowTimestamps && (\n        <Timestamp>{format('h:mm', new Date(timestamp))}</Timestamp>\n      )}\n      {badges.length > 0 && renderBadges(badges)}\n      <Name $color={newColor} onContextMenu={handleNameRightClick}>\n        {displayName}\n      </Name>\n      {isAction ? ' ' : ': '}\n      {isDeleted && !isVisible ? (\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n        <Link onClick={() => setIsVisible(true)}>{MESSAGE_DELETED_LABEL}</Link>\n      ) : (\n        entities.map(renderMessageArray(login, userLogin))\n      )}\n      {card && <MessageCard type={card.type} id={card.id} url={card.url} />}\n    </MessageRoot>\n  );\n};\n\nexport default React.memo(Message);\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport type { Notice as NoticeType } from 'features/messages/messagesSlice';\n\nconst NoticeRoot = styled.div<{ $isEven: boolean }>`\n  padding: 5px 20px;\n  color: rgba(255, 255, 255, 0.6);\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${(p) => (p.$isEven ? '#1f1925' : 'transparent')};\n`;\n\ntype Props = {\n  message: NoticeType;\n  isEven: boolean;\n};\n\nconst Notice = ({ message: { message }, isEven }: Props) => (\n  <NoticeRoot $isEven={isEven}>{message}</NoticeRoot>\n);\n\nexport default Notice;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport type { UserNotice as UserNoticeType } from 'features/messages/messagesSlice';\n\nconst UserNoticeRoot = styled.div`\n  padding: 5px 20px 5px 16px;\n  line-height: 20px;\n  word-wrap: break-word;\n  border-left: 4px solid #9147ff;\n  color: #fff;\n`;\n\ntype Props = {\n  message: UserNoticeType;\n};\n\nconst UserNotice = ({ message: { systemMessage } }: Props) => (\n  <UserNoticeRoot>{systemMessage}</UserNoticeRoot>\n);\n\nexport default UserNotice;\n","import React from 'react';\n\nimport assertNever from 'utils/assertNever';\nimport type { ChatMessage as ChatMessageType } from 'features/messages/messagesSlice';\nimport Message from 'features/messages/Message';\nimport Notice from 'features/messages/Notice';\nimport UserNotice from 'features/messages/UserNotice';\n\ntype Props = {\n  message: ChatMessageType;\n  userLogin: string | null;\n  isEven: boolean;\n  isShowTimestamps: boolean;\n  // onNameClick: (name: string) => void;\n  onNameRightClick: (name: string) => void;\n};\n\nconst ChatMessage = ({\n  message,\n  userLogin,\n  isEven,\n  isShowTimestamps,\n  // onNameClick,\n  onNameRightClick,\n}: Props) => {\n  if (message.type === 'message') {\n    return (\n      <Message\n        message={message}\n        userLogin={userLogin}\n        isEven={isEven}\n        isShowTimestamps={isShowTimestamps}\n        // onNameClick={onNameClick}\n        onNameRightClick={onNameRightClick}\n      />\n    );\n  }\n\n  if (message.type === 'notice') {\n    return <Notice message={message} isEven={isEven} />;\n  }\n\n  if (message.type === 'user-notice') {\n    return <UserNotice message={message} />;\n  }\n\n  return assertNever(message);\n};\n\nexport default React.memo(ChatMessage);\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport type ScrollbarType from 'react-scrollbars-custom';\nimport type { ScrollState } from 'react-scrollbars-custom/dist/types/types';\n\nimport Scrollbar from 'components/Scrollbar';\nimport ChatMessage from 'features/messages/ChatMessage';\nimport {\n  messagesSelector,\n  isEvenSelector,\n} from 'features/messages/messagesSelectors';\nimport {\n  isShowTimestampsSelector,\n  isSplitChatSelector,\n} from 'features/options/optionsSelectors';\nimport { userLoginSelector } from 'features/auth/authSelectors';\n\nconst MORE_MESSAGES_OFFSET = 100;\n\nconst MessagesRoot = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\nconst StyledScrollbar = styled(Scrollbar)`\n  .ScrollbarsCustom-Content {\n    padding-bottom: 10px !important;\n  }\n`;\nconst MoreMessagesButton = styled.button<{ $isVisible: boolean }>`\n  position: absolute;\n  left: 50%;\n  bottom: 10px;\n  display: ${(p) => (p.$isVisible ? 'block' : 'none')};\n  padding: 5px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  transform: translateX(-50%);\n`;\n\ntype Props = {\n  onNameRightClick: (name: string) => void;\n};\n\nconst Messages = ({ onNameRightClick }: Props) => {\n  const [\n    isMoreMessagesButtonVisible,\n    setIsMoreMessagesButtonVisible,\n  ] = useState(false);\n\n  const messages = useSelector(messagesSelector);\n  const userLogin = useSelector(userLoginSelector);\n\n  const isEven = useSelector(isEvenSelector);\n  const isShowTimestamps = useSelector(isShowTimestampsSelector);\n  const isSplitChat = useSelector(isSplitChatSelector);\n\n  const handleScrollUpdate = ({\n    clientHeight,\n    contentScrollHeight,\n    scrollTop,\n  }: ScrollState) => {\n    const maxScrollTop = contentScrollHeight - clientHeight;\n    const isVisible = scrollTop + MORE_MESSAGES_OFFSET < maxScrollTop;\n\n    setIsMoreMessagesButtonVisible(isVisible);\n  };\n\n  const scrollbarRef = useRef<ScrollbarType>(null);\n\n  const handleScrollToBottom = () => {\n    if (scrollbarRef.current) {\n      scrollbarRef.current.scrollToBottom();\n    }\n  };\n\n  useEffect(() => {\n    if (!isMoreMessagesButtonVisible) {\n      handleScrollToBottom();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages]);\n\n  const getIsEven = (key: number) => {\n    if (!isSplitChat) return false;\n    return isEven ? key % 2 === 1 : key % 2 === 0;\n  };\n\n  return (\n    <MessagesRoot>\n      <StyledScrollbar onUpdate={handleScrollUpdate} ref={scrollbarRef}>\n        {messages.map((message, key) => (\n          <ChatMessage\n            key={message.id}\n            message={message}\n            userLogin={userLogin}\n            isEven={getIsEven(key)}\n            isShowTimestamps={isShowTimestamps}\n            onNameRightClick={onNameRightClick}\n          />\n        ))}\n      </StyledScrollbar>\n      <MoreMessagesButton\n        onClick={handleScrollToBottom}\n        $isVisible={isMoreMessagesButtonVisible}\n      >\n        More messages below\n      </MoreMessagesButton>\n    </MessagesRoot>\n  );\n};\n\nexport default Messages;\n","import React, { useState, useRef, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport Button from 'components/Button';\n\nconst JoinChannelRoot = styled.div`\n  padding: 10px;\n  flex-grow: 1;\n  width: 320px;\n`;\nconst Title = styled.h2`\n  margin-top: 0;\n  margin-bottom: 10px;\n  padding: 0;\n  color: #fff;\n`;\nconst Controls = styled.div`\n  display: flex;\n\n  & > :not(:last-child) {\n    margin-right: 10px;\n  }\n`;\nconst Input = styled.input`\n  display: block;\n  padding: 4px 10px;\n  width: 100%;\n  border: 2px solid transparent;\n  background-color: rgba(255, 255, 255, 0.15);\n  font-family: inherit;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\nconst JoinButton = styled(Button)`\n  flex-shrink: none;\n`;\n\nconst JoinChannel = () => {\n  const history = useHistory();\n  const [value, setValue] = useState('');\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const handleChangeChannel = () => {\n    history.push({\n      pathname: '/chat/',\n      hash: value,\n    });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      handleChangeChannel();\n    }\n  };\n\n  return (\n    <JoinChannelRoot>\n      <Title>Channel to join: </Title>\n      <Controls>\n        <Input\n          ref={inputRef}\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          onKeyPress={handleKeyPress}\n        />\n        <JoinButton onClick={handleChangeChannel} disabled={!value}>\n          Join\n        </JoinButton>\n      </Controls>\n    </JoinChannelRoot>\n  );\n};\n\nexport default JoinChannel;\n","import React, { useState, useCallback, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { isAuthSelector } from 'features/auth/authSelectors';\nimport {\n  currentChannelSelector,\n  isConnectedSelector,\n} from 'features/chat/chatSelectors';\nimport { isFixedWidthSelector } from 'features/options/optionsSelectors';\nimport useInitializeAuth from 'features/auth/useInitializeAuth';\nimport useFetchChatData from 'features/chat/hooks/useFetchChatData';\nimport useCurrentChannel from 'features/chat/hooks/useCurrentChannel';\nimport useTwitchClient from 'features/chat/hooks/useTwitchClient';\nimport useChatInput from 'features/chat/hooks/useChatInput';\n\nimport ChatInput from 'features/chat/ChatInput';\nimport ChatControls from 'features/chat/ChatControls';\nimport Messages from 'features/messages/Messages';\nimport JoinChannel from 'features/chat/JoinChannel';\n\nconst ChatRoot = styled.div`\n  height: 100vh;\n  font-size: 12px;\n  background-color: #0e0e10;\n`;\nconst ChatWrapper = styled.div<{ $isFixedWidth: boolean }>`\n  display: flex;\n  flex-direction: column;\n  width: ${(p) => (p.$isFixedWidth ? '340px' : 'auto')};\n  height: 100%;\n  background-color: #18181b;\n`;\n\nconst Chat = () => {\n  const [text, setText] = useState('');\n  const [recentUserMessageIndex, setRecentUserMessageIndex] = useState(-1);\n\n  const client = useTwitchClient();\n\n  useInitializeAuth();\n  useCurrentChannel();\n  useFetchChatData();\n\n  const currentChannel = useSelector(currentChannelSelector);\n\n  const isAuth = useSelector(isAuthSelector);\n  const isConnected = useSelector(isConnectedSelector);\n\n  const isFixedWidth = useSelector(isFixedWidthSelector);\n  const chatInputRef = useRef<HTMLTextAreaElement>(null);\n\n  const textRef = useRef(text);\n  textRef.current = text;\n\n  // TODO: refact this\n  const getRecentUserMessageIndexRef = () => ({\n    recentUserMessageIndex,\n    setRecentUserMessageIndex,\n  });\n  const recentUserMessageIndexRef = useRef(\n    {} as ReturnType<typeof getRecentUserMessageIndexRef>,\n  );\n  recentUserMessageIndexRef.current = getRecentUserMessageIndexRef();\n\n  const isDisabled = !isAuth || !isConnected;\n\n  const handleSendMessage = useCallback(() => {\n    if (!client || !textRef.current) return;\n\n    client.say(currentChannel, textRef.current);\n\n    setText('');\n\n    setRecentUserMessageIndex(-1);\n  }, [client, currentChannel, textRef, setText]);\n\n  const chatInput = useChatInput(\n    setText,\n    handleSendMessage,\n    chatInputRef,\n    recentUserMessageIndexRef,\n  );\n\n  const handleNameRightClick = useCallback(\n    (name: string) => {\n      setText((t) => `${t.trim()} @${name} `.trimLeft());\n      if (chatInputRef.current) {\n        chatInputRef.current.focus();\n      }\n    },\n    [setText, chatInputRef],\n  );\n\n  const handleEmoteClick = useCallback(\n    (name: string) => {\n      setText((t) => `${t.trim()} ${name} `.trimLeft());\n    },\n    [setText],\n  );\n\n  return (\n    <ChatRoot>\n      <ChatWrapper $isFixedWidth={isFixedWidth}>\n        {currentChannel ? (\n          <Messages onNameRightClick={handleNameRightClick} />\n        ) : (\n          <JoinChannel />\n        )}\n        <ChatInput\n          ref={chatInputRef}\n          text={text}\n          suggestions={chatInput.suggestions}\n          isDisabled={isDisabled}\n          onEmoteClick={handleEmoteClick}\n          onChange={chatInput.handleChange}\n          onKeyUp={chatInput.handleKeyUp}\n          onKeyDown={chatInput.handleKeyDown}\n          onBlur={chatInput.handleBlur}\n          onSuggestionMouseEnter={chatInput.handleSuggestionMouseEnter}\n          onSuggestionClick={chatInput.handleSuggestionClick}\n        />\n        <ChatControls\n          isDisabled={isDisabled}\n          onSendMessage={handleSendMessage}\n        />\n      </ChatWrapper>\n    </ChatRoot>\n  );\n};\n\nexport default Chat;\n","import { getAuthUrl } from 'features/auth/authUtils';\n\nconst Auth = () => {\n  window.location.href = getAuthUrl();\n\n  return null;\n};\n\nexport default Auth;\n","import { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport {\n  LS_ACCESS_TOKEN,\n  LS_ID_TOKEN,\n  LS_USER,\n  LS_LAST_CHANNEL,\n} from 'utils/constants';\nimport { invalidateAuth } from 'features/auth/authSlice';\n\nconst Logout = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  localStorage.removeItem(LS_ACCESS_TOKEN);\n  localStorage.removeItem(LS_ID_TOKEN);\n  localStorage.removeItem(LS_USER);\n\n  dispatch(invalidateAuth());\n\n  history.push({\n    pathname: '/chat/',\n    hash: localStorage.getItem(LS_LAST_CHANNEL) || '',\n  });\n\n  return null;\n};\n\nexport default Logout;\n","import { useHistory } from 'react-router-dom';\n\nimport { LS_ACCESS_TOKEN, LS_ID_TOKEN, LS_LAST_CHANNEL } from 'utils/constants';\n\nconst AuthCallback = () => {\n  const history = useHistory();\n\n  if (!window.location.hash) return null;\n\n  const params = new URLSearchParams(window.location.hash.slice(1));\n\n  const accessToken = params.get('access_token');\n  const idToken = params.get('id_token');\n\n  if (!accessToken || !idToken) return null;\n\n  localStorage.setItem(LS_ACCESS_TOKEN, accessToken);\n  localStorage.setItem(LS_ID_TOKEN, idToken);\n\n  history.push({\n    pathname: '/chat/',\n    hash: localStorage.getItem(LS_LAST_CHANNEL) || '',\n  });\n\n  return null;\n};\n\nexport default AuthCallback;\n","import { css } from 'styled-components';\n\nexport default css`\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    margin: 0;\n    font-family: Roobert, Helvetica Neue, Helvetica, Arial, sans-serif;\n  }\n`;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { createGlobalStyle } from 'styled-components';\n\nimport common from 'styles/common';\nimport colors from 'styles/colors';\nimport vars from 'styles/vars';\n\nexport default createGlobalStyle`\n  :root {\n    ${colors};\n    ${vars};\n  }\n  ${common};\n`;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  RouteComponentProps,\n} from 'react-router-dom';\n\nimport { isAuthRedirect } from 'features/auth/authUtils';\nimport Chat from 'features/chat/Chat';\nimport Auth from 'features/auth/Auth';\nimport Logout from 'features/auth/Logout';\nimport AuthCallback from 'features/auth/AuthCallback';\nimport GlobalStyles from 'styles';\n\nconst getHomeComponent = ({ location }: RouteComponentProps) =>\n  isAuthRedirect(location.hash) ? <AuthCallback /> : <Chat />;\n\nconst App: React.FC = () => (\n  <>\n    <Router>\n      <Switch>\n        <Route exact path=\"/chat/\" render={getHomeComponent} />\n        <Route exact path=\"/chat/auth\" component={Auth} />\n        <Route exact path=\"/chat/logout\" component={Logout} />\n      </Switch>\n    </Router>\n    <GlobalStyles />\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nconst registerValidSW = (swUrl: string, config?: Config) => {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n};\n\nconst checkValidServiceWorker = (swUrl: string, config?: Config) => {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n};\n\nexport const register = (config?: Config) => {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n};\n\nexport const unregister = () => {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n};\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport auth from 'features/auth/authSlice';\nimport chat from 'features/chat/chatSlice';\nimport messages from 'features/messages/messagesSlice';\nimport messageCards from 'features/messageCards/messageCardsSlice';\nimport emotes from 'features/emotes/emotesSlice';\nimport badges from 'features/badges/badgesSlice';\nimport blockedUsers from 'features/blockedUsers/blockedUsersSlice';\nimport options from 'features/options/optionsSlice';\n\nconst rootReducer = combineReducers({\n  auth,\n  chat,\n  messages,\n  messageCards,\n  emotes,\n  badges,\n  blockedUsers,\n  options,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore, Action } from '@reduxjs/toolkit';\nimport type { ThunkAction } from 'redux-thunk';\n\nimport rootReducer, { RootState } from 'app/rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    // eslint-disable-next-line global-require\n    const newRootReducer = require('./rootReducer').default;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport ReactGA from 'react-ga';\n\nimport * as serviceWorker from 'serviceWorker';\nimport { isAuthRedirect } from 'features/auth/authUtils';\nimport store from 'app/store';\n\nif (process.env.NODE_ENV === 'production') {\n  ReactGA.initialize('UA-139550930-3');\n\n  if (!isAuthRedirect(window.location.hash)) {\n    const page =\n      window.location.pathname + window.location.search + window.location.hash;\n    ReactGA.pageview(page);\n  }\n}\n\nconst render = () => {\n  // eslint-disable-next-line global-require\n  const App = require('./app/App').default;\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n};\n\nrender();\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./app/App', render);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchStatus } from 'utils/types';\nimport { writeUserToLocatStorage } from 'features/auth/authUtils';\n\ntype AuthState = {\n  status: FetchStatus;\n  userId: string | null;\n  userLogin: string | null;\n};\n\ntype InitializeAuth = {\n  isAuth: boolean;\n  userId?: string;\n  userLogin?: string;\n};\n\nexport const initialState: AuthState = {\n  status: 'idle',\n  userId: null,\n  userLogin: null,\n};\n\nexport const fetchUser = createAsyncThunk(\n  'auth/fetchUser',\n  async (userId: string) => {\n    const users = await api.fetchUser(userId);\n    const { id, login } = users.data[0];\n    const user = { id, login };\n\n    writeUserToLocatStorage(user);\n\n    return user;\n  },\n);\n\nconst auth = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    initializeAuth: (state, { payload }: PayloadAction<InitializeAuth>) => {\n      state.status = payload.isAuth ? 'success' : 'error';\n\n      if (payload.userId) {\n        state.userId = payload.userId;\n      }\n\n      if (payload.userLogin) {\n        state.userLogin = payload.userLogin;\n      }\n    },\n\n    invalidateAuth: (): AuthState => initialState,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchUser.pending, (state) => {\n      state.status = 'loading';\n    });\n\n    builder.addCase(fetchUser.fulfilled, (state, { payload }) => {\n      state.status = 'success';\n      state.userId = payload.id;\n      state.userLogin = payload.login;\n    });\n\n    builder.addCase(fetchUser.rejected, (state) => {\n      state.status = 'error';\n    });\n  },\n});\n\nexport const { initializeAuth, invalidateAuth } = auth.actions;\n\nexport default auth.reducer;\n","import urlRegex from 'url-regex';\nimport type twitchIrc from 'twitch-simple-irc';\n\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport type { MessageEntity } from 'features/messages/messagesSlice';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport findEmote from 'features/emotes/utils/findEmote';\n\nconst mentionRegex = /^@([\\p{Letter}\\p{Number}_]+)/u;\nconst linkRegex = urlRegex({ strict: false });\n\nconst normalizeEmbeddedEmotes = (embeddedEmotes: twitchIrc.Emotes) =>\n  Object.entries(embeddedEmotes).reduce((result, [key, items]) => {\n    const id = Number.parseInt(key, 10);\n\n    return {\n      ...result,\n      ...items.reduce((acc, { start }) => ({ ...acc, [start]: id }), {}),\n    };\n  }, {} as Record<string, number>);\n\nconst findEntity = (\n  word: string,\n  emotes: StateEmotes,\n  parseTwitch: boolean,\n):\n  | htmlEntity.TwitchEmote\n  | htmlEntity.BttvEmote\n  | htmlEntity.FfzEmote\n  | htmlEntity.Emoji\n  | [htmlEntity.Mention, number]\n  | htmlEntity.Link\n  | null => {\n  if (!emotes) return null;\n\n  if (parseTwitch) {\n    const twitchEmote = findEmote.twitch.byName(word, emotes);\n\n    if (twitchEmote) return twitchEmote;\n  }\n\n  const emote =\n    findEmote.bttv.byName(word, emotes) ||\n    findEmote.ffz.byName(word, emotes) ||\n    findEmote.emoji.byChar(word);\n\n  if (emote) return emote;\n\n  const mentionMatch = word.match(mentionRegex);\n\n  if (mentionMatch) {\n    const [text, target] = mentionMatch;\n\n    return [\n      htmlEntity.createMention(text, target.toLowerCase()),\n      word.length - text.length,\n    ] as [htmlEntity.Mention, number];\n  }\n\n  const linkMatch = word.match(linkRegex);\n\n  if (linkMatch && linkMatch[0].length === word.length) {\n    return htmlEntity.createLink(word);\n  }\n\n  return null;\n};\n\nconst parseMessageEntities = (\n  message: string,\n  emotes: StateEmotes | null,\n  embeddedEmotes: twitchIrc.Emotes | null,\n  isOwnMessage = false,\n): MessageEntity[] => {\n  // If the message was sent by the current user, there is no embedded emotes\n  // So we need to parse twitch emotes manually\n\n  const result = [];\n  let offset = 0;\n  // Before that offset all content was added to the result array\n  let arrayOffset = 0;\n\n  // Check every word. From offset to the next space index\n  do {\n    const spaceIndex = message.indexOf(' ', offset + 1);\n\n    const isStart = offset === 0;\n    const isEnd = spaceIndex === -1;\n\n    const startIndex = isStart ? offset : offset + 1;\n    const endIndex = isEnd ? message.length : spaceIndex;\n\n    const word = message.substring(startIndex, endIndex);\n\n    if (word) {\n      let entity = null;\n\n      // Check embedded twitch emotes\n      if (\n        !isOwnMessage &&\n        embeddedEmotes &&\n        Object.keys(embeddedEmotes).length > 0\n      ) {\n        const normalizedEmotes = normalizeEmbeddedEmotes(embeddedEmotes);\n        const id = normalizedEmotes[startIndex];\n\n        if (id) {\n          entity = htmlEntity.createTwitchEmote({ id, code: word });\n        }\n      }\n\n      // Check other entities\n      if (!entity) {\n        entity = findEntity(word, emotes, isOwnMessage);\n      }\n\n      if (entity) {\n        // Push all text before this entity\n        if (arrayOffset !== startIndex) {\n          const textBefore = message.substring(arrayOffset, startIndex);\n          result.push(textBefore);\n        }\n\n        // If entity it's an array it means entity may be not full word\n        // The second element is the difference between word length and entity length\n        if (Array.isArray(entity)) {\n          const [entityObject, difference] = entity;\n          result.push(entityObject);\n          arrayOffset = endIndex - difference;\n        } else {\n          result.push(entity);\n          arrayOffset = endIndex;\n        }\n      }\n    }\n\n    // If it's the last word and it wasn't added to the result add it now\n    if (spaceIndex === -1 && arrayOffset !== endIndex) {\n      const textAfter = message.substring(arrayOffset, endIndex);\n      result.push(textAfter);\n    }\n\n    offset = spaceIndex;\n  } while (offset !== -1);\n\n  return result;\n};\n\nexport default parseMessageEntities;\n","const checkIsHighlighted = (\n  userLogin: string | null,\n  messageUser: string,\n  messageText: string,\n) =>\n  !!userLogin &&\n  userLogin !== messageUser &&\n  RegExp(userLogin, 'gi').test(messageText);\n\nexport default checkIsHighlighted;\n","import type {\n  MessageEntity,\n  MessageCardInfo,\n} from 'features/messages/messagesSlice';\n\n// https://regex101.com/r/jGbDV1/4\nconst twitchClipRegex = /^(?:https?:\\/\\/)?(?:clips\\.twitch\\.tv\\/|(?:www\\.|m\\.)?twitch\\.tv\\/(?:[\\d\\w]+)\\/clip\\/)([\\d\\w]+)(?:\\?.+)?$/;\n\n// https://regex101.com/r/xsgeA4/4\nconst twitchVideoRegex = /^(?:https?:\\/\\/)?(?:www\\.|m\\.)?twitch\\.tv\\/videos\\/(\\d+)(?:\\?.+)?$/;\n\n// https://regexr.com/3dj5t\nconst youtubeVideoRegex = /^((?:https?:)?\\/\\/)?((?:www|m)\\.)?(?:youtube\\.com|youtu.be)(\\/(?:[\\w-]+\\?v=|embed\\/|v\\/)?)([\\w-]+)(\\S+)?$/;\n\nconst getMessageCardFromEntities = (\n  entities: MessageEntity[],\n  [parseTwitch, parseYoutube]: [boolean, boolean] = [true, true],\n): MessageCardInfo | null => {\n  if (!parseTwitch && !parseYoutube) return null;\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const entity of entities) {\n    if (typeof entity === 'object' && entity.type === 'link') {\n      if (parseTwitch) {\n        // twitch clip\n        let m = twitchClipRegex.exec(entity.text);\n\n        if (m) {\n          return {\n            type: 'twitch-clip',\n            id: m[1],\n            url: entity.href,\n          };\n        }\n\n        // twitch video\n        m = twitchVideoRegex.exec(entity.text);\n\n        if (m) {\n          return {\n            type: 'twitch-video',\n            id: m[1],\n            url: entity.href,\n          };\n        }\n      }\n\n      if (parseYoutube) {\n        // youtube video\n        const m = youtubeVideoRegex.exec(entity.text);\n\n        if (m) {\n          return {\n            type: 'youtube-video',\n            id: m[4],\n            url: entity.href,\n          };\n        }\n      }\n    }\n  }\n\n  return null;\n};\n\nexport default getMessageCardFromEntities;\n","import { nanoid } from '@reduxjs/toolkit';\nimport * as twitchIrc from 'twitch-simple-irc';\nimport * as tekko from 'tekko';\nimport { Howl } from 'howler';\n\nimport type * as api from 'api';\nimport type { RootState } from 'app/rootReducer';\nimport type {\n  Message,\n  Notice,\n  UserNotice,\n  OwnMessage,\n} from 'features/messages/messagesSlice';\nimport { emotesSelector } from 'features/emotes/emotesSelectors';\nimport { blockedUsersSelector } from 'features/blockedUsers/blockedUsersSelectors';\nimport {\n  globalBadgesSelector,\n  channelBadgesSelector,\n} from 'features/badges/badgesSelectors';\nimport {\n  isHighlightNotificationsSelector,\n  isShowTwitchCardsSelector,\n  isShowYoutubeCardsSelector,\n} from 'features/options/optionsSelectors';\nimport { userLoginSelector, userIdSelector } from 'features/auth/authSelectors';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport parseMessageEntities from 'features/messages/utils/parseMessageEntities';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport checkIsHighlighted from 'features/messages/utils/checkIsHighlighted';\nimport getMessageCardFromEntities from 'features/messageCards/utils/getMessageCardFromEntities';\nimport { writeEmotesUsageStatistic } from 'features/emotes/utils/emotesUsageStatistic';\n\nimport tinkSfx from 'assets/ts-tink.ogg';\n\nconst tink = new Howl({ src: [tinkSfx] });\n\nexport const normalizeMessage = (\n  { message, tags, user, channel, isAction }: twitchIrc.MessageEvent,\n  state: RootState,\n): Message | null => {\n  const blockedUsers = blockedUsersSelector(state);\n  const isBlockedUser = blockedUsers.includes(user);\n\n  if (isBlockedUser) {\n    return null;\n  }\n\n  const isHighlightNotifications = isHighlightNotificationsSelector(state);\n  const isShowTwitchCards = isShowTwitchCardsSelector(state);\n  const isShowYoutubeCards = isShowYoutubeCardsSelector(state);\n  const userLogin = userLoginSelector(state);\n  const isHighlighted = checkIsHighlighted(userLogin, user, message);\n\n  if (isHighlighted && isHighlightNotifications) {\n    tink.play();\n  }\n\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n\n  const entities = parseMessageEntities(message, emotes, tags.emotes);\n  const badges = htmlEntity.createBadges(\n    tags.badges,\n    globalBadges,\n    channelBadges,\n  );\n  const card = getMessageCardFromEntities(entities, [\n    isShowTwitchCards,\n    isShowYoutubeCards,\n  ]);\n\n  return {\n    type: 'message',\n    id: tags.id,\n    message,\n    channel,\n    entities,\n    user: {\n      id: tags.userId,\n      login: user,\n      displayName: tags.displayName,\n      color: tags.color,\n      badges,\n    },\n    timestamp: tags.tmiSentTs,\n    card,\n    isAction,\n    isHistory: false,\n    isDeleted: false,\n    isHighlighted,\n    isOwnMessage: false,\n  };\n};\n\nexport const normalizeNotice = ({\n  message,\n  channel,\n  tags: { msgId },\n}: twitchIrc.NoticeEvent): Notice => ({\n  type: 'notice',\n  id: nanoid(),\n  message,\n  channel,\n  noticeType: msgId,\n});\n\nexport const normalizeUserNotice = ({\n  message,\n  channel,\n  tags: { id, msgId, login, systemMsg },\n}: twitchIrc.UserNoticeEvent): UserNotice => ({\n  type: 'user-notice',\n  id,\n  message,\n  channel,\n  noticeType: msgId,\n  systemMessage: systemMsg,\n  user: {\n    login,\n  },\n});\n\nexport const normalizeOwnMessage = (\n  { message, channel, tags }: OwnMessage,\n  state: RootState,\n): Message => {\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n  const userLogin = userLoginSelector(state) as string;\n  const userId = userIdSelector(state) as string;\n  const isShowTwitchCards = isShowTwitchCardsSelector(state);\n  const isShowYoutubeCards = isShowYoutubeCardsSelector(state);\n\n  const isAction = message.startsWith('/me ');\n  const normalizedMessage = isAction ? message.slice(4) : message;\n\n  const entities = parseMessageEntities(normalizedMessage, emotes, null, true);\n  const badges = htmlEntity.createBadges(\n    tags.badges,\n    globalBadges,\n    channelBadges,\n  );\n  const card = getMessageCardFromEntities(entities, [\n    isShowTwitchCards,\n    isShowYoutubeCards,\n  ]);\n\n  writeEmotesUsageStatistic(entities);\n\n  return {\n    type: 'message',\n    id: nanoid(),\n    message: normalizedMessage,\n    channel,\n    entities,\n    user: {\n      id: userId,\n      login: userLogin,\n      displayName: tags.displayName,\n      color: tags.color,\n      badges,\n    },\n    timestamp: Date.now(),\n    card,\n    isAction,\n    isHistory: false,\n    isDeleted: false,\n    isHighlighted: false,\n    isOwnMessage: true,\n  };\n};\n\nexport const normalizeHistoryMessage = (\n  { tags, params: [channel, message], prefix }: tekko.Message,\n  emotes: StateEmotes,\n  globalBadges: Record<string, api.TwitchBadge>,\n  channelBadges: Record<string, api.TwitchBadge>,\n  userLogin: string | null,\n): Message => {\n  const isAction = twitchIrc.getIsAction(message);\n  const normalizedMessage = isAction\n    ? twitchIrc.normalizeActionMessage(message)\n    : message;\n  const parsedTags = (twitchIrc.parseMessageTags(\n    tags,\n  ) as unknown) as twitchIrc.MessageTags;\n\n  const messageUser = prefix ? prefix.name : '';\n  const isHighlighted = checkIsHighlighted(\n    userLogin,\n    messageUser,\n    normalizedMessage,\n  );\n\n  const entities = parseMessageEntities(\n    normalizedMessage,\n    emotes,\n    parsedTags.emotes,\n  );\n  const badges = htmlEntity.createBadges(\n    parsedTags.badges,\n    globalBadges,\n    channelBadges,\n  );\n\n  // TODO: add cards for history?\n  // const card = getMessageCardFromEntities(entities);\n\n  return {\n    type: 'message',\n    id: parsedTags.id,\n    message: normalizedMessage,\n    channel: channel.slice(1),\n    entities,\n    user: {\n      id: parsedTags.userId,\n      login: messageUser,\n      displayName: parsedTags.displayName,\n      color: parsedTags.color,\n      badges,\n    },\n    timestamp: parsedTags.tmiSentTs,\n    card: null,\n    isAction,\n    isHistory: true,\n    isDeleted: false,\n    isHighlighted,\n    isOwnMessage: false,\n  };\n};\n\nexport const normalizeHistoryMessages = (\n  rawMessages: string[],\n  state: RootState,\n): Message[] => {\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n  const blockedUsers = blockedUsersSelector(state);\n  const userLogin = userLoginSelector(state);\n\n  return rawMessages.reduce<Message[]>((acc, rawMessage) => {\n    const message = tekko.parse(rawMessage) as tekko.Message;\n\n    const { command, prefix } = message;\n\n    if (\n      command === 'PRIVMSG' &&\n      prefix &&\n      !blockedUsers.includes(prefix.name)\n    ) {\n      acc.push(\n        normalizeHistoryMessage(\n          message,\n          emotes,\n          globalBadges,\n          channelBadges,\n          userLogin,\n        ),\n      );\n    }\n\n    return acc;\n  }, []);\n};\n","type SliceItemsParams<T> = {\n  items: T[];\n  limit: number;\n  addedItemsCount?: number;\n  isEven?: boolean;\n};\n\nconst sliceItemsByLimit = <T>({\n  items,\n  limit,\n  addedItemsCount = 1,\n  isEven = false,\n}: SliceItemsParams<T>): [T[], boolean] => {\n  const diff = items.length - limit;\n  const isSliced = diff > 0;\n\n  const newItems = isSliced ? items.slice(diff) : items;\n  const newIsEven = isSliced && addedItemsCount % 2 ? !isEven : isEven;\n\n  return [newItems, newIsEven];\n};\n\nexport default sliceItemsByLimit;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\nimport type twitchIrc from 'twitch-simple-irc';\n\nimport * as api from 'api';\nimport type { AppThunk } from 'app/store';\nimport type { RootState } from 'app/rootReducer';\nimport type { FetchResult } from 'utils/types';\nimport {\n  CHANNEL_MESSAGES_LIMIT,\n  STORE_USERS_LIMIT,\n  RECENT_USER_MESSAGES_LIMIT,\n} from 'utils/constants';\nimport assertNever from 'utils/assertNever';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport {\n  normalizeMessage,\n  normalizeNotice,\n  normalizeUserNotice,\n  normalizeHistoryMessages,\n  normalizeOwnMessage,\n} from 'features/messages/utils/normalizeMessages';\nimport sliceItemsByLimit from 'features/messages/utils/sliceItemsByLimit';\nimport {\n  fetchTwitchClip,\n  fetchTwitchVideo,\n  fetchYoutubeVideo,\n} from 'features/messageCards/messageCardsSlice';\nimport { messageCardSelector } from 'features/messageCards/messageCardsSelectors';\n\nexport type MessageEntity =\n  | htmlEntity.TwitchEmote\n  | htmlEntity.BttvEmote\n  | htmlEntity.FfzEmote\n  | htmlEntity.Emoji\n  | htmlEntity.Mention\n  | htmlEntity.Link\n  | string;\n\nexport type MessageCardInfo = {\n  type: 'twitch-clip' | 'twitch-video' | 'youtube-video';\n  id: string;\n  url: string;\n};\n\nexport type Message = {\n  type: 'message';\n  id: string;\n  message: string;\n  channel: string;\n  entities: MessageEntity[];\n  user: {\n    id: string;\n    login: string;\n    displayName: string;\n    color: string;\n    badges: htmlEntity.Badge[];\n  };\n  timestamp: number;\n  card: MessageCardInfo | null;\n  isAction: boolean;\n  isHistory: boolean;\n  isDeleted: boolean;\n  isHighlighted: boolean;\n  isOwnMessage: boolean;\n};\n\nexport type Notice = {\n  type: 'notice';\n  id: string;\n  message: string;\n  channel: string;\n  noticeType: string;\n};\n\nexport type UserNotice = {\n  type: 'user-notice';\n  id: string;\n  message: string;\n  channel: string;\n  noticeType: keyof typeof twitchIrc.UserNoticeType;\n  systemMessage: string;\n  user: {\n    login: string;\n  };\n};\n\nexport type ChatMessage = Message | Notice | UserNotice;\n\nexport type OwnMessage = {\n  message: string;\n  channel: string;\n  tags: twitchIrc.UserStateTags;\n};\n\ntype RecieveMessage = {\n  type: 'message';\n  message: twitchIrc.MessageEvent;\n};\ntype RecieveNotice = {\n  type: 'notice';\n  message: twitchIrc.NoticeEvent;\n};\ntype RecieveUserNotice = {\n  type: 'user-notice';\n  message: twitchIrc.UserNoticeEvent;\n};\ntype RecieveOwnMessage = {\n  type: 'own-message';\n  message: OwnMessage;\n};\n\ntype RecieveMessagePayload =\n  | RecieveMessage\n  | RecieveNotice\n  | RecieveUserNotice\n  | RecieveOwnMessage;\n\ntype RecieveMessagesActionPayload = {\n  messages: ChatMessage[];\n  channel: string;\n  type?: 'message' | 'history';\n};\n\ntype MessagesStateChannel = {\n  history: FetchResult<string[]> & {\n    isAdded: boolean;\n  };\n  isEven: boolean;\n  items: ChatMessage[];\n  users: string[];\n  recentUserMessages: string[];\n};\n\ntype MessagesState = Record<string, MessagesStateChannel>;\n\nconst initialState: MessagesState = {};\n\nexport const fetchChatHistory = createAsyncThunk(\n  'chat/fetchChatHistory',\n  (channel: string) => api.fetchChatHistory(channel),\n);\n\n// TODO: write function than adds a user to the users array\n\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    clearChat: (\n      state,\n      { payload }: PayloadAction<twitchIrc.ClearChatEvent>,\n    ) => {\n      const {\n        channel,\n        tags: { targetUserId },\n      } = payload;\n\n      // eslint-disable-next-line no-restricted-syntax\n      for (const message of state[channel].items) {\n        if (\n          message.type === 'message' &&\n          message.user.id === targetUserId &&\n          !message.isHistory\n        ) {\n          message.isDeleted = true;\n        }\n      }\n    },\n\n    recieveMessagesAction: (\n      state,\n      { payload }: PayloadAction<RecieveMessagesActionPayload>,\n    ) => {\n      const { messages, channel, type = 'message' } = payload;\n\n      if (messages.length === 0) return;\n\n      const items =\n        type === 'message'\n          ? [...state[channel].items, ...messages]\n          : [...messages, ...state[channel].items];\n\n      const [newItems, newIsEven] = sliceItemsByLimit({\n        items,\n        limit: CHANNEL_MESSAGES_LIMIT,\n        addedItemsCount: messages.length,\n        isEven: state[channel].isEven,\n      });\n\n      state[channel].isEven = newIsEven;\n      state[channel].items = newItems;\n\n      // TODO: add colors for users if it's not set\n\n      // add users\n      const { users } = state[channel];\n\n      messages.forEach((message) => {\n        if (\n          message.type === 'message' &&\n          !users.includes(message.user.displayName)\n        ) {\n          users.push(message.user.displayName);\n        }\n      });\n\n      const [newUsers] = sliceItemsByLimit({\n        items: users,\n        limit: STORE_USERS_LIMIT,\n      });\n\n      state[channel].users = newUsers;\n\n      if (type === 'history') {\n        state[channel].history.items = [];\n        state[channel].history.isAdded = true;\n      }\n\n      if (type === 'message') {\n        messages.forEach((message) => {\n          if (message.type !== 'message' || !message.isOwnMessage) return;\n\n          const normalizedMessage = message.message.trim();\n          const index = state[channel].recentUserMessages.indexOf(\n            normalizedMessage,\n          );\n\n          if (index > -1) {\n            state[channel].recentUserMessages.splice(1, 1);\n          }\n\n          state[channel].recentUserMessages.unshift(normalizedMessage);\n\n          const [newRecentUserMessages] = sliceItemsByLimit({\n            items: state[channel].recentUserMessages,\n            limit: RECENT_USER_MESSAGES_LIMIT,\n          });\n\n          state[channel].recentUserMessages = newRecentUserMessages;\n        });\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchChatHistory.pending, (state, { meta: { arg } }) => {\n      const channel = arg;\n\n      if (!state[channel]) {\n        state[channel] = {\n          history: {\n            status: 'loading',\n            error: {},\n            items: [],\n            isAdded: false,\n          },\n          isEven: false,\n          items: [],\n          users: [],\n          recentUserMessages: [],\n        };\n      } else {\n        state[channel].history.status = 'loading';\n        state[channel].history.error = {};\n      }\n    });\n\n    builder.addCase(\n      fetchChatHistory.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const channel = arg;\n\n        state[channel].history.status = 'success';\n        state[channel].history.items = payload.messages;\n      },\n    );\n\n    builder.addCase(\n      fetchChatHistory.rejected,\n      (state, { error, meta: { arg } }) => {\n        const channel = arg;\n\n        state[channel].history.status = 'error';\n        state[channel].history.error = error;\n      },\n    );\n  },\n});\n\nexport const { clearChat } = messagesSlice.actions;\n\nexport default messagesSlice.reducer;\n\nconst { recieveMessagesAction } = messagesSlice.actions;\n\nconst normalizePayload = (\n  payload: RecieveMessagePayload,\n  state: RootState,\n): ChatMessage | null => {\n  if (payload.type === 'message') {\n    return normalizeMessage(payload.message, state);\n  }\n\n  if (payload.type === 'notice') {\n    return normalizeNotice(payload.message);\n  }\n\n  if (payload.type === 'user-notice') {\n    return normalizeUserNotice(payload.message);\n  }\n\n  if (payload.type === 'own-message') {\n    return normalizeOwnMessage(payload.message, state);\n  }\n\n  return assertNever(payload);\n};\n\nexport const recieveMessage = (payload: RecieveMessagePayload): AppThunk => (\n  dispatch,\n  getState,\n) => {\n  const state = getState();\n  const message = normalizePayload(payload, state);\n\n  if (!message) return;\n\n  // fetch a message card if any\n  if (message.type === 'message' && message.card) {\n    const card = messageCardSelector(message.card)(state);\n\n    if (!card || card.status === 'error') {\n      const { id, url } = message.card;\n      const params = { id, url };\n\n      if (message.card.type === 'twitch-clip') {\n        dispatch(fetchTwitchClip(params));\n      }\n\n      if (message.card.type === 'twitch-video') {\n        dispatch(fetchTwitchVideo(params));\n      }\n\n      if (message.card.type === 'youtube-video') {\n        dispatch(fetchYoutubeVideo(params));\n      }\n    }\n  }\n\n  const params = { messages: [message], channel: message.channel };\n\n  dispatch(recieveMessagesAction(params));\n};\n\nexport const addChatHistory = (channel: string): AppThunk => (\n  dispatch,\n  getState,\n) => {\n  const state = getState();\n\n  const [slicedRawHistory] = sliceItemsByLimit({\n    items: state.messages[channel].history.items,\n    limit: CHANNEL_MESSAGES_LIMIT,\n  });\n\n  const messages = normalizeHistoryMessages(slicedRawHistory, state);\n\n  dispatch(recieveMessagesAction({ messages, channel, type: 'history' }));\n};\n","export const TWITCH_API_AUTH_BASE = 'https://id.twitch.tv/oauth2/authorize';\n\nexport const TWITCH_API_CLIENT_ID = process.env.REACT_APP_TWITCH_API_CLIENT_ID;\nexport const TWITCH_API_REDIRECT_URI =\n  process.env.REACT_APP_TWITCH_API_REDIRECT_URI;\n\nexport const CHANNEL_MESSAGES_LIMIT = 500;\nexport const STORE_USERS_LIMIT = 500;\nexport const RECENT_USER_MESSAGES_LIMIT = 100;\n\nexport const API_REQUESTS_TIMEOUT = 10000;\n\nexport const TWITCH_EMOTES_CDN = '//static-cdn.jtvnw.net/emoticons/v1';\nexport const BTTV_EMOTES_CDN = '//cdn.betterttv.net/emote';\n\n// local storage keys\nexport const LS_ACCESS_TOKEN = 'accessToken';\nexport const LS_ID_TOKEN = 'idToken';\nexport const LS_LAST_CHANNEL = 'lastChannel';\nexport const LS_USER = 'user';\nexport const LS_EMOTES_USAGE_STATISTIC = 'emotesUsageStatistic';\nexport const LS_OPTIONS = 'options';\n\nexport const SUGGESTION_TYPES = {\n  users: {\n    name: 'users',\n    limit: 5,\n    regex: /^@([\\w\\d_]*)$/,\n  },\n  emotes: {\n    name: 'emotes',\n    limit: 10,\n    regex: /^:([\\w\\d_]{2,})$/,\n  },\n};\n\nexport const NOTICE_MESSAGE_TAGS = [\n  'msg_banned',\n  'msg_bad_characters',\n  'msg_channel_blocked',\n  'msg_channel_suspended',\n  'msg_duplicate',\n  'msg_emoteonly',\n  'msg_facebook',\n  'msg_followersonly',\n  'msg_followersonly_followed',\n  'msg_followersonly_zero',\n  'msg_r9k',\n  'msg_ratelimit',\n  'msg_rejected',\n  'msg_rejected_mandatory',\n  'msg_room_not_found',\n  'msg_slowmode',\n  'msg_subsonly',\n  'msg_suspended',\n  'msg_timedout',\n  'msg_verified_email',\n];\n","import {\n  TWITCH_API_AUTH_BASE,\n  TWITCH_API_CLIENT_ID,\n  TWITCH_API_REDIRECT_URI,\n  LS_USER,\n} from 'utils/constants';\n\ntype StoredUser = {\n  id: string;\n  login: string;\n};\n\nconst authParams = {\n  client_id: TWITCH_API_CLIENT_ID,\n  redirect_uri: TWITCH_API_REDIRECT_URI,\n  response_type: 'token+id_token',\n  scope: [\n    'openid',\n    'channel:moderate',\n    'chat:edit',\n    'chat:read',\n    'whispers:read',\n    'whispers:edit',\n    'user_blocks_read',\n    'user_blocks_edit',\n    'user_subscriptions',\n  ].join('+'),\n  claims: JSON.stringify({\n    id_token: { email_verified: null, picture: null, preferred_username: null },\n  }),\n  // TODO:\n  // state: uid(),\n};\n\nexport const getAuthUrl = () => {\n  const search = Object.entries(authParams)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n\n  return `${TWITCH_API_AUTH_BASE}?${search}`;\n};\n\nexport const isAuthRedirect = (hash: string) =>\n  hash.startsWith('#access_token=');\n\nexport const writeUserToLocatStorage = (user: StoredUser) => {\n  localStorage.setItem(LS_USER, JSON.stringify(user));\n};\n\nexport const readUserFromLocatStorage = (): StoredUser | null => {\n  let user;\n\n  try {\n    user = JSON.parse(localStorage.getItem(LS_USER) as string);\n  } catch (e) {\n    user = null;\n  }\n\n  if (!user || !user.id || !user.login) return null;\n\n  return user as StoredUser;\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchResult } from 'utils/types';\nimport {\n  parseTwitchEmotes,\n  parseBttvGlobalEmotes,\n  parseBttvChannelEmotes,\n  parseFfzGlobalEmotes,\n  parseFfzChannelEmotes,\n} from 'features/chat/utils/parseApiResponse';\n\ntype EmotesState = {\n  twitch: FetchResult<Record<string, api.TwitchEmote[]>>;\n  bttv: {\n    global: FetchResult<api.BttvGlobalEmote[]>;\n    byChannels: Record<string, FetchResult<api.BttvChannelEmote[]>>;\n  };\n  ffz: {\n    global: FetchResult<api.FfzEmote[]>;\n    byChannels: Record<string, FetchResult<api.FfzEmote[]>>;\n  };\n};\n\nconst initialState: EmotesState = {\n  twitch: {\n    status: 'idle',\n    error: {},\n    items: {},\n  },\n  bttv: {\n    global: {\n      status: 'idle',\n      error: {},\n      items: [],\n    },\n    byChannels: {},\n  },\n  ffz: {\n    global: {\n      status: 'idle',\n      error: {},\n      items: [],\n    },\n    byChannels: {},\n  },\n};\n\nexport const fetchTwitchEmotes = createAsyncThunk(\n  'chat/fetchTwitchEmotes',\n  (userId: string) => api.fetchTwitchEmotes(userId),\n);\n\nexport const fetchBttvGlobalEmotes = createAsyncThunk(\n  'chat/fetchBttvGlobalEmotes',\n  () => api.fetchBttvGlobalEmotes(),\n);\n\ntype FetchBttvChannelEmotesParams = {\n  channel: string;\n  channelId: string;\n};\n\nexport const fetchBttvChannelEmotes = createAsyncThunk(\n  'chat/fetchBttvChannelEmotes',\n  ({ channelId }: FetchBttvChannelEmotesParams) =>\n    api.fetchBttvChannelEmotes(channelId),\n);\n\nexport const fetchFfzGlobalEmotes = createAsyncThunk(\n  'chat/fetchFfzGlobalEmotes',\n  () => api.fetchFfzGlobalEmotes(),\n);\n\ntype FetchFfzChannelEmotesParams = {\n  channel: string;\n  channelId: string;\n};\n\nexport const fetchFfzChannelEmotes = createAsyncThunk(\n  'chat/fetchFfzChannelEmotes',\n  ({ channelId }: FetchFfzChannelEmotesParams) =>\n    api.fetchFfzChannelEmotes(channelId),\n);\n\nconst emotes = createSlice({\n  name: 'emotes',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // twitch\n    builder.addCase(fetchTwitchEmotes.pending, (state) => {\n      state.twitch.status = 'loading';\n      state.twitch.error = {};\n    });\n\n    builder.addCase(fetchTwitchEmotes.fulfilled, (state, { payload }) => {\n      state.twitch.status = 'success';\n      state.twitch.items = parseTwitchEmotes(payload);\n    });\n\n    builder.addCase(fetchTwitchEmotes.rejected, (state, { error }) => {\n      state.twitch.status = 'error';\n      state.twitch.error = error;\n    });\n\n    // bttv global\n    builder.addCase(fetchBttvGlobalEmotes.pending, (state) => {\n      state.bttv.global.status = 'loading';\n      state.bttv.global.error = {};\n    });\n\n    builder.addCase(fetchBttvGlobalEmotes.fulfilled, (state, { payload }) => {\n      state.bttv.global.status = 'success';\n      state.bttv.global.items = parseBttvGlobalEmotes(payload);\n    });\n\n    builder.addCase(fetchBttvGlobalEmotes.rejected, (state, { error }) => {\n      state.bttv.global.status = 'error';\n      state.bttv.global.error = error;\n    });\n\n    // bttv channel\n    builder.addCase(\n      fetchBttvChannelEmotes.pending,\n      (state, { meta: { arg } }) => {\n        const { channel } = arg;\n\n        if (!state.bttv.byChannels[channel]) {\n          state.bttv.byChannels[channel] = {\n            status: 'loading',\n            error: {},\n            items: [],\n          };\n        } else {\n          state.bttv.byChannels[channel].status = 'loading';\n          state.bttv.byChannels[channel].error = {};\n        }\n      },\n    );\n\n    builder.addCase(\n      fetchBttvChannelEmotes.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.bttv.byChannels[channel].status = 'success';\n        state.bttv.byChannels[channel].items = parseBttvChannelEmotes(payload);\n      },\n    );\n\n    builder.addCase(\n      fetchBttvChannelEmotes.rejected,\n      (state, { error, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.bttv.byChannels[channel].status = 'error';\n        state.bttv.byChannels[channel].error = error;\n      },\n    );\n\n    // ffz global\n    builder.addCase(fetchFfzGlobalEmotes.pending, (state) => {\n      state.ffz.global.status = 'loading';\n      state.ffz.global.error = {};\n    });\n\n    builder.addCase(fetchFfzGlobalEmotes.fulfilled, (state, { payload }) => {\n      state.ffz.global.status = 'success';\n      state.ffz.global.items = parseFfzGlobalEmotes(payload);\n    });\n\n    builder.addCase(fetchFfzGlobalEmotes.rejected, (state, { error }) => {\n      state.ffz.global.status = 'error';\n      state.ffz.global.error = error;\n    });\n\n    // ffz channel\n    builder.addCase(\n      fetchFfzChannelEmotes.pending,\n      (state, { meta: { arg } }) => {\n        const { channel } = arg;\n\n        if (!state.ffz.byChannels[channel]) {\n          state.ffz.byChannels[channel] = {\n            status: 'loading',\n            error: {},\n            items: [],\n          };\n        } else {\n          state.ffz.byChannels[channel].status = 'loading';\n          state.ffz.byChannels[channel].error = {};\n        }\n      },\n    );\n\n    builder.addCase(\n      fetchFfzChannelEmotes.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.ffz.byChannels[channel].status = 'success';\n        state.ffz.byChannels[channel].items = parseFfzChannelEmotes(payload);\n      },\n    );\n\n    builder.addCase(\n      fetchFfzChannelEmotes.rejected,\n      (state, { error, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.ffz.byChannels[channel].status = 'error';\n        state.ffz.byChannels[channel].error = error;\n      },\n    );\n  },\n});\n\nexport default emotes.reducer;\n","const assertNever = (value: never): never => value;\n\nexport default assertNever;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport {\n  parseTwitchClip,\n  parseTwitchVideo,\n  parseYoutubeVideo,\n} from 'features/chat/utils/parseApiResponse';\n\ntype MessageCardLoading = {\n  status: 'loading';\n};\ntype MessageCardSuccess = {\n  status: 'success';\n  id: string;\n  src: string;\n  srcSet: string;\n  title: string;\n  description: string;\n};\ntype MessageCardError = {\n  status: 'error';\n};\nexport type MessageCardData =\n  | MessageCardLoading\n  | MessageCardSuccess\n  | MessageCardError;\n\ntype MessageCardsState = {\n  twitchClips: Record<string, MessageCardData>;\n  twitchVideos: Record<string, MessageCardData>;\n  youtubeVideos: Record<string, MessageCardData>;\n};\n\nconst initialState: MessageCardsState = {\n  twitchClips: {},\n  twitchVideos: {},\n  youtubeVideos: {},\n};\n\ntype FetchMessageCardParams = {\n  id: string;\n  url: string;\n};\n\nexport const fetchTwitchClip = createAsyncThunk(\n  'clips/fetchTwitchClip',\n  ({ id }: FetchMessageCardParams) => api.fetchTwitchClip(id),\n);\n\nexport const fetchTwitchVideo = createAsyncThunk(\n  'clips/fetchTwitchVideo',\n  ({ id }: FetchMessageCardParams) => api.fetchTwitchVideo(id),\n);\n\nexport const fetchYoutubeVideo = createAsyncThunk(\n  'clips/fetchYoutubeVideo',\n  ({ id }: FetchMessageCardParams) => api.fetchYoutubeVideo(id),\n);\n\n// TODO: refact this code. DRY!\n\nconst messageCards = createSlice({\n  name: 'messageCards',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // twitch clip\n    builder.addCase(fetchTwitchClip.pending, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchClips[id] = { status: 'loading' };\n    });\n\n    builder.addCase(\n      fetchTwitchClip.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { id } = arg;\n        const card = parseTwitchClip(payload);\n\n        if (!card) {\n          state.twitchClips[id] = { status: 'error' };\n\n          return;\n        }\n\n        state.twitchClips[id] = {\n          status: 'success',\n          ...card,\n        };\n      },\n    );\n\n    builder.addCase(fetchTwitchClip.rejected, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchClips[id] = { status: 'error' };\n    });\n\n    // twitch video\n    builder.addCase(fetchTwitchVideo.pending, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchVideos[id] = { status: 'loading' };\n    });\n\n    builder.addCase(\n      fetchTwitchVideo.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { id } = arg;\n        const card = parseTwitchVideo(payload);\n\n        if (!card) {\n          state.twitchVideos[id] = { status: 'error' };\n\n          return;\n        }\n\n        state.twitchVideos[id] = {\n          status: 'success',\n          ...card,\n        };\n      },\n    );\n\n    builder.addCase(fetchTwitchVideo.rejected, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchVideos[id] = { status: 'error' };\n    });\n\n    // youtube-video\n    builder.addCase(fetchYoutubeVideo.pending, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.youtubeVideos[id] = { status: 'loading' };\n    });\n\n    builder.addCase(\n      fetchYoutubeVideo.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { id } = arg;\n        const card = parseYoutubeVideo(payload);\n\n        if (!card) {\n          state.youtubeVideos[id] = { status: 'error' };\n\n          return;\n        }\n\n        state.youtubeVideos[id] = {\n          status: 'success',\n          ...card,\n        };\n      },\n    );\n\n    builder.addCase(fetchYoutubeVideo.rejected, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.youtubeVideos[id] = { status: 'error' };\n    });\n  },\n});\n\nexport default messageCards.reducer;\n","import type { RootState } from 'app/rootReducer';\n\nexport const isBlockedUsersLoadedSelector = (state: RootState) =>\n  state.blockedUsers.status !== 'idle' &&\n  state.blockedUsers.status !== 'loading';\n\nexport const blockedUsersSelector = (state: RootState) =>\n  state.blockedUsers.items;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchResult } from 'utils/types';\nimport { parseBadges } from 'features/chat/utils/parseApiResponse';\n\ntype Badges = Record<string, api.TwitchBadge>;\n\ntype BadgesState = {\n  global: FetchResult<Badges>;\n  byChannels: Record<string, FetchResult<Badges>>;\n};\n\nconst initialState: BadgesState = {\n  global: {\n    status: 'idle',\n    error: {},\n    items: {},\n  },\n  byChannels: {},\n};\n\nexport const fetchGlobalBadges = createAsyncThunk(\n  'chat/fetchGlobalBadges',\n  () => api.fetchGlobalBadges(),\n);\n\ntype FetchChannelBadgesParams = {\n  channel: string;\n  channelId: string;\n};\n\nexport const fetchChannelBadges = createAsyncThunk(\n  'chat/fetchChannelBadges',\n  ({ channelId }: FetchChannelBadgesParams) =>\n    api.fetchChannelBadges(channelId),\n);\n\nconst badges = createSlice({\n  name: 'badges',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // global badges\n    builder.addCase(fetchGlobalBadges.pending, (state) => {\n      state.global.status = 'loading';\n      state.global.error = {};\n    });\n\n    builder.addCase(fetchGlobalBadges.fulfilled, (state, { payload }) => {\n      state.global.status = 'success';\n      state.global.items = parseBadges(payload);\n    });\n\n    builder.addCase(fetchGlobalBadges.rejected, (state, { error }) => {\n      state.global.status = 'error';\n      state.global.error = error;\n    });\n\n    // channel badges\n    builder.addCase(fetchChannelBadges.pending, (state, { meta: { arg } }) => {\n      const { channel } = arg;\n\n      if (!state.byChannels[channel]) {\n        state.byChannels[channel] = {\n          status: 'loading',\n          error: {},\n          items: {},\n        };\n      } else {\n        state.byChannels[channel].status = 'loading';\n        state.byChannels[channel].error = {};\n      }\n    });\n\n    builder.addCase(\n      fetchChannelBadges.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.byChannels[channel].status = 'success';\n        state.byChannels[channel].items = parseBadges(payload);\n      },\n    );\n\n    builder.addCase(\n      fetchChannelBadges.rejected,\n      (state, { error, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.byChannels[channel].status = 'error';\n        state.byChannels[channel].error = error;\n      },\n    );\n  },\n});\n\nexport default badges.reducer;\n","import { LS_OPTIONS } from 'utils/constants';\n\nexport const readOptionsFromLocalStorage = (): object => {\n  try {\n    const options = localStorage.getItem(LS_OPTIONS);\n    return JSON.parse(options as string) || {};\n  } catch {\n    return {};\n  }\n};\n\nexport const writeOptionsToLocalStore = (options: object) => {\n  localStorage.setItem(\n    LS_OPTIONS,\n    JSON.stringify({\n      ...readOptionsFromLocalStorage(),\n      ...options,\n    }),\n  );\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\n\nimport {\n  writeOptionsToLocalStore,\n  readOptionsFromLocalStorage,\n} from 'features/options/optionsUtils';\n\ntype OptionsState = {\n  showTimestamps: boolean;\n  splitChat: boolean;\n  blacklistKeywords: string;\n  highlightKeywords: string;\n  fixedWidth: boolean;\n  highlightNotifications: boolean;\n  showTwitchCards: boolean;\n  showYoutubeCards: boolean;\n};\n\ntype ChangeOption = {\n  name: keyof OptionsState;\n  value: any;\n};\n\nexport const initialState: OptionsState = {\n  showTimestamps: false,\n  splitChat: true,\n  blacklistKeywords: '',\n  highlightKeywords: '',\n  fixedWidth: false,\n  highlightNotifications: true,\n  showTwitchCards: true,\n  showYoutubeCards: true,\n  ...readOptionsFromLocalStorage(),\n};\n\nconst options = createSlice({\n  name: 'options',\n  initialState,\n  reducers: {\n    changeOption: {\n      reducer: (state, { payload }: PayloadAction<ChangeOption>) => {\n        const { name, value } = payload;\n\n        (state[name] as unknown) = value;\n      },\n      prepare: (payload: ChangeOption) => {\n        const { name, value } = payload;\n\n        writeOptionsToLocalStore({ [name]: value });\n\n        return { payload };\n      },\n    },\n  },\n});\n\nexport const { changeOption } = options.actions;\n\nexport default options.reducer;\n"],"sourceRoot":""}