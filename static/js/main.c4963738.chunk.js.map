{"version":3,"sources":["utils/isAuthRedirect.js","utils/api.js","reducers/auth/auth.js","utils/storeFlags.js","reducers/badges/badges.js","reducers/chat/chat.js","reducers/emotes/twitch.js","reducers/emotes/bttv.js","reducers/emotes/ffz.js","reducers/emotes/index.js","utils/normalizeHref.js","utils/formatMessage.js","reducers/emotes/selectors.js","reducers/badges/selectors.js","utils/constants.js","utils/getMessageBadges.js","utils/twitchChat.js","utils/normalizeRecentMessages.js","reducers/messages/messages.js","reducers/options/options.js","reducers/index.js","store/index.js","hooks/useLocationHash.js","hooks/useDocumentTitle.js","reducers/messages/selectors.js","reducers/chat/selectors.js","utils/replaceEmojis.js","reducers/options/selectors.js","components/Scrollbar.jsx","icons/smiley-face.svg","icons/gears.svg","icons/close.svg","components/IconButton.jsx","components/ChatModal.jsx","components/ChatInput/EmotePicker.jsx","components/Switch.jsx","components/ChatInput/Options.jsx","components/ChatInput/ChatInput.jsx","components/ChatMessage/types.js","components/ChatMessage/Message.jsx","components/ChatMessage/Notice.jsx","components/ChatMessage/UserNotice.jsx","components/ChatMessage/ChatMessage.jsx","components/Chat.jsx","components/Home.jsx","utils/getAuthUrl.js","components/Auth.jsx","components/AuthCallback.jsx","styles/common.js","styles/colors.js","styles/vars.js","styles/index.js","App.jsx","index.jsx"],"names":["isAuthRedirect","hash","startsWith","apiRequest","url","fetch","then","response","json","fetchUser","id","headers","Authorization","localStorage","accessToken","fetchTwitchEmotesBySets","userId","Accept","process","fetchBttvChannelEmotes","channelId","fetchFfzChannelEmotes","fetchRecentMessages","channel","fetchGlobalBadges","language","fetchChannelBadges","setIsAuth","createAction","fetchUserRequest","fetchUserSuccess","fetchUserFailure","reducer","handleActions","state","payload","isAuth","user","undefined","isLoading","error","login","displayName","storeFlags","default","isLoaded","isError","request","success","failure","defaultState","global","items","channels","createActions","fetchGlobalBadgesRequest","fetchGlobalBadgesSuccess","fetchGlobalBadgesFailure","fetchChannelBadgesRequest","fetchChannelBadgesSuccess","fetchChannelBadgesFailure","parseBadges","pathOr","combineActions","type","toString","mergeDeepRight","currentChannelSelector","setCurrentChannel","setIsConnected","updateGlobalUserState","updateUserState","updateRoomState","removeChannel","currentChannel","isConnected","tags","globalState","userState","roomState","omit","fetchTwitchEmotesRequest","fetchTwitchEmotesSuccess","fetchTwitchEmotesFailure","fetchBttvGlobalEmotesRequest","fetchBttvGlobalEmotesSuccess","fetchBttvGlobalEmotesFailure","fetchBttvChannelEmotesRequest","fetchBttvChannelEmotesSuccess","fetchBttvChannelEmotesFailure","parseBttvChannelEmotes","channelEmotes","sharedEmotes","fetchFfzGlobalEmotesRequest","fetchFfzGlobalEmotesSuccess","fetchFfzGlobalEmotesFailure","fetchFfzChannelEmotesRequest","fetchFfzChannelEmotesSuccess","fetchFfzChannelEmotesFailure","parseFfzGlobalEmotes","pipe","values","map","flatten","parseFfzChannelEmotes","combineReducers","twitch","bttv","ffz","isStartsWithProtocolRegex","normalizeHref","href","test","TWITCH_EMOTES_CDN","mentionRegex","linkRegex","urlRegex","strict","normalizeEmotesFromTags","toPairs","value","v","getFfzSrcSet","dpi","join","createTwitchEmote","alt","code","src","srcSet","createBttvEmote","createFfzEmote","name","urls","createMention","text","target","twitchEmoteType","pt","shape","oneOf","isRequired","string","bttvEmoteType","ffzEmoteType","emojiType","mentionType","linkType","regexMap","4","9","findEntity","word","parseTwitch","twitchEmote","find","RegExp","findTwitchEmote","bttvEmote","propEq","findBttvEmote","ffzEmote","findFfzEmote","char","emojiMatch","twemojiParser","assetType","length","emoji","filter","keys","head","emojilib","mentionMatch","match","toLowerCase","linkMatch","formatMessage","message","embeddedEmotes","emotes","isOwnMessage","hasEmbeddedEmotes","Object","normalizedEmbeddedEmotes","result","offset","arrayOffset","spaceIndex","indexOf","startIndex","endIndex","substring","entity","embeddedEmote","textBefore","push","Array","isArray","entityObject","difference","textAfter","twitchEmotesSelector","createSelector","createGlobalEmotesSelector","createChannelEmotesSelector","bttvGlobalEmotesSelector","bttvChannelEmotesSelector","bttvEmotesSelector","bttvGlobal","bttvChannel","ffzGlobalEmotesSelector","ffzChannelEmotesSelector","ffzEmotesSelector","ffzGlobal","ffzChannel","emotesSelector","regexEmotesMap","emoteCategoriesSelector","title","createIsEmotesLoadedSelector","globalLoaded","channelLoaded","path","isBttvEmotesLoadedSelector","isFfzEmotesLoadedSelector","isTwitchEmotesLoadedSelector","globalBadgesSelector","badges","channelBadgesSelector","isBadgesLoadedSelector","isGlobalBadgesLoadedSelector","isChannelBadgesLoadedSelector","MESSAGE_TYPES","getMessageBadges","globalBadges","channelBadges","version","badge","description","imageUrl1x","image_url_1x","imageUrl2x","image_url_2x","imageUrl4x","image_url_4x","label","createBadge","Boolean","noopIRCCommands","booleanMessageTags","numberMessageTags","depricatedMessageTags","noticeMessageTags","data","split","reduce","acc","normalizeTagValue","raw","emote","indexes","index","start","end","Number","parseInt","parseMessageEmotes","followersOnly","slow","includes","replace","parseMessageTags","entries","key","camelCase","getIsAction","endsWith","normalizeActionMessage","slice","parseState","params","parseUserState","parseRoomState","parseCommand","parseNotice","parseUserNotice","parseClearMessage","parseClearChat","parseHostTarget","Client","options","socket","identity","_queue","_messagesQueue","this","auth","nick","Math","floor","random","pass","sendRaw","emit","hadError","willReconnect","rawData","trim","forEach","line","_handleMessage","shift","isAction","messageEventData","uuid","tmiSentTs","Date","getTime","parsedData","tekkoParse","command","prefix","middle","trailing","parseMessageData","eventData","_emmitOwnMessage","msgId","parseChatMessage","ircMessage","handleError","err","send","WebSocket","addEventListener","_onConnect","_onClose","_onError","_onData","tekkoFormat","mergeDeepWith","concat","commandParams","roomName","EventEmitter","normalizeRecentMessages","messages","m","parse","normalizedMessage","parsedTags","messageArray","isHistory","addMessageEntity","fetchRecentMessagesRequest","fetchRecentMessagesSuccess","fetchRecentMessagesFailure","clearChat","addRecentMessagesAction","sliceMessages","diff","getIsEven","prev","addedItemsCount","isSliced","oldItems","newItems","slicedMessages","isEven","history","targetUserId","isDeleted","getOptionsFromLocalStorage","JSON","showTimestamps","splitChat","blacklistKeywords","highlightKeywords","changeOption","option","setItem","stringify","chat","enhancer","applyMiddleware","thunk","store","createStore","rootReducer","useLocationHash","useState","window","location","setHash","useEffect","handleHashChange","removeEventListener","useDocumentTitle","document","messagesSelector","isHistoryLoadedSelector","channelIdSelector","isEvenSelector","replaceEmojis","optionsSelector","isShowTimestampsSelector","isSplitChatSelector","Scrollbar","styled","CustomScrollbar","attrs","disableTracksWidthCompensation","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","fill","d","fillRule","clipRule","_ref","svgRef","props","width","height","viewBox","x","y","ref","ForwardRef","forwardRef","sizes","small","css","medium","IconButton","button","p","size","defaultProps","propTypes","ChatModalRoot","div","CloseButton","CloseIcon","CloseIconSvg","ChatModal","children","onClose","onClick","EmotePickerRoot","Categories","Category","CategoryHeader","CategoryItems","Emote","img","EmotePicker","onEmoteClick","emoteCategories","useSelector","renderCategory","useCallback","SwitchRoot","Label","Input","input","Switch","checked","readOnly","onChange","htmlFor","OptionsRoot","Header","h2","Option","OptionText","span","Options","dispatch","useDispatch","renderOption","renderOptionsCategory","ChatInputRoot","form","ControlsWrapper","Controls","SendButton","TextareaWrapper","EmotesModal","OptionsModal","Textarea","textarea","EmotesButton","SmileyFaceIcon","SmileyFaceIconSvg","GearsIcon","GearsIconSvg","StyledLink","Link","ChatInput","isDisabled","onSubmit","textareaRef","useRef","setText","isEmotesModalVisible","setIsEmotesModalVisible","isOptionsModalVisible","setIsOptionsModalVisible","textareaWrapperRef","React","optionsModalRef","handleCloseEmotesModal","handleCloseOptionsModal","useOnClickOutside","handleKeyDown","e","preventDefault","textareaNode","current","renderEmotesModal","emoteName","t","trimLeft","renderOptionsModal","placeholder","maxLength","disabled","to","arrayOf","oneOfType","badgeInfo","subscriber","color","flags","mod","bool","roomId","tmiSentId","number","systemMsg","msgParamCumulativeMonths","msgParamDisplayName","msgParamLogin","msgParamMonths","msgParamPromoGiftTotal","msgParamPromoName","msgParamRecipientDisplayName","msgParamRecipientId","msgParamRecipientUserName","msgParamSenderLogin","msgParamSenderName","msgParamShouldShareStreak","msgParamStreakMonths","msgParamSubPlan","msgParamSubPlanName","msgParamViewerCount","msgParamRitualName","msgParamThreshold","MessageRoot","isMention","Name","Emoji","Mention","isActive","a","Timestamp","Badge","Message","isShowTimestamps","isVisible","setIsVisible","format","aria-label","renderBadges","item","rel","renderMessageArray","memo","NoticeRoot","Notice","UserNoticeRoot","ChatMessage","ChatRoot","ChatWrapper","Messages","StyledScrollbar","MoreMessagesButton","visible","Chat","onSendMessage","isSplitChat","isMoreMessagesButtonVisible","setIsMoreMessagesButtonVisible","scrollbarRef","handleScrollToBottom","scrollToBottom","onUpdate","clientHeight","contentScrollHeight","scrollTop","client","Home","currentChannelId","isTwitchEmotesLoaded","isBttvEmotesLoaded","isFfzEmotesLoaded","isBadgesLoaded","isHistoryLoaded","rawUser","getItem","handleMessage","rest","getState","addMessage","connect","on","apiFetchGlobalBadges","apiFetchRecentMessages","emoticon_sets","fetchTwitchEmotes","apiFetchBttvChannelEmotes","apiFetchFfzChannelEmotes","apiFetchChannelBadges","say","authParams","client_id","redirect_uri","response_type","scope","claims","id_token","email_verified","picture","preferred_username","getAuthUrl","search","Auth","AuthCallback","useHistory","URLSearchParams","get","idToken","apiFetchUser","display_name","jwt","decode","sub","lastChannel","createGlobalStyle","colors","vars","common","App","exact","component","ReactGA","initialize","page","pathname","pageview","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c4963738.chunk.js","sourcesContent":["const isAuthRedirect = (hash) => hash.startsWith('#access_token=');\n\nexport default isAuthRedirect;\n","export const TWITCH_API_HELIX = 'https://api.twitch.tv/helix';\nexport const TWITCH_API_KRAKEN = 'https://api.twitch.tv/kraken';\n\n// TODO: throw an error if fetch completed with not 2** code\n\nconst getHelixHeaders = () => ({\n  Authorization: `Bearer ${localStorage.accessToken}`,\n});\n\nconst getKrakenHeaders = () => ({\n  Accept: 'application/vnd.twitchtv.v5+json',\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `OAuth ${localStorage.accessToken}`,\n});\n\nconst apiRequestHelix = (url) =>\n  fetch(`${TWITCH_API_HELIX}${url}`, {\n    headers: getHelixHeaders(),\n  }).then((response) => response.json());\n\nconst apiRequestKraken = (url) =>\n  fetch(`${TWITCH_API_KRAKEN}${url}`, {\n    headers: getKrakenHeaders(),\n  }).then((response) => response.json());\n\nconst apiRequest = (url) => fetch(url).then((response) => response.json());\n\nexport const fetchUser = (id) => apiRequestHelix(`/users?id=${id}`);\n\nexport const fetchTwitchEmotesBySets = (userId) =>\n  apiRequestKraken(`/users/${userId}/emotes`);\n\nexport const fetchBttvGlobalEmotes = () =>\n  apiRequest('https://api.betterttv.net/3/cached/emotes/global');\nexport const fetchBttvChannelEmotes = (channelId) =>\n  apiRequest(`https://api.betterttv.net/3/cached/users/twitch/${channelId}`);\n\nexport const fetchFfzGlobalEmotes = () =>\n  apiRequest('https://api.frankerfacez.com/v1/set/global');\nexport const fetchFfzChannelEmotes = (channelId) =>\n  apiRequest(`https://api.frankerfacez.com/v1/room/id/${channelId}`);\n\n// apiRequest(`https://api.betterttv.net/3/cached/frankerfacez/users/twitch/${channelId}`);\n\nexport const fetchRecentMessages = (channel) =>\n  apiRequest(\n    `https://recent-messages.robotty.de/api/v2/recent-messages/${channel}?clearchatToNotice=true`,\n  );\n\nexport const fetchGlobalBadges = (language = 'en') =>\n  apiRequest(\n    `https://badges.twitch.tv/v1/badges/global/display?language=${language}`,\n  );\nexport const fetchChannelBadges = (channelId, language = 'en') =>\n  apiRequest(\n    `https://badges.twitch.tv/v1/badges/channels/${channelId}/display?language=${language}`,\n  );\n","import { createAction, handleActions } from 'redux-actions';\n\nimport { fetchUser as apiFetchUser } from '../../utils/api';\n\nconst defaultState = {\n  isAuth: false,\n  isLoading: false,\n  user: {\n    id: null,\n    login: null,\n    displayName: null,\n  },\n};\n\nexport const setIsAuth = createAction('SET_IS_AUTH');\nconst fetchUserRequest = createAction('FETCH_USER_REQUEST');\nconst fetchUserSuccess = createAction('FETCH_USER_SUCCESS');\nconst fetchUserFailure = createAction('FETCH_USER_FAILURE');\n\nexport const fetchUser = (id) => async (dispatch) => {\n  dispatch(fetchUserRequest());\n\n  try {\n    const response = await apiFetchUser(id);\n    const { login, display_name: displayName } = response.data[0];\n    const user = { id, login, displayName };\n    localStorage.setItem('user', JSON.stringify(user));\n\n    dispatch(fetchUserSuccess(user));\n  } catch (error) {\n    dispatch(fetchUserFailure(error));\n  }\n};\n\nconst handleSetIsAuth = (state, { payload: { isAuth, user } }) => ({\n  ...state,\n  isAuth: isAuth === undefined ? state.isAuth : isAuth,\n  user: { ...state.user, ...user },\n});\n\nconst handleFetchUserRequest = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst handleFetchUserSuccess = (state, { payload }) => ({\n  ...state,\n  isAuth: true,\n  isLoading: false,\n  user: payload,\n});\nconst handleFetchUserFailure = (state, { payload }) => ({\n  ...state,\n  isAuth: false,\n  isLoading: false,\n  error: payload,\n});\n\nconst reducer = handleActions(\n  {\n    [setIsAuth]: handleSetIsAuth,\n    [fetchUserRequest]: handleFetchUserRequest,\n    [fetchUserSuccess]: handleFetchUserSuccess,\n    [fetchUserFailure]: handleFetchUserFailure,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","const storeFlags = {\n  default: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n  },\n  request: {\n    isLoading: true,\n    isLoaded: false,\n    isError: false,\n    error: null,\n  },\n  success: {\n    isLoading: false,\n    isLoaded: true,\n    isError: false,\n    error: null,\n  },\n  failure: {\n    isLoading: false,\n    isLoaded: false,\n    isError: true,\n  },\n};\n\nexport default storeFlags;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\nimport { pathOr, mergeDeepRight } from 'ramda';\n\nimport storeFlags from '../../utils/storeFlags';\n\nimport {\n  fetchGlobalBadges as apiFetchGlobalBadges,\n  fetchChannelBadges as apiFetchChannelBadges,\n} from '../../utils/api';\n\nconst defaultState = {\n  global: {\n    ...storeFlags.default,\n    items: {},\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: {},\n    // },\n  },\n};\n\nconst {\n  fetchGlobalBadgesRequest,\n  fetchGlobalBadgesSuccess,\n  fetchGlobalBadgesFailure,\n  fetchChannelBadgesRequest,\n  fetchChannelBadgesSuccess,\n  fetchChannelBadgesFailure,\n} = createActions(\n  'FETCH_GLOBAL_BADGES_REQUEST',\n  'FETCH_GLOBAL_BADGES_SUCCESS',\n  'FETCH_GLOBAL_BADGES_FAILURE',\n  'FETCH_CHANNEL_BADGES_REQUEST',\n  'FETCH_CHANNEL_BADGES_SUCCESS',\n  'FETCH_CHANNEL_BADGES_FAILURE',\n);\n\nconst parseBadges = pathOr({}, ['badge_sets']);\n\nexport const fetchGlobalBadges = () => async (dispatch) => {\n  dispatch(fetchGlobalBadgesRequest());\n\n  try {\n    const response = await apiFetchGlobalBadges();\n    const data = { items: parseBadges(response) };\n\n    dispatch(fetchGlobalBadgesSuccess(data));\n  } catch (error) {\n    dispatch(fetchGlobalBadgesFailure({ error }));\n  }\n};\n\nexport const fetchChannelBadges = (channelId, channel) => async (dispatch) => {\n  dispatch(fetchChannelBadgesRequest({ channel }));\n\n  try {\n    const response = await apiFetchChannelBadges(channelId);\n    const data = {\n      channel,\n      items: parseBadges(response),\n    };\n\n    dispatch(fetchChannelBadgesSuccess(data));\n  } catch (error) {\n    dispatch(fetchChannelBadgesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchFfzGlobalEmotes = (state, { type, payload }) => {\n  if (type === fetchGlobalBadgesRequest.toString()) {\n    return mergeDeepRight(state, {\n      global: { ...storeFlags.request },\n    });\n  }\n\n  if (type === fetchGlobalBadgesSuccess.toString()) {\n    return mergeDeepRight(state, {\n      global: { ...storeFlags.success, items: payload.items },\n    });\n  }\n\n  if (type === fetchGlobalBadgesFailure.toString()) {\n    return mergeDeepRight(state, {\n      global: { ...storeFlags.failure, error: payload.error },\n    });\n  }\n\n  return state;\n};\n\nconst handleFetchFfzChannelEmotes = (state, { type, payload }) => {\n  const { channel } = payload;\n\n  if (type === fetchChannelBadgesRequest.toString()) {\n    return mergeDeepRight(state, {\n      channels: {\n        [channel]: { ...storeFlags.request },\n      },\n    });\n  }\n\n  if (type === fetchChannelBadgesSuccess.toString()) {\n    return mergeDeepRight(state, {\n      channels: {\n        [channel]: { ...storeFlags.success, items: payload.items },\n      },\n    });\n  }\n\n  if (type === fetchChannelBadgesFailure.toString()) {\n    return mergeDeepRight(state, {\n      channels: {\n        [channel]: { ...storeFlags.failure, error: payload.error },\n      },\n    });\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [combineActions(\n      fetchGlobalBadgesRequest,\n      fetchGlobalBadgesSuccess,\n      fetchGlobalBadgesFailure,\n    )]: handleFetchFfzGlobalEmotes,\n\n    [combineActions(\n      fetchChannelBadgesRequest,\n      fetchChannelBadgesSuccess,\n      fetchChannelBadgesFailure,\n    )]: handleFetchFfzChannelEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions } from 'redux-actions';\nimport { pathOr, omit } from 'ramda';\n\nconst defaultState = {\n  currentChannel: null,\n  isConnected: false,\n  globalState: {},\n  channels: {\n    // [channel]: {\n    //   userState: {},\n    //   roomState: {},\n    // }\n  },\n};\n\nexport const currentChannelSelector = pathOr('', ['chat', 'currentChannel']);\n\nexport const {\n  setCurrentChannel,\n  setIsConnected,\n  updateGlobalUserState,\n  updateUserState,\n  updateRoomState,\n  removeChannel,\n} = createActions(\n  'SET_CURRENT_CHANNEL',\n  'SET_IS_CONNECTED',\n  'UPDATE_GLOBAL_USER_STATE',\n  'UPDATE_USER_STATE',\n  'UPDATE_ROOM_STATE',\n  'REMOVE_CHANNEL',\n);\n\nconst handleSetCurrentChannel = (state, { payload }) => ({\n  ...state,\n  currentChannel: payload,\n});\nconst handleSetIsConnected = (state, { payload }) => ({\n  ...state,\n  isConnected: payload,\n});\nconst handleUpdateGlobalUserState = (state, { payload: { tags } }) => ({\n  ...state,\n  globalState: { ...state.globalState, ...tags },\n});\nconst handleUpdateUserState = (state, { payload: { channel, tags } }) => ({\n  ...state,\n  channels: {\n    ...state.channels,\n    [channel]: { ...state.channels[channel], userState: tags },\n  },\n});\nconst handleUpdateRoomState = (state, { payload: { channel, tags } }) => ({\n  ...state,\n  channels: {\n    ...state.channels,\n    [channel]: { ...state.channels[channel], roomState: tags },\n  },\n});\nconst handleRemoveChannel = (state, { payload: channel }) => ({\n  ...state,\n  channels: omit([channel], state.channels),\n});\n\nconst reducer = handleActions(\n  {\n    [setCurrentChannel]: handleSetCurrentChannel,\n    [setIsConnected]: handleSetIsConnected,\n    [updateGlobalUserState]: handleUpdateGlobalUserState,\n    [updateUserState]: handleUpdateUserState,\n    [updateRoomState]: handleUpdateRoomState,\n    [removeChannel]: handleRemoveChannel,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\n\nimport { fetchTwitchEmotesBySets } from '../../utils/api';\n\nconst defaultState = {\n  isLoading: false,\n  isLoaded: false,\n  isError: false,\n  error: null,\n  items: {\n    // [setId]: [\n    //   {\n    //     code: \"PartyPoro\",\n    //     id: 300949540,\n    //   },\n    // ],\n  },\n};\n\nconst {\n  fetchTwitchEmotesRequest,\n  fetchTwitchEmotesSuccess,\n  fetchTwitchEmotesFailure,\n} = createActions(\n  'FETCH_TWITCH_EMOTES_REQUEST',\n  'FETCH_TWITCH_EMOTES_SUCCESS',\n  'FETCH_TWITCH_EMOTES_FAILURE',\n);\n\nexport const fetchTwitchEmotes = (userId) => async (dispatch) => {\n  dispatch(fetchTwitchEmotesRequest);\n\n  try {\n    const response = await fetchTwitchEmotesBySets(userId);\n    const data = { items: response.emoticon_sets };\n\n    dispatch(fetchTwitchEmotesSuccess(data));\n  } catch (e) {\n    dispatch(fetchTwitchEmotesFailure(e));\n  }\n};\n\nconst handleFetchTwitchEmotes = (state, { type, payload }) => {\n  if (type === fetchTwitchEmotesRequest.toString()) {\n    return {\n      ...state,\n      isLoading: true,\n      isLoaded: false,\n      isError: false,\n      error: null,\n    };\n  }\n\n  if (type === fetchTwitchEmotesSuccess.toString()) {\n    return {\n      ...state,\n      isLoading: false,\n      isLoaded: true,\n      isError: false,\n      ...payload,\n    };\n  }\n\n  if (type === fetchTwitchEmotesFailure.toString()) {\n    return {\n      ...state,\n      isLoading: false,\n      isLoaded: false,\n      isError: true,\n      error: payload,\n    };\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [combineActions(\n      fetchTwitchEmotesRequest,\n      fetchTwitchEmotesSuccess,\n      fetchTwitchEmotesFailure,\n    )]: handleFetchTwitchEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\n\nimport {\n  fetchBttvGlobalEmotes as apiFetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes as apiFetchBttvChannelEmotes,\n} from '../../utils/api';\n\nconst defaultState = {\n  global: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n    items: [],\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: [],\n    // },\n  },\n};\n\nconst {\n  fetchBttvGlobalEmotesRequest,\n  fetchBttvGlobalEmotesSuccess,\n  fetchBttvGlobalEmotesFailure,\n  fetchBttvChannelEmotesRequest,\n  fetchBttvChannelEmotesSuccess,\n  fetchBttvChannelEmotesFailure,\n} = createActions(\n  'FETCH_BTTV_GLOBAL_EMOTES_REQUEST',\n  'FETCH_BTTV_GLOBAL_EMOTES_SUCCESS',\n  'FETCH_BTTV_GLOBAL_EMOTES_FAILURE',\n  'FETCH_BTTV_CHANNEL_EMOTES_REQUEST',\n  'FETCH_BTTV_CHANNEL_EMOTES_SUCCESS',\n  'FETCH_BTTV_CHANNEL_EMOTES_FAILURE',\n);\n\nconst parseBttvChannelEmotes = ({ channelEmotes, sharedEmotes }) => [\n  ...channelEmotes,\n  ...sharedEmotes,\n];\n\nexport const fetchBttvGlobalEmotes = () => async (dispatch) => {\n  dispatch(fetchBttvGlobalEmotesRequest());\n\n  try {\n    const items = await apiFetchBttvGlobalEmotes();\n    const data = { items };\n\n    dispatch(fetchBttvGlobalEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchBttvGlobalEmotesFailure({ error }));\n  }\n};\n\nexport const fetchBttvChannelEmotes = (channelId, channel) => async (\n  dispatch,\n) => {\n  dispatch(fetchBttvChannelEmotesRequest({ channel }));\n\n  try {\n    const response = await apiFetchBttvChannelEmotes(channelId);\n    const data = {\n      channel,\n      items: parseBttvChannelEmotes(response),\n    };\n\n    dispatch(fetchBttvChannelEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchBttvChannelEmotesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchBttvGlobalEmotes = (state, { type, payload }) => {\n  if (type === fetchBttvGlobalEmotesRequest.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: true,\n        isLoaded: false,\n        isError: false,\n        error: null,\n      },\n    };\n  }\n\n  if (type === fetchBttvGlobalEmotesSuccess.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: true,\n        isError: false,\n        error: null,\n        ...payload,\n      },\n    };\n  }\n\n  if (type === fetchBttvGlobalEmotesFailure.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: false,\n        isError: true,\n        ...payload,\n      },\n    };\n  }\n\n  return state;\n};\n\nconst handleFetchBttvChannelEmotes = (state, { type, payload }) => {\n  const { channel } = payload;\n\n  if (type === fetchBttvChannelEmotesRequest.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: true,\n          isLoaded: false,\n          isError: false,\n          error: null,\n        },\n      },\n    };\n  }\n\n  if (type === fetchBttvChannelEmotesSuccess.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: true,\n          isError: false,\n          error: null,\n          items: payload.items,\n        },\n      },\n    };\n  }\n\n  if (type === fetchBttvChannelEmotesFailure.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: false,\n          isError: true,\n          error: payload.error,\n        },\n      },\n    };\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [combineActions(\n      fetchBttvGlobalEmotesRequest,\n      fetchBttvGlobalEmotesSuccess,\n      fetchBttvGlobalEmotesFailure,\n    )]: handleFetchBttvGlobalEmotes,\n\n    [combineActions(\n      fetchBttvChannelEmotesRequest,\n      fetchBttvChannelEmotesSuccess,\n      fetchBttvChannelEmotesFailure,\n    )]: handleFetchBttvChannelEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\nimport { pipe, pathOr, map, values, flatten } from 'ramda';\n\nimport {\n  fetchFfzGlobalEmotes as apiFetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes as apiFetchFfzChannelEmotes,\n} from '../../utils/api';\n\nconst defaultState = {\n  global: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n    items: [],\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: [],\n    // },\n  },\n};\n\nconst {\n  fetchFfzGlobalEmotesRequest,\n  fetchFfzGlobalEmotesSuccess,\n  fetchFfzGlobalEmotesFailure,\n  fetchFfzChannelEmotesRequest,\n  fetchFfzChannelEmotesSuccess,\n  fetchFfzChannelEmotesFailure,\n} = createActions(\n  'FETCH_FFZ_GLOBAL_EMOTES_REQUEST',\n  'FETCH_FFZ_GLOBAL_EMOTES_SUCCESS',\n  'FETCH_FFZ_GLOBAL_EMOTES_FAILURE',\n  'FETCH_FFZ_CHANNEL_EMOTES_REQUEST',\n  'FETCH_FFZ_CHANNEL_EMOTES_SUCCESS',\n  'FETCH_FFZ_CHANNEL_EMOTES_FAILURE',\n);\n\nconst parseFfzGlobalEmotes = pipe(\n  pathOr({}, ['sets']),\n  values,\n  map(pathOr([], ['emoticons'])),\n  flatten,\n);\nconst parseFfzChannelEmotes = parseFfzGlobalEmotes;\n\nexport const fetchFfzGlobalEmotes = () => async (dispatch) => {\n  dispatch(fetchFfzGlobalEmotesRequest());\n\n  try {\n    const response = await apiFetchFfzGlobalEmotes();\n    const data = { items: parseFfzGlobalEmotes(response) };\n\n    dispatch(fetchFfzGlobalEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchFfzGlobalEmotesFailure({ error }));\n  }\n};\n\nexport const fetchFfzChannelEmotes = (channelId, channel) => async (\n  dispatch,\n) => {\n  dispatch(fetchFfzChannelEmotesRequest({ channel }));\n\n  try {\n    const response = await apiFetchFfzChannelEmotes(channelId);\n    const data = {\n      channel,\n      items: parseFfzChannelEmotes(response),\n    };\n\n    dispatch(fetchFfzChannelEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchFfzChannelEmotesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchFfzGlobalEmotes = (state, { type, payload }) => {\n  if (type === fetchFfzGlobalEmotesRequest.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: true,\n        isLoaded: false,\n        isError: false,\n        error: null,\n      },\n    };\n  }\n\n  if (type === fetchFfzGlobalEmotesSuccess.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: true,\n        isError: false,\n        error: null,\n        ...payload,\n      },\n    };\n  }\n\n  if (type === fetchFfzGlobalEmotesFailure.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: false,\n        isError: true,\n        ...payload,\n      },\n    };\n  }\n\n  return state;\n};\n\nconst handleFetchFfzChannelEmotes = (state, { type, payload }) => {\n  const { channel } = payload;\n\n  if (type === fetchFfzChannelEmotesRequest.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: true,\n          isLoaded: false,\n          isError: false,\n          error: null,\n        },\n      },\n    };\n  }\n\n  if (type === fetchFfzChannelEmotesSuccess.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: true,\n          isError: false,\n          error: null,\n          items: payload.items,\n        },\n      },\n    };\n  }\n\n  if (type === fetchFfzChannelEmotesFailure.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: false,\n          isError: true,\n          error: payload.error,\n        },\n      },\n    };\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [combineActions(\n      fetchFfzGlobalEmotesRequest,\n      fetchFfzGlobalEmotesSuccess,\n      fetchFfzGlobalEmotesFailure,\n    )]: handleFetchFfzGlobalEmotes,\n\n    [combineActions(\n      fetchFfzChannelEmotesRequest,\n      fetchFfzChannelEmotesSuccess,\n      fetchFfzChannelEmotesFailure,\n    )]: handleFetchFfzChannelEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport twitch from './twitch';\nimport bttv from './bttv';\nimport ffz from './ffz';\n\nexport default combineReducers({\n  twitch,\n  bttv,\n  ffz,\n});\n","// https://regex101.com/r/cpaNXh/1\nconst isStartsWithProtocolRegex = /^(?:(?:[a-z]+:)?\\/\\/)/;\n\nconst normalizeHref = (href) =>\n  isStartsWithProtocolRegex.test(href) ? href : `//${href}`;\n\nexport default normalizeHref;\n","import pt from 'prop-types';\nimport { parse as twemojiParser } from 'twemoji-parser';\nimport emojilib from 'emojilib/emojis';\nimport urlRegex from 'url-regex';\nimport {\n  pipe,\n  toPairs,\n  map,\n  flatten,\n  find,\n  propEq,\n  join,\n  filter,\n  keys,\n  head,\n} from 'ramda';\n\nimport normalizeHref from './normalizeHref';\n\nconst TWITCH_EMOTES_CDN = '//static-cdn.jtvnw.net/emoticons/v1';\nconst BTTV_EMOTES_CDN = '//cdn.betterttv.net/emote';\n\nconst mentionRegex = /^@([\\p{Letter}\\p{Number}_]+)/u;\nconst linkRegex = urlRegex({ strict: false });\n\nconst normalizeEmotesFromTags = pipe(\n  toPairs,\n  map(([id, value]) => map((v) => ({ id, ...v }), value)),\n  flatten,\n);\n\nconst getFfzSrcSet = pipe(\n  toPairs,\n  map(([dpi, url]) => `${url} ${dpi}x`),\n  join(', '),\n);\n\nexport const createTwitchEmote = ({ id, code }) => ({\n  type: 'twitch-emote',\n  alt: code,\n  src: `${TWITCH_EMOTES_CDN}/${id}/1.0`,\n  srcSet: `${TWITCH_EMOTES_CDN}/${id}/1.0 1x, ${TWITCH_EMOTES_CDN}/${id}/2.0 2x, ${TWITCH_EMOTES_CDN}/${id}/3.0 4x`,\n});\nexport const createBttvEmote = ({ id, code }) => ({\n  type: 'bttv-emote',\n  alt: code,\n  src: `${BTTV_EMOTES_CDN}/${id}/1x`,\n  srcSet: `${BTTV_EMOTES_CDN}/${id}/2x 2x, ${BTTV_EMOTES_CDN}/${id}/3x 4x`,\n});\nexport const createFfzEmote = ({ name, urls }) => ({\n  type: 'ffz-emote',\n  alt: name,\n  src: urls[1],\n  srcSet: getFfzSrcSet(urls),\n});\nexport const createEmoji = (alt, src) => ({\n  type: 'emoji',\n  alt: `:${alt}:`,\n  src,\n  srcSet: null,\n});\nexport const createMention = (text, target) => ({\n  type: 'mention',\n  text,\n  target,\n});\nexport const createLink = (href) => ({\n  type: 'link',\n  text: href,\n  href: normalizeHref(href),\n});\n\nexport const twitchEmoteType = pt.shape({\n  type: pt.oneOf(['twitch-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const bttvEmoteType = pt.shape({\n  type: pt.oneOf(['bttv-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const ffzEmoteType = pt.shape({\n  type: pt.oneOf(['ffz-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const emojiType = pt.shape({\n  type: pt.oneOf(['emoji']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string,\n});\nexport const mentionType = pt.shape({\n  type: pt.oneOf(['mention']).isRequired,\n  text: pt.string.isRequired,\n  target: pt.string.isRequired,\n});\nexport const linkType = pt.shape({\n  type: pt.oneOf(['link']).isRequired,\n  text: pt.string.isRequired,\n  href: pt.string.isRequired,\n});\n\nconst regexMap = {\n  4: '>\\\\(', // '\\\\&gt\\\\;\\\\('\n  9: '<3', // '\\\\&lt\\\\;3'\n};\n\nconst findTwitchEmote = (name, twitch) =>\n  find(({ id, code }) => {\n    // 1-14 - match by regex\n    if (id >= 1 && id <= 14) {\n      const regexString = regexMap[id] || code;\n      return RegExp(`^${regexString}$`).test(name);\n    }\n    return name === code;\n  }, twitch);\nconst findBttvEmote = (name, bttv) => find(propEq('code', name), bttv);\nconst findFfzEmote = (name, ffz) => find(propEq('name', name), ffz);\nconst findEmoji = (char) =>\n  pipe(filter(propEq('char', char)), keys, head)(emojilib);\n\nconst findEntity = (word, { twitch, bttv, ffz }, { parseTwitch = false }) => {\n  if (parseTwitch) {\n    const twitchEmote = findTwitchEmote(word, twitch);\n    if (twitchEmote)\n      return createTwitchEmote({ id: twitchEmote.id, code: word });\n  }\n\n  const bttvEmote = findBttvEmote(word, bttv);\n  if (bttvEmote) return createBttvEmote(bttvEmote);\n\n  const ffzEmote = findFfzEmote(word, ffz);\n  if (ffzEmote) return createFfzEmote(ffzEmote);\n\n  // Don't parse two or more emotes without spaces between\n  // Don't parse emote if it's not in the emojilib package\n  const emojiMatch = twemojiParser(word, { assetType: 'png' });\n  if (\n    emojiMatch &&\n    emojiMatch.length === 1 &&\n    emojiMatch[0].text.length === word.length\n  ) {\n    const emoji = findEmoji(word);\n\n    if (emoji) {\n      const [{ url }] = emojiMatch;\n      return createEmoji(emoji, url);\n    }\n  }\n\n  // TODO: Use unicode regex if it supports\n  const mentionMatch = word.match(mentionRegex);\n  if (mentionMatch) {\n    const [text, target] = mentionMatch;\n    return [\n      createMention(text, target.toLowerCase()),\n      word.length - text.length,\n    ];\n  }\n\n  const linkMatch = word.match(linkRegex);\n  if (linkMatch && linkMatch[0].length === word.length) {\n    return createLink(word);\n  }\n\n  return null;\n};\n\nconst formatMessage = (message, embeddedEmotes, emotes) => {\n  // If the message was sent by the current user, there is no embedded emotes\n  // So we need to parse twitch emotes manually\n\n  const isOwnMessage = embeddedEmotes === undefined || embeddedEmotes === null;\n  const hasEmbeddedEmotes =\n    embeddedEmotes && Object.keys(embeddedEmotes).length > 0;\n  const normalizedEmbeddedEmotes = normalizeEmotesFromTags(embeddedEmotes);\n\n  const result = [];\n  let offset = 0;\n  // Before that offset all content was added to the result array\n  let arrayOffset = 0;\n\n  // Check every word. From offset to the next space index\n  do {\n    const spaceIndex = message.indexOf(' ', offset + 1);\n\n    const isStart = offset === 0;\n    const isEnd = spaceIndex === -1;\n\n    const startIndex = isStart ? offset : offset + 1;\n    const endIndex = isEnd ? message.length : spaceIndex;\n\n    const word = message.substring(startIndex, endIndex);\n\n    if (word) {\n      let entity = null;\n\n      // Check embedded twitch emotes\n      if (hasEmbeddedEmotes) {\n        const embeddedEmote = find(\n          propEq('start', startIndex),\n          normalizedEmbeddedEmotes,\n        );\n\n        if (embeddedEmote) {\n          entity = createTwitchEmote({ id: embeddedEmote.id, code: word });\n        }\n      }\n\n      // Check other entities\n      if (!entity) {\n        entity = findEntity(word, emotes, { parseTwitch: isOwnMessage });\n      }\n\n      if (entity) {\n        // Push all text before this entity\n        if (arrayOffset !== startIndex) {\n          const textBefore = message.substring(arrayOffset, startIndex);\n          result.push(textBefore);\n        }\n\n        // If entity it's an array it means entity may be not full word\n        // The second element is the difference between word length and entity length\n        if (Array.isArray(entity)) {\n          const [entityObject, difference] = entity;\n          result.push(entityObject);\n          arrayOffset = endIndex - difference;\n        } else {\n          result.push(entity);\n          arrayOffset = endIndex;\n        }\n      }\n    }\n\n    // If it's the last word and it wasn't added to the result add it now\n    if (spaceIndex === -1 && arrayOffset !== endIndex) {\n      const textAfter = message.substring(arrayOffset, endIndex);\n      result.push(textAfter);\n    }\n\n    offset = spaceIndex;\n  } while (offset !== -1);\n\n  return result;\n};\n\nexport default formatMessage;\n","import { createSelector } from 'reselect';\nimport { pipe, path, pathOr, values, flatten, toPairs } from 'ramda';\n\nimport {\n  createTwitchEmote,\n  createBttvEmote,\n  createFfzEmote,\n} from 'utils/formatMessage';\nimport { currentChannelSelector } from '../chat';\n\nexport const twitchEmotesSelector = createSelector(\n  pathOr([], ['emotes', 'twitch', 'items']),\n  pipe(values, flatten),\n);\n\nconst createGlobalEmotesSelector = (type) =>\n  pathOr([], ['emotes', type, 'global', 'items']);\nconst createChannelEmotesSelector = (type) => (state) =>\n  pathOr(\n    [],\n    ['emotes', type, 'channels', currentChannelSelector(state), 'items'],\n    state,\n  );\n\nconst bttvGlobalEmotesSelector = createGlobalEmotesSelector('bttv');\nconst bttvChannelEmotesSelector = createChannelEmotesSelector('bttv');\nexport const bttvEmotesSelector = createSelector(\n  bttvGlobalEmotesSelector,\n  bttvChannelEmotesSelector,\n  (bttvGlobal, bttvChannel) => [...bttvGlobal, ...bttvChannel],\n);\n\nconst ffzGlobalEmotesSelector = createGlobalEmotesSelector('ffz');\nconst ffzChannelEmotesSelector = createChannelEmotesSelector('ffz');\nexport const ffzEmotesSelector = createSelector(\n  ffzGlobalEmotesSelector,\n  ffzChannelEmotesSelector,\n  (ffzGlobal, ffzChannel) => [...ffzGlobal, ...ffzChannel],\n);\n\nexport const emotesSelector = (state) => ({\n  twitch: twitchEmotesSelector(state),\n  bttv: bttvEmotesSelector(state),\n  ffz: ffzEmotesSelector(state),\n});\n\n// prettier-ignore\nconst regexEmotesMap = {\n  '[oO](_|\\\\.)[oO]': 'O_o',\n  '\\\\&gt\\\\;\\\\(':     '>(',\n  '\\\\&lt\\\\;3':       '<3',\n  '\\\\:-?(o|O)':      ':O',\n  '\\\\:-?(p|P)':      ':P',\n  '\\\\:-?[\\\\\\\\/]':    ':/',\n  '\\\\:-?[z|Z|\\\\|]':  ':Z',\n  '\\\\:-?\\\\(':        ':(',\n  '\\\\:-?\\\\)':        ':)',\n  '\\\\:-?D':          ':D',\n  '\\\\;-?(p|P)':      ';P',\n  '\\\\;-?\\\\)':        ';)',\n  'R-?\\\\)':          'R)',\n  'B-?\\\\)':          'B)',\n};\n\nexport const emoteCategoriesSelector = createSelector(\n  (state) => state.emotes.twitch.items,\n  bttvGlobalEmotesSelector,\n  bttvChannelEmotesSelector,\n  ffzGlobalEmotesSelector,\n  ffzChannelEmotesSelector,\n  (twitch, bttvGlobal, bttvChannel, ffzGlobal, ffzChannel) =>\n    [\n      {\n        title: 'BetterTTV Channel Emotes',\n        items: bttvChannel.map(createBttvEmote),\n      },\n      {\n        title: 'FrankerFaceZ Channel Emotes',\n        items: ffzChannel.map(createFfzEmote),\n      },\n      ...toPairs(twitch).map(([setId, items]) => ({\n        title: setId === '0' ? 'Twitch' : null,\n        items: items.map(({ id, code }) =>\n          createTwitchEmote({ id, code: regexEmotesMap[code] || code }),\n        ),\n      })),\n      {\n        title: 'BetterTTV',\n        items: bttvGlobal.map(createBttvEmote),\n      },\n      {\n        title: 'FrankerFaceZ',\n        items: ffzGlobal.map(createFfzEmote),\n      },\n    ].filter(({ items }) => items.length > 0),\n);\n\nconst createIsEmotesLoadedSelector = (type) => (state) => {\n  const channel = currentChannelSelector(state);\n  const globalLoaded =\n    state.emotes[type].global.isLoaded || state.emotes[type].global.isError;\n  const channelLoaded =\n    path(['emotes', type, 'channels', channel, 'isLoaded'], state) ||\n    path(['emotes', type, 'channels', channel, 'isError'], state);\n  return globalLoaded && channelLoaded;\n};\n\nexport const isBttvEmotesLoadedSelector = createIsEmotesLoadedSelector('bttv');\n\nexport const isFfzEmotesLoadedSelector = createIsEmotesLoadedSelector('ffz');\n\nexport const isTwitchEmotesLoadedSelector = (state) =>\n  state.emotes.twitch.isLoaded || state.emotes.twitch.isError;\n\nexport const isEmotesLoadedSelector = (state) =>\n  isTwitchEmotesLoadedSelector(state) &&\n  isBttvEmotesLoadedSelector(state) &&\n  isFfzEmotesLoadedSelector(state);\n","import { pathOr } from 'ramda';\n\nimport { currentChannelSelector } from '../chat';\n\nexport const globalBadgesSelector = (state) => state.badges.global.items;\nexport const channelBadgesSelector = (state) =>\n  pathOr({}, ['badges', 'channels', currentChannelSelector(state), 'items']);\n\nconst isGlobalBadgesLoadedSelector = (state) =>\n  state.badges.global.isLoaded || state.badges.global.isError;\n\nconst isChannelBadgesLoadedSelector = (state) => {\n  const channel = currentChannelSelector(state);\n  return (\n    pathOr(false, ['badges', 'channels', channel, 'isLoaded'], state) ||\n    pathOr(false, ['badges', 'channels', channel, 'isError'], state)\n  );\n};\n\nexport const isBadgesLoadedSelector = (state) =>\n  isGlobalBadgesLoadedSelector(state) && isChannelBadgesLoadedSelector(state);\n","export const TWITCH_API_AUTH_BASE = 'https://id.twitch.tv/oauth2/authorize';\n\nexport const TWITCH_API_CLIENT_ID = process.env.REACT_APP_TWITCH_API_CLIENT_ID;\nexport const TWITCH_API_REDIRECT_URI =\n  process.env.REACT_APP_TWITCH_API_REDIRECT_URI;\n\nexport const CHANNEL_MESSAGES_LIMIT = 500;\n\nexport const MESSAGE_TYPES = {\n  MESSAGE: 'MESSAGE',\n  NOTICE_MESSAGE: 'NOTICE_MESSAGE',\n  USER_NOTICE_MESSAGE: 'USER_NOTICE_MESSAGE',\n};\n","import { pathOr, toPairs, map, pipe, filter } from 'ramda';\n\nconst createBadge = ({\n  title,\n  description,\n  image_url_1x: imageUrl1x,\n  image_url_2x: imageUrl2x,\n  image_url_4x: imageUrl4x,\n}) => ({\n  alt: title,\n  label: description,\n  src: imageUrl1x,\n  srcSet: `${imageUrl1x} 1x, ${imageUrl2x} 2x, ${imageUrl4x} 4x`,\n});\n\nconst getMessageBadges = (badges, globalBadges, channelBadges) => {\n  const mapBadges = ([name, version]) => {\n    const badge =\n      pathOr(false, [name, 'versions', version], channelBadges) ||\n      pathOr(false, [name, 'versions', version], globalBadges);\n\n    return badge ? createBadge(badge) : false;\n  };\n\n  return pipe(\n    toPairs,\n    map(mapBadges),\n    filter(Boolean),\n  )(badges);\n};\n\nexport default getMessageBadges;\n","/* eslint-disable no-underscore-dangle */\nimport { pathOr, omit, mergeDeepRight, mergeDeepWith, concat } from 'ramda';\nimport { EventEmitter } from 'events';\nimport { parse as tekkoParse, format as tekkoFormat } from 'tekko';\nimport camelCase from 'camel-case';\nimport uuid from 'uuid/v4';\n\nconst chatUrl = 'wss://irc-ws.chat.twitch.tv:443';\n\nconst noopIRCCommands = [\n  'CAP',\n  '002',\n  '003',\n  '004',\n  '353',\n  '366',\n  '375',\n  '372',\n  '376',\n];\n\nconst booleanMessageTags = [\n  'mod',\n  'emote-only',\n  'r9k',\n  'rituals',\n  'subs-only',\n  'msg-param-should-share-streak',\n];\n\nconst numberMessageTags = [\n  'tmi-sent-ts',\n  'ban-duration',\n  'bits',\n  'msg-param-cumulative-months',\n  'msg-param-months',\n  'msg-param-promo-gift-total',\n  'msg-param-streak-months',\n  'msg-param-viewerCount',\n  'msg-param-threshold',\n];\n\nconst depricatedMessageTags = ['subscriber', 'turbo', 'user-type'];\n\nconst noticeMessageTags = [\n  'msg_banned',\n  'msg_bad_characters',\n  'msg_channel_blocked',\n  'msg_channel_suspended',\n  'msg_duplicate',\n  'msg_emoteonly',\n  'msg_facebook',\n  'msg_followersonly',\n  'msg_followersonly_followed',\n  'msg_followersonly_zero',\n  'msg_r9k',\n  'msg_ratelimit',\n  'msg_rejected',\n  'msg_rejected_mandatory',\n  'msg_room_not_found',\n  'msg_slowmode',\n  'msg_subsonly',\n  'msg_suspended',\n  'msg_timedout',\n  'msg_verified_email',\n];\n\nconst getRandomUsername = () =>\n  `justinfan${Math.floor(Math.random() * 80000 + 1000)}`;\n\nconst parseMessageEmotes = (raw = '') => {\n  if (!raw) return {};\n\n  return raw.split('/').reduce((acc, emote) => {\n    const [id, indexes] = emote.split(':');\n\n    return {\n      ...acc,\n      [id]: indexes.split(',').map((index) => {\n        const [start, end] = index.split('-');\n\n        return {\n          start: Number.parseInt(start, 10),\n          end: Number.parseInt(end, 10),\n        };\n      }),\n    };\n  }, {});\n};\n\nconst parseBadges = (data = '') => {\n  if (!data) return {};\n\n  return data.split(',').reduce((acc, badge) => {\n    const [name, value] = badge.split('/');\n\n    return {\n      ...acc,\n      [name]: value,\n    };\n  }, {});\n};\n\nconst normalizeTagValue = (name, value) => {\n  if (name === 'emotes') return parseMessageEmotes(value);\n  if (name === 'badges') return parseBadges(value);\n  if (name === 'badge-info') return parseBadges(value);\n\n  if (name === 'followers-only') {\n    let followersOnly = false;\n    if (value === '-1') {\n      followersOnly = false;\n    } else if (value === '0') {\n      followersOnly = true;\n    } else if (typeof value === 'string') {\n      followersOnly = parseInt(value, 10);\n    }\n    return followersOnly;\n  }\n\n  if (name === 'slow') {\n    let slow = false;\n    if (value === '0') {\n      slow = false;\n    } else if (typeof value === 'string') {\n      slow = parseInt(value, 10);\n    }\n    return slow;\n  }\n\n  if (booleanMessageTags.includes(name)) return value === '1';\n  if (numberMessageTags.includes(name)) return parseInt(value, 10);\n\n  if (typeof value === 'string') {\n    return value.replace('\\\\s', ' ');\n  }\n\n  return value;\n};\n\nexport const parseMessageTags = (data = {}) =>\n  Object.entries(data)\n    .filter(([key]) => !depricatedMessageTags.includes(key))\n    .reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [camelCase(key)]: normalizeTagValue(key, value),\n      };\n    }, {});\n\nexport const isBroadcaster = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'broadcaster');\n\nexport const isMod = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'moderator');\n\nexport const isSub = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'subscriber');\n\nexport const isVIP = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'vip');\n\nexport const monthsSubbed = (tags = {}) => {\n  const subbed = tags.subscriber;\n\n  return subbed ? parseInt(subbed, 10) : 0;\n};\n\nexport const getIsAction = (message) =>\n  message.startsWith('\\u0001ACTION ') && message.endsWith('\\u0001');\nexport const normalizeActionMessage = (message) => message.slice(8, -1);\n\nexport const parseMessageData = ({\n  raw,\n  command,\n  tags,\n  middle: params,\n  trailing: message,\n  prefix,\n}) => ({\n  raw,\n  command,\n  tags: parseMessageTags(tags),\n  params,\n  message,\n  prefix,\n});\n\nexport const parseChatMessage = ({\n  message,\n  tags,\n  params,\n  prefix: { user },\n}) => {\n  const isAction = getIsAction(message);\n\n  return {\n    message: isAction ? normalizeActionMessage(message) : message,\n    tags,\n    user,\n    channel: params[0].slice(1),\n    isAction,\n  };\n};\n\nconst parseGlobalUserState = ({ tags }) => ({ tags });\nconst parseState = ({ tags, params: [channel] }) => ({\n  tags,\n  channel: channel.slice(1),\n});\nconst parseUserState = parseState;\nconst parseRoomState = parseState;\n\nconst parseCommand = ({ message, tags, params: [channel] }) => ({\n  message,\n  tags,\n  channel: channel.slice(1),\n});\nconst parseNotice = parseCommand;\nconst parseUserNotice = parseCommand;\nconst parseClearMessage = parseCommand;\nconst parseClearChat = parseCommand;\nconst parseHostTarget = parseCommand;\n\nconst parseWhisper = ({\n  message,\n  tags,\n  params: [channel],\n  prefix: { user },\n}) => ({\n  message,\n  tags,\n  channel,\n  user,\n});\n\nclass Client extends EventEmitter {\n  socket;\n\n  options;\n\n  user;\n\n  channels;\n\n  _queue;\n\n  _messagesQueue;\n\n  constructor(options = {}) {\n    super();\n    this.socket = null;\n    this.channels = {};\n    this.options = mergeDeepRight({ identity: {} }, options);\n    this.user = null;\n    this._queue = [];\n    this._messagesQueue = {};\n  }\n\n  _onConnect() {\n    const { name, auth } = this.options.identity;\n\n    const nick = name || getRandomUsername();\n    const pass = auth ? `oauth:${auth}` : 'SCHMOOPIIE';\n\n    this.sendRaw([\n      'CAP REQ :twitch.tv/tags twitch.tv/commands',\n      `PASS ${pass}`,\n      `NICK ${nick}`,\n    ]);\n    this.emit('connected');\n  }\n\n  _onClose(hadError) {\n    // TODO\n    const willReconnect = false;\n    this.emit('disconnected', { willReconnect, hadError });\n    if (willReconnect) {\n      this.connect();\n    }\n  }\n\n  _onError(error) {\n    // TODO\n    this.emit('error', error);\n  }\n\n  _onData(rawData) {\n    const data = rawData.trim().split('\\r\\n');\n    data.forEach((line) => this._handleMessage(line));\n  }\n\n  _emmitOwnMessage(tags, channel) {\n    const message = pathOr([], ['_messagesQueue', channel], this).shift();\n\n    if (typeof message !== 'string') return;\n\n    const isAction = message.startsWith('/me ');\n    const messageEventData = {\n      message: isAction ? message.slice(4) : message,\n      tags: {\n        ...tags,\n        id: uuid(),\n        tmiSentTs: new Date().getTime(),\n        userId: this.user.userId,\n      },\n      user: this.options.identity.name,\n      channel,\n      isAction,\n    };\n\n    this.emit('ownmessage', messageEventData);\n  }\n\n  _handleMessage(raw) {\n    const parsedData = tekkoParse(raw);\n    parsedData.raw = raw;\n    const { command } = parsedData;\n\n    if (command === 'PING') {\n      this.sendRaw('PONG :tmi.twitch.tv');\n      this.emit('ping');\n      return;\n    }\n\n    if (parsedData.prefix && parsedData.prefix.user === 'jtv') {\n      // console.log('JTV');\n      // console.log(parsedData);\n      return;\n    }\n\n    if (command === '001') {\n      const name = parsedData.params[0];\n      this.options.identity.name = name;\n\n      while (this._queue.length) {\n        const ircMessage = this._queue.shift();\n        this.sendRaw(ircMessage);\n      }\n\n      return;\n    }\n\n    // noop\n    if (noopIRCCommands.includes(command)) {\n      return;\n    }\n\n    const data = parseMessageData(parsedData);\n    const channel = pathOr('', ['params', 0], data).slice(1);\n\n    // Sends a message to a channel\n    if (command === 'PRIVMSG') {\n      const eventData = parseChatMessage(data);\n      this.emit('message', eventData);\n      return;\n    }\n\n    // Sends user-state data when a user joins a channel or sends a PRIVMSG to a channel\n    if (command === 'USERSTATE') {\n      const eventData = parseUserState(data);\n\n      this.channels = mergeDeepRight(this.channels, {\n        [channel]: { userState: eventData.tags },\n      });\n\n      const isSendedAfterPrivateMessage =\n        pathOr(0, ['_messagesQueue', channel, 'length'], this) > 0;\n\n      if (isSendedAfterPrivateMessage) {\n        this._emmitOwnMessage(eventData.tags, channel);\n      }\n\n      this.emit('userstate', eventData);\n      return;\n    }\n\n    if (command === 'JOIN') {\n      const eventData = { channel };\n      this.channels = mergeDeepRight(this.channels, { [channel]: {} });\n      this.emit('join', eventData);\n      return;\n    }\n\n    if (command === 'PART') {\n      const eventData = { channel };\n      this.channels = omit([channel], this.channels);\n      this.emit('part', eventData);\n      return;\n    }\n\n    if (command === 'ROOMSTATE') {\n      const eventData = parseRoomState(data);\n      this.channels = mergeDeepRight(this.channels, {\n        [channel]: { roomState: eventData.tags },\n      });\n      this.emit('roomstate', eventData);\n      return;\n    }\n\n    if (command === 'NOTICE') {\n      const eventData = parseNotice(data);\n\n      // Last message was not sent\n      if (noticeMessageTags.includes(data.tags.msgId)) {\n        pathOr([], ['_messagesQueue', channel], this).shift();\n      }\n\n      this.emit('notice', eventData);\n      return;\n    }\n\n    if (command === 'USERNOTICE') {\n      const eventData = parseUserNotice(data);\n      this.emit('usernotice', eventData);\n      return;\n    }\n\n    if (command === 'CLEARCHAT') {\n      const eventData = parseClearChat(data);\n      this.emit('clearchat', eventData);\n      return;\n    }\n\n    if (command === 'CLEARMSG') {\n      const eventData = parseClearMessage(data);\n      this.emit('clearmsg', eventData);\n      return;\n    }\n\n    if (command === 'HOSTTARGET') {\n      const eventData = parseHostTarget(data);\n      this.emit('hosttarget', eventData);\n      return;\n    }\n\n    if (command === 'WHISPER') {\n      const eventData = parseWhisper(data);\n      this.emit('whisper', eventData);\n      return;\n    }\n\n    if (command === 'GLOBALUSERSTATE') {\n      const eventData = parseGlobalUserState(data);\n      this.user = eventData.tags;\n      this.emit('globaluserstate', eventData);\n      return;\n    }\n\n    this.emit('unhandled-command', data);\n  }\n\n  sendRaw(message) {\n    const handleError = (err) => {\n      if (err) {\n        this.emit('error', err);\n      }\n    };\n\n    if (Array.isArray(message)) {\n      message.forEach((line) => this.socket.send(`${line}\\r\\n`, handleError));\n    } else {\n      this.socket.send(`${message}\\r\\n`, handleError);\n    }\n  }\n\n  connect() {\n    this.socket = new WebSocket(chatUrl);\n    const { socket } = this;\n\n    socket.addEventListener('open', () => this._onConnect());\n    socket.addEventListener('close', (hadError) => this._onClose(hadError));\n    socket.addEventListener('error', (error) => this._onError(error));\n    socket.addEventListener('message', (data) => this._onData(data.data));\n  }\n\n  say(channel, message) {\n    // TODO: check if conected to the channel before send\n\n    if (!message) return;\n\n    const ircMessage = tekkoFormat({\n      command: 'PRIVMSG',\n      middle: [`#${channel}`],\n      trailing: message,\n    });\n    this.sendRaw(ircMessage);\n\n    this._messagesQueue = mergeDeepWith(concat, this._messagesQueue, {\n      [channel]: [message],\n    });\n  }\n\n  sendCommand(channel, command, params) {\n    const commandParams = Array.isArray(params) ? params.join(' ') : params;\n    const ircMessage = tekkoFormat({\n      command: 'PRIVMSG',\n      middle: [`#${channel}`],\n      trailing: `/${command} ${commandParams}`,\n    });\n    this.sendRaw(ircMessage);\n  }\n\n  join(roomName) {\n    const ircMessage = tekkoFormat({\n      command: 'JOIN',\n      middle: [`#${roomName}`],\n    });\n\n    if (!this.user) {\n      this._queue.push(ircMessage);\n    } else {\n      this.sendRaw(ircMessage);\n    }\n  }\n\n  part(roomName) {\n    const ircMessage = tekkoFormat({\n      command: 'PART',\n      middle: [`#${roomName}`],\n    });\n\n    if (!this.user) {\n      this._queue.push(ircMessage);\n    } else {\n      this.sendRaw(ircMessage);\n    }\n  }\n}\n\nexport default Client;\n","import { parse } from 'tekko';\n\nimport { MESSAGE_TYPES } from './constants';\nimport {\n  globalBadgesSelector,\n  channelBadgesSelector,\n} from '../reducers/badges/selectors';\nimport { emotesSelector } from '../reducers/emotes/selectors';\nimport {\n  getIsAction,\n  normalizeActionMessage,\n  parseMessageTags,\n} from './twitchChat';\nimport formatMessage from './formatMessage';\nimport getMessageBadges from './getMessageBadges';\n\nconst normalizeRecentMessages = (state, messages) => {\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n\n  return messages\n    .map((m) => parse(m))\n    .filter((m) => m.command === 'PRIVMSG')\n    .map(({ tags, params: [channel, message], prefix: { user } }) => {\n      const isAction = getIsAction(message);\n      const normalizedMessage = isAction\n        ? normalizeActionMessage(message)\n        : message;\n      const parsedTags = parseMessageTags(tags);\n\n      return {\n        type: MESSAGE_TYPES.MESSAGE,\n        message: normalizedMessage,\n        messageArray: formatMessage(\n          normalizedMessage,\n          parsedTags.emotes,\n          emotes,\n        ),\n        tags: parsedTags,\n        badges: getMessageBadges(\n          parsedTags.badges,\n          globalBadges,\n          channelBadges,\n        ),\n        user,\n        channel: channel.slice(1),\n        isAction,\n        isHistory: true,\n      };\n    });\n};\n\nexport default normalizeRecentMessages;\n","import {\n  createAction,\n  createActions,\n  handleActions,\n  combineActions,\n} from 'redux-actions';\nimport { pathOr, mergeDeepRight, concat } from 'ramda';\n\nimport { emotesSelector } from '../emotes/selectors';\nimport {\n  globalBadgesSelector,\n  channelBadgesSelector,\n} from '../badges/selectors';\nimport { fetchRecentMessages as apiFetchRecentMessages } from '../../utils/api';\nimport { CHANNEL_MESSAGES_LIMIT, MESSAGE_TYPES } from '../../utils/constants';\nimport storeFlags from '../../utils/storeFlags';\nimport formatMessage from '../../utils/formatMessage';\nimport getMessageBadges from '../../utils/getMessageBadges';\nimport normalizeRecentMessages from '../../utils/normalizeRecentMessages';\n\nconst defaultState = {\n  // [channel]: {\n  //   history: {\n  //     isLoading: true,\n  //     isLoaded: false,\n  //     isError: false,\n  //     error: null,\n  //   },\n  //   isEven: false,\n  //   items: [],\n  // },\n};\n\nconst {\n  addMessageEntity,\n  fetchRecentMessagesRequest,\n  fetchRecentMessagesSuccess,\n  fetchRecentMessagesFailure,\n} = createActions(\n  'ADD_MESSAGE_ENTITY',\n  'FETCH_RECENT_MESSAGES_REQUEST',\n  'FETCH_RECENT_MESSAGES_SUCCESS',\n  'FETCH_RECENT_MESSAGES_FAILURE',\n);\n\nexport const clearChat = createAction('CLEAR_CHAT');\nexport const addRecentMessagesAction = createAction('ADD_RECENT_MESSAGES');\n\nconst sliceMessages = (items) => {\n  const diff = items.length - CHANNEL_MESSAGES_LIMIT;\n  return diff > 0 ? items.slice(diff) : items;\n};\n\nconst getIsEven = (prev, addedItemsCount, isSliced) => {\n  if (isSliced) {\n    return addedItemsCount % 2 ? !prev : prev;\n  }\n  return prev;\n};\n\nexport const addRecentMessages = (channel) => (dispatch, getState) => {\n  const state = getState();\n  const messages = pathOr([], ['messages', channel, 'history', 'items'], state);\n  const data = {\n    channel,\n    items: normalizeRecentMessages(state, messages),\n  };\n\n  dispatch(addRecentMessagesAction(data));\n};\n\nexport const fetchRecentMessages = (channel) => async (dispatch) => {\n  dispatch(fetchRecentMessagesRequest({ channel }));\n  try {\n    const response = await apiFetchRecentMessages(channel);\n    const data = { channel, items: response.messages };\n\n    dispatch(fetchRecentMessagesSuccess(data));\n  } catch (error) {\n    dispatch(fetchRecentMessagesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchRecentMessages = (state, { type, payload }) => {\n  const { channel } = payload;\n\n  if (type === fetchRecentMessagesRequest.toString()) {\n    return mergeDeepRight(state, {\n      [channel]: {\n        history: { ...storeFlags.request },\n      },\n    });\n  }\n\n  if (type === fetchRecentMessagesSuccess.toString()) {\n    return mergeDeepRight(state, {\n      [channel]: {\n        history: { ...storeFlags.success, items: payload.items },\n      },\n    });\n  }\n\n  if (type === fetchRecentMessagesFailure.toString()) {\n    return mergeDeepRight(state, {\n      [channel]: {\n        history: { ...storeFlags.failure, error: payload.error },\n      },\n    });\n  }\n\n  return state;\n};\n\nexport const addMessage = ({ message, tags, ...rest }) => (\n  dispatch,\n  getState,\n) => {\n  const state = getState();\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n\n  const normalizedMessage = {\n    type: MESSAGE_TYPES.MESSAGE,\n    message,\n    messageArray: formatMessage(message, tags.emotes, emotes),\n    tags,\n    badges: getMessageBadges(tags.badges, globalBadges, channelBadges),\n    ...rest,\n  };\n\n  dispatch(addMessageEntity(normalizedMessage));\n};\n\nexport const addNoticeMessage = (message) => (dispatch) => {\n  const normalizedMessage = {\n    ...message,\n    type: MESSAGE_TYPES.NOTICE_MESSAGE,\n  };\n\n  dispatch(addMessageEntity(normalizedMessage));\n};\n\nexport const addUserNoticeMessage = (message) => (dispatch) => {\n  const normalizedMessage = {\n    ...message,\n    type: MESSAGE_TYPES.USER_NOTICE_MESSAGE,\n  };\n\n  dispatch(addMessageEntity(normalizedMessage));\n};\n\nconst handleAddMessageEntity = (state, { payload: message }) => {\n  const { channel } = message;\n  const oldItems = pathOr([], [channel, 'items'], state);\n  const newItems = [...oldItems, message];\n  const slicedMessages = sliceMessages(newItems);\n  const isSliced = newItems.length > slicedMessages.length;\n  const isEven = pathOr(false, [channel, 'isEven'], state);\n\n  return {\n    ...state,\n    [channel]: {\n      ...state[channel],\n      isEven: getIsEven(isEven, 1, isSliced),\n      items: slicedMessages,\n    },\n  };\n};\n\nconst handleAddRecentMessages = (state, { payload: { channel, items } }) => {\n  const newItems = concat(items, pathOr([], [channel, 'items'], state));\n  const slicedMessages = sliceMessages(newItems);\n  const isSliced = newItems.length > slicedMessages.length;\n  const isEven = pathOr(false, [channel, 'isEven'], state);\n\n  return mergeDeepRight(state, {\n    [channel]: {\n      history: { items: [] },\n      items: newItems,\n      isEven: getIsEven(isEven, items.length, isSliced),\n    },\n  });\n};\n\nconst handleClearChat = (state, { payload }) => {\n  const {\n    channel,\n    tags: { targetUserId },\n  } = payload;\n\n  const newItems = state[channel].items.map((message) =>\n    message.tags.userId === targetUserId && !message.isHistory\n      ? { ...message, isDeleted: true }\n      : message,\n  );\n\n  return {\n    ...state,\n    [channel]: {\n      ...state[channel],\n      items: newItems,\n    },\n  };\n};\n\nconst reducer = handleActions(\n  {\n    [addMessageEntity]: handleAddMessageEntity,\n    [addRecentMessagesAction]: handleAddRecentMessages,\n    [combineActions(\n      fetchRecentMessagesRequest,\n      fetchRecentMessagesSuccess,\n      fetchRecentMessagesFailure,\n    )]: handleFetchRecentMessages,\n    [clearChat]: handleClearChat,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createAction, handleActions } from 'redux-actions';\n\nconst getOptionsFromLocalStorage = () => {\n  try {\n    return JSON.parse(localStorage.options);\n  } catch {\n    return {};\n  }\n};\n\nconst defaultState = {\n  showTimestamps: false,\n  splitChat: true,\n  blacklistKeywords: '',\n  highlightKeywords: '',\n  ...getOptionsFromLocalStorage(),\n};\n\nexport const changeOption = createAction('CHANGE_OPTION', (option, value) => {\n  localStorage.setItem(\n    'options',\n    JSON.stringify({\n      ...getOptionsFromLocalStorage(),\n      [option]: value,\n    }),\n  );\n\n  return {\n    option,\n    value,\n  };\n});\nconst handleChangeOption = (state, { payload: { option, value } }) => ({\n  ...state,\n  [option]: value,\n});\n\nconst reducer = handleActions(\n  {\n    [changeOption]: handleChangeOption,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport auth from './auth';\nimport badges from './badges';\nimport chat from './chat';\nimport emotes from './emotes/index';\nimport messages from './messages';\nimport options from './options';\n\nexport default combineReducers({\n  auth,\n  badges,\n  chat,\n  emotes,\n  messages,\n  options,\n});\n","/* eslint-disable no-underscore-dangle */\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from '../reducers';\n\nconst enhancer =\n  process.env.NODE_ENV === 'production'\n    ? applyMiddleware(thunk)\n    : compose(\n        applyMiddleware(thunk),\n        window.__REDUX_DEVTOOLS_EXTENSION__\n          ? window.__REDUX_DEVTOOLS_EXTENSION__()\n          : (noop) => noop,\n      );\n\nconst store = createStore(rootReducer, {}, enhancer);\n\nexport default store;\n","import { useState, useEffect } from 'react';\n\nconst useLocationHash = () => {\n  const [hash, setHash] = useState(window.location.hash);\n\n  useEffect(() => {\n    const handleHashChange = () => setHash(window.location.hash);\n\n    window.addEventListener('hashchange', handleHashChange);\n\n    return () => window.removeEventListener('hashchange', handleHashChange);\n  }, []);\n\n  return hash;\n};\n\nexport default useLocationHash;\n","import { useEffect } from 'react';\n\nconst useDocumentTitle = (title) => {\n  useEffect(() => {\n    document.title = title\n      ? `#${title} - ${process.env.REACT_APP_NAME} `\n      : process.env.REACT_APP_NAME;\n  }, [title]);\n};\n\nexport default useDocumentTitle;\n","import { pathOr } from 'ramda';\n\nimport { currentChannelSelector } from '../chat';\n\nexport const messagesSelector = (state) =>\n  pathOr([], ['messages', currentChannelSelector(state), 'items'], state);\n\nexport const isHistoryLoadingSelector = (state) =>\n  pathOr(false, [\n    'messages',\n    currentChannelSelector(state),\n    'history',\n    'isLoading',\n  ])(state);\n\nexport const isHistoryLoadedSelector = (state) =>\n  pathOr(false, [\n    'messages',\n    currentChannelSelector(state),\n    'history',\n    'isLoaded',\n  ])(state);\n","import { pathOr } from 'ramda';\n\nimport { currentChannelSelector } from './chat';\n\nexport const channelIdSelector = (state) =>\n  pathOr(\n    null,\n    ['chat', 'channels', currentChannelSelector(state), 'roomState', 'roomId'],\n    state,\n  );\n\nexport const isEvenSelector = (state) =>\n  pathOr(false, ['messages', currentChannelSelector(state), 'isEven'], state);\n","import emojilib from 'emojilib/emojis';\n\nconst replaceEmojis = (text) =>\n  text\n    .split(' ')\n    .map((word) => {\n      if (word[0] !== ':' || word[word.length - 1] !== ':') {\n        return word;\n      }\n\n      const name = word.slice(1, -1);\n      const emoji = emojilib[name];\n\n      return emoji && emoji.char ? emoji.char : word;\n    })\n    .join(' ');\n\nexport default replaceEmojis;\n","export const optionsSelector = (state) => [\n  {\n    title: 'My preferences',\n    items: [\n      {\n        type: 'SWITCH',\n        id: 'show-timestamps',\n        name: 'showTimestamps',\n        title: 'Show Timestamps',\n        description: '',\n        value: state.options.showTimestamps,\n      },\n      {\n        type: 'SWITCH',\n        id: 'split-chat',\n        name: 'splitChat',\n        title: 'Split Chat',\n        description: '',\n        value: state.options.splitChat,\n      },\n      // {\n      //   type: 'INPUT',\n      //   id: 'blacklist-keywords',\n      //   name: 'blacklistKeywords',\n      //   title: 'Set Blacklist Keywords',\n      //   description: '',\n      //   value: state.options.blacklistKeywords,\n      // },\n      // {\n      //   type: 'INPUT',\n      //   id: 'highlight-keywords',\n      //   name: 'highlightKeywords',\n      //   title: 'Set Highlight Keywords',\n      //   description: '',\n      //   value: state.options.highlightKeywords,\n      // },\n    ],\n  },\n];\n\nexport const isShowTimestampsSelector = (state) => state.options.showTimestamps;\nexport const isSplitChatSelector = (state) => state.options.splitChat;\n","import CustomScrollbar from 'react-scrollbars-custom';\nimport styled from 'styled-components';\n\nconst Scrollbar = styled(CustomScrollbar).attrs({\n  disableTracksWidthCompensation: true,\n})`\n  overflow-y: auto;\n\n  .ScrollbarsCustom-TrackY {\n    background: none !important;\n  }\n\n  .ScrollbarsCustom-ThumbY {\n    margin-left: auto;\n    margin-right: auto;\n    width: 6px !important;\n  }\n`;\n\nexport default Scrollbar;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  fill: \"currentColor\"\n}, React.createElement(\"path\", {\n  d: \"M7 11a1 1 0 100-2 1 1 0 000 2zM14 10a1 1 0 11-2 0 1 1 0 012 0zM10 14a2 2 0 002-2H8a2 2 0 002 2z\"\n}), React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-2 0a6 6 0 11-12 0 6 6 0 0112 0z\",\n  clipRule: \"evenodd\"\n}));\n\nvar SvgSmileyFace = function SvgSmileyFace(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    width: \"100%\",\n    height: \"100%\",\n    viewBox: \"0 0 20 20\",\n    x: \"0px\",\n    y: \"0px\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgSmileyFace, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/smiley-face.c033f241.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  fill: \"currentColor\"\n}, React.createElement(\"path\", {\n  d: \"M10 8a2 2 0 100 4 2 2 0 000-4z\"\n}), React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M9 2h2a2.01 2.01 0 001.235 1.855l.53.22a2.01 2.01 0 002.185-.439l1.414 1.414a2.01 2.01 0 00-.439 2.185l.22.53A2.01 2.01 0 0018 9v2a2.01 2.01 0 00-1.855 1.235l-.22.53a2.01 2.01 0 00.44 2.185l-1.415 1.414a2.01 2.01 0 00-2.184-.439l-.531.22A2.01 2.01 0 0011 18H9a2.01 2.01 0 00-1.235-1.854l-.53-.22a2.009 2.009 0 00-2.185.438L3.636 14.95a2.009 2.009 0 00.438-2.184l-.22-.531A2.01 2.01 0 002 11V9c.809 0 1.545-.487 1.854-1.235l.22-.53a2.009 2.009 0 00-.438-2.185L5.05 3.636a2.01 2.01 0 002.185.438l.53-.22A2.01 2.01 0 009 2zm-4 8l1.464 3.536L10 15l3.535-1.464L15 10l-1.465-3.536L10 5 6.464 6.464 5 10z\",\n  clipRule: \"evenodd\"\n}));\n\nvar SvgGears = function SvgGears(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    width: \"100%\",\n    height: \"100%\",\n    viewBox: \"0 0 20 20\",\n    x: \"0px\",\n    y: \"0px\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgGears, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/gears.7c6696a1.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M8.5 10L4 5.5 5.5 4 10 8.5 14.5 4 16 5.5 11.5 10l4.5 4.5-1.5 1.5-4.5-4.5L5.5 16 4 14.5 8.5 10z\"\n});\n\nvar SvgClose = function SvgClose(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    width: \"100%\",\n    height: \"100%\",\n    viewBox: \"0 0 20 20\",\n    x: \"0px\",\n    y: \"0px\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgClose, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/close.918d96cf.svg\";\nexport { ForwardRef as ReactComponent };","import pt from 'prop-types';\nimport styled, { css } from 'styled-components';\n\nconst sizes = {\n  small: css`\n    width: 24px;\n    height: 24px;\n  `,\n  medium: css`\n    width: 30px;\n    height: 30px;\n  `,\n  // large: css``,\n};\n\nconst IconButton = styled.button.attrs({ type: 'button' })`\n  margin: 0;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: none;\n  border: none;\n  outline: none;\n  color: #fff;\n  border-radius: 4px;\n  cursor: pointer;\n\n  ${(p) => sizes[p.size]};\n\n  &:hover,\n  &:focus {\n    background-color: rgba(255, 255, 255, 0.15);\n  }\n\n  &:active {\n    background-color: rgba(255, 255, 255, 0.2);\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n`;\n\nIconButton.defaultProps = {\n  size: 'medium',\n};\n\nIconButton.propTypes = {\n  size: pt.oneOf(Object.keys(sizes)),\n};\n\nexport default IconButton;\n","import React from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport { ReactComponent as CloseIconSvg } from 'icons/close.svg';\nimport IconButton from 'components/IconButton';\n\nconst ChatModalRoot = styled.div`\n  height: 100%;\n  box-shadow: rgba(0, 0, 0, 0.4) 0px 4px 8px 0px,\n    rgba(0, 0, 0, 0.4) 0px 0px 4px 0px;\n  background-color: #18181b;\n  white-space: normal;\n  color: #fff;\n  border-radius: 4px;\n`;\nconst CloseButton = styled(IconButton).attrs({ size: 'small' })`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n`;\nconst CloseIcon = styled(CloseIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\n\nconst ChatModal = ({ children, onClose }) => (\n  <ChatModalRoot>\n    <CloseButton onClick={onClose}>\n      <CloseIcon />\n    </CloseButton>\n    {children}\n  </ChatModalRoot>\n);\n\nChatModal.defaultProps = {};\n\nChatModal.propTypes = {\n  children: pt.node.isRequired,\n  onClose: pt.func.isRequired,\n};\n\nexport default ChatModal;\n","import React, { useCallback } from 'react';\nimport pt from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { emoteCategoriesSelector } from 'reducers/emotes/selectors';\nimport Scrollbar from 'components/Scrollbar';\n\nconst EmotePickerRoot = styled.div`\n  padding-top: 32px;\n  padding-bottom: 16px;\n  height: 100%;\n`;\nconst Categories = styled.div`\n  height: 100%;\n`;\nconst Category = styled.div`\n  padding-top: 10px;\n  padding-right: 16px;\n  padding-left: 16px;\n\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding-bottom: 10px;\n  font-size: 12px;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst CategoryItems = styled.div``;\nconst Emote = styled.img`\n  padding: 2px;\n  width: 32px;\n  height: 32px;\n  object-fit: contain;\n\n  &:hover {\n    background-color: rgba(119, 44, 232, 0.2);\n    cursor: pointer;\n  }\n`;\n\nconst EmotePicker = ({ onEmoteClick }) => {\n  const emoteCategories = useSelector(emoteCategoriesSelector);\n\n  const renderCategory = useCallback(\n    ({ title, items }, key) => (\n      <Category key={key}>\n        {!!title && <CategoryHeader>{title}</CategoryHeader>}\n        <CategoryItems>\n          {items.map(({ alt, src, srcSet }) => (\n            <Emote\n              key={alt}\n              alt={alt}\n              src={src}\n              srcSet={srcSet}\n              onClick={() => onEmoteClick(alt)}\n            />\n          ))}\n        </CategoryItems>\n      </Category>\n    ),\n    [onEmoteClick],\n  );\n\n  return (\n    <EmotePickerRoot>\n      <Categories>\n        <Scrollbar>{emoteCategories.map(renderCategory)}</Scrollbar>\n      </Categories>\n    </EmotePickerRoot>\n  );\n};\n\nEmotePicker.defaultProps = {};\n\nEmotePicker.propTypes = {\n  onEmoteClick: pt.func.isRequired,\n};\n\nexport default EmotePicker;\n","import React from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\n\nconst SwitchRoot = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  line-height: 20px;\n`;\nconst Label = styled.label`\n  content: '';\n  position: relative;\n  display: inline-block;\n  order: 0;\n  width: 35px;\n  height: 20px;\n  vertical-align: bottom;\n  border-radius: 10px/50%;\n  background-color: rgba(0, 0, 0, 0.3);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15), 0 0 2px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.1s ease;\n  cursor: pointer;\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    bottom: 2px;\n    display: block;\n    width: 16px;\n    border-radius: 50%;\n    background-color: #fff;\n    transition: left 0.1s ease;\n  }\n`;\nconst Input = styled.input.attrs({ type: 'checkbox' })`\n  position: absolute;\n  opacity: 0;\n\n  &:checked + ${Label} {\n    background-color: #9147ff;\n\n    &:after {\n      content: '';\n      top: 2px;\n      left: calc(100% - 18px);\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 9px;\n      left: 10px;\n      display: block;\n      height: 3px;\n      width: 7px;\n      border-bottom: 2px solid #fff;\n      border-left: 2px solid #fff;\n      transform: translate3d(-50%, -50%, 0) rotate(-45deg);\n    }\n  }\n`;\n\nconst Switch = ({ id, label, checked, readOnly, onChange }) => (\n  <SwitchRoot>\n    <Input\n      id={id}\n      label={label}\n      checked={checked}\n      readOnly={readOnly}\n      onChange={onChange}\n    />\n    <Label htmlFor={id} />\n  </SwitchRoot>\n);\n\nSwitch.defaultProps = {\n  checked: false,\n  readOnly: false,\n  onChange: () => {},\n};\n\nSwitch.propTypes = {\n  id: pt.string.isRequired,\n  label: pt.string.isRequired,\n  checked: pt.bool,\n  readOnly: pt.bool,\n  onChange: pt.func,\n};\n\nexport default Switch;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport { changeOption } from 'reducers/options';\nimport { optionsSelector } from 'reducers/options/selectors';\nimport Scrollbar from 'components/Scrollbar';\nimport Switch from 'components/Switch';\n\nconst OptionsRoot = styled.div`\n  padding: 16px;\n  height: 100%;\n`;\nconst Header = styled.h2`\n  margin: 0;\n  padding: 0;\n  font-size: 14px;\n  text-align: center;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst Categories = styled(Scrollbar)`\n  height: 100%;\n`;\nconst Category = styled.div`\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding: 8px 0;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst CategoryItems = styled.div``;\nconst Option = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 4px 0;\n  cursor: pointer;\n`;\nconst OptionText = styled.span``;\n\nconst Options = () => {\n  const dispatch = useDispatch();\n  const options = useSelector(optionsSelector);\n\n  const renderOption = useCallback(\n    ({ id, name, title, description, value }) => (\n      <Option\n        key={id}\n        onClick={() => dispatch(changeOption(name, !value))}\n        title={description}\n      >\n        <OptionText>{title}</OptionText>\n        <Switch\n          id={id}\n          label={title}\n          checked={value}\n          onChange={() => dispatch(changeOption(name, value))}\n        />\n      </Option>\n    ),\n    [dispatch],\n  );\n\n  const renderOptionsCategory = useCallback(\n    ({ title, items }, key) => (\n      <Category key={key}>\n        {!!title && <CategoryHeader>{title}</CategoryHeader>}\n        <CategoryItems>{items.map(renderOption)}</CategoryItems>\n      </Category>\n    ),\n    [renderOption],\n  );\n\n  return (\n    <OptionsRoot>\n      <Header>Chat settings</Header>\n      <Categories>{options.map(renderOptionsCategory)}</Categories>\n    </OptionsRoot>\n  );\n};\n\nOptions.defaultProps = {};\n\nOptions.propTypes = {};\n\nexport default Options;\n","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport useOnClickOutside from 'use-onclickoutside';\n\nimport { ReactComponent as SmileyFaceIconSvg } from 'icons/smiley-face.svg';\nimport { ReactComponent as GearsIconSvg } from 'icons/gears.svg';\nimport ChatModal from 'components/ChatModal';\nimport IconButton from 'components/IconButton';\nimport EmotePicker from 'components/ChatInput/EmotePicker';\nimport Options from 'components/ChatInput/Options';\n\nconst ChatInputRoot = styled.form`\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n  background-color: #18181b;\n\n  & > :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nconst ControlsWrapper = styled.div`\n  position: relative;\n`;\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n\n  & > :not(:last-child) {\n    margin-right: 8px;\n  }\n`;\nconst SendButton = styled.button`\n  padding: 0 10px;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #9147ff;\n  outline: none;\n  font-size: 12px;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #772ce8;\n  }\n\n  &:active {\n    background-color: #5c16c5;\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n\n  &[disabled] {\n    background-color: rgba(255, 255, 255, 0.26);\n    color: rgba(255, 255, 255, 0.8);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\nconst TextareaWrapper = styled.div`\n  position: relative;\n`;\nconst EmotesModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 0;\n  bottom: 100%;\n  margin-bottom: 8px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nconst OptionsModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 0;\n  bottom: 100%;\n  margin-bottom: 10px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nconst Textarea = styled.textarea`\n  display: block;\n  padding: 10px;\n  width: 100%;\n  height: 38px;\n  max-height: 91px;\n  min-height: 40px;\n  overflow: hidden;\n  border: 2px solid transparent;\n  background-color: rgba(255, 255, 255, 0.15);\n  font-family: inherit;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\nconst EmotesButton = styled(IconButton)`\n  position: absolute;\n  right: 5px;\n  bottom: 5px;\n`;\nconst SmileyFaceIcon = styled(SmileyFaceIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\nconst GearsIcon = styled(GearsIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\nconst StyledLink = styled(Link)`\n  color: #bf94ff;\n  text-decoration: none;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\n\nconst ChatInput = ({ isAuth, isDisabled, onSubmit }) => {\n  const textareaRef = useRef(null);\n  const [text, setText] = useState('');\n  const [isEmotesModalVisible, setIsEmotesModalVisible] = useState(false);\n  const [isOptionsModalVisible, setIsOptionsModalVisible] = useState(false);\n  const textareaWrapperRef = React.useRef(null);\n  const optionsModalRef = React.useRef(null);\n\n  const handleCloseEmotesModal = () => setIsEmotesModalVisible(false);\n  const handleCloseOptionsModal = () => setIsOptionsModalVisible(false);\n\n  useOnClickOutside(textareaWrapperRef, handleCloseEmotesModal);\n  useOnClickOutside(optionsModalRef, handleCloseOptionsModal);\n\n  const handleChange = (e) => setText(e.target.value);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(text);\n    setText('');\n  };\n\n  const handleKeyDown = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        const message = text.trim();\n        if (message) {\n          onSubmit(message);\n          setText('');\n        }\n      }\n    },\n    [onSubmit, setText, text],\n  );\n\n  useEffect(() => {\n    const textareaNode = textareaRef.current;\n\n    textareaNode.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      textareaNode.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [handleKeyDown]);\n\n  const renderEmotesModal = useCallback(\n    () => (\n      <EmotesModal>\n        <ChatModal onClose={handleCloseEmotesModal}>\n          <EmotePicker\n            onEmoteClick={(emoteName) =>\n              setText((t) => `${t.trim()} ${emoteName} `.trimLeft())\n            }\n          />\n        </ChatModal>\n      </EmotesModal>\n    ),\n    [],\n  );\n\n  const renderOptionsModal = useCallback(\n    () => (\n      <OptionsModal ref={optionsModalRef}>\n        <ChatModal onClose={handleCloseOptionsModal}>\n          <Options />\n        </ChatModal>\n      </OptionsModal>\n    ),\n    [],\n  );\n\n  return (\n    <ChatInputRoot onSubmit={handleSubmit}>\n      <TextareaWrapper ref={textareaWrapperRef}>\n        {isEmotesModalVisible && renderEmotesModal()}\n        <Textarea\n          placeholder=\"Send a message\"\n          ref={textareaRef}\n          maxLength={500}\n          disabled={isDisabled}\n          onChange={handleChange}\n          value={text}\n        />\n        <EmotesButton\n          onClick={() => setIsEmotesModalVisible(!isEmotesModalVisible)}\n        >\n          <SmileyFaceIcon />\n        </EmotesButton>\n      </TextareaWrapper>\n      <ControlsWrapper>\n        <Controls>\n          {!isAuth && (\n            <StyledLink to=\"/chat/auth\">Sign in with Twitch</StyledLink>\n          )}\n          <IconButton\n            onClick={() => setIsOptionsModalVisible(!isOptionsModalVisible)}\n          >\n            <GearsIcon />\n          </IconButton>\n          <SendButton disabled={isDisabled} type=\"submit\">\n            Chat\n          </SendButton>\n        </Controls>\n        {isOptionsModalVisible && renderOptionsModal()}\n      </ControlsWrapper>\n    </ChatInputRoot>\n  );\n};\n\nChatInput.defaultProps = {\n  isDisabled: false,\n};\n\nChatInput.propTypes = {\n  isAuth: pt.bool.isRequired,\n  isDisabled: pt.bool,\n  onSubmit: pt.func.isRequired,\n};\n\nexport default ChatInput;\n","import pt from 'prop-types';\n\nimport { MESSAGE_TYPES } from '../../utils/constants';\nimport {\n  twitchEmoteType,\n  bttvEmoteType,\n  ffzEmoteType,\n  emojiType,\n  mentionType,\n  linkType,\n} from '../../utils/formatMessage';\n\nexport const messageType = pt.shape({\n  type: pt.oneOf([MESSAGE_TYPES.MESSAGE]).isRequired,\n  message: pt.string.isRequired,\n  messageArray: pt.arrayOf(\n    pt.oneOfType([\n      pt.string,\n      twitchEmoteType,\n      bttvEmoteType,\n      ffzEmoteType,\n      emojiType,\n      mentionType,\n      linkType,\n    ]),\n  ).isRequired,\n  tags: pt.shape({\n    badgeInfo: pt.shape({\n      subscriber: pt.string,\n    }),\n    badges: pt.shape({}),\n    color: pt.string,\n    displayName: pt.string.isRequired,\n    emotes: pt.shape({}),\n    flags: pt.string,\n    id: pt.string,\n    mod: pt.bool,\n    roomId: pt.string,\n    tmiSentId: pt.oneOfType([pt.string, pt.number]),\n    userId: pt.string,\n  }).isRequired,\n  badges: pt.arrayOf(\n    pt.shape({\n      alt: pt.string,\n      label: pt.string,\n      src: pt.string.isRequired,\n      srcSet: pt.string,\n    }),\n  ),\n  user: pt.string.isRequired,\n  isHistory: pt.bool,\n  isAction: pt.bool,\n  isDeleted: pt.bool,\n});\n\nexport const noticeType = pt.shape({\n  type: pt.oneOf([MESSAGE_TYPES.NOTICE_MESSAGE]).isRequired,\n  message: pt.string.isRequired,\n  channel: pt.string.isRequired,\n  tags: pt.shape({\n    msgId: pt.string.isRequired,\n  }).isRequired,\n});\n\nexport const userNoticeType = pt.shape({\n  type: pt.oneOf([MESSAGE_TYPES.USER_NOTICE_MESSAGE]).isRequired,\n  message: pt.string,\n  channel: pt.string.isRequired,\n  tags: pt.shape({\n    badgeInfo: pt.shape({\n      subscriber: pt.string,\n    }),\n    badges: pt.shape({}),\n    color: pt.string,\n    displayName: pt.string.isRequired,\n    emotes: pt.shape({}),\n    id: pt.string,\n    login: pt.string,\n    mod: pt.bool,\n    msgId: pt.string,\n    systemMsg: pt.string,\n    tmiSentId: pt.oneOfType([pt.string, pt.number]),\n    userId: pt.string,\n    msgParamCumulativeMonths: pt.number,\n    msgParamDisplayName: pt.string,\n    msgParamLogin: pt.string,\n    msgParamMonths: pt.number,\n    msgParamPromoGiftTotal: pt.number,\n    msgParamPromoName: pt.string,\n    msgParamRecipientDisplayName: pt.string,\n    msgParamRecipientId: pt.string,\n    msgParamRecipientUserName: pt.string,\n    msgParamSenderLogin: pt.string,\n    msgParamSenderName: pt.string,\n    msgParamShouldShareStreak: pt.bool,\n    msgParamStreakMonths: pt.number,\n    msgParamSubPlan: pt.string,\n    msgParamSubPlanName: pt.string,\n    msgParamViewerCount: pt.number,\n    msgParamRitualName: pt.string,\n    msgParamThreshold: pt.number,\n  }).isRequired,\n});\n","import React, { useState } from 'react';\nimport pt from 'prop-types';\nimport styled, { css } from 'styled-components';\nimport { format } from 'date-fns/fp';\n\nimport { messageType } from './types';\n\nconst getChatMessageBg = (p) => {\n  if (p.isMention) return 'rgba(255, 0, 0, 0.3)';\n  if (p.isEven) return '#1f1925';\n  return 'transparent';\n};\n\nconst MessageRoot = styled.div`\n  padding: 5px 20px;\n  color: ${(p) => (p.isAction ? p.color : '#fff')};\n  opacity: ${(p) => (p.isHistory || p.isDeleted ? '0.5' : '1')};\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${getChatMessageBg};\n`;\nconst Name = styled.span`\n  font-weight: bold;\n  color: ${(p) => p.color};\n`;\nconst Emote = styled.img`\n  display: inline-block;\n  margin: -5px 0;\n  vertical-align: middle;\n`;\nconst Emoji = styled.img`\n  display: inline-block;\n  margin-top: -5px;\n  margin-bottom: -4px;\n  width: 20px;\n  height: auto;\n  vertical-align: middle;\n`;\nconst Mention = styled.span`\n  ${(p) =>\n    (p.isActive || p.isOwnMessage) &&\n    css`\n      padding: 2px 4px;\n    `};\n  ${(p) =>\n    p.isOwnMessage &&\n    css`\n      background-color: #40404a;\n      color: #fff;\n    `};\n  ${(p) =>\n    p.isActive &&\n    css`\n      background-color: #fafafa;\n      color: #18181b;\n    `};\n`;\nconst Link = styled.a`\n  color: #bf94ff;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Timestamp = styled.span`\n  margin-right: 5px;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst Badge = styled.img`\n  margin-bottom: 2px;\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst renderMessageArray = (user, login) => (item, key) => {\n  if (typeof item !== 'object') return item;\n\n  if (\n    item.type === 'twitch-emote' ||\n    item.type === 'bttv-emote' ||\n    item.type === 'ffz-emote'\n  ) {\n    return (\n      <Emote key={key} src={item.src} srcSet={item.srcSet} alt={item.alt} />\n    );\n  }\n\n  if (item.type === 'emoji') {\n    return (\n      <Emoji key={key} src={item.src} srcSet={item.srcSet} alt={item.alt} />\n    );\n  }\n\n  if (item.type === 'mention') {\n    return (\n      <Mention\n        key={key}\n        isActive={item.target === login}\n        isOwnMessage={user === login}\n      >\n        {item.text}\n      </Mention>\n    );\n  }\n\n  if (item.type === 'link') {\n    return (\n      <Link\n        key={key}\n        href={item.href}\n        rel=\"noreferrer noopener\"\n        target=\"_blank\"\n      >\n        {item.text}\n      </Link>\n    );\n  }\n\n  return null;\n};\n\nconst renderBadges = (badges) =>\n  badges.map(({ alt, label, src, srcSet }, key) => (\n    // eslint-disable-next-line react/no-array-index-key\n    <Badge key={key} alt={alt} aria-label={label} src={src} srcSet={srcSet} />\n  ));\n\nconst MESSAGE_DELETED_LABED = '<message deleted>';\n\nconst Message = ({\n  message: {\n    message,\n    messageArray,\n    tags: { color, displayName, tmiSentTs },\n    badges,\n    user,\n    isHistory,\n    isAction,\n    isDeleted,\n  },\n  login,\n  isEven,\n  isShowTimestamps,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const isMention = user !== login && RegExp(login, 'gi').test(message);\n\n  return (\n    <MessageRoot\n      isHistory={isHistory}\n      isAction={isAction}\n      isEven={isEven}\n      isMention={isMention}\n      isDeleted={isDeleted}\n      color={color}\n    >\n      {isShowTimestamps && (\n        <Timestamp>{format('h:mm', new Date(tmiSentTs))}</Timestamp>\n      )}\n      {badges.length > 0 && renderBadges(badges)}\n      <Name color={color}>{displayName}</Name>\n      {isAction ? ' ' : ': '}\n      {isDeleted && !isVisible ? (\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n        <Link onClick={() => setIsVisible(true)}>{MESSAGE_DELETED_LABED}</Link>\n      ) : (\n        messageArray.map(renderMessageArray(user, login))\n      )}\n    </MessageRoot>\n  );\n};\n\nMessage.defaultProps = {\n  login: '',\n  isEven: false,\n  isShowTimestamps: false,\n};\n\nMessage.propTypes = {\n  message: messageType.isRequired,\n  login: pt.string,\n  isEven: pt.bool,\n  isShowTimestamps: pt.bool,\n};\n\nexport default React.memo(Message);\n","import React from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport { noticeType } from './types';\n\nconst NoticeRoot = styled.div`\n  padding: 5px 20px;\n  color: rgba(255, 255, 255, 0.6);\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${(p) => (p.isEven ? '#1f1925' : 'transparent')};\n`;\n\nconst Notice = ({ message: { message }, isEven }) => (\n  <NoticeRoot isEven={isEven}>{message}</NoticeRoot>\n);\n\nNotice.defaultProps = {\n  isEven: false,\n};\n\nNotice.propTypes = {\n  message: noticeType.isRequired,\n  isEven: pt.bool,\n};\n\nexport default React.memo(Notice);\n","import React from 'react';\n// import pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport { userNoticeType } from './types';\n\nconst UserNoticeRoot = styled.div`\n  padding: 5px 20px 5px 16px;\n  line-height: 20px;\n  word-wrap: break-word;\n  border-left: 4px solid #9147ff;\n  color: #fff;\n`;\n\nconst UserNotice = ({\n  message: {\n    tags: { systemMsg },\n  },\n}) => <UserNoticeRoot>{systemMsg}</UserNoticeRoot>;\n\nUserNotice.propTypes = {\n  message: userNoticeType.isRequired,\n};\n\nexport default React.memo(UserNotice);\n","import React from 'react';\nimport pt from 'prop-types';\n\nimport { MESSAGE_TYPES } from '../../utils/constants';\nimport { messageType, noticeType, userNoticeType } from './types';\n\nimport Message from './Message';\nimport Notice from './Notice';\nimport UserNotice from './UserNotice';\n\nconst ChatMessage = ({ message, login, isEven, isShowTimestamps }) => {\n  if (message.type === MESSAGE_TYPES.MESSAGE) {\n    return (\n      <Message\n        message={message}\n        login={login}\n        isEven={isEven}\n        isShowTimestamps={isShowTimestamps}\n      />\n    );\n  }\n\n  if (message.type === MESSAGE_TYPES.NOTICE_MESSAGE) {\n    return <Notice message={message} isEven={isEven} />;\n  }\n\n  if (message.type === MESSAGE_TYPES.USER_NOTICE_MESSAGE) {\n    return <UserNotice message={message} />;\n  }\n\n  return null;\n};\n\nChatMessage.defaultProps = {\n  login: '',\n  isEven: false,\n  isShowTimestamps: false,\n};\n\nChatMessage.propTypes = {\n  message: pt.oneOfType([messageType, noticeType, userNoticeType]).isRequired,\n  login: pt.string,\n  isEven: pt.bool,\n  isShowTimestamps: pt.bool,\n};\n\nexport default ChatMessage;\n","import React, { useState, useEffect, useRef } from 'react';\nimport pt from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { messagesSelector } from 'reducers/messages/selectors';\nimport { isEvenSelector } from 'reducers/chat/selectors';\nimport {\n  isShowTimestampsSelector,\n  isSplitChatSelector,\n} from 'reducers/options/selectors';\nimport Scrollbar from 'components/Scrollbar';\n\nimport ChatInput from './ChatInput';\nimport ChatMessage from './ChatMessage';\n\nconst MORE_MESSAGES_OFFSET = 100;\n\nconst ChatRoot = styled.div`\n  height: 100vh;\n  font-size: 12px;\n`;\nconst ChatWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background-color: #18181b;\n`;\nconst Messages = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\nconst StyledScrollbar = styled(Scrollbar)`\n  .ScrollbarsCustom-Content {\n    padding-bottom: 10px !important;\n  }\n`;\nconst MoreMessagesButton = styled.button`\n  position: absolute;\n  left: 50%;\n  bottom: 10px;\n  display: ${(p) => (p.visible ? 'block' : 'none')};\n  padding: 5px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  transform: translateX(-50%);\n`;\n\nconst Chat = ({ onSendMessage }) => {\n  const isAuth = useSelector((state) => state.auth.isAuth);\n  const messages = useSelector(messagesSelector);\n  // TODO: check if the user has a rights to send messages\n  const isConnected = useSelector((state) => state.chat.isConnected);\n  const isEven = useSelector(isEvenSelector);\n  const login = useSelector((state) => state.auth.user.login);\n  const isShowTimestamps = useSelector(isShowTimestampsSelector);\n  const isSplitChat = useSelector(isSplitChatSelector);\n  const [\n    isMoreMessagesButtonVisible,\n    setIsMoreMessagesButtonVisible,\n  ] = useState(false);\n  const scrollbarRef = useRef(null);\n\n  const handleScrollToBottom = () => {\n    if (scrollbarRef.current && scrollbarRef.current.scrollToBottom) {\n      scrollbarRef.current.scrollToBottom();\n    }\n  };\n\n  useEffect(() => {\n    if (!isMoreMessagesButtonVisible) {\n      handleScrollToBottom();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages]);\n\n  const handleScrollUpdate = ({\n    clientHeight,\n    contentScrollHeight,\n    scrollTop,\n  }) => {\n    const maxScrollTop = contentScrollHeight - clientHeight;\n    const isVisible = scrollTop + MORE_MESSAGES_OFFSET < maxScrollTop;\n\n    setIsMoreMessagesButtonVisible(isVisible);\n  };\n\n  const getIsEven = (key) => {\n    if (!isSplitChat) return false;\n    return isEven ? key % 2 === 1 : key % 2 === 0;\n  };\n\n  return (\n    <ChatRoot>\n      <ChatWrapper>\n        <Messages>\n          <StyledScrollbar onUpdate={handleScrollUpdate} ref={scrollbarRef}>\n            {messages.map((message, key) => (\n              <ChatMessage\n                key={message.tags.id}\n                message={message}\n                login={login}\n                isEven={getIsEven(key)}\n                isShowTimestamps={isShowTimestamps}\n              />\n            ))}\n          </StyledScrollbar>\n          <MoreMessagesButton\n            onClick={handleScrollToBottom}\n            visible={isMoreMessagesButtonVisible}\n          >\n            More messages below\n          </MoreMessagesButton>\n        </Messages>\n        <ChatInput\n          onSubmit={onSendMessage}\n          isDisabled={!isAuth || !isConnected}\n          isAuth={isAuth}\n        />\n      </ChatWrapper>\n    </ChatRoot>\n  );\n};\n\nChat.propTypes = {\n  onSendMessage: pt.func.isRequired,\n};\n\nexport default Chat;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport uuid from 'uuid/v4';\n\nimport useLocationHash from '../hooks/useLocationHash';\nimport useDocumentTitle from '../hooks/useDocumentTitle';\nimport { fetchTwitchEmotes } from '../reducers/emotes/twitch';\nimport {\n  fetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes,\n} from '../reducers/emotes/bttv';\nimport {\n  fetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes,\n} from '../reducers/emotes/ffz';\nimport {\n  isTwitchEmotesLoadedSelector,\n  isBttvEmotesLoadedSelector,\n  isFfzEmotesLoadedSelector,\n} from '../reducers/emotes/selectors';\nimport {\n  addMessage,\n  addNoticeMessage,\n  addUserNoticeMessage,\n  fetchRecentMessages,\n  addRecentMessages,\n  clearChat,\n} from '../reducers/messages';\nimport { isHistoryLoadedSelector } from '../reducers/messages/selectors';\nimport {\n  setCurrentChannel,\n  setIsConnected,\n  updateGlobalUserState,\n  updateUserState,\n  updateRoomState,\n  currentChannelSelector,\n} from '../reducers/chat';\nimport { fetchGlobalBadges, fetchChannelBadges } from '../reducers/badges';\nimport { isBadgesLoadedSelector } from '../reducers/badges/selectors';\nimport { channelIdSelector } from '../reducers/chat/selectors';\nimport { setIsAuth } from '../reducers/auth';\nimport Client from '../utils/twitchChat';\nimport replaceEmojis from '../utils/replaceEmojis';\n\nimport Chat from './Chat';\n\nlet client = null;\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const isAuth = useSelector((state) => state.auth.isAuth);\n  const login = useSelector((state) => state.auth.user.login);\n  const userId = useSelector((state) => state.auth.user.id);\n  const currentChannel = useSelector(currentChannelSelector);\n  const currentChannelId = useSelector(channelIdSelector);\n  const isTwitchEmotesLoaded = useSelector(isTwitchEmotesLoadedSelector);\n  const isBttvEmotesLoaded = useSelector(isBttvEmotesLoadedSelector);\n  const isFfzEmotesLoaded = useSelector(isFfzEmotesLoadedSelector);\n  const isBadgesLoaded = useSelector(isBadgesLoadedSelector);\n  const isHistoryLoaded = useSelector(isHistoryLoadedSelector);\n  const hash = useLocationHash();\n\n  useDocumentTitle(currentChannel);\n\n  useEffect(() => {\n    const rawUser = localStorage.getItem('user');\n\n    if (rawUser) {\n      const user = JSON.parse(rawUser);\n\n      dispatch(setIsAuth({ isAuth: true, user }));\n    }\n\n    // TODO: try to connect to the chat. if there is an error, set isAuth to false and connect without login\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (hash && hash.length > 1) {\n      const channel = hash.slice(1);\n      dispatch(setCurrentChannel(channel));\n      localStorage.setItem('lastChannel', channel);\n    }\n  }, [dispatch, hash]);\n\n  useEffect(() => {\n    if (currentChannel) {\n      const options = {\n        identity: {\n          name: login,\n          auth: localStorage.accessToken,\n        },\n      };\n\n      const handleMessage = (data) => dispatch(addMessage(data));\n\n      const handleClearChat = (data) => {\n        if (!data.tags.targetUserId) return;\n\n        dispatch(clearChat(data));\n      };\n\n      const handleNotice = (data) => {\n        const normalizedMessage = {\n          ...data,\n          tags: { ...data.tags, id: uuid() },\n        };\n        dispatch(addNoticeMessage(normalizedMessage));\n      };\n\n      if (!client) {\n        client = new Client(isAuth ? options : {});\n        client.connect();\n\n        client.on('connected', () => dispatch(setIsConnected(true)));\n        client.on('disconnected', () => dispatch(setIsConnected(false)));\n\n        client.on('globaluserstate', (data) =>\n          dispatch(updateGlobalUserState(data)),\n        );\n        client.on('userstate', (data) => dispatch(updateUserState(data)));\n        client.on('roomstate', (data) => dispatch(updateRoomState(data)));\n\n        client.on('clearchat', handleClearChat);\n\n        client.on('message', handleMessage);\n        client.on('ownmessage', handleMessage);\n        client.on('notice', handleNotice);\n        client.on('usernotice', (data) => dispatch(addUserNoticeMessage(data)));\n      }\n\n      // TODO: Part the previous channel before join\n      client.join(currentChannel);\n    }\n  }, [dispatch, login, currentChannel, isAuth]);\n\n  useEffect(() => {\n    dispatch(fetchBttvGlobalEmotes());\n    dispatch(fetchFfzGlobalEmotes());\n    dispatch(fetchGlobalBadges());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (currentChannel) {\n      dispatch(fetchRecentMessages(currentChannel));\n    }\n  }, [dispatch, currentChannel]);\n\n  useEffect(() => {\n    // Don't wait twitch emotes for anonymous users\n    if (\n      currentChannel &&\n      (isAuth ? isTwitchEmotesLoaded : true) &&\n      isBttvEmotesLoaded &&\n      isFfzEmotesLoaded &&\n      isBadgesLoaded &&\n      isHistoryLoaded\n    ) {\n      dispatch(addRecentMessages(currentChannel));\n    }\n  }, [\n    dispatch,\n    isAuth,\n    currentChannel,\n    isTwitchEmotesLoaded,\n    isBttvEmotesLoaded,\n    isFfzEmotesLoaded,\n    isBadgesLoaded,\n    isHistoryLoaded,\n  ]);\n\n  useEffect(() => {\n    if (userId) {\n      dispatch(fetchTwitchEmotes(userId));\n    }\n  }, [dispatch, userId]);\n\n  useEffect(() => {\n    // TODO: check if emotes for the current channel is already in the store\n    if (currentChannel && currentChannelId) {\n      dispatch(fetchBttvChannelEmotes(currentChannelId, currentChannel));\n      dispatch(fetchFfzChannelEmotes(currentChannelId, currentChannel));\n      dispatch(fetchChannelBadges(currentChannelId, currentChannel));\n    }\n  }, [dispatch, currentChannel, currentChannelId]);\n\n  const handleSendMessage = (message) => {\n    const normalizedMessage = replaceEmojis(message.trim());\n    client.say(currentChannel, normalizedMessage);\n  };\n\n  return <Chat onSendMessage={handleSendMessage} />;\n};\n\nexport default Home;\n","import {\n  TWITCH_API_AUTH_BASE,\n  TWITCH_API_CLIENT_ID,\n  TWITCH_API_REDIRECT_URI,\n} from './constants';\n\nconst authParams = {\n  client_id: TWITCH_API_CLIENT_ID,\n  redirect_uri: TWITCH_API_REDIRECT_URI,\n  response_type: 'token+id_token',\n  scope: [\n    'openid',\n    'channel:moderate',\n    'chat:edit',\n    'chat:read',\n    'whispers:read',\n    'whispers:edit',\n    'user_blocks_read',\n    'user_blocks_edit',\n    'user_subscriptions',\n  ].join('+'),\n  claims: JSON.stringify({\n    id_token: { email_verified: null, picture: null, preferred_username: null },\n  }),\n  // state: uid(),\n};\n\nconst getAuthUrl = () => {\n  const search = Object.entries(authParams)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n\n  return `${TWITCH_API_AUTH_BASE}?${search}`;\n};\n\nexport default getAuthUrl;\n","import getAuthUrl from '../utils/getAuthUrl';\n\nconst Auth = () => {\n  window.location.href = getAuthUrl();\n\n  return null;\n};\n\nexport default Auth;\n","import { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport jwt from 'jsonwebtoken';\n\nimport { fetchUser } from '../reducers/auth';\n\nconst AuthCallback = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  if (!window.location.hash) return null;\n\n  const params = new URLSearchParams(window.location.hash.slice(1));\n\n  const accessToken = params.get('access_token');\n  const idToken = params.get('id_token');\n\n  if (!accessToken || !idToken) return null;\n\n  localStorage.setItem('accessToken', accessToken);\n  localStorage.setItem('idToken', idToken);\n\n  const { sub: id } = jwt.decode(idToken);\n\n  dispatch(fetchUser(id));\n\n  const lastChannel = localStorage.getItem('lastChannel');\n\n  history.push(lastChannel ? `/chat/#${lastChannel}` : '/chat/');\n\n  return null;\n};\n\nexport default AuthCallback;\n","import { css } from 'styled-components';\n\nexport default css`\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    margin: 0;\n    font-family: Roobert, Helvetica Neue, Helvetica, Arial, sans-serif;\n  }\n`;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { createGlobalStyle } from 'styled-components';\n\nimport common from './common';\nimport colors from './colors';\nimport vars from './vars';\n\nexport default createGlobalStyle`\n  :root {\n    ${colors};\n    ${vars};\n  }\n  ${common};\n`;\n","import React from 'react';\nimport pt from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport isAuthRedirect from './utils/isAuthRedirect';\nimport Home from './components/Home';\nimport Auth from './components/Auth';\nimport AuthCallback from './components/AuthCallback';\nimport GlobalStyles from './styles';\n\nconst getHomeComponent = () =>\n  isAuthRedirect(window.location.hash) ? AuthCallback : Home;\n\nconst App = ({ store }) => (\n  <>\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/chat/\" component={getHomeComponent()} />\n          <Route exact path=\"/chat/auth\" component={Auth} />\n        </Switch>\n      </Router>\n    </Provider>\n    <GlobalStyles />\n  </>\n);\n\nApp.propTypes = {\n  store: pt.shape({}).isRequired,\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactGA from 'react-ga';\n\nimport isAuthRedirect from './utils/isAuthRedirect';\nimport store from './store';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nif (process.env.NODE_ENV === 'production') {\n  ReactGA.initialize('UA-139550930-3');\n\n  if (!isAuthRedirect(window.location.hash)) {\n    const page =\n      window.location.pathname + window.location.search + window.location.hash;\n    ReactGA.pageview(page);\n  }\n}\n\nReactDOM.render(<App store={store} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}