{"version":3,"sources":["features/auth/authSlice.ts","utils/normalizeHref.ts","features/chat/utils/htmlEntity.ts","features/chat/utils/findEmote.ts","utils/fetchRequest.ts","api/twitch.ts","api/bttv.ts","api/ffz.ts","api/chatHistory.ts","api/index.ts","features/options/optionsSelectors.ts","features/auth/hooks/useInitializeAuth.ts","features/chat/hooks/useFetchChatData.ts","features/chat/hooks/useCurrentChannel.ts","hooks/usePrevious.ts","features/chat/utils/replaceEmojis.ts","features/chat/hooks/useTwitchClient.ts","hooks/useSetState.ts","features/chat/utils/getUsersByBeginText.ts","features/chat/hooks/useChatInput.ts","hooks/useOnClickOutside.ts","icons/close.svg","components/IconButton.tsx","components/ChatModal.tsx","icons/smiley-face.svg","components/Scrollbar.tsx","icons/search.svg","features/chat/components/EmotePicker.tsx","features/chat/components/ChatInput.tsx","icons/gears.svg","icons/twitch.svg","components/Button.tsx","components/Switch.tsx","features/options/Options.tsx","features/chat/components/ChatControls.tsx","features/chat/components/Message.tsx","features/chat/components/Notice.tsx","features/chat/components/UserNotice.tsx","features/chat/components/ChatMessage.tsx","features/chat/components/Messages.tsx","features/chat/components/JoinChannel.tsx","features/chat/components/Chat.tsx","features/auth/Auth.tsx","features/auth/Logout.tsx","features/auth/AuthCallback.tsx","styles/common.js","styles/colors.js","styles/vars.js","styles/index.js","app/App.tsx","serviceWorker.ts","app/rootReducer.ts","app/store.ts","index.tsx","features/auth/authUtils.ts","utils/constants.ts","utils/setFetchFlags.ts","features/chat/utils/parseMessageEntities.ts","features/chat/utils/normalizeMessages.ts","features/chat/slice/messages.ts","features/chat/utils/parseApiResponse.ts","features/chat/slice/twitchEmotes.ts","features/chat/slice/bttvEmotes.ts","features/chat/slice/ffzEmotes.ts","features/chat/slice/badges.ts","features/chat/slice/params.ts","features/chat/slice/blockedUsers.ts","features/chat/slice/chatSlice.ts","../../src/client.ts","../../src/utils.ts","../../src/parse.ts","../../src/normalize.ts","../../src/types.ts","features/chat/utils/createEmoteCategories.ts","features/chat/selectors/chatSelectors.ts","features/chat/selectors/index.ts","features/options/optionsUtils.ts","features/options/optionsSlice.ts","utils/assertNever.ts","features/chat/utils/getEmotesByText.ts","features/chat/utils/emotesUsageStatistic.ts"],"names":["initialState","isAuthReady","isAuth","userId","userLogin","auth","createSlice","name","reducers","initializeAuth","state","payload","invalidateAuth","fetchUserRequest","fetchUserSuccess","data","id","login","fetchUserFailure","actions","fetchUser","async","dispatch","users","api","writeUserToLocatStorage","e","isAuthReadySelector","isAuthSelector","userLoginSelector","userIdSelector","isStartsWithProtocolRegex","normalizeHref","href","test","TWITCH_EMOTES_CDN","regexEmotesMap","getFfzSrcSet","R","dpi","url","createTwitchEmote","code","type","alt","src","srcSet","createBttvEmote","createFfzEmote","urls","createEmoji","createMention","text","target","createLink","createBadges","badges","globalBadges","channelBadges","version","badge","versions","title","description","imageUrl1x","image_url_1x","imageUrl2x","image_url_2x","imageUrl4x","image_url_4x","label","createBadge","Boolean","findTwitchEmoteByIdInSets","sets","set","Object","values","result","htmlEntity","regexMap","4","9","findTwitchEmoteByNameInSets","RegExp","findEmote","twitch","byId","twitchGlobal","twitchUser","byName","byText","limit","items","emote","begins","length","contains","index","toLowerCase","indexOf","push","bttv","bttvGlobal","bttvChannel","findById","findByName","ffz","ffzGlobal","ffzChannel","fetchRequest","timeout","restOptions","options","fetchTimeout","API_REQUESTS_TIMEOUT","controller","AbortController","signal","setTimeout","abort","response","fetch","ok","Error","statusText","body","json","apiRequestKraken","headers","Accept","process","Authorization","localStorage","getItem","LS_ACCESS_TOKEN","apiRequestHelix","fetchTwitchEmotes","fetchGlobalBadges","language","fetchChannelBadges","channelId","fetchBlockedUsers","fetchBttvGlobalEmotes","fetchBttvChannelEmotes","fetchFfzGlobalEmotes","fetchFfzChannelEmotes","fetchChatHistory","channel","optionsSelector","value","showTimestamps","splitChat","fixedWidth","isShowTimestampsSelector","isSplitChatSelector","isFixedWidthSelector","useInitializeAuth","useDispatch","useSelector","useEffect","idToken","user","readUserFromLocatStorage","params","jwtData","jwt","decode","sub","useFetchChatData","currentChannel","currentChannelSelector","currentChannelId","currentChannelIdSelector","isTwitchEmotesLoaded","isTwitchEmotesLoadedSelector","isBttvGlobalEmotesLoaded","isBttvGlobalEmotesLoadedSelector","isBttvChannelEmotesLoaded","isBttvChannelEmotesLoadedSelector","isFfzGlobalEmotesLoaded","isFfzGlobalEmotesLoadedSelector","isFfzChannelEmotesLoaded","isFfzChannelEmotesLoadedSelector","isGlobalBadgesLoaded","isGlobalBadgesLoadedSelector","isChannelBadgesLoaded","isChannelBadgesLoadedSelector","isHistoryLoaded","isHistoryLoadedSelector","isBlockedUsersLoaded","isBlockedUsersLoadedSelector","isHistoryAdded","isHistoryAddedSelector","isReadyToAddHistory","addChatHistory","useCurrentChannel","history","useHistory","hash","location","slice","updateCurrentChannel","setItem","LS_LAST_CHANNEL","document","lastChannel","pathname","usePrevious","ref","useRef","current","replaceEmojis","split","map","word","emoji","emojilib","char","join","useTwitchClient","isConnected","isConnectedSelector","prevChannel","clientRef","registerEvents","useCallback","client","on","updateIsConnected","updateGlobalUserParams","updateUserParams","updateRoomParams","message","addMessage","disconnect","uuid","tags","targetUserId","clearChat","part","twitchIrc","connect","useMemo","say","trim","normalizedMessage","handleUserState","addOwnMessage","removeListeners","handleNotice","NOTICE_MESSAGE_TAGS","includes","msgId","off","useSetState","useState","setState","patch","prevState","Function","getUsersByBeginText","beginText","beginTextLower","nameLower","startsWith","suggestionsInitialState","isActive","activeIndex","start","end","setSuggestionsIndexUp","rest","setSuggestionsIndexDown","replaceSuggestionText","currentItem","insertedText","textBefore","substring","testAfter","useChatInput","setText","onSendMessage","chatInputRef","suggestions","setSuggestions","emotes","emotesSelector","usersSelector","usersRef","emotesRef","suggestionsRef","handleChange","selectionStart","spaceIndexBefore","lastIndexOf","spaceIndexAfter","usersMatch","SUGGESTION_TYPES","regex","exec","emotesMatch","getEmotesByText","handleKeyUp","handleKeyDown","key","preventDefault","t","handleSuggestionMouseEnter","handleSuggestionClick","focus","handleBlur","events","arePassiveEvents","arePassiveEventsSupported","getOptions","event","passive","undefined","isContainsNode","el","node","useOnClickOutside","handler","handlerRef","useLatest","listener","Array","isArray","some","r","forEach","addEventListener","removeEventListener","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","fill","d","SvgClose","_ref","svgRef","props","viewBox","ForwardRef","forwardRef","sizes","small","css","medium","IconButton","styled","button","attrs","p","size","ChatModalRoot","div","CloseButton","CloseIcon","CloseIconSvg","ChatModal","children","onClose","onClick","fillRule","clipRule","SvgSmileyFace","Scrollbar","CustomScrollbar","disableTracksWidthCompensation","SvgSearch","EmotePickerRoot","Categories","Category","CategoryHeader","CategoryItems","Emote","img","SearchBlock","SearchInput","input","SearchIcon","SearchIconSvg","EmotePicker","onEmoteClick","search","setSearch","searchInputRef","emoteCategories","emoteCategoriesSelector","placeholder","onChange","ChatInputRoot","ChatInputInner","Suggestions","SuggestionItem","SuggestionImage","TextareaInput","TextareaWrapper","isSuggestions","EmotesModal","Textarea","showScroll","EmotesButton","SmileyFaceIcon","SmileyFaceIconSvg","ChatInput","React","textareaRef","isDisabled","onKeyUp","onKeyDown","onBlur","onSuggestionMouseEnter","onSuggestionClick","suggestionNodesRef","isShowTextareaScroll","setIsShowTextareaScroll","isEmotesModalVisible","setIsEmotesModalVisible","isEmotesLoaded","isEmotesLoadedSelector","handleCloseEmotesModal","renderUser","onMouseEnter","renderEmote","renderSuggestions","inputRef","maxLength","maxRows","disabled","onHeightChange","height","memo","SvgGears","SvgTwitch","Button","SwitchRoot","Label","Input","Switch","checked","readOnly","aria-label","htmlFor","defaultProps","OptionsRoot","Header","h2","Option","OptionText","span","Profile","UserName","color","LogOutButton","Link","Badge","Options","userDisplayName","userDisplayNameSelector","userColor","userColorSelector","userBadgesImages","userBadgesImagesSelector","renderOption","changeChatOption","renderOptionsCategory","to","ChatControlsRoot","Controls","OptionsModal","OptionsButton","GearsIcon","GearsIconSvg","TwitchIcon","TwitchIconSvg","isOptionsModalVisible","setIsOptionsModalVisible","optionsModalRef","optionsButtonRef","optionsNodesRef","handleCloseOptionsModal","as","prev","MessageRoot","isAction","isHistory","isDeleted","isMention","isEven","Name","Emoji","Mention","isOwnMessage","a","Timestamp","entities","displayName","timestamp","isShowTimestamps","onNameRightClick","isVisible","setIsVisible","format","Date","renderBadges","onContextMenu","item","data-emote-id","rel","renderMessageArray","NoticeRoot","Notice","UserNoticeRoot","UserNotice","systemMessage","assertNever","MessagesRoot","StyledScrollbar","MoreMessagesButton","Messages","isMoreMessagesButtonVisible","setIsMoreMessagesButtonVisible","messages","messagesSelector","isEvenSelector","isSplitChat","scrollbarRef","handleScrollToBottom","scrollToBottom","getIsEven","onUpdate","clientHeight","contentScrollHeight","scrollTop","JoinChannelRoot","Title","JoinButton","JoinChannel","setValue","handleChangeChannel","onKeyPress","ChatRoot","ChatWrapper","isFixedWidth","Chat","textRef","handleSendMessage","chatInput","handleNameRightClick","trimLeft","handleEmoteClick","Auth","window","getAuthUrl","Logout","removeItem","LS_ID_TOKEN","LS_USER","AuthCallback","URLSearchParams","accessToken","get","createGlobalStyle","colors","vars","common","getHomeComponent","isAuthRedirect","App","exact","path","render","component","isLocalhost","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","console","log","onSuccess","catch","error","rootReducer","combineReducers","chat","store","configureStore","reducer","ReactGA","initialize","page","pageview","require","default","ReactDOM","getElementById","URL","origin","contentType","status","ready","unregister","reload","checkValidServiceWorker","authParams","client_id","TWITCH_API_CLIENT_ID","redirect_uri","TWITCH_API_REDIRECT_URI","response_type","scope","claims","JSON","stringify","id_token","email_verified","picture","preferred_username","entries","TWITCH_API_AUTH_BASE","parse","CHANNEL_MESSAGES_LIMIT","STORE_USERS_LIMIT","LS_EMOTES_USAGE_STATISTIC","LS_OPTIONS","initialFetchFlags","isLoading","isLoaded","isError","setFetchFlags","obj","mentionRegex","linkRegex","urlRegex","strict","normalizeEmbeddedEmotes","embeddedEmotes","reduce","Number","parseInt","acc","findEntity","parseTwitch","twitchEmote","emojiMatch","twemojiParser","assetType","findEmojiByName","mentionMatch","linkMatch","parseMessageEntities","offset","arrayOffset","spaceIndex","startIndex","endIndex","entity","entityObject","difference","textAfter","normalizeHistoryMessages","rawMessages","chatState","fakeState","globalBadgesSelector","channelBadgesSelector","blockedUsers","blockedUsersSelector","rawMessage","tekko","command","prefix","parsedTags","tmiSentTs","normalizeHistoryMessage","messagesChannelInitialState","isAdded","sliceMessages","diff","addedItemsCount","isSliced","normalizePayload","normalizeMessage","noticeType","normalizeNotice","systemMsg","normalizeUserNotice","messagesReducers","newItems","slicedMessages","prevIsEven","sliceUsers","rawHistory","prevItems","fetchChatHistoryRequest","fetchChatHistorySuccess","fetchChatHistoryFailure","parseTwitchGlobalEmotes","parseTwitchChannelEmotes","parseFfzChannelEmotes","parseBlockedUsers","parseBadges","twitchEmotesInitialState","global","twitchEmotesReducers","fetchTwitchEmotesRequest","twitchEmotes","fetchTwitchEmotesSuccess","fetchTwitchEmotesFailure","bttvEmotesInitialState","byChannels","bttvChannelEmotesInitialState","bttvEmotesReducers","fetchBttvGlobalEmotesRequest","bttvEmotes","fetchBttvGlobalEmotesSuccess","fetchBttvGlobalEmotesFailure","fetchBttvChannelEmotesRequest","fetchBttvChannelEmotesSuccess","channelEmotes","sharedEmotes","parseBttvChannelEmotes","fetchBttvChannelEmotesFailure","ffzEmotesInitialState","ffzChannelEmotesInitialState","ffzEmotesReducers","fetchFfzGlobalEmotesRequest","ffzEmotes","fetchFfzGlobalEmotesSuccess","defaultSets","default_sets","parseFfzGlobalEmotes","fetchFfzGlobalEmotesFailure","fetchFfzChannelEmotesRequest","fetchFfzChannelEmotesSuccess","fetchFfzChannelEmotesFailure","badgesInitialState","badgesChannelInitialState","badgesReducers","fetchGlobalBadgesRequest","fetchGlobalBadgesSuccess","fetchGlobalBadgesFailure","fetchChannelBadgesRequest","fetchChannelBadgesSuccess","fetchChannelBadgesFailure","channelParamsInitialState","room","paramsReducers","blockedUsersInitialState","blockedUsersReducers","fetchBlockedUsersRequest","fetchBlockedUsersSuccess","fetchBlockedUsersFailure","ownMessage","getState","writeEmotesUsageStatistic","now","normalizeOwnMessage","getIsAction","normalizeActionMessage","getChannelFromMessage","isNode","booleanMessageTags","numberMessageTags","tagNamesMap","depricatedMessageTags","normalizeTagValue","raw","indexes","followersOnly","slow","parseMessageTags","normalizeState","normalizeCommand","trailing","Commands","Client","socket","globalUserState","channels","_connected","_connecting","_registered","secure","connection","receiveRaw","rawData","sendRaw","ircMessage","middle","sendCommand","commandParams","_handleMessage","eventData","normalizeGlobalUserState","normalizeWhisper","normalizeChatMessage","_connectInNode","host","port","Promise","handleConnect","resolve","tls","reject","_connectInBrowser","WebSocket","wasClean","reason","_register","nick","Math","pass","handleRegister","_updateGlobalUserState","_updateUserState","userState","_updateRoomState","roomState","UserNoticeType","getTwitchUserEmoteCategories","getMainEmoteCategories","createSelector","filter","createEmoteCategories","mainEmoteCategories","frequentlyUsed","getEmotesFromUsageStatistic","roomId","readOptionsFromLocalStorage","blacklistKeywords","highlightKeywords","changeOption","writeOptionsToLocalStore","textLower","readEmotesUsageStatistic","statistic","getUsageStatisticFromEntities","v","lastUpdatedAt","uses","mergeFn","left","right","newHistory","normalizeHistory","emoteEntity"],"mappings":"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","file":"static/js/main.d4a300ce.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport { AppThunk } from 'app/store';\nimport { RootState } from 'app/rootReducer';\nimport { writeUserToLocatStorage } from 'features/auth/authUtils';\n\ntype AuthState = {\n  isAuthReady: boolean;\n  isAuth: boolean;\n  userId: string | null;\n  userLogin: string | null;\n};\n\ntype InitializeAuth = {\n  isAuth: boolean;\n  userId?: string;\n  userLogin?: string;\n};\n\nexport const initialState: AuthState = {\n  isAuthReady: false,\n  isAuth: false,\n  userId: null,\n  userLogin: null,\n};\n\nconst auth = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    initializeAuth: (\n      state,\n      { payload }: PayloadAction<InitializeAuth>,\n    ): void => {\n      state.isAuthReady = true;\n      state.isAuth = payload.isAuth;\n\n      if (payload.userId) {\n        state.userId = payload.userId;\n      }\n\n      if (payload.userLogin) {\n        state.userLogin = payload.userLogin;\n      }\n    },\n\n    invalidateAuth: (): AuthState => initialState,\n\n    fetchUserRequest: (state): void => {\n      state.isAuthReady = false;\n      state.isAuth = false;\n    },\n\n    fetchUserSuccess: (\n      state,\n      { payload }: PayloadAction<api.TwitchUsersResponse>,\n    ): void => {\n      state.isAuthReady = true;\n      state.isAuth = true;\n\n      state.userId = payload.data[0].id;\n      state.userLogin = payload.data[0].login;\n    },\n\n    fetchUserFailure: (state, { payload }: PayloadAction<string>): void => {\n      state.isAuthReady = true;\n      state.isAuth = false;\n    },\n  },\n});\n\nexport const {\n  initializeAuth,\n  invalidateAuth,\n  fetchUserRequest,\n  fetchUserSuccess,\n  fetchUserFailure,\n} = auth.actions;\n\nexport default auth.reducer;\n\nexport const fetchUser = (userId: string): AppThunk => async (\n  dispatch,\n): Promise<void> => {\n  try {\n    dispatch(fetchUserRequest());\n    const users = await api.fetchUser(userId);\n    const { id, login } = users.data[0];\n    writeUserToLocatStorage({ id, login });\n    dispatch(fetchUserSuccess(users));\n  } catch (e) {\n    dispatch(fetchUserFailure(e));\n  }\n};\n\nexport const isAuthReadySelector = (state: RootState): boolean =>\n  state.auth.isAuthReady;\n\nexport const isAuthSelector = (state: RootState): boolean => state.auth.isAuth;\n\nexport const userLoginSelector = (state: RootState): string | null =>\n  state.auth.userLogin;\n\nexport const userIdSelector = (state: RootState): string | null =>\n  state.auth.userId;\n","// https://regex101.com/r/cpaNXh/1\nconst isStartsWithProtocolRegex = /^(?:(?:[a-z]+:)?\\/\\/)/;\n\nconst normalizeHref = (href: string) =>\n  isStartsWithProtocolRegex.test(href) ? href : `//${href}`;\n\nexport default normalizeHref;\n","import * as R from 'ramda';\nimport twitchIrc from 'twitch-simple-irc';\n\nimport * as api from 'api';\nimport normalizeHref from 'utils/normalizeHref';\n\nexport interface TwitchEmote {\n  type: 'twitch-emote';\n  id: number;\n  alt: string;\n  src: string;\n  srcSet: string;\n}\nexport interface BttvEmote {\n  type: 'bttv-emote';\n  id: string;\n  alt: string;\n  src: string;\n  srcSet: string;\n}\nexport interface FfzEmote {\n  type: 'ffz-emote';\n  id: number;\n  alt: string;\n  src: string;\n  srcSet: string;\n}\nexport interface Emoji {\n  type: 'emoji';\n  alt: string;\n  src: string;\n}\nexport interface Mention {\n  type: 'mention';\n  text: string;\n  target: string;\n}\nexport interface Link {\n  type: 'link';\n  text: string;\n  href: string;\n}\nexport interface Badge {\n  alt: string;\n  label: string;\n  src: string;\n  srcSet: string;\n}\n\nexport type Emote = TwitchEmote | BttvEmote | FfzEmote;\n\nconst TWITCH_EMOTES_CDN = '//static-cdn.jtvnw.net/emoticons/v1';\nconst BTTV_EMOTES_CDN = '//cdn.betterttv.net/emote';\n\n// prettier-ignore\nexport const regexEmotesMap: Record<string, string> = {\n  '[oO](_|\\\\.)[oO]': 'O_o',\n  '\\\\&gt\\\\;\\\\(':     '>(',\n  '\\\\&lt\\\\;3':       '<3',\n  '\\\\:-?(o|O)':      ':O',\n  '\\\\:-?(p|P)':      ':P',\n  '\\\\:-?[\\\\\\\\/]':    ':/',\n  '\\\\:-?[z|Z|\\\\|]':  ':Z',\n  '\\\\:-?\\\\(':        ':(',\n  '\\\\:-?\\\\)':        ':)',\n  '\\\\:-?D':          ':D',\n  '\\\\;-?(p|P)':      ';P',\n  '\\\\;-?\\\\)':        ';)',\n  'R-?\\\\)':          'R)',\n  'B-?\\\\)':          'B)',\n};\n\nexport const getFfzSrcSet = R.pipe<{}, [string, string][], string[], string>(\n  R.toPairs,\n  R.map(([dpi, url]) => `${url} ${dpi}x`),\n  R.join(', '),\n);\n\nexport const createTwitchEmote = ({\n  id,\n  code,\n}: api.TwitchEmote): TwitchEmote => ({\n  type: 'twitch-emote',\n  id,\n  alt: regexEmotesMap[code] || code,\n  src: `${TWITCH_EMOTES_CDN}/${id}/1.0`,\n  srcSet: `${TWITCH_EMOTES_CDN}/${id}/1.0 1x, ${TWITCH_EMOTES_CDN}/${id}/2.0 2x, ${TWITCH_EMOTES_CDN}/${id}/3.0 4x`,\n});\n\nexport const createBttvEmote = ({\n  id,\n  code,\n}: api.BttvGlobalEmote | api.BttvChannelEmote): BttvEmote => ({\n  type: 'bttv-emote',\n  id,\n  alt: code,\n  src: `${BTTV_EMOTES_CDN}/${id}/1x`,\n  srcSet: `${BTTV_EMOTES_CDN}/${id}/2x 2x, ${BTTV_EMOTES_CDN}/${id}/3x 4x`,\n});\n\nexport const createFfzEmote = ({ id, name, urls }: api.FfzEmote): FfzEmote => ({\n  type: 'ffz-emote',\n  id,\n  alt: name,\n  src: urls[1],\n  srcSet: getFfzSrcSet(urls),\n});\n\nexport const createEmoji = (alt: string, src: string): Emoji => ({\n  type: 'emoji',\n  alt: `:${alt}:`,\n  src,\n});\n\nexport const createMention = (text: string, target: string): Mention => ({\n  type: 'mention',\n  text,\n  target,\n});\n\nexport const createLink = (href: string): Link => ({\n  type: 'link',\n  text: href,\n  href: normalizeHref(href),\n});\n\nexport const createBadge = ({\n  title,\n  description,\n  image_url_1x: imageUrl1x,\n  image_url_2x: imageUrl2x,\n  image_url_4x: imageUrl4x,\n}: api.TwitchBadgeVersion): Badge => ({\n  alt: title,\n  label: description,\n  src: imageUrl1x,\n  srcSet: `${imageUrl1x} 1x, ${imageUrl2x} 2x, ${imageUrl4x} 4x`,\n});\n\nexport const createBadges = (\n  badges: twitchIrc.Badges,\n  globalBadges: Record<string, api.TwitchBadge>,\n  channelBadges: Record<string, api.TwitchBadge>,\n): Badge[] => {\n  const mapBadges = ([name, version]: [string, string]): Badge | false => {\n    const badge =\n      channelBadges[name]?.versions[version] ||\n      globalBadges[name]?.versions[version];\n\n    return badge ? createBadge(badge) : false;\n  };\n\n  return R.pipe<{}, [string, string][], any[], any[]>(\n    R.toPairs,\n    R.map(mapBadges),\n    R.filter(Boolean),\n  )(badges);\n};\n","import * as R from 'ramda';\n\nimport * as api from 'api';\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\nimport { StateEmotes } from 'features/chat/selectors/chatSelectors';\nimport { EmotesByText } from 'features/chat/utils/getEmotesByText';\n\n// by id\n\nconst findTwitchEmoteByIdInSets = (\n  id: number,\n  sets: Record<string, api.TwitchEmote[]>,\n) => {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const set of Object.values(sets)) {\n    const result = R.find(R.propEq('id', id), set);\n\n    if (result) return htmlEntity.createTwitchEmote(result);\n  }\n\n  return null;\n};\n\nconst findTwitchEmoteById = (\n  id: number,\n  { twitchGlobal, twitchUser }: NonNullable<StateEmotes>,\n) =>\n  findTwitchEmoteByIdInSets(id, twitchGlobal) ||\n  findTwitchEmoteByIdInSets(id, twitchUser);\n\nconst findBttvEmoteById = (\n  id: string,\n  { bttvGlobal, bttvChannel }: NonNullable<StateEmotes>,\n) => {\n  const findById = R.find<api.BttvGlobalEmote | api.BttvChannelEmote>(\n    R.propEq('id', id),\n  );\n  const result = findById(bttvGlobal) || findById(bttvChannel);\n\n  return result ? htmlEntity.createBttvEmote(result) : null;\n};\n\nconst findFfzEmoteById = (\n  id: number,\n  { ffzGlobal, ffzChannel }: NonNullable<StateEmotes>,\n) => {\n  const findById = R.find<api.FfzEmote>(R.propEq('id', id));\n  const result = findById(ffzGlobal) || findById(ffzChannel);\n\n  return result ? htmlEntity.createFfzEmote(result) : null;\n};\n\n// by name\n\nconst regexMap: Record<number, string> = {\n  4: '>\\\\(', // '\\\\&gt\\\\;\\\\('\n  9: '<3', // '\\\\&lt\\\\;3'\n};\n\nconst findTwitchEmoteByNameInSets = (\n  name: string,\n  sets: Record<string, api.TwitchEmote[]>,\n) => {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const set of Object.values(sets)) {\n    const result = R.find(({ id, code }) => {\n      // 1-14 - match by regex\n      if (id >= 1 && id <= 14) {\n        const regexString = regexMap[id] || code;\n        return RegExp(`^${regexString}$`).test(name);\n      }\n\n      return name === code;\n    }, set);\n\n    if (result) return htmlEntity.createTwitchEmote(result);\n  }\n\n  return null;\n};\n\nconst findTwitchEmoteByName = (\n  name: string,\n  { twitchGlobal, twitchUser }: NonNullable<StateEmotes>,\n) =>\n  findTwitchEmoteByNameInSets(name, twitchGlobal) ||\n  findTwitchEmoteByNameInSets(name, twitchUser);\n\nconst findBttvEmoteByName = (\n  name: string,\n  { bttvGlobal, bttvChannel }: NonNullable<StateEmotes>,\n) => {\n  const findByName = R.find<api.BttvGlobalEmote | api.BttvChannelEmote>(\n    R.propEq('code', name),\n  );\n  const result = findByName(bttvGlobal) || findByName(bttvChannel);\n\n  return result ? htmlEntity.createBttvEmote(result) : null;\n};\n\nconst findFfzEmoteByName = (\n  name: string,\n  { ffzGlobal, ffzChannel }: NonNullable<StateEmotes>,\n) => {\n  const findByName = R.find<api.FfzEmote>(R.propEq('name', name));\n  const result = findByName(ffzGlobal) || findByName(ffzChannel);\n\n  return result ? htmlEntity.createFfzEmote(result) : null;\n};\n\n// by text\n\n/* eslint-disable no-restricted-syntax */\nconst findTwitchEmotesByText = (\n  result: EmotesByText,\n  sets: Record<string, api.TwitchEmote[]>,\n  text: string,\n  limit: number,\n): boolean => {\n  for (const items of Object.values(sets)) {\n    for (const emote of items) {\n      if (result.begins.length + result.contains.length === limit) return true;\n\n      const index = emote.code.toLowerCase().indexOf(text);\n\n      if (index !== -1) {\n        const type = index === 0 ? 'begins' : 'contains';\n\n        result[type].push(htmlEntity.createTwitchEmote(emote));\n      }\n    }\n  }\n\n  return false;\n};\n\nconst findBttvEmotesByText = (\n  result: EmotesByText,\n  bttv: api.BttvGlobalEmote[] | api.BttvChannelEmote[],\n  text: string,\n  limit: number,\n): boolean => {\n  for (const emote of bttv) {\n    if (result.begins.length + result.contains.length === limit) return true;\n\n    const index = emote.code.toLowerCase().indexOf(text);\n\n    if (index !== -1) {\n      const type = index === 0 ? 'begins' : 'contains';\n\n      result[type].push(htmlEntity.createBttvEmote(emote));\n    }\n  }\n\n  return false;\n};\n\nconst findFfzEmotesByText = (\n  result: EmotesByText,\n  ffz: api.FfzEmote[],\n  text: string,\n  limit: number,\n): boolean => {\n  for (const emote of ffz) {\n    if (result.begins.length + result.contains.length === limit) return true;\n\n    const index = emote.name.toLowerCase().indexOf(text);\n\n    if (index !== -1) {\n      const type = index === 0 ? 'begins' : 'contains';\n\n      result[type].push(htmlEntity.createFfzEmote(emote));\n    }\n  }\n\n  return false;\n};\n/* eslint-enable no-restricted-syntax */\n\nconst findEmote = {\n  twitch: {\n    byId: findTwitchEmoteById,\n    byName: findTwitchEmoteByName,\n    byText: findTwitchEmotesByText,\n  },\n  bttv: {\n    byId: findBttvEmoteById,\n    byName: findBttvEmoteByName,\n    byText: findBttvEmotesByText,\n  },\n  ffz: {\n    byId: findFfzEmoteById,\n    byName: findFfzEmoteByName,\n    byText: findFfzEmotesByText,\n  },\n};\n\nexport default findEmote;\n","import { API_REQUESTS_TIMEOUT } from 'utils/constants';\n\nexport interface FetchRequestOptions extends RequestInit {\n  timeout?: number;\n}\n\nconst fetchRequest = async (\n  url: string,\n  { timeout, ...restOptions }: FetchRequestOptions = {},\n) => {\n  let options = { ...restOptions };\n  const fetchTimeout = timeout || API_REQUESTS_TIMEOUT;\n\n  if (fetchTimeout) {\n    const controller = new AbortController();\n\n    options = { ...options, signal: controller.signal };\n\n    setTimeout(() => controller.abort(), fetchTimeout);\n  }\n\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  const body = await response.json();\n\n  return body;\n};\n\nexport default fetchRequest;\n","import { LS_ACCESS_TOKEN } from 'utils/constants';\nimport fetchRequest, { FetchRequestOptions } from 'utils/fetchRequest';\n\nconst TWITCH_API_HELIX = 'https://api.twitch.tv/helix';\nconst TWITCH_API_KRAKEN = 'https://api.twitch.tv/kraken';\n\nconst getHelixHeaders = () => ({\n  Authorization: `Bearer ${localStorage.getItem(LS_ACCESS_TOKEN)}`,\n});\n\nconst getKrakenHeaders = () => ({\n  Accept: 'application/vnd.twitchtv.v5+json',\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `OAuth ${localStorage.getItem(LS_ACCESS_TOKEN)}`,\n});\n\nconst apiRequestHelix = (url: string, options?: FetchRequestOptions) =>\n  fetchRequest(`${TWITCH_API_HELIX}${url}`, {\n    ...options,\n    headers: getHelixHeaders(),\n  } as FetchRequestOptions);\n\nconst apiRequestKraken = (url: string, options?: FetchRequestOptions) =>\n  fetchRequest(`${TWITCH_API_KRAKEN}${url}`, {\n    ...options,\n    headers: getKrakenHeaders(),\n  } as FetchRequestOptions);\n\nexport interface TwitchUser {\n  id: string;\n  login: string;\n  display_name: string;\n  type: string;\n  broadcaster_type: string;\n  description: string;\n  profile_image_url: string;\n  offline_image_url: string;\n  view_count: number;\n}\n\nexport interface TwitchUsersResponse {\n  data: TwitchUser[];\n}\n\nexport interface TwitchEmote {\n  id: number;\n  code: string;\n}\n\nexport interface TwitchEmotesResponse {\n  emoticon_sets: Record<string, TwitchEmote[]>;\n}\n\nexport interface TwitchBadgeVersion {\n  image_url_1x: string;\n  image_url_2x: string;\n  image_url_4x: string;\n  description: string;\n  title: string;\n  click_action: string;\n  click_url: string;\n  last_updated: null;\n}\n\nexport interface TwitchBadge {\n  versions: Record<string, TwitchBadgeVersion>;\n}\n\nexport interface TwitchBadgesResponse {\n  badge_sets: Record<string, TwitchBadge>;\n}\n\nexport interface TwitchBlockedUser {\n  display_name: string;\n  _id: string;\n  name: string;\n  type: string;\n  bio: string | null;\n  created_at: string;\n  updated_at: string;\n  logo: string;\n}\n\nexport interface TwitchBlockedUsersResponse {\n  _total: number;\n  blocks: {\n    user: TwitchBlockedUser;\n  }[];\n}\n\nexport const fetchUser = (userId: string): Promise<TwitchUsersResponse> =>\n  apiRequestHelix(`/users?id=${userId}`);\n\nexport const fetchTwitchEmotes = (\n  userId: string,\n): Promise<TwitchEmotesResponse> => apiRequestKraken(`/users/${userId}/emotes`);\n\nexport const fetchGlobalBadges = (\n  language = 'en',\n): Promise<TwitchBadgesResponse> =>\n  fetchRequest(\n    `https://badges.twitch.tv/v1/badges/global/display?language=${language}`,\n  );\n\nexport const fetchChannelBadges = (\n  channelId: string,\n  language = 'en',\n): Promise<TwitchBadgesResponse> =>\n  fetchRequest(\n    `https://badges.twitch.tv/v1/badges/channels/${channelId}/display?language=${language}`,\n  );\n\nexport const fetchBlockedUsers = (\n  userId: string,\n): Promise<TwitchBlockedUsersResponse> =>\n  apiRequestKraken(`/users/${userId}/blocks`);\n","import fetchRequest from 'utils/fetchRequest';\n\nexport interface BttvEmote {\n  id: string;\n  code: string;\n  imageType: 'png' | 'gif';\n}\n\nexport interface BttvGlobalEmote extends BttvEmote {\n  userId: string;\n}\n\nexport interface BttvChannelEmote extends BttvEmote {\n  user: {\n    id: string;\n    name: string;\n    displayName: string;\n    providerId: string;\n  };\n}\n\nexport type BttvGlobalEmotesResponse = BttvGlobalEmote[];\n\nexport interface BttvChannelEmotesResponse {\n  id: string;\n  bots: string[];\n  channelEmotes: BttvChannelEmote[];\n  sharedEmotes: BttvChannelEmote[];\n}\n\nexport const fetchBttvGlobalEmotes = (): Promise<BttvGlobalEmotesResponse> =>\n  fetchRequest('https://api.betterttv.net/3/cached/emotes/global');\n\nexport const fetchBttvChannelEmotes = (\n  channelId: string,\n): Promise<BttvChannelEmotesResponse> =>\n  fetchRequest(`https://api.betterttv.net/3/cached/users/twitch/${channelId}`);\n","import fetchRequest from 'utils/fetchRequest';\n\nexport interface FfzEmote {\n  css: null;\n  height: number;\n  hidden: boolean;\n  id: number;\n  margins: null;\n  modifier: boolean;\n  name: string;\n  offset: null;\n  owner: {\n    _id: number;\n    display_name: string;\n    name: string;\n  };\n  public: boolean;\n  urls: {\n    '1': string;\n    '2'?: string;\n    '4'?: string;\n  };\n  width: number;\n}\n\ninterface FfzEmoteSet {\n  _type: number;\n  css: null;\n  description: null;\n  emoticons: FfzEmote[];\n  icon: null;\n  id: number;\n  title: string;\n}\n\nexport interface FfzGlobalEmotesResponse {\n  default_sets: number[];\n  sets: Record<string, FfzEmoteSet>;\n  users: Record<string, string[]>;\n}\n\nexport interface FfzChannelEmotesResponse {\n  room: {\n    _id: number;\n    css: null;\n    display_name: string;\n    id: string;\n    is_group: boolean;\n    mod_urls: null;\n    moderator_badge: null;\n    set: number;\n    twitch_id: number;\n    user_badges: {};\n  };\n  sets: Record<string, FfzEmoteSet>;\n}\n\nexport const fetchFfzGlobalEmotes = (): Promise<FfzGlobalEmotesResponse> =>\n  fetchRequest('https://api.frankerfacez.com/v1/set/global');\n\nexport const fetchFfzChannelEmotes = (\n  channelId: string,\n): Promise<FfzChannelEmotesResponse> =>\n  fetchRequest(`https://api.frankerfacez.com/v1/room/id/${channelId}`);\n","import fetchRequest from 'utils/fetchRequest';\n\nexport interface ChatHistoryResponse {\n  messages: string[];\n  error: null;\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport const fetchChatHistory = (\n  channel: string,\n): Promise<ChatHistoryResponse> =>\n  fetchRequest(\n    `https://recent-messages.robotty.de/api/v2/recent-messages/${channel}?clearchatToNotice=true`,\n  );\n","export * from './twitch';\nexport * from './bttv';\nexport * from './ffz';\nexport * from './chatHistory';\n","import { RootState } from 'app/rootReducer';\n\ntype OptionItem = {\n  type: 'switch' | 'input';\n  id: string;\n  name: string;\n  title: string;\n  description: string;\n  value: boolean | string;\n};\n\ntype OptionCategories = {\n  title: string;\n  items: OptionItem[];\n};\n\nexport const optionsSelector = (state: RootState): OptionCategories[] => [\n  {\n    title: 'My preferences',\n    items: [\n      {\n        type: 'switch',\n        id: 'show-timestamps',\n        name: 'showTimestamps',\n        title: 'Show Timestamps',\n        description: '',\n        value: state.options.showTimestamps,\n      },\n      {\n        type: 'switch',\n        id: 'split-chat',\n        name: 'splitChat',\n        title: 'Split Chat',\n        description: '',\n        value: state.options.splitChat,\n      },\n      {\n        type: 'switch',\n        id: 'fixed-width',\n        name: 'fixedWidth',\n        title: 'Fixed Width',\n        description: '',\n        value: state.options.fixedWidth,\n      },\n      // {\n      //   type: 'input',\n      //   id: 'blacklist-keywords',\n      //   name: 'blacklistKeywords',\n      //   title: 'Set Blacklist Keywords',\n      //   description: '',\n      //   value: state.options.blacklistKeywords,\n      // },\n      // {\n      //   type: 'input',\n      //   id: 'highlight-keywords',\n      //   name: 'highlightKeywords',\n      //   title: 'Set Highlight Keywords',\n      //   description: '',\n      //   value: state.options.highlightKeywords,\n      // },\n    ],\n  },\n];\n\nexport const isShowTimestampsSelector = (state: RootState) =>\n  state.options.showTimestamps;\n\nexport const isSplitChatSelector = (state: RootState) =>\n  state.options.splitChat;\n\nexport const isFixedWidthSelector = (state: RootState) =>\n  state.options.fixedWidth;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport jwt from 'jsonwebtoken';\n\nimport {\n  isAuthReadySelector,\n  initializeAuth,\n  fetchUser,\n} from 'features/auth/authSlice';\nimport { readUserFromLocatStorage } from 'features/auth/authUtils';\n\nconst useInitializeAuth = () => {\n  const dispatch = useDispatch();\n  const isAuthReady = useSelector(isAuthReadySelector);\n\n  useEffect(() => {\n    if (isAuthReady) return;\n\n    const { idToken } = localStorage;\n    const user = readUserFromLocatStorage();\n\n    if (!idToken) {\n      dispatch(initializeAuth({ isAuth: false }));\n      return;\n    }\n\n    if (user) {\n      const { id, login } = user;\n      const params = { isAuth: true, userId: id, userLogin: login };\n\n      dispatch(initializeAuth(params));\n    } else {\n      const jwtData = jwt.decode(idToken);\n\n      if (jwtData) {\n        dispatch(fetchUser(jwtData.sub));\n      } else {\n        dispatch(initializeAuth({ isAuth: false }));\n      }\n    }\n  }, [dispatch, isAuthReady]);\n};\n\nexport default useInitializeAuth;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  isAuthReadySelector,\n  isAuthSelector,\n  userIdSelector,\n} from 'features/auth/authSlice';\nimport {\n  currentChannelSelector,\n  currentChannelIdSelector,\n  isHistoryAddedSelector,\n  isHistoryLoadedSelector,\n  isTwitchEmotesLoadedSelector,\n  isBttvGlobalEmotesLoadedSelector,\n  isBttvChannelEmotesLoadedSelector,\n  isFfzGlobalEmotesLoadedSelector,\n  isFfzChannelEmotesLoadedSelector,\n  isGlobalBadgesLoadedSelector,\n  isChannelBadgesLoadedSelector,\n  isBlockedUsersLoadedSelector,\n} from 'features/chat/selectors';\nimport {\n  addChatHistory,\n  fetchChatHistory,\n  fetchTwitchEmotes,\n  fetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes,\n  fetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes,\n  fetchChannelBadges,\n  fetchGlobalBadges,\n  fetchBlockedUsers,\n} from 'features/chat/slice';\n\nconst useFetchChatData = () => {\n  const dispatch = useDispatch();\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n  const userId = useSelector(userIdSelector);\n  const currentChannel = useSelector(currentChannelSelector);\n  const currentChannelId = useSelector(currentChannelIdSelector);\n\n  const isTwitchEmotesLoaded = useSelector(isTwitchEmotesLoadedSelector);\n  const isBttvGlobalEmotesLoaded = useSelector(\n    isBttvGlobalEmotesLoadedSelector,\n  );\n  const isBttvChannelEmotesLoaded = useSelector(\n    isBttvChannelEmotesLoadedSelector,\n  );\n  const isFfzGlobalEmotesLoaded = useSelector(isFfzGlobalEmotesLoadedSelector);\n  const isFfzChannelEmotesLoaded = useSelector(\n    isFfzChannelEmotesLoadedSelector,\n  );\n  const isGlobalBadgesLoaded = useSelector(isGlobalBadgesLoadedSelector);\n  const isChannelBadgesLoaded = useSelector(isChannelBadgesLoadedSelector);\n  const isHistoryLoaded = useSelector(isHistoryLoadedSelector);\n  const isBlockedUsersLoaded = useSelector(isBlockedUsersLoadedSelector);\n  const isHistoryAdded = useSelector(isHistoryAddedSelector);\n\n  const isReadyToAddHistory =\n    isAuthReady &&\n    currentChannel &&\n    !isHistoryAdded &&\n    (isAuth ? isTwitchEmotesLoaded : true) &&\n    (isAuth ? isBlockedUsersLoaded : true) &&\n    isBttvGlobalEmotesLoaded &&\n    isBttvChannelEmotesLoaded &&\n    isFfzGlobalEmotesLoaded &&\n    isFfzChannelEmotesLoaded &&\n    isGlobalBadgesLoaded &&\n    isChannelBadgesLoaded &&\n    isHistoryLoaded;\n\n  useEffect(() => {\n    dispatch(fetchBttvGlobalEmotes());\n    dispatch(fetchFfzGlobalEmotes());\n    dispatch(fetchGlobalBadges());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (isReadyToAddHistory) {\n      dispatch(addChatHistory(currentChannel));\n    }\n  }, [dispatch, currentChannel, isReadyToAddHistory]);\n\n  useEffect(() => {\n    if (!isHistoryAdded && currentChannel) {\n      dispatch(fetchChatHistory(currentChannel));\n    }\n  }, [dispatch, currentChannel, isHistoryAdded]);\n\n  useEffect(() => {\n    if (isAuthReady && isAuth && userId) {\n      dispatch(fetchTwitchEmotes(userId));\n      dispatch(fetchBlockedUsers(userId));\n    }\n  }, [dispatch, isAuthReady, isAuth, userId]);\n\n  // TODO: check if emotes and badges is already in the store\n\n  useEffect(() => {\n    if (currentChannel && currentChannelId) {\n      dispatch(fetchBttvChannelEmotes(currentChannel, currentChannelId));\n      dispatch(fetchFfzChannelEmotes(currentChannel, currentChannelId));\n      dispatch(fetchChannelBadges(currentChannel, currentChannelId));\n    }\n  }, [dispatch, currentChannel, currentChannelId]);\n};\n\nexport default useFetchChatData;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { LS_LAST_CHANNEL } from 'utils/constants';\nimport { updateCurrentChannel } from 'features/chat/slice';\n\n// TODO: remove lastChannel if can't connect to the channel\n\nconst useCurrentChannel = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { hash } = history.location;\n\n  useEffect(() => {\n    if (hash && hash.length > 1) {\n      const channel = hash.slice(1);\n\n      dispatch(updateCurrentChannel(channel));\n\n      localStorage.setItem(LS_LAST_CHANNEL, channel);\n\n      document.title = channel\n        ? `#${channel} - ${process.env.REACT_APP_NAME} `\n        : (process.env.REACT_APP_NAME as string);\n\n      return;\n    }\n\n    const lastChannel = localStorage.getItem(LS_LAST_CHANNEL);\n\n    if (lastChannel) {\n      history.push({ pathname: '/chat/', hash: lastChannel });\n\n      dispatch(updateCurrentChannel(lastChannel));\n    } else {\n      dispatch(updateCurrentChannel(''));\n    }\n  }, [dispatch, history, hash]);\n};\n\nexport default useCurrentChannel;\n","import { useEffect, useRef } from 'react';\n\nconst usePrevious = <T>(state: T): T | undefined => {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = state;\n  });\n\n  return ref.current;\n};\n\nexport default usePrevious;\n","import { lib as emojilib } from 'emojilib';\n\nconst replaceEmojis = (text: string): string =>\n  text\n    .split(' ')\n    .map((word: string) => {\n      if (word[0] !== ':' || word[word.length - 1] !== ':') {\n        return word;\n      }\n\n      const name = word.slice(1, -1);\n      const emoji = emojilib[name];\n\n      return emoji && emoji.char ? emoji.char : word;\n    })\n    .join(' ');\n\nexport default replaceEmojis;\n","import { useEffect, useRef, useMemo, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport uuid from 'uuid/v4';\nimport * as twitchIrc from 'twitch-simple-irc';\n\nimport usePrevious from 'hooks/usePrevious';\nimport { NOTICE_MESSAGE_TAGS, LS_ACCESS_TOKEN } from 'utils/constants';\nimport {\n  addMessage,\n  clearChat,\n  updateIsConnected,\n  updateGlobalUserParams,\n  updateUserParams,\n  updateRoomParams,\n  addOwnMessage,\n} from 'features/chat/slice';\nimport {\n  currentChannelSelector,\n  isConnectedSelector,\n} from 'features/chat/selectors';\nimport replaceEmojis from 'features/chat/utils/replaceEmojis';\nimport {\n  isAuthSelector,\n  isAuthReadySelector,\n  userLoginSelector,\n  invalidateAuth,\n} from 'features/auth/authSlice';\n\nconst useTwitchClient = () => {\n  const dispatch = useDispatch();\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n  const userLogin = useSelector(userLoginSelector);\n  const isConnected = useSelector(isConnectedSelector);\n  const currentChannel = useSelector(currentChannelSelector);\n  const prevChannel = usePrevious(currentChannel);\n  const clientRef = useRef<twitchIrc.Client | null>(null);\n\n  const registerEvents = useCallback(\n    (client: typeof clientRef) => {\n      if (!client.current) return;\n\n      const handleRegister = () => dispatch(updateIsConnected(true));\n\n      const handleDisconnect = () => dispatch(updateIsConnected(false));\n\n      const handleGlobalUserState = (data: twitchIrc.GlobalUserStateEvent) =>\n        dispatch(updateGlobalUserParams(data));\n\n      const handleUserState = (data: twitchIrc.UserStateEvent) =>\n        dispatch(updateUserParams(data));\n\n      const handleRoomState = (data: twitchIrc.RoomStateEvent) =>\n        dispatch(updateRoomParams(data));\n\n      const handleMessage = (message: twitchIrc.MessageEvent) =>\n        dispatch(addMessage({ type: 'message', message }));\n\n      const handleNotice = (message: twitchIrc.NoticeEvent) => {\n        if (\n          client.current &&\n          message.message === 'Login authentication failed'\n        ) {\n          dispatch(invalidateAuth());\n          client.current.disconnect();\n          // eslint-disable-next-line no-param-reassign\n          client.current = null;\n          return;\n        }\n\n        dispatch(addMessage({ type: 'notice', message, id: uuid() }));\n      };\n\n      const handleUserNotice = (message: twitchIrc.UserNoticeEvent) =>\n        dispatch(addMessage({ type: 'user-notice', message }));\n\n      const handleClearChat = (data: twitchIrc.ClearChatEvent) => {\n        if (!data.tags.targetUserId) return;\n        dispatch(clearChat(data));\n      };\n\n      client.current.on('register', handleRegister);\n      client.current.on('disconnect', handleDisconnect);\n      client.current.on('globaluserstate', handleGlobalUserState);\n      client.current.on('userstate', handleUserState);\n      client.current.on('roomstate', handleRoomState);\n      client.current.on('message', handleMessage);\n      client.current.on('notice', handleNotice);\n      client.current.on('usernotice', handleUserNotice);\n      client.current.on('clearchat', handleClearChat);\n    },\n    [dispatch],\n  );\n\n  useEffect(() => {\n    return () => {\n      if (clientRef.current) {\n        clientRef.current.disconnect();\n        clientRef.current = null;\n      }\n    };\n  }, [clientRef]);\n\n  useEffect(() => {\n    if (!currentChannel || !isAuthReady) return;\n\n    if (!clientRef.current) {\n      const options = isAuth\n        ? {\n            name: userLogin as string,\n            auth: localStorage.getItem(LS_ACCESS_TOKEN) as string,\n          }\n        : null;\n\n      (async () => {\n        clientRef.current = new twitchIrc.Client(options);\n\n        registerEvents(clientRef);\n\n        await clientRef.current.connect();\n\n        clientRef.current.join(currentChannel);\n      })();\n\n      return;\n    }\n\n    if (prevChannel && prevChannel !== currentChannel) {\n      clientRef.current.part(prevChannel);\n      clientRef.current.join(currentChannel);\n    }\n  }, [\n    dispatch,\n    registerEvents,\n    isAuth,\n    isAuthReady,\n    isConnected,\n    userLogin,\n    currentChannel,\n    prevChannel,\n  ]);\n\n  const client = () => ({\n    say(channel: string, message: string) {\n      if (!clientRef.current || !message.trim()) return;\n\n      const normalizedMessage = replaceEmojis(message.trim());\n\n      clientRef.current.say(channel, normalizedMessage);\n\n      function handleUserState(data: twitchIrc.UserStateEvent) {\n        if (data.channel === channel) {\n          dispatch(\n            addOwnMessage({\n              message: normalizedMessage,\n              channel,\n              tags: data.tags,\n            }),\n          );\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          removeListeners();\n        }\n      }\n\n      function handleNotice(data: twitchIrc.NoticeEvent) {\n        if (\n          data.channel === channel &&\n          NOTICE_MESSAGE_TAGS.includes(data.tags.msgId)\n        ) {\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          removeListeners();\n        }\n      }\n\n      function removeListeners() {\n        if (!clientRef.current) return;\n\n        clientRef.current.off('notice', handleNotice);\n        clientRef.current.off('userstate', handleUserState);\n      }\n\n      clientRef.current.on('notice', handleNotice);\n      clientRef.current.on('userstate', handleUserState);\n\n      setTimeout(() => removeListeners(), 10000);\n    },\n  });\n\n  return useMemo(client, [clientRef, dispatch]);\n};\n\nexport default useTwitchClient;\n","import { useCallback, useState } from 'react';\n\nconst useSetState = <T extends object>(\n  initialState: T = {} as T,\n): [T, (patch: Partial<T> | ((prevState: T) => Partial<T>)) => void] => {\n  const [state, set] = useState<T>(initialState);\n  const setState = useCallback(\n    (patch) => {\n      set((prevState) => ({\n        ...prevState,\n        ...(patch instanceof Function ? patch(prevState) : patch),\n      }));\n    },\n    [set],\n  );\n\n  return [state, setState];\n};\n\nexport default useSetState;\n","const getUsersByBeginText = (\n  beginText: string,\n  users: string[],\n  limit = 5,\n): string[] => {\n  const result = [];\n  const beginTextLower = beginText.toLowerCase();\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const name of users) {\n    if (result.length === limit) return result;\n\n    const nameLower = name.toLowerCase();\n\n    if (beginTextLower === '' || nameLower.startsWith(beginTextLower)) {\n      result.push(name);\n    }\n  }\n\n  return result;\n};\n\nexport default getUsersByBeginText;\n","import { useRef, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport useSetState from 'hooks/useSetState';\nimport { SUGGESTION_TYPES } from 'utils/constants';\nimport getUsersByBeginText from 'features/chat/utils/getUsersByBeginText';\nimport getEmotesByText from 'features/chat/utils/getEmotesByText';\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\nimport { usersSelector, emotesSelector } from 'features/chat/selectors';\n\ninterface ASuggestions {\n  isActive: boolean;\n  activeIndex: number;\n  start: number;\n  end: number;\n}\ninterface UserSuggestions extends ASuggestions {\n  type: 'users';\n  items: string[];\n}\ninterface EmoteSuggestions extends ASuggestions {\n  type: 'emotes';\n  items: htmlEntity.Emote[];\n}\nexport type SuggestionsState = UserSuggestions | EmoteSuggestions;\n\nconst suggestionsInitialState: SuggestionsState = {\n  type: 'users',\n  isActive: false,\n  items: [],\n  activeIndex: 0,\n  start: 0,\n  end: 0,\n};\n\nconst setSuggestionsIndexUp = ({\n  activeIndex,\n  items,\n  ...rest\n}: SuggestionsState) =>\n  ({\n    activeIndex: activeIndex === 0 ? items.length - 1 : activeIndex - 1,\n    items,\n    ...rest,\n  } as SuggestionsState);\n\nconst setSuggestionsIndexDown = ({\n  activeIndex,\n  items,\n  ...rest\n}: SuggestionsState) =>\n  ({\n    activeIndex: activeIndex === items.length - 1 ? 0 : activeIndex + 1,\n    items,\n    ...rest,\n  } as SuggestionsState);\n\nconst replaceSuggestionText = (\n  text: string,\n  { type, items, activeIndex, start, end }: SuggestionsState,\n) => {\n  if (items.length === 0) return text;\n\n  const currentItem = items[activeIndex];\n  const insertedText =\n    type === 'users'\n      ? `@${currentItem}`\n      : (currentItem as htmlEntity.Emote).alt;\n\n  const textBefore = text.substring(0, start);\n  const testAfter = text.substring(end) || ' ';\n\n  return `${textBefore}${insertedText}${testAfter}`;\n};\n\nconst useChatInput = (\n  setText: (value: React.SetStateAction<string>) => void,\n  onSendMessage: () => void,\n  chatInputRef: React.RefObject<HTMLElement>,\n) => {\n  const [suggestions, setSuggestions] = useSetState<SuggestionsState>(\n    suggestionsInitialState,\n  );\n\n  const emotes = useSelector(emotesSelector);\n  const users = useSelector(usersSelector);\n\n  const usersRef = useRef(users);\n  usersRef.current = users;\n  const emotesRef = useRef(emotes);\n  emotesRef.current = emotes;\n  const suggestionsRef = useRef(suggestions);\n  suggestionsRef.current = suggestions;\n\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      const { value, selectionStart } = e.target;\n\n      setText(value);\n\n      const spaceIndexBefore = value.lastIndexOf(' ', selectionStart - 1);\n      const spaceIndexAfter = value.indexOf(' ', selectionStart);\n\n      const start = spaceIndexBefore === -1 ? 0 : spaceIndexBefore + 1;\n      const end = spaceIndexAfter === -1 ? value.length : spaceIndexAfter;\n\n      const word = value.substring(start, end);\n\n      const usersMatch = SUGGESTION_TYPES.users.regex.exec(word);\n\n      if (usersMatch) {\n        const [, beginText] = usersMatch;\n        const items = getUsersByBeginText(\n          beginText,\n          usersRef.current,\n          SUGGESTION_TYPES.users.limit,\n        );\n\n        setSuggestions({\n          type: 'users',\n          isActive: true,\n          items,\n          activeIndex: 0,\n          start,\n          end,\n        });\n\n        return;\n      }\n\n      const emotesMatch = SUGGESTION_TYPES.emotes.regex.exec(word);\n\n      if (emotesMatch && emotesRef.current) {\n        const [, text] = emotesMatch;\n        const items = getEmotesByText(\n          text,\n          emotesRef.current,\n          SUGGESTION_TYPES.emotes.limit,\n        );\n\n        setSuggestions({\n          type: 'emotes',\n          isActive: true,\n          items,\n          activeIndex: 0,\n          start,\n          end,\n        });\n\n        return;\n      }\n\n      if (suggestionsRef.current.isActive) {\n        setSuggestions(suggestionsInitialState);\n      }\n    },\n    [setText, setSuggestions, suggestionsRef],\n  );\n\n  const handleKeyUp = useCallback(\n    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {},\n    [],\n  );\n\n  const handleKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n      if (suggestionsRef.current.isActive) {\n        if (e.key === 'Enter' || e.key === 'Tab') {\n          e.preventDefault();\n          setText((t) => replaceSuggestionText(t, suggestionsRef.current));\n          setSuggestions(suggestionsInitialState);\n\n          return;\n        }\n\n        if (e.key === 'ArrowUp') {\n          e.preventDefault();\n          setSuggestions(setSuggestionsIndexUp);\n          return;\n        }\n\n        if (e.key === 'ArrowDown') {\n          e.preventDefault();\n          setSuggestions(setSuggestionsIndexDown);\n          return;\n        }\n\n        if (e.key === 'Escape') {\n          setSuggestions({ isActive: false });\n          return;\n        }\n      }\n\n      if (!suggestionsRef.current.isActive) {\n        if (e.key === 'Enter') {\n          e.preventDefault();\n          onSendMessage();\n        }\n      }\n    },\n    [onSendMessage, setText, setSuggestions, suggestionsRef],\n  );\n\n  const handleSuggestionMouseEnter = useCallback(\n    (activeIndex: number) => setSuggestions({ activeIndex }),\n    [setSuggestions],\n  );\n\n  const handleSuggestionClick = useCallback(\n    (activeIndex: number) => {\n      setText((t) =>\n        replaceSuggestionText(t, { ...suggestionsRef.current, activeIndex }),\n      );\n\n      if (chatInputRef.current) {\n        chatInputRef.current.focus();\n      }\n\n      setSuggestions(suggestionsInitialState);\n    },\n    [setText, setSuggestions, chatInputRef],\n  );\n\n  const handleBlur = useCallback(() => {\n    setSuggestions({ isActive: false });\n  }, [setSuggestions]);\n\n  return {\n    suggestions,\n    handleChange,\n    handleKeyUp,\n    handleKeyDown,\n    handleBlur,\n    handleSuggestionMouseEnter,\n    handleSuggestionClick,\n  };\n};\n\nexport default useChatInput;\n","import { useEffect } from 'react';\nimport arePassiveEventsSupported from 'are-passive-events-supported';\nimport useLatest from 'use-latest';\n\nconst MOUSEDOWN = 'mousedown';\nconst TOUCHSTART = 'touchstart';\n\ntype HandledEvents = [typeof MOUSEDOWN, typeof TOUCHSTART];\ntype HandledEventsType = HandledEvents[number];\ntype PossibleEvent = {\n  [Type in HandledEventsType]: HTMLElementEventMap[Type];\n}[HandledEventsType];\ntype Handler = (event: PossibleEvent) => void;\n\nconst events: HandledEvents = [MOUSEDOWN, TOUCHSTART];\n\nconst arePassiveEvents = arePassiveEventsSupported();\n\nconst getOptions = (event: HandledEventsType) =>\n  event === MOUSEDOWN && arePassiveEvents ? { passive: true } : undefined;\n\nconst isContainsNode = (el: HTMLElement | null, node: Node) =>\n  el && el.contains(node);\n\nconst useOnClickOutside = (\n  ref:\n    | React.RefObject<HTMLElement>\n    | React.RefObject<React.RefObject<HTMLElement>[]>,\n  handler: Handler | null,\n) => {\n  const handlerRef = useLatest(handler);\n\n  useEffect(() => {\n    if (!handler) {\n      return;\n    }\n\n    const listener = (event: PossibleEvent) => {\n      if (!ref.current || !handlerRef.current) return;\n\n      const isContains = Array.isArray(ref.current)\n        ? ref.current.some((r) =>\n            isContainsNode(r.current, event.target as Node),\n          )\n        : isContainsNode(ref.current, event.target as Node);\n\n      if (isContains) {\n        return;\n      }\n\n      handlerRef.current(event);\n    };\n\n    events.forEach((event) => {\n      document.addEventListener(event, listener, getOptions(event));\n    });\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      events.forEach((event) => {\n        document.removeEventListener(\n          event,\n          listener,\n          getOptions(event) as EventListenerOptions,\n        );\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [!handler]);\n};\n\nexport default useOnClickOutside;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M8.5 10L4 5.5 5.5 4 10 8.5 14.5 4 16 5.5 11.5 10l4.5 4.5-1.5 1.5-4.5-4.5L5.5 16 4 14.5 8.5 10z\"\n});\n\nconst SvgClose = (_ref) => {\n  let {\n    svgRef,\n    title\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 20 20\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nconst ForwardRef = React.forwardRef((props, ref) => React.createElement(SvgClose, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/close.992b249e.svg\";\nexport { ForwardRef as ReactComponent };","import styled, { css } from 'styled-components';\n\nconst sizes = {\n  small: css`\n    width: 24px;\n    height: 24px;\n  `,\n  medium: css`\n    width: 30px;\n    height: 30px;\n  `,\n  // large: css``,\n};\n\nconst IconButton = styled.button.attrs({\n  type: 'button',\n})<{ size?: 'small' | 'medium' }>`\n  margin: 0;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: none;\n  border: none;\n  outline: none;\n  color: #fff;\n  border-radius: 4px;\n  cursor: pointer;\n\n  ${(p) => sizes[p.size || 'medium']};\n\n  &:hover,\n  &:focus {\n    background-color: rgba(255, 255, 255, 0.15);\n  }\n\n  &:active {\n    background-color: rgba(255, 255, 255, 0.2);\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n`;\n\nexport default IconButton;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { ReactComponent as CloseIconSvg } from 'icons/close.svg';\nimport IconButton from 'components/IconButton';\n\nconst ChatModalRoot = styled.div`\n  height: 100%;\n  box-shadow: rgba(0, 0, 0, 0.4) 0px 4px 8px 0px,\n    rgba(0, 0, 0, 0.4) 0px 0px 4px 0px;\n  background-color: #18181b;\n  white-space: normal;\n  color: #fff;\n  border-radius: 4px;\n`;\nconst CloseButton = styled(IconButton).attrs({ size: 'small' })`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n`;\nconst CloseIcon = styled(CloseIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  children: React.ReactNode;\n  onClose: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n};\n\nconst ChatModal = ({ children, onClose }: Props) => (\n  <ChatModalRoot>\n    <CloseButton onClick={onClose}>\n      <CloseIcon />\n    </CloseButton>\n    {children}\n  </ChatModalRoot>\n);\n\nexport default ChatModal;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  fill: \"currentColor\"\n}, React.createElement(\"path\", {\n  d: \"M7 11a1 1 0 100-2 1 1 0 000 2zm7-1a1 1 0 11-2 0 1 1 0 012 0zm-4 4a2 2 0 002-2H8a2 2 0 002 2z\"\n}), React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-2 0a6 6 0 11-12 0 6 6 0 0112 0z\",\n  clipRule: \"evenodd\"\n}));\n\nconst SvgSmileyFace = (_ref) => {\n  let {\n    svgRef,\n    title\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 20 20\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nconst ForwardRef = React.forwardRef((props, ref) => React.createElement(SvgSmileyFace, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/smiley-face.1cc055ed.svg\";\nexport { ForwardRef as ReactComponent };","import CustomScrollbar from 'react-scrollbars-custom';\nimport styled from 'styled-components';\n\nconst Scrollbar = styled(CustomScrollbar).attrs({\n  disableTracksWidthCompensation: true,\n})`\n  overflow-y: auto;\n\n  .ScrollbarsCustom-Content {\n    padding: 0 !important;\n  }\n\n  .ScrollbarsCustom-TrackY {\n    background: none !important;\n  }\n\n  .ScrollbarsCustom-ThumbY {\n    margin-left: auto;\n    margin-right: auto;\n    width: 6px !important;\n  }\n`;\n\nexport default Scrollbar;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fill: \"currentColor\",\n  fillRule: \"evenodd\",\n  d: \"M13.192 14.606a7 7 0 111.414-1.414l3.101 3.1-1.414 1.415-3.1-3.1zM14 9A5 5 0 114 9a5 5 0 0110 0z\",\n  clipRule: \"evenodd\"\n});\n\nconst SvgSearch = (_ref) => {\n  let {\n    svgRef,\n    title\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 20 20\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nconst ForwardRef = React.forwardRef((props, ref) => React.createElement(SvgSearch, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/search.a2f0945f.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { RootState } from 'app/rootReducer';\nimport Scrollbar from 'components/Scrollbar';\nimport { emoteCategoriesSelector } from 'features/chat/selectors';\nimport { EmoteCategory } from 'features/chat/utils/createEmoteCategories';\nimport { ReactComponent as SearchIconSvg } from 'icons/search.svg';\n\nconst EmotePickerRoot = styled.div`\n  padding-top: 30px;\n  padding-bottom: 16px;\n  height: 100%;\n`;\nconst Categories = styled.div`\n  height: calc(100% - 30px);\n`;\nconst Category = styled.div`\n  padding-top: 10px;\n  padding-right: 16px;\n  padding-left: 16px;\n\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding-bottom: 10px;\n  font-size: 12px;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst CategoryItems = styled.div``;\nconst Emote = styled.img`\n  padding: 2px;\n  width: 32px;\n  height: 32px;\n  object-fit: contain;\n\n  &:hover {\n    background-color: rgba(119, 44, 232, 0.2);\n    cursor: pointer;\n  }\n`;\nconst SearchBlock = styled.div`\n  position: relative;\n  padding: 0 16px;\n  color: #adadb8;\n`;\nconst SearchInput = styled.input`\n  padding-left: 30px;\n  padding-right: 10px;\n  width: 100%;\n  height: 30px;\n  color: #efeff1;\n  font-family: inherit;\n  line-height: 1.5;\n  background-clip: padding-box;\n  background-color: rgba(255, 255, 255, 0.15);\n  border: 2px solid rgba(255, 255, 255, 0.15);\n  outline: 0;\n  border-radius: 4px;\n  appearance: none;\n  transition: box-shadow 0.1s ease-in, border 0.1s ease-in,\n    background-color 0.1s ease-in;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n`;\nconst SearchIcon = styled(SearchIconSvg)`\n  position: absolute;\n  top: 50%;\n  left: 21px;\n  display: block;\n  width: 20px;\n  height: 20px;\n  transform: translateY(-50%);\n`;\n\ntype Props = {\n  onEmoteClick: (name: string) => void;\n};\n\nconst EmotePicker = ({ onEmoteClick }: Props) => {\n  const [search, setSearch] = useState('');\n  const searchInputRef = useRef<HTMLInputElement>(null);\n  const emoteCategories = useSelector((state: RootState) =>\n    emoteCategoriesSelector(state, search),\n  );\n\n  useEffect(() => {\n    if (searchInputRef.current) {\n      searchInputRef.current.focus();\n    }\n\n    return () => setSearch('');\n  }, []);\n\n  const renderCategory = ({ title, items }: EmoteCategory, key: number) => (\n    <Category key={key}>\n      {!!title && <CategoryHeader>{title}</CategoryHeader>}\n      <CategoryItems>\n        {items.map(({ alt, src, srcSet }) => (\n          <Emote\n            key={alt}\n            alt={alt}\n            src={src}\n            srcSet={srcSet}\n            onClick={() => onEmoteClick(alt)}\n          />\n        ))}\n      </CategoryItems>\n    </Category>\n  );\n\n  return (\n    <EmotePickerRoot>\n      <SearchBlock>\n        <SearchIcon />\n        <SearchInput\n          ref={searchInputRef}\n          placeholder=\"Search for Emotes\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n        />\n      </SearchBlock>\n      <Categories>\n        <Scrollbar>{emoteCategories.map(renderCategory)}</Scrollbar>\n      </Categories>\n    </EmotePickerRoot>\n  );\n};\n\nexport default EmotePicker;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport useOnClickOutside from 'hooks/useOnClickOutside';\n\nimport ChatModal from 'components/ChatModal';\nimport IconButton from 'components/IconButton';\nimport { ReactComponent as SmileyFaceIconSvg } from 'icons/smiley-face.svg';\nimport EmotePicker from 'features/chat/components/EmotePicker';\nimport { SuggestionsState } from 'features/chat/hooks/useChatInput';\nimport { isEmotesLoadedSelector } from 'features/chat/selectors';\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\n\nconst ChatInputRoot = styled.div`\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n  background-color: #18181b;\n\n  & > :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nconst ChatInputInner = styled.div`\n  position: relative;\n`;\nconst Suggestions = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 100%;\n  margin-left: -5px;\n  margin-bottom: -5px;\n  margin-right: -5px;\n  margin-bottom: 0;\n  padding-top: 10px;\n  padding-bottom: 5px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border: 1px solid rgba(255, 255, 255, 0.15);\n  border-bottom: none;\n  background-color: #18181b;\n  color: #fff;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n  /* box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15), 0 0px 2px rgba(0, 0, 0, 0.1); */\n`;\nconst SuggestionItem = styled.div<{ isActive: boolean }>`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border-radius: 2px;\n  background-color: ${(p) =>\n    p.isActive ? 'rgba(255, 255, 255, 0.15)' : 'transparent'};\n  cursor: pointer;\n`;\nconst SuggestionImage = styled.img`\n  margin-right: 8px;\n  width: 28px;\n  height: 28px;\n  object-fit: contain;\n`;\nconst TextareaInput = styled.div`\n  position: relative;\n`;\nconst TextareaWrapper = styled.div<{ isSuggestions: boolean }>`\n  ${(p) =>\n    p.isSuggestions &&\n    css`\n      margin-left: -5px;\n      margin-bottom: -5px;\n      margin-right: -5px;\n      padding: 5px;\n      border: 1px solid rgba(255, 255, 255, 0.15);\n      border-top: none;\n      border-bottom-left-radius: 6px;\n      border-bottom-right-radius: 6px;\n      /* box-shadow: 0 2px 3px -1px rgba(0, 0, 0, 0.1),\n        0 2px 2px -2px rgba(0, 0, 0, 0.02); */\n\n      & > ${TextareaInput} {\n        margin-left: -1px;\n        margin-bottom: -1px;\n        margin-right: -1px;\n      }\n    `};\n`;\nconst EmotesModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 0;\n  bottom: 100%;\n  margin-bottom: 8px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\n// TODO: remove this after styled-components fix this\n/* eslint-disable react/jsx-props-no-spreading, @typescript-eslint/no-unused-vars */\nconst TextareaAutosizeFiltered = ({ showScroll, ...rest }: any) => (\n  <TextareaAutosize {...rest} />\n);\n/* eslint-enable react/jsx-props-no-spreading, @typescript-eslint/no-unused-vars */\nconst Textarea = styled(TextareaAutosizeFiltered)<{ showScroll: boolean }>`\n  display: block;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  padding-left: 10px;\n  padding-right: 32px;\n  width: 100%;\n  height: 38px;\n  max-height: 91px;\n  min-height: 40px;\n  overflow-x: hidden;\n  overflow-y: ${(p) => (p.showScroll ? 'auto' : 'hidden')};\n  border: 2px solid transparent;\n  background-color: rgba(255, 255, 255, 0.15);\n  font-family: inherit;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\nconst EmotesButton = styled(IconButton)`\n  position: absolute;\n  right: 5px;\n  bottom: 5px;\n`;\nconst SmileyFaceIcon = styled(SmileyFaceIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  text: string;\n  suggestions: SuggestionsState;\n  isDisabled: boolean;\n  onEmoteClick: (name: string) => void;\n  onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onKeyUp: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur: () => void;\n  onSuggestionMouseEnter: (index: number) => void;\n  onSuggestionClick: (index: number) => void;\n};\n\nconst ChatInput = React.forwardRef<HTMLTextAreaElement, Props>(\n  (\n    {\n      text,\n      suggestions,\n      isDisabled,\n      onEmoteClick,\n      onChange,\n      onKeyUp,\n      onKeyDown,\n      onBlur,\n      onSuggestionMouseEnter,\n      onSuggestionClick,\n    },\n    textareaRef,\n  ) => {\n    const chatInputRef = useRef(null);\n    const suggestionsRef = useRef<HTMLDivElement>(null);\n    const suggestionNodesRef = useRef([\n      textareaRef,\n      suggestionsRef,\n    ] as React.RefObject<HTMLElement>[]);\n\n    useOnClickOutside(suggestionNodesRef, () => onBlur());\n\n    const [isShowTextareaScroll, setIsShowTextareaScroll] = useState(false);\n    const [isEmotesModalVisible, setIsEmotesModalVisible] = useState(false);\n    const isEmotesLoaded = useSelector(isEmotesLoadedSelector);\n    const handleCloseEmotesModal = () => setIsEmotesModalVisible(false);\n\n    useOnClickOutside(chatInputRef, handleCloseEmotesModal);\n\n    const renderSuggestions = ({\n      type,\n      items,\n      activeIndex,\n    }: SuggestionsState) => {\n      const renderUser = (name: string, index: number) => (\n        <SuggestionItem\n          key={name}\n          isActive={index === activeIndex}\n          onMouseEnter={() => onSuggestionMouseEnter(index)}\n          onClick={() => onSuggestionClick(index)}\n        >\n          {name}\n        </SuggestionItem>\n      );\n\n      const renderEmote = (\n        { src, srcSet, alt }: htmlEntity.Emote,\n        index: number,\n      ) => (\n        <SuggestionItem\n          key={alt}\n          isActive={index === activeIndex}\n          onMouseEnter={() => onSuggestionMouseEnter(index)}\n          onClick={() => onSuggestionClick(index)}\n        >\n          <SuggestionImage src={src} srcSet={srcSet} alt={alt} />\n          {alt}\n        </SuggestionItem>\n      );\n\n      const renderItems = () =>\n        type === 'users'\n          ? (items as string[]).map(renderUser)\n          : (items as htmlEntity.Emote[]).map(renderEmote);\n\n      return (\n        <Suggestions ref={suggestionsRef}>\n          {items.length ? renderItems() : 'No matches'}\n        </Suggestions>\n      );\n    };\n\n    const renderEmotesButton = () => (\n      <EmotesButton\n        onClick={() => setIsEmotesModalVisible(!isEmotesModalVisible)}\n      >\n        <SmileyFaceIcon />\n      </EmotesButton>\n    );\n\n    const renderEmotesModal = () => (\n      <EmotesModal>\n        <ChatModal onClose={handleCloseEmotesModal}>\n          <EmotePicker onEmoteClick={onEmoteClick} />\n        </ChatModal>\n      </EmotesModal>\n    );\n\n    const handleHeightChange = (height: number) =>\n      setIsShowTextareaScroll(height >= 96);\n\n    return (\n      <ChatInputRoot ref={chatInputRef}>\n        <ChatInputInner>\n          {suggestions.isActive && renderSuggestions(suggestions)}\n          <TextareaWrapper isSuggestions={suggestions.isActive}>\n            <TextareaInput>\n              <Textarea\n                inputRef={textareaRef}\n                value={text}\n                placeholder=\"Send a message\"\n                maxLength={500}\n                maxRows={4}\n                disabled={isDisabled}\n                showScroll={isShowTextareaScroll}\n                onChange={onChange}\n                onKeyUp={onKeyUp}\n                onKeyDown={onKeyDown}\n                onHeightChange={handleHeightChange}\n              />\n              {isEmotesLoaded && renderEmotesButton()}\n            </TextareaInput>\n          </TextareaWrapper>\n          {isEmotesModalVisible && renderEmotesModal()}\n        </ChatInputInner>\n      </ChatInputRoot>\n    );\n  },\n);\n\nexport default React.memo(ChatInput);\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  fill: \"currentColor\"\n}, React.createElement(\"path\", {\n  d: \"M10 8a2 2 0 100 4 2 2 0 000-4z\"\n}), React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M9 2h2a2.01 2.01 0 001.235 1.855l.53.22a2.01 2.01 0 002.185-.439l1.414 1.414a2.01 2.01 0 00-.439 2.185l.22.53A2.01 2.01 0 0018 9v2a2.01 2.01 0 00-1.855 1.235l-.22.53a2.01 2.01 0 00.44 2.185l-1.415 1.414a2.01 2.01 0 00-2.184-.439l-.531.22A2.01 2.01 0 0011 18H9a2.01 2.01 0 00-1.235-1.854l-.53-.22a2.009 2.009 0 00-2.185.438L3.636 14.95a2.009 2.009 0 00.438-2.184l-.22-.531A2.01 2.01 0 002 11V9c.809 0 1.545-.487 1.854-1.235l.22-.53a2.009 2.009 0 00-.438-2.185L5.05 3.636a2.01 2.01 0 002.185.438l.53-.22A2.01 2.01 0 009 2zm-4 8l1.464 3.536L10 15l3.535-1.464L15 10l-1.465-3.536L10 5 6.464 6.464 5 10z\",\n  clipRule: \"evenodd\"\n}));\n\nconst SvgGears = (_ref) => {\n  let {\n    svgRef,\n    title\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 20 20\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nconst ForwardRef = React.forwardRef((props, ref) => React.createElement(SvgGears, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/gears.5f76af43.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M13 8l-5 5v18h6v5l5-5h4l9-9V8z\"\n});\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fill: \"#9147ff\",\n  d: \"M26 25l4-4V10H14v15h4v4l4-4z\"\n});\n\nvar _ref4 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M20 14h2v6h-2v-6zm7 0v6h-2v-6h2z\"\n});\n\nconst SvgTwitch = (_ref) => {\n  let {\n    svgRef,\n    title\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 40 40\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2, _ref3, _ref4);\n};\n\nconst ForwardRef = React.forwardRef((props, ref) => React.createElement(SvgTwitch, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/twitch.75e6e194.svg\";\nexport { ForwardRef as ReactComponent };","import styled from 'styled-components';\n\nconst Button = styled.button.attrs({ type: 'button' })`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0 10px;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #9147ff;\n  outline: none;\n  font-size: 12px;\n  border-radius: 4px;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #772ce8;\n  }\n\n  &:active {\n    background-color: #5c16c5;\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n\n  &[disabled] {\n    background-color: rgba(255, 255, 255, 0.26);\n    color: rgba(255, 255, 255, 0.8);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst SwitchRoot = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  line-height: 20px;\n`;\nconst Label = styled.label`\n  content: '';\n  position: relative;\n  display: inline-block;\n  order: 0;\n  width: 35px;\n  height: 20px;\n  vertical-align: bottom;\n  border-radius: 10px/50%;\n  background-color: rgba(0, 0, 0, 0.3);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15), 0 0 2px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.1s ease;\n  cursor: pointer;\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    bottom: 2px;\n    display: block;\n    width: 16px;\n    border-radius: 50%;\n    background-color: #fff;\n    transition: left 0.1s ease;\n  }\n`;\nconst Input = styled.input.attrs({ type: 'checkbox' })`\n  position: absolute;\n  opacity: 0;\n\n  &:checked + ${Label} {\n    background-color: #9147ff;\n\n    &:after {\n      content: '';\n      top: 2px;\n      left: calc(100% - 18px);\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 9px;\n      left: 10px;\n      display: block;\n      height: 3px;\n      width: 7px;\n      border-bottom: 2px solid #fff;\n      border-left: 2px solid #fff;\n      transform: translate3d(-50%, -50%, 0) rotate(-45deg);\n    }\n  }\n`;\n\ntype Props = {\n  id: string;\n  label: string;\n  checked?: boolean;\n  readOnly?: boolean;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst Switch = ({ id, label, checked, readOnly, onChange }: Props) => (\n  <SwitchRoot>\n    <Input\n      id={id}\n      aria-label={label}\n      checked={checked}\n      readOnly={readOnly}\n      onChange={onChange}\n    />\n    <Label htmlFor={id} />\n  </SwitchRoot>\n);\n\nSwitch.defaultProps = {\n  checked: false,\n  readOnly: false,\n  onChange: () => {},\n};\n\nexport default Switch;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport Scrollbar from 'components/Scrollbar';\nimport Switch from 'components/Switch';\nimport {\n  userDisplayNameSelector,\n  userColorSelector,\n  userBadgesImagesSelector,\n} from 'features/chat/selectors';\nimport { isAuthSelector } from 'features/auth/authSlice';\nimport { changeChatOption } from 'features/options/optionsSlice';\nimport { optionsSelector } from 'features/options/optionsSelectors';\n\nconst OptionsRoot = styled.div`\n  padding: 16px;\n  height: 100%;\n`;\nconst Header = styled.h2`\n  margin: 0;\n  padding: 0;\n  font-size: 14px;\n  text-align: center;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst Categories = styled(Scrollbar)`\n  height: 100%;\n`;\nconst Category = styled.div`\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding: 8px 0;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst CategoryItems = styled.div``;\nconst Option = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 4px 0;\n  cursor: pointer;\n`;\nconst OptionText = styled.span``;\nconst Profile = styled.div`\n  display: flex;\n  align-items: center;\n`;\nconst UserName = styled.div`\n  font-weight: bold;\n  color: ${(p) => p.color};\n`;\nconst LogOutButton = styled(Link)`\n  margin-left: auto;\n  color: #bf94ff;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Badge = styled.img`\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst Options = () => {\n  const dispatch = useDispatch();\n  const options = useSelector(optionsSelector);\n\n  const isAuth = useSelector(isAuthSelector);\n\n  const userDisplayName = useSelector(userDisplayNameSelector);\n  const userColor = useSelector(userColorSelector);\n  const userBadgesImages = useSelector(userBadgesImagesSelector);\n\n  const renderOption = useCallback(\n    ({ id, name, title, description, value }) => (\n      <Option\n        key={id}\n        onClick={() => dispatch(changeChatOption({ name, value: !value }))}\n        title={description}\n      >\n        <OptionText>{title}</OptionText>\n        <Switch\n          id={id}\n          label={title}\n          checked={value}\n          onChange={() => dispatch(changeChatOption({ name, value }))}\n        />\n      </Option>\n    ),\n    [dispatch],\n  );\n\n  const renderProfileCategory = () => {\n    return (\n      <Category>\n        <CategoryHeader>Profile</CategoryHeader>\n        <CategoryItems>\n          <Profile>\n            {userBadgesImages.map(({ alt, label, src, srcSet }, key) => (\n              <Badge\n                // eslint-disable-next-line react/no-array-index-key\n                key={key}\n                alt={alt}\n                aria-label={label}\n                src={src}\n                srcSet={srcSet}\n              />\n            ))}\n            <UserName color={userColor}>{userDisplayName}</UserName>\n            <LogOutButton to=\"/chat/logout\">Log Out</LogOutButton>\n          </Profile>\n        </CategoryItems>\n      </Category>\n    );\n  };\n\n  const renderOptionsCategory = useCallback(\n    ({ title, items }, key) => (\n      <Category key={key}>\n        {!!title && <CategoryHeader>{title}</CategoryHeader>}\n        <CategoryItems>{items.map(renderOption)}</CategoryItems>\n      </Category>\n    ),\n    [renderOption],\n  );\n\n  return (\n    <OptionsRoot>\n      <Header>Chat settings</Header>\n      <Categories>\n        {isAuth && renderProfileCategory()}\n        {options.map(renderOptionsCategory)}\n      </Categories>\n    </OptionsRoot>\n  );\n};\n\nexport default Options;\n","import React, { useState, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nimport useOnClickOutside from 'hooks/useOnClickOutside';\nimport { ReactComponent as GearsIconSvg } from 'icons/gears.svg';\nimport { ReactComponent as TwitchIconSvg } from 'icons/twitch.svg';\nimport Button from 'components/Button';\nimport IconButton from 'components/IconButton';\nimport ChatModal from 'components/ChatModal';\nimport Options from 'features/options/Options';\nimport { isAuthSelector, isAuthReadySelector } from 'features/auth/authSlice';\n\nconst ChatControlsRoot = styled.div`\n  position: relative;\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n`;\nconst Controls = styled.div`\n  display: flex;\n  align-items: center;\n\n  & > :not(:last-child) {\n    margin-right: 8px;\n  }\n`;\nconst OptionsModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 10px;\n  bottom: 100%;\n  margin-bottom: 10px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nexport const buttonStyles = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0 10px;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #9147ff;\n  outline: none;\n  font-size: 12px;\n  border-radius: 4px;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #772ce8;\n  }\n\n  &:active {\n    background-color: #5c16c5;\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n\n  &[disabled] {\n    background-color: rgba(255, 255, 255, 0.26);\n    color: rgba(255, 255, 255, 0.8);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\nconst OptionsButton = styled(IconButton)`\n  margin-left: auto;\n`;\nconst GearsIcon = styled(GearsIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\nconst TwitchIcon = styled(TwitchIconSvg)`\n  display: block;\n  margin-right: 4px;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  isDisabled: boolean;\n  onSendMessage: () => void;\n};\n\nconst ChatControls = ({ isDisabled, onSendMessage }: Props) => {\n  const [isOptionsModalVisible, setIsOptionsModalVisible] = useState(false);\n  const optionsModalRef = useRef(null);\n  const optionsButtonRef = useRef(null);\n  const optionsNodesRef = useRef([optionsModalRef, optionsButtonRef]);\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n\n  const handleCloseOptionsModal = () => setIsOptionsModalVisible(false);\n  useOnClickOutside(optionsNodesRef, handleCloseOptionsModal);\n\n  const renderSignInButton = () => (\n    <Button as={Link} to=\"/chat/auth\">\n      <TwitchIcon />\n      Sign in with Twitch\n    </Button>\n  );\n\n  const renderOptionsModal = () => (\n    <OptionsModal ref={optionsModalRef}>\n      <ChatModal onClose={handleCloseOptionsModal}>\n        <Options />\n      </ChatModal>\n    </OptionsModal>\n  );\n\n  return (\n    <ChatControlsRoot>\n      <Controls>\n        {isAuthReady && !isAuth && renderSignInButton()}\n        <OptionsButton\n          ref={optionsButtonRef}\n          onClick={() => setIsOptionsModalVisible((prev) => !prev)}\n        >\n          <GearsIcon />\n        </OptionsButton>\n        <Button disabled={isDisabled} onClick={onSendMessage}>\n          Chat\n        </Button>\n      </Controls>\n      {isOptionsModalVisible && renderOptionsModal()}\n    </ChatControlsRoot>\n  );\n};\n\nexport default React.memo(ChatControls);\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { format } from 'date-fns/fp';\n\nimport {\n  Message as MessageType,\n  MessageEntity,\n} from 'features/chat/slice/messages';\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\n\ntype MessageRootProps = {\n  isAction: boolean;\n  isHistory: boolean;\n  isDeleted: boolean;\n  isMention: boolean;\n  isEven: boolean;\n};\n\nconst getChatMessageBg = (p: MessageRootProps) => {\n  if (p.isMention) return 'rgba(255, 0, 0, 0.3)';\n  if (p.isEven) return '#1f1925';\n  return 'transparent';\n};\n\nconst MessageRoot = styled.div<MessageRootProps>`\n  padding: 5px 20px;\n  color: ${(p) => (p.isAction ? p.color : '#fff')};\n  opacity: ${(p) => (p.isHistory || p.isDeleted ? '0.5' : '1')};\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${getChatMessageBg};\n`;\nconst Name = styled.span`\n  font-weight: bold;\n  color: ${(p) => p.color};\n  cursor: pointer;\n`;\nconst Emoji = styled.img`\n  display: inline-block;\n  margin-top: -5px;\n  margin-bottom: -4px;\n  width: 20px;\n  height: auto;\n  vertical-align: middle;\n`;\n// https://github.com/night/BetterTTV/blob/master/src/modules/emotes/style.css\n// prettier-ignore\nconst Emote = styled.img`\n  display: inline-block;\n  margin: -5px 0;\n  vertical-align: middle;\n\n  /* Prevent stacking of IceCold, SoSnowy */\n  &[data-emote-id='5849c9a4f52be01a7ee5f79d'] + &[data-emote-id='5849c9a4f52be01a7ee5f79d'],\n  &[data-emote-id='567b5b520e984428652809b6'] + &[data-emote-id='567b5b520e984428652809b6'] {\n    display: none;\n  }\n\n  /* IceCold */\n  &        + &[data-emote-id='5849c9a4f52be01a7ee5f79d'],\n  ${Emoji} + &[data-emote-id='5849c9a4f52be01a7ee5f79d'] {\n    margin-left: -33px;\n  }\n\n  /* SoSnowy */\n  &        + &[data-emote-id='567b5b520e984428652809b6'],\n  ${Emoji} + &[data-emote-id='567b5b520e984428652809b6'] {\n    margin-left: -32px;\n  }\n\n  /* SantaHat */\n  &        + &[data-emote-id='58487cc6f52be01a7ee5f205'],\n  ${Emoji} + &[data-emote-id='58487cc6f52be01a7ee5f205'] {\n    margin-left: -34px;\n    margin-top: -18px;\n  }\n\n  /* TopHat, CandyCane, ReinDeer */\n  &        + &[data-emote-id='5849c9c8f52be01a7ee5f79e'],\n  ${Emoji} + &[data-emote-id='5849c9c8f52be01a7ee5f79e'],\n  &        + &[data-emote-id='567b5c080e984428652809ba'],\n  ${Emoji} + &[data-emote-id='567b5c080e984428652809ba'],\n  &        + &[data-emote-id='567b5dc00e984428652809bd'],\n  ${Emoji} + &[data-emote-id='567b5dc00e984428652809bd'] {\n    margin-left: -31px;\n    margin-top: -18px;\n  }\n`;\nconst Mention = styled.span<{ isActive: boolean; isOwnMessage: boolean }>`\n  ${(p) =>\n    (p.isActive || p.isOwnMessage) &&\n    css`\n      padding: 2px 4px;\n    `};\n  ${(p) =>\n    p.isOwnMessage &&\n    css`\n      background-color: #40404a;\n      color: #fff;\n    `};\n  ${(p) =>\n    p.isActive &&\n    css`\n      background-color: #fafafa;\n      color: #18181b;\n    `};\n`;\nconst Link = styled.a`\n  color: #bf94ff;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Timestamp = styled.span`\n  margin-right: 5px;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst Badge = styled.img`\n  margin-bottom: 2px;\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst renderMessageArray = (login: string, userLogin: string | null) => (\n  item: MessageEntity,\n  key: number,\n) => {\n  if (typeof item !== 'object') return item;\n\n  if (\n    item.type === 'twitch-emote' ||\n    item.type === 'bttv-emote' ||\n    item.type === 'ffz-emote'\n  ) {\n    return (\n      <Emote\n        key={key}\n        src={item.src}\n        srcSet={item.srcSet}\n        alt={item.alt}\n        data-emote-id={item.id}\n      />\n    );\n  }\n\n  if (item.type === 'emoji') {\n    return <Emoji key={key} src={item.src} alt={item.alt} />;\n  }\n\n  if (item.type === 'mention') {\n    return (\n      <Mention\n        key={key}\n        isActive={item.target === userLogin}\n        isOwnMessage={login === userLogin}\n      >\n        {item.text}\n      </Mention>\n    );\n  }\n\n  if (item.type === 'link') {\n    return (\n      <Link\n        key={key}\n        href={item.href}\n        rel=\"noreferrer noopener\"\n        target=\"_blank\"\n      >\n        {item.text}\n      </Link>\n    );\n  }\n\n  return null;\n};\n\nconst renderBadges = (badges: htmlEntity.Badge[]) =>\n  badges.map(({ alt, label, src, srcSet }, key: number) => (\n    // eslint-disable-next-line react/no-array-index-key\n    <Badge key={key} alt={alt} aria-label={label} src={src} srcSet={srcSet} />\n  ));\n\ntype Props = {\n  message: MessageType;\n  userLogin: string | null;\n  isEven: boolean;\n  isShowTimestamps: boolean;\n  onNameRightClick: (name: string) => void;\n};\n\nconst MESSAGE_DELETED_LABEL = '<message deleted>';\n\nconst Message = ({\n  message: {\n    message,\n    entities,\n    user: { login, color, displayName, badges },\n    timestamp,\n    isHistory,\n    isAction,\n    isDeleted,\n  },\n  userLogin,\n  isEven,\n  isShowTimestamps,\n  // onNameClick,\n  onNameRightClick,\n}: Props) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const isMention =\n    login !== userLogin && RegExp(userLogin as string, 'gi').test(message);\n\n  const handleNameRightClick = (\n    e: React.MouseEvent<HTMLSpanElement, MouseEvent>,\n  ) => {\n    onNameRightClick(displayName);\n    e.preventDefault();\n  };\n\n  return (\n    <MessageRoot\n      isHistory={isHistory}\n      isAction={isAction}\n      isEven={isEven}\n      isMention={isMention}\n      isDeleted={isDeleted}\n      color={color}\n    >\n      {isShowTimestamps && (\n        <Timestamp>{format('h:mm', new Date(timestamp))}</Timestamp>\n      )}\n      {badges.length > 0 && renderBadges(badges)}\n      <Name color={color} onContextMenu={handleNameRightClick}>\n        {displayName}\n      </Name>\n      {isAction ? ' ' : ': '}\n      {isDeleted && !isVisible ? (\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n        <Link onClick={() => setIsVisible(true)}>{MESSAGE_DELETED_LABEL}</Link>\n      ) : (\n        entities.map(renderMessageArray(login, userLogin))\n      )}\n    </MessageRoot>\n  );\n};\n\nexport default React.memo(Message);\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Notice as NoticeType } from 'features/chat/slice/messages';\n\nconst NoticeRoot = styled.div<{ isEven: boolean }>`\n  padding: 5px 20px;\n  color: rgba(255, 255, 255, 0.6);\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${(p) => (p.isEven ? '#1f1925' : 'transparent')};\n`;\n\ntype Props = {\n  message: NoticeType;\n  isEven: boolean;\n};\n\nconst Notice = ({ message: { message }, isEven }: Props) => (\n  <NoticeRoot isEven={isEven}>{message}</NoticeRoot>\n);\n\nexport default Notice;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { UserNotice as UserNoticeType } from 'features/chat/slice/messages';\n\nconst UserNoticeRoot = styled.div`\n  padding: 5px 20px 5px 16px;\n  line-height: 20px;\n  word-wrap: break-word;\n  border-left: 4px solid #9147ff;\n  color: #fff;\n`;\n\ntype Props = {\n  message: UserNoticeType;\n};\n\nconst UserNotice = ({ message: { systemMessage } }: Props) => (\n  <UserNoticeRoot>{systemMessage}</UserNoticeRoot>\n);\n\nexport default UserNotice;\n","import React from 'react';\n\nimport assertNever from 'utils/assertNever';\nimport { ChatMessage as ChatMessageType } from 'features/chat/slice/messages';\nimport Message from 'features/chat/components/Message';\nimport Notice from 'features/chat/components/Notice';\nimport UserNotice from 'features/chat/components/UserNotice';\n\ntype Props = {\n  message: ChatMessageType;\n  userLogin: string | null;\n  isEven: boolean;\n  isShowTimestamps: boolean;\n  // onNameClick: (name: string) => void;\n  onNameRightClick: (name: string) => void;\n};\n\nconst ChatMessage = ({\n  message,\n  userLogin,\n  isEven,\n  isShowTimestamps,\n  // onNameClick,\n  onNameRightClick,\n}: Props) => {\n  if (message.type === 'message') {\n    return (\n      <Message\n        message={message}\n        userLogin={userLogin}\n        isEven={isEven}\n        isShowTimestamps={isShowTimestamps}\n        // onNameClick={onNameClick}\n        onNameRightClick={onNameRightClick}\n      />\n    );\n  }\n\n  if (message.type === 'notice') {\n    return <Notice message={message} isEven={isEven} />;\n  }\n\n  if (message.type === 'user-notice') {\n    return <UserNotice message={message} />;\n  }\n\n  return assertNever(message);\n};\n\nexport default React.memo(ChatMessage);\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport ScrollbarType from 'react-scrollbars-custom';\nimport { ScrollState } from 'react-scrollbars-custom/dist/types/types';\n\nimport Scrollbar from 'components/Scrollbar';\nimport ChatMessage from 'features/chat/components/ChatMessage';\nimport { messagesSelector, isEvenSelector } from 'features/chat/selectors';\nimport { userLoginSelector } from 'features/auth/authSlice';\nimport {\n  isShowTimestampsSelector,\n  isSplitChatSelector,\n} from 'features/options/optionsSelectors';\n\nconst MORE_MESSAGES_OFFSET = 100;\n\nconst MessagesRoot = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\nconst StyledScrollbar = styled(Scrollbar)`\n  .ScrollbarsCustom-Content {\n    padding-bottom: 10px !important;\n  }\n`;\nconst MoreMessagesButton = styled.button<{ isVisible: boolean }>`\n  position: absolute;\n  left: 50%;\n  bottom: 10px;\n  display: ${(p) => (p.isVisible ? 'block' : 'none')};\n  padding: 5px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  transform: translateX(-50%);\n`;\n\ntype Props = {\n  onNameRightClick: (name: string) => void;\n};\n\nconst Messages = ({ onNameRightClick }: Props) => {\n  const [\n    isMoreMessagesButtonVisible,\n    setIsMoreMessagesButtonVisible,\n  ] = useState(false);\n\n  const messages = useSelector(messagesSelector);\n  const userLogin = useSelector(userLoginSelector);\n\n  const isEven = useSelector(isEvenSelector);\n  const isShowTimestamps = useSelector(isShowTimestampsSelector);\n  const isSplitChat = useSelector(isSplitChatSelector);\n\n  const handleScrollUpdate = ({\n    clientHeight,\n    contentScrollHeight,\n    scrollTop,\n  }: ScrollState) => {\n    const maxScrollTop = contentScrollHeight - clientHeight;\n    const isVisible = scrollTop + MORE_MESSAGES_OFFSET < maxScrollTop;\n\n    setIsMoreMessagesButtonVisible(isVisible);\n  };\n\n  const scrollbarRef = useRef<ScrollbarType>(null);\n\n  const handleScrollToBottom = () => {\n    if (scrollbarRef.current) {\n      scrollbarRef.current.scrollToBottom();\n    }\n  };\n\n  useEffect(() => {\n    if (!isMoreMessagesButtonVisible) {\n      handleScrollToBottom();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages]);\n\n  const getIsEven = (key: number) => {\n    if (!isSplitChat) return false;\n    return isEven ? key % 2 === 1 : key % 2 === 0;\n  };\n\n  return (\n    <MessagesRoot>\n      <StyledScrollbar onUpdate={handleScrollUpdate} ref={scrollbarRef}>\n        {messages.map((message, key) => (\n          <ChatMessage\n            key={message.id}\n            message={message}\n            userLogin={userLogin}\n            isEven={getIsEven(key)}\n            isShowTimestamps={isShowTimestamps}\n            onNameRightClick={onNameRightClick}\n          />\n        ))}\n      </StyledScrollbar>\n      <MoreMessagesButton\n        onClick={handleScrollToBottom}\n        isVisible={isMoreMessagesButtonVisible}\n      >\n        More messages below\n      </MoreMessagesButton>\n    </MessagesRoot>\n  );\n};\n\nexport default Messages;\n","import React, { useState, useRef, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport Button from 'components/Button';\n\nconst JoinChannelRoot = styled.div`\n  padding: 10px;\n  flex-grow: 1;\n  width: 320px;\n`;\nconst Title = styled.h2`\n  margin-top: 0;\n  margin-bottom: 10px;\n  padding: 0;\n  color: #fff;\n`;\nconst Controls = styled.div`\n  display: flex;\n\n  & > :not(:last-child) {\n    margin-right: 10px;\n  }\n`;\nconst Input = styled.input`\n  display: block;\n  padding: 4px 10px;\n  width: 100%;\n  border: 2px solid transparent;\n  background-color: rgba(255, 255, 255, 0.15);\n  font-family: inherit;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\nconst JoinButton = styled(Button)`\n  flex-shrink: none;\n`;\n\nconst JoinChannel = () => {\n  const history = useHistory();\n  const [value, setValue] = useState('');\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const handleChangeChannel = () => {\n    history.push({\n      pathname: '/chat/',\n      hash: value,\n    });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      handleChangeChannel();\n    }\n  };\n\n  return (\n    <JoinChannelRoot>\n      <Title>Channel to join: </Title>\n      <Controls>\n        <Input\n          ref={inputRef}\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          onKeyPress={handleKeyPress}\n        />\n        <JoinButton onClick={handleChangeChannel} disabled={!value}>\n          Join\n        </JoinButton>\n      </Controls>\n    </JoinChannelRoot>\n  );\n};\n\nexport default JoinChannel;\n","import React, { useState, useCallback, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { isAuthSelector } from 'features/auth/authSlice';\nimport { isFixedWidthSelector } from 'features/options/optionsSelectors';\nimport useInitializeAuth from 'features/auth/hooks/useInitializeAuth';\nimport useFetchChatData from 'features/chat/hooks/useFetchChatData';\nimport useCurrentChannel from 'features/chat/hooks/useCurrentChannel';\nimport useTwitchClient from 'features/chat/hooks/useTwitchClient';\nimport useChatInput from 'features/chat/hooks/useChatInput';\nimport {\n  currentChannelSelector,\n  isConnectedSelector,\n} from 'features/chat/selectors';\nimport ChatInput from 'features/chat/components/ChatInput';\nimport ChatControls from 'features/chat/components/ChatControls';\nimport Messages from 'features/chat/components/Messages';\nimport JoinChannel from 'features/chat/components/JoinChannel';\n\nconst ChatRoot = styled.div`\n  height: 100vh;\n  font-size: 12px;\n  background-color: #0e0e10;\n`;\nconst ChatWrapper = styled.div<{ isFixedWidth: boolean }>`\n  display: flex;\n  flex-direction: column;\n  width: ${(p) => (p.isFixedWidth ? '340px' : 'auto')};\n  height: 100%;\n  background-color: #18181b;\n`;\n\nconst Chat = () => {\n  const [text, setText] = useState('');\n\n  const client = useTwitchClient();\n\n  useInitializeAuth();\n  useCurrentChannel();\n  useFetchChatData();\n\n  const currentChannel = useSelector(currentChannelSelector);\n\n  const isAuth = useSelector(isAuthSelector);\n  const isConnected = useSelector(isConnectedSelector);\n\n  const isFixedWidth = useSelector(isFixedWidthSelector);\n  const chatInputRef = useRef<HTMLTextAreaElement>(null);\n\n  const textRef = useRef(text);\n  textRef.current = text;\n\n  const isDisabled = !isAuth || !isConnected;\n\n  const handleSendMessage = useCallback(() => {\n    if (!client || !textRef.current) return;\n\n    client.say(currentChannel, textRef.current);\n\n    setText('');\n  }, [client, currentChannel, textRef, setText]);\n\n  const chatInput = useChatInput(setText, handleSendMessage, chatInputRef);\n\n  const handleNameRightClick = useCallback(\n    (name: string) => {\n      setText((t) => `${t.trim()} @${name} `.trimLeft());\n      if (chatInputRef.current) {\n        chatInputRef.current.focus();\n      }\n    },\n    [setText, chatInputRef],\n  );\n\n  const handleEmoteClick = useCallback(\n    (name: string) => {\n      setText((t) => `${t.trim()} ${name} `.trimLeft());\n    },\n    [setText],\n  );\n\n  return (\n    <ChatRoot>\n      <ChatWrapper isFixedWidth={isFixedWidth}>\n        {currentChannel ? (\n          <Messages onNameRightClick={handleNameRightClick} />\n        ) : (\n          <JoinChannel />\n        )}\n        <ChatInput\n          ref={chatInputRef}\n          text={text}\n          suggestions={chatInput.suggestions}\n          isDisabled={isDisabled}\n          onEmoteClick={handleEmoteClick}\n          onChange={chatInput.handleChange}\n          onKeyUp={chatInput.handleKeyUp}\n          onKeyDown={chatInput.handleKeyDown}\n          onBlur={chatInput.handleBlur}\n          onSuggestionMouseEnter={chatInput.handleSuggestionMouseEnter}\n          onSuggestionClick={chatInput.handleSuggestionClick}\n        />\n        <ChatControls\n          isDisabled={isDisabled}\n          onSendMessage={handleSendMessage}\n        />\n      </ChatWrapper>\n    </ChatRoot>\n  );\n};\n\nexport default Chat;\n","import { getAuthUrl } from 'features/auth/authUtils';\n\nconst Auth = () => {\n  window.location.href = getAuthUrl();\n\n  return null;\n};\n\nexport default Auth;\n","import { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport {\n  LS_ACCESS_TOKEN,\n  LS_ID_TOKEN,\n  LS_USER,\n  LS_LAST_CHANNEL,\n} from 'utils/constants';\nimport { invalidateAuth } from 'features/auth/authSlice';\n\nconst Logout = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  localStorage.removeItem(LS_ACCESS_TOKEN);\n  localStorage.removeItem(LS_ID_TOKEN);\n  localStorage.removeItem(LS_USER);\n\n  dispatch(invalidateAuth());\n\n  history.push({\n    pathname: '/chat/',\n    hash: localStorage.getItem(LS_LAST_CHANNEL) || '',\n  });\n\n  return null;\n};\n\nexport default Logout;\n","import { useHistory } from 'react-router-dom';\n\nimport { LS_ACCESS_TOKEN, LS_ID_TOKEN, LS_LAST_CHANNEL } from 'utils/constants';\n\nconst AuthCallback = () => {\n  const history = useHistory();\n\n  if (!window.location.hash) return null;\n\n  const params = new URLSearchParams(window.location.hash.slice(1));\n\n  const accessToken = params.get('access_token');\n  const idToken = params.get('id_token');\n\n  if (!accessToken || !idToken) return null;\n\n  localStorage.setItem(LS_ACCESS_TOKEN, accessToken);\n  localStorage.setItem(LS_ID_TOKEN, idToken);\n\n  history.push({\n    pathname: '/chat/',\n    hash: localStorage.getItem(LS_LAST_CHANNEL) || '',\n  });\n\n  return null;\n};\n\nexport default AuthCallback;\n","import { css } from 'styled-components';\n\nexport default css`\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    margin: 0;\n    font-family: Roobert, Helvetica Neue, Helvetica, Arial, sans-serif;\n  }\n`;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { createGlobalStyle } from 'styled-components';\n\nimport common from 'styles/common';\nimport colors from 'styles/colors';\nimport vars from 'styles/vars';\n\nexport default createGlobalStyle`\n  :root {\n    ${colors};\n    ${vars};\n  }\n  ${common};\n`;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  RouteComponentProps,\n} from 'react-router-dom';\n\nimport { isAuthRedirect } from 'features/auth/authUtils';\nimport Chat from 'features/chat/components/Chat';\nimport Auth from 'features/auth/Auth';\nimport Logout from 'features/auth/Logout';\nimport AuthCallback from 'features/auth/AuthCallback';\nimport GlobalStyles from 'styles';\n\nconst getHomeComponent = ({ location }: RouteComponentProps) =>\n  isAuthRedirect(location.hash) ? <AuthCallback /> : <Chat />;\n\nconst App: React.FC = () => (\n  <>\n    <Router>\n      <Switch>\n        <Route exact path=\"/chat/\" render={getHomeComponent} />\n        <Route exact path=\"/chat/auth\" component={Auth} />\n        <Route exact path=\"/chat/logout\" component={Logout} />\n      </Switch>\n    </Router>\n    <GlobalStyles />\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nconst registerValidSW = (swUrl: string, config?: Config) => {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n};\n\nconst checkValidServiceWorker = (swUrl: string, config?: Config) => {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n};\n\nexport const register = (config?: Config) => {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n};\n\nexport const unregister = () => {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n};\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport auth from 'features/auth/authSlice';\nimport chat from 'features/chat/slice/chatSlice';\nimport options from 'features/options/optionsSlice';\n\nconst rootReducer = combineReducers({\n  auth,\n  chat,\n  options,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore, Action } from '@reduxjs/toolkit';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { ThunkAction } from 'redux-thunk';\n\nimport rootReducer, { RootState } from 'app/rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nif (process.env.NODE_ENV === 'development' && (module as any).hot) {\n  (module as any).hot.accept('./rootReducer', () => {\n    // eslint-disable-next-line global-require\n    const newRootReducer = require('./rootReducer').default;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport ReactGA from 'react-ga';\n\nimport * as serviceWorker from 'serviceWorker';\nimport { isAuthRedirect } from 'features/auth/authUtils';\nimport store from 'app/store';\n\nif (process.env.NODE_ENV === 'production') {\n  ReactGA.initialize('UA-139550930-3');\n\n  if (!isAuthRedirect(window.location.hash)) {\n    const page =\n      window.location.pathname + window.location.search + window.location.hash;\n    ReactGA.pageview(page);\n  }\n}\n\nconst render = () => {\n  // eslint-disable-next-line global-require\n  const App = require('./app/App').default;\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n};\n\nrender();\n\nif (process.env.NODE_ENV === 'development' && (module as any).hot) {\n  (module as any).hot.accept('./app/App', render);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import {\n  TWITCH_API_AUTH_BASE,\n  TWITCH_API_CLIENT_ID,\n  TWITCH_API_REDIRECT_URI,\n  LS_USER,\n} from 'utils/constants';\n\ntype StoredUser = {\n  id: string;\n  login: string;\n};\n\n/* eslint-disable @typescript-eslint/camelcase */\nconst authParams = {\n  client_id: TWITCH_API_CLIENT_ID,\n  redirect_uri: TWITCH_API_REDIRECT_URI,\n  response_type: 'token+id_token',\n  scope: [\n    'openid',\n    'channel:moderate',\n    'chat:edit',\n    'chat:read',\n    'whispers:read',\n    'whispers:edit',\n    'user_blocks_read',\n    'user_blocks_edit',\n    'user_subscriptions',\n  ].join('+'),\n  claims: JSON.stringify({\n    id_token: { email_verified: null, picture: null, preferred_username: null },\n  }),\n  // TODO:\n  // state: uid(),\n};\n/* eslint-enable @typescript-eslint/camelcase */\n\nexport const getAuthUrl = (): string => {\n  const search = Object.entries(authParams)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n\n  return `${TWITCH_API_AUTH_BASE}?${search}`;\n};\n\nexport const isAuthRedirect = (hash: string): boolean =>\n  hash.startsWith('#access_token=');\n\nexport const writeUserToLocatStorage = (user: StoredUser): void => {\n  localStorage.setItem(LS_USER, JSON.stringify(user));\n};\n\nexport const readUserFromLocatStorage = (): StoredUser | null => {\n  let user;\n\n  try {\n    user = JSON.parse(localStorage.getItem(LS_USER) as string);\n  } catch (e) {\n    user = null;\n  }\n\n  if (!user || !user.id || !user.login) return null;\n\n  return user as StoredUser;\n};\n","export const TWITCH_API_AUTH_BASE = 'https://id.twitch.tv/oauth2/authorize';\n\nexport const TWITCH_API_CLIENT_ID = process.env.REACT_APP_TWITCH_API_CLIENT_ID;\nexport const TWITCH_API_REDIRECT_URI =\n  process.env.REACT_APP_TWITCH_API_REDIRECT_URI;\n\nexport const CHANNEL_MESSAGES_LIMIT = 500;\nexport const STORE_USERS_LIMIT = 500;\n\nexport const API_REQUESTS_TIMEOUT = 10000;\n\n// local storage keys\nexport const LS_ACCESS_TOKEN = 'accessToken';\nexport const LS_ID_TOKEN = 'idToken';\nexport const LS_LAST_CHANNEL = 'lastChannel';\nexport const LS_USER = 'user';\nexport const LS_EMOTES_USAGE_STATISTIC = 'emotesUsageStatistic';\nexport const LS_OPTIONS = 'options';\n\nexport const SUGGESTION_TYPES = {\n  users: {\n    name: 'users',\n    limit: 5,\n    regex: /^@([\\w\\d_]*)$/,\n  },\n  emotes: {\n    name: 'emotes',\n    limit: 10,\n    regex: /^:([\\w\\d_]{2,})$/,\n  },\n};\n\nexport const NOTICE_MESSAGE_TAGS = [\n  'msg_banned',\n  'msg_bad_characters',\n  'msg_channel_blocked',\n  'msg_channel_suspended',\n  'msg_duplicate',\n  'msg_emoteonly',\n  'msg_facebook',\n  'msg_followersonly',\n  'msg_followersonly_followed',\n  'msg_followersonly_zero',\n  'msg_r9k',\n  'msg_ratelimit',\n  'msg_rejected',\n  'msg_rejected_mandatory',\n  'msg_room_not_found',\n  'msg_slowmode',\n  'msg_subsonly',\n  'msg_suspended',\n  'msg_timedout',\n  'msg_verified_email',\n];\n\nexport type FetchFlags = {\n  isLoading: boolean;\n  isLoaded: boolean;\n  isError: boolean;\n  error: string | null;\n};\n\nexport const initialFetchFlags: FetchFlags = {\n  isLoading: false,\n  isLoaded: false,\n  isError: false,\n  error: null,\n};\n","/* eslint-disable no-param-reassign */\nimport { FetchFlags } from 'utils/constants';\n\nfunction setFetchFlags(obj: FetchFlags, type: 'request'): void;\nfunction setFetchFlags(obj: FetchFlags, type: 'success'): void;\nfunction setFetchFlags(obj: FetchFlags, type: 'failure', error: string): void;\nfunction setFetchFlags(\n  obj: FetchFlags,\n  type: 'request' | 'success' | 'failure',\n  error: string | null = null,\n) {\n  obj.isLoading = type === 'request';\n  obj.isLoaded = type === 'success' || type === 'failure';\n  obj.isError = type === 'failure';\n  obj.error = type === 'failure' ? error : null;\n}\n\nexport default setFetchFlags;\n","import * as R from 'ramda';\nimport { parse as twemojiParser } from 'twemoji-parser';\nimport { lib as emojilib } from 'emojilib';\nimport urlRegex from 'url-regex';\nimport twitchIrc from 'twitch-simple-irc';\n\nimport { StateEmotes } from 'features/chat/selectors/chatSelectors';\nimport { MessageEntity } from 'features/chat/slice/messages';\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\nimport findEmote from 'features/chat/utils/findEmote';\n\nconst mentionRegex = /^@([\\p{Letter}\\p{Number}_]+)/u;\nconst linkRegex = urlRegex({ strict: false });\n\nconst normalizeEmbeddedEmotes = (embeddedEmotes: twitchIrc.Emotes) =>\n  Object.entries(embeddedEmotes).reduce((result, [key, items]) => {\n    const id = Number.parseInt(key, 10);\n\n    return {\n      ...result,\n      ...items.reduce((acc, { start }) => ({ ...acc, [start]: id }), {}),\n    };\n  }, {} as Record<string, number>);\n\nconst findEmojiByName = (char: string) =>\n  R.pipe<any, any, any, string | undefined>(\n    R.filter(R.propEq('char', char)),\n    R.keys,\n    R.head,\n  )(emojilib);\n\nconst findEntity = (\n  word: string,\n  emotes: StateEmotes,\n  parseTwitch: boolean,\n):\n  | htmlEntity.TwitchEmote\n  | htmlEntity.BttvEmote\n  | htmlEntity.FfzEmote\n  | htmlEntity.Emoji\n  | [htmlEntity.Mention, number]\n  | htmlEntity.Link\n  | null => {\n  if (!emotes) return null;\n\n  if (parseTwitch) {\n    const twitchEmote = findEmote.twitch.byName(word, emotes);\n\n    if (twitchEmote) return twitchEmote;\n  }\n\n  const emote =\n    findEmote.bttv.byName(word, emotes) || findEmote.ffz.byName(word, emotes);\n\n  if (emote) return emote;\n\n  // Don't parse two or more emotes without spaces between\n  // Don't parse emote if it's not in the emojilib package\n  const emojiMatch = twemojiParser(word, { assetType: 'png' });\n\n  if (\n    emojiMatch &&\n    emojiMatch.length === 1 &&\n    emojiMatch[0].text.length === word.length\n  ) {\n    const emoji = findEmojiByName(word);\n\n    if (emoji) {\n      const [{ url }] = emojiMatch;\n\n      return htmlEntity.createEmoji(emoji, url);\n    }\n  }\n\n  const mentionMatch = word.match(mentionRegex);\n\n  if (mentionMatch) {\n    const [text, target] = mentionMatch;\n\n    return [\n      htmlEntity.createMention(text, target.toLowerCase()),\n      word.length - text.length,\n    ] as [htmlEntity.Mention, number];\n  }\n\n  const linkMatch = word.match(linkRegex);\n\n  if (linkMatch && linkMatch[0].length === word.length) {\n    return htmlEntity.createLink(word);\n  }\n\n  return null;\n};\n\nconst parseMessageEntities = (\n  message: string,\n  emotes: StateEmotes | null,\n  embeddedEmotes: twitchIrc.Emotes | null,\n  isOwnMessage = false,\n): MessageEntity[] => {\n  // If the message was sent by the current user, there is no embedded emotes\n  // So we need to parse twitch emotes manually\n\n  const result = [];\n  let offset = 0;\n  // Before that offset all content was added to the result array\n  let arrayOffset = 0;\n\n  // Check every word. From offset to the next space index\n  do {\n    const spaceIndex = message.indexOf(' ', offset + 1);\n\n    const isStart = offset === 0;\n    const isEnd = spaceIndex === -1;\n\n    const startIndex = isStart ? offset : offset + 1;\n    const endIndex = isEnd ? message.length : spaceIndex;\n\n    const word = message.substring(startIndex, endIndex);\n\n    if (word) {\n      let entity = null;\n\n      // Check embedded twitch emotes\n      if (\n        !isOwnMessage &&\n        embeddedEmotes &&\n        Object.keys(embeddedEmotes).length > 0\n      ) {\n        const normalizedEmotes = normalizeEmbeddedEmotes(embeddedEmotes);\n        const id = normalizedEmotes[startIndex];\n\n        if (id) {\n          entity = htmlEntity.createTwitchEmote({ id, code: word });\n        }\n      }\n\n      // Check other entities\n      if (!entity) {\n        entity = findEntity(word, emotes, isOwnMessage);\n      }\n\n      if (entity) {\n        // Push all text before this entity\n        if (arrayOffset !== startIndex) {\n          const textBefore = message.substring(arrayOffset, startIndex);\n          result.push(textBefore);\n        }\n\n        // If entity it's an array it means entity may be not full word\n        // The second element is the difference between word length and entity length\n        if (Array.isArray(entity)) {\n          const [entityObject, difference] = entity;\n          result.push(entityObject);\n          arrayOffset = endIndex - difference;\n        } else {\n          result.push(entity);\n          arrayOffset = endIndex;\n        }\n      }\n    }\n\n    // If it's the last word and it wasn't added to the result add it now\n    if (spaceIndex === -1 && arrayOffset !== endIndex) {\n      const textAfter = message.substring(arrayOffset, endIndex);\n      result.push(textAfter);\n    }\n\n    offset = spaceIndex;\n  } while (offset !== -1);\n\n  return result;\n};\n\nexport default parseMessageEntities;\n","import uuid from 'uuid/v4';\nimport * as twitchIrc from 'twitch-simple-irc';\nimport * as tekko from 'tekko';\n\nimport * as api from 'api';\nimport { RootState } from 'app/rootReducer';\nimport { userIdSelector, userLoginSelector } from 'features/auth/authSlice';\nimport {\n  Message,\n  Notice,\n  UserNotice,\n  OwnMessage,\n} from 'features/chat/slice/messages';\nimport { ChatState } from 'features/chat/slice';\nimport {\n  blockedUsersSelector,\n  globalBadgesSelector,\n  channelBadgesSelector,\n  emotesSelector,\n  StateEmotes,\n} from 'features/chat/selectors';\nimport parseMessageEntities from 'features/chat/utils/parseMessageEntities';\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\nimport { writeEmotesUsageStatistic } from 'features/chat/utils/emotesUsageStatistic';\n\nexport const normalizeMessage = (\n  { message, tags, user, channel, isAction }: twitchIrc.MessageEvent,\n  chatState: ChatState,\n): Message | null => {\n  const fakeState = { chat: chatState } as RootState;\n  const blockedUsers = blockedUsersSelector(fakeState);\n\n  if (blockedUsers.includes(user)) return null;\n\n  const globalBadges = globalBadgesSelector(fakeState);\n  const channelBadges = channelBadgesSelector(fakeState);\n  const emotes = emotesSelector(fakeState);\n\n  return {\n    type: 'message',\n    id: tags.id,\n    message,\n    channel,\n    entities: parseMessageEntities(message, emotes, tags.emotes),\n    user: {\n      id: tags.userId,\n      login: user,\n      displayName: tags.displayName,\n      color: tags.color,\n      badges: htmlEntity.createBadges(tags.badges, globalBadges, channelBadges),\n    },\n    timestamp: tags.tmiSentTs,\n    isAction,\n    isHistory: false,\n    isDeleted: false,\n  };\n};\n\nexport const normalizeNotice = (\n  { message, channel, tags: { msgId } }: twitchIrc.NoticeEvent,\n  id: string,\n): Notice => ({\n  type: 'notice',\n  id,\n  message,\n  channel,\n  noticeType: msgId,\n});\n\nexport const normalizeUserNotice = ({\n  message,\n  channel,\n  tags: { id, msgId, login, systemMsg },\n}: twitchIrc.UserNoticeEvent): UserNotice => ({\n  type: 'user-notice',\n  id,\n  message,\n  channel,\n  noticeType: msgId,\n  systemMessage: systemMsg,\n  user: {\n    login,\n  },\n});\n\nexport const normalizeOwnMessage = (\n  { message, channel, tags }: OwnMessage,\n  state: RootState,\n): Message => {\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n  const userId = userIdSelector(state);\n  const userLogin = userLoginSelector(state);\n\n  const isAction = message.startsWith('/me ');\n  const normalizedMessage = isAction ? message.slice(4) : message;\n\n  const entities = parseMessageEntities(normalizedMessage, emotes, null, true);\n  writeEmotesUsageStatistic(entities);\n\n  return {\n    type: 'message',\n    id: uuid(),\n    message: normalizedMessage,\n    channel,\n    entities,\n    user: {\n      id: userId as string,\n      login: userLogin as string,\n      displayName: tags.displayName,\n      color: tags.color,\n      badges: htmlEntity.createBadges(tags.badges, globalBadges, channelBadges),\n    },\n    timestamp: Date.now(),\n    isAction,\n    isHistory: false,\n    isDeleted: false,\n  };\n};\n\nexport const normalizeHistoryMessage = (\n  { tags, params: [channel, message], prefix }: tekko.Message,\n  emotes: StateEmotes,\n  globalBadges: Record<string, api.TwitchBadge>,\n  channelBadges: Record<string, api.TwitchBadge>,\n): Message => {\n  const isAction = twitchIrc.getIsAction(message);\n  const normalizedMessage = isAction\n    ? twitchIrc.normalizeActionMessage(message)\n    : message;\n  const parsedTags = (twitchIrc.parseMessageTags(\n    tags,\n  ) as unknown) as twitchIrc.MessageTags;\n\n  return {\n    type: 'message',\n    id: parsedTags.id,\n    message,\n    channel: channel.slice(1),\n    entities: parseMessageEntities(\n      normalizedMessage,\n      emotes,\n      parsedTags.emotes,\n    ),\n    user: {\n      id: parsedTags.userId,\n      login: prefix ? prefix.name : '',\n      displayName: parsedTags.displayName,\n      color: parsedTags.color,\n      badges: htmlEntity.createBadges(\n        parsedTags.badges,\n        globalBadges,\n        channelBadges,\n      ),\n    },\n    timestamp: parsedTags.tmiSentTs,\n    isAction,\n    isHistory: true,\n    isDeleted: false,\n  };\n};\n\nexport const normalizeHistoryMessages = (\n  rawMessages: string[],\n  chatState: ChatState,\n): Message[] => {\n  const fakeState = { chat: chatState } as RootState;\n  const globalBadges = globalBadgesSelector(fakeState);\n  const channelBadges = channelBadgesSelector(fakeState);\n  const emotes = emotesSelector(fakeState);\n  const blockedUsers = blockedUsersSelector(fakeState);\n\n  return rawMessages.reduce<Message[]>((acc, rawMessage) => {\n    const message = tekko.parse(rawMessage) as tekko.Message;\n\n    const { command, prefix } = message;\n\n    if (\n      command === 'PRIVMSG' &&\n      prefix &&\n      !blockedUsers.includes(prefix.name)\n    ) {\n      acc.push(\n        normalizeHistoryMessage(message, emotes, globalBadges, channelBadges),\n      );\n    }\n\n    return acc;\n  }, []);\n};\n","/* eslint-disable no-param-reassign */\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport twitchIrc from 'twitch-simple-irc';\n\nimport * as api from 'api';\nimport {\n  FetchFlags,\n  initialFetchFlags,\n  CHANNEL_MESSAGES_LIMIT,\n  STORE_USERS_LIMIT,\n} from 'utils/constants';\nimport assertNever from 'utils/assertNever';\nimport setFetchFlags from 'utils/setFetchFlags';\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\nimport {\n  normalizeMessage,\n  normalizeNotice,\n  normalizeUserNotice,\n  normalizeHistoryMessages,\n} from 'features/chat/utils/normalizeMessages';\nimport { ChatState } from 'features/chat/slice';\n\nexport type MessageEntity =\n  | htmlEntity.TwitchEmote\n  | htmlEntity.BttvEmote\n  | htmlEntity.FfzEmote\n  | htmlEntity.Emoji\n  | htmlEntity.Mention\n  | htmlEntity.Link\n  | string;\n\nexport type Message = {\n  type: 'message';\n  id: string;\n  message: string;\n  channel: string;\n  entities: MessageEntity[];\n  user: {\n    id: string;\n    login: string;\n    displayName: string;\n    color: string;\n    badges: htmlEntity.Badge[];\n  };\n  timestamp: number;\n  isAction: boolean;\n  isHistory: boolean;\n  isDeleted: boolean;\n};\n\nexport type Notice = {\n  type: 'notice';\n  id: string;\n  message: string;\n  channel: string;\n  noticeType: string;\n};\n\nexport type UserNotice = {\n  type: 'user-notice';\n  id: string;\n  message: string;\n  channel: string;\n  noticeType: keyof typeof twitchIrc.UserNoticeType;\n  systemMessage: string;\n  user: {\n    login: string;\n  };\n};\n\nexport type ChatMessage = Message | Notice | UserNotice;\n\nexport type OwnMessage = {\n  message: string;\n  channel: string;\n  tags: twitchIrc.UserStateTags;\n};\n\ntype AddMessage = {\n  type: 'message';\n  message: twitchIrc.MessageEvent;\n};\ntype AddNotice = {\n  type: 'notice';\n  id: string;\n  message: twitchIrc.NoticeEvent;\n};\ntype AddUserNotice = {\n  type: 'user-notice';\n  message: twitchIrc.UserNoticeEvent;\n};\ntype AddOwnMessage = {\n  type: 'own-message';\n  message: Message;\n};\n\ntype AddMessagePayload = AddMessage | AddNotice | AddUserNotice | AddOwnMessage;\n\ntype MessagesStateChannel = {\n  history: FetchFlags & {\n    isAdded: boolean;\n    items: string[];\n  };\n  isEven: boolean;\n  items: ChatMessage[];\n  users: string[];\n};\n\nexport type MessagesState = Record<string, MessagesStateChannel>;\n\nexport const messagesInitialState: MessagesState = {};\n\nconst messagesChannelInitialState = {\n  history: {\n    ...initialFetchFlags,\n    isAdded: false,\n    items: [],\n  },\n  isEven: false,\n  items: [],\n  users: [],\n};\n\nfunction sliceMessages<T>(items: T[]): T[] {\n  const diff = items.length - CHANNEL_MESSAGES_LIMIT;\n\n  return diff > 0 ? items.slice(diff) : items;\n}\n\nfunction sliceUsers<T>(users: T[]): T[] {\n  const diff = users.length - STORE_USERS_LIMIT;\n\n  return diff > 0 ? users.slice(diff) : users;\n}\n\nconst getIsEven = (\n  prev: boolean,\n  addedItemsCount: number,\n  isSliced: boolean,\n): boolean => {\n  if (isSliced) {\n    return addedItemsCount % 2 ? !prev : prev;\n  }\n\n  return prev;\n};\n\nconst normalizePayload = (\n  data: AddMessagePayload,\n  chatState: ChatState,\n): ChatMessage | null => {\n  if (data.type === 'message') {\n    return normalizeMessage(data.message, chatState);\n  }\n\n  if (data.type === 'notice') {\n    return normalizeNotice(data.message, data.id);\n  }\n\n  if (data.type === 'user-notice') {\n    return normalizeUserNotice(data.message);\n  }\n\n  if (data.type === 'own-message') {\n    return data.message;\n  }\n\n  return assertNever(data);\n};\n\nexport const messagesReducers = {\n  clearChat: (\n    state: ChatState,\n    { payload }: PayloadAction<twitchIrc.ClearChatEvent>,\n  ): void => {\n    const {\n      channel,\n      tags: { targetUserId },\n    } = payload;\n\n    // eslint-disable-next-line no-restricted-syntax\n    for (const message of state.messages[channel].items) {\n      if (\n        message.type === 'message' &&\n        message.user.id === targetUserId &&\n        !message.isHistory\n      ) {\n        message.isDeleted = true;\n      }\n    }\n  },\n\n  addMessage: (\n    state: ChatState,\n    { payload }: PayloadAction<AddMessagePayload>,\n  ): void => {\n    const message = normalizePayload(payload, state);\n\n    if (!message) return;\n\n    const { channel } = message;\n\n    const prevItems = state.messages[channel].items;\n    const newItems = [...prevItems, message];\n    const slicedMessages = sliceMessages(newItems);\n\n    const isSliced = newItems.length > slicedMessages.length;\n    const prevIsEven = state.messages[channel].isEven;\n\n    state.messages[channel].isEven = getIsEven(prevIsEven, 1, isSliced);\n    state.messages[channel].items = slicedMessages;\n\n    // add user\n    const { users } = state.messages[channel];\n\n    if (\n      message.type === 'message' &&\n      !users.includes(message.user.displayName)\n    ) {\n      users.push(message.user.displayName);\n    }\n\n    state.messages[channel].users = sliceUsers(users);\n  },\n\n  addChatHistory: (\n    state: ChatState,\n    { payload }: PayloadAction<string>,\n  ): void => {\n    const channel = payload;\n\n    const rawHistory = state.messages[channel].history.items;\n    const history = normalizeHistoryMessages(sliceMessages(rawHistory), state);\n    const prevItems = state.messages[channel].items;\n    const newItems = [...history, ...prevItems];\n    const slicedMessages = sliceMessages(newItems);\n\n    const isSliced = newItems.length > slicedMessages.length;\n    const prevIsEven = state.messages[channel].isEven;\n\n    state.messages[channel].isEven = getIsEven(\n      prevIsEven,\n      history.length,\n      isSliced,\n    );\n    state.messages[channel].items = slicedMessages;\n\n    // add users\n    const { users } = state.messages[channel];\n\n    history.forEach((message) => {\n      if (\n        message.type === 'message' &&\n        !users.includes(message.user.displayName)\n      ) {\n        users.push(message.user.displayName);\n      }\n    });\n\n    state.messages[channel].history.items = [];\n    state.messages[channel].history.isAdded = true;\n  },\n\n  fetchChatHistoryRequest: (\n    state: ChatState,\n    { payload }: PayloadAction<{ channel: string }>,\n  ): void => {\n    const { channel } = payload;\n\n    if (!state.messages[channel]) {\n      state.messages[channel] = messagesChannelInitialState;\n    }\n\n    setFetchFlags(state.messages[channel].history, 'request');\n  },\n\n  fetchChatHistorySuccess: (\n    state: ChatState,\n    {\n      payload,\n    }: PayloadAction<{ channel: string; data: api.ChatHistoryResponse }>,\n  ): void => {\n    const { channel, data } = payload;\n\n    state.messages[channel].history.items = data.messages;\n\n    setFetchFlags(state.messages[channel].history, 'success');\n  },\n\n  fetchChatHistoryFailure: (\n    state: ChatState,\n    { payload }: PayloadAction<{ channel: string; error: string }>,\n  ): void => {\n    const { channel, error } = payload;\n\n    setFetchFlags(state.messages[channel].history, 'failure', error);\n  },\n};\n","import * as R from 'ramda';\n\nimport * as api from 'api';\n\nexport const parseTwitchGlobalEmotes = R.pipe<\n  api.TwitchEmotesResponse,\n  Record<string, api.TwitchEmote[]>,\n  Record<string, api.TwitchEmote[]>\n>(R.prop('emoticon_sets'), R.pick(['0']));\n\nexport const parseTwitchChannelEmotes = R.pipe<\n  api.TwitchEmotesResponse,\n  Record<string, api.TwitchEmote[]>,\n  Record<string, api.TwitchEmote[]>\n>(R.prop('emoticon_sets'), R.omit(['0']));\n\nexport const parseBttvGlobalEmotes = (\n  data: api.BttvGlobalEmotesResponse,\n): api.BttvGlobalEmote[] => data;\n\nexport const parseBttvChannelEmotes = (\n  data: api.BttvChannelEmotesResponse,\n): api.BttvChannelEmote[] => [...data.channelEmotes, ...data.sharedEmotes];\n\nexport const parseFfzGlobalEmotes = ({\n  default_sets: defaultSets,\n  sets,\n}: api.FfzGlobalEmotesResponse): api.FfzEmote[] =>\n  R.pipe<any, any, any, any, api.FfzEmote[]>(\n    R.pick((defaultSets as unknown) as string[]),\n    R.values,\n    R.map(R.propOr([], 'emoticons')),\n    R.flatten,\n  )(sets);\n\nexport const parseFfzChannelEmotes: (\n  data: api.FfzChannelEmotesResponse,\n) => api.FfzEmote[] = R.pipe(\n  R.pathOr({}, ['sets']),\n  R.values,\n  R.map(R.pathOr([], ['emoticons'])),\n  R.flatten,\n);\n\nexport const parseBlockedUsers = R.pipe<\n  api.TwitchBlockedUsersResponse,\n  {}[],\n  string[]\n>(R.prop('blocks'), R.map<any, any>(R.path(['user', 'name'])));\n\nexport const parseBadges = R.prop('badge_sets');\n","/* eslint-disable no-param-reassign */\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport { FetchFlags, initialFetchFlags } from 'utils/constants';\nimport setFetchFlags from 'utils/setFetchFlags';\nimport { ChatState } from 'features/chat/slice';\nimport {\n  parseTwitchGlobalEmotes,\n  parseTwitchChannelEmotes,\n} from 'features/chat/utils/parseApiResponse';\n\nexport type TwitchEmotesState = FetchFlags & {\n  global: Record<string, api.TwitchEmote[]>;\n  user: Record<string, api.TwitchEmote[]>;\n};\n\nexport const twitchEmotesInitialState: TwitchEmotesState = {\n  ...initialFetchFlags,\n  global: {},\n  user: {},\n};\n\nexport const twitchEmotesReducers = {\n  fetchTwitchEmotesRequest: (state: ChatState): void => {\n    setFetchFlags(state.twitchEmotes, 'request');\n  },\n\n  fetchTwitchEmotesSuccess: (\n    state: ChatState,\n    { payload }: PayloadAction<api.TwitchEmotesResponse>,\n  ): void => {\n    state.twitchEmotes.global = parseTwitchGlobalEmotes(payload);\n    state.twitchEmotes.user = parseTwitchChannelEmotes(payload);\n\n    setFetchFlags(state.twitchEmotes, 'success');\n  },\n\n  fetchTwitchEmotesFailure: (\n    state: ChatState,\n    { payload }: PayloadAction<string>,\n  ): void => {\n    setFetchFlags(state.twitchEmotes, 'failure', payload);\n  },\n};\n","/* eslint-disable no-param-reassign */\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport { FetchFlags, initialFetchFlags } from 'utils/constants';\nimport setFetchFlags from 'utils/setFetchFlags';\nimport { ChatState } from 'features/chat/slice';\nimport {\n  parseBttvGlobalEmotes,\n  parseBttvChannelEmotes,\n} from 'features/chat/utils/parseApiResponse';\n\ntype BttvGlobalEmotes = FetchFlags & {\n  items: api.BttvGlobalEmote[];\n};\n\ntype BttvChannelEmotes = FetchFlags & {\n  items: api.BttvChannelEmote[];\n};\n\nexport type BttvEmotesState = {\n  global: BttvGlobalEmotes;\n  byChannels: Record<string, BttvChannelEmotes>;\n};\n\nexport const bttvEmotesInitialState: BttvEmotesState = {\n  global: {\n    ...initialFetchFlags,\n    items: [],\n  },\n  byChannels: {},\n};\n\nconst bttvChannelEmotesInitialState = {\n  ...initialFetchFlags,\n  items: [],\n};\n\nexport const bttvEmotesReducers = {\n  fetchBttvGlobalEmotesRequest: (state: ChatState) => {\n    setFetchFlags(state.bttvEmotes.global, 'request');\n  },\n\n  fetchBttvGlobalEmotesSuccess: (\n    state: ChatState,\n    { payload }: PayloadAction<api.BttvGlobalEmotesResponse>,\n  ): void => {\n    state.bttvEmotes.global.items = parseBttvGlobalEmotes(payload);\n\n    setFetchFlags(state.bttvEmotes.global, 'success');\n  },\n\n  fetchBttvGlobalEmotesFailure: (\n    state: ChatState,\n    { payload }: PayloadAction<string>,\n  ): void => {\n    setFetchFlags(state.bttvEmotes.global, 'failure', payload);\n  },\n\n  fetchBttvChannelEmotesRequest: (\n    state: ChatState,\n    { payload }: PayloadAction<{ channel: string }>,\n  ): void => {\n    const { channel } = payload;\n\n    if (!state.bttvEmotes.byChannels[channel]) {\n      state.bttvEmotes.byChannels[channel] = bttvChannelEmotesInitialState;\n    }\n\n    setFetchFlags(state.bttvEmotes.byChannels[channel], 'request');\n  },\n\n  fetchBttvChannelEmotesSuccess: (\n    state: ChatState,\n    {\n      payload,\n    }: PayloadAction<{ channel: string; data: api.BttvChannelEmotesResponse }>,\n  ): void => {\n    const { channel, data } = payload;\n\n    state.bttvEmotes.byChannels[channel].items = parseBttvChannelEmotes(data);\n\n    setFetchFlags(state.bttvEmotes.byChannels[channel], 'success');\n  },\n\n  fetchBttvChannelEmotesFailure: (\n    state: ChatState,\n    { payload }: PayloadAction<{ channel: string; error: string }>,\n  ): void => {\n    const { channel, error } = payload;\n\n    setFetchFlags(state.bttvEmotes.byChannels[channel], 'failure', error);\n  },\n};\n","/* eslint-disable no-param-reassign */\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport { FetchFlags, initialFetchFlags } from 'utils/constants';\nimport setFetchFlags from 'utils/setFetchFlags';\nimport { ChatState } from 'features/chat/slice';\nimport {\n  parseFfzGlobalEmotes,\n  parseFfzChannelEmotes,\n} from 'features/chat/utils/parseApiResponse';\n\ntype FfzEmotes = FetchFlags & {\n  items: api.FfzEmote[];\n};\n\nexport type FfzEmotesState = {\n  global: FfzEmotes;\n  byChannels: Record<string, FfzEmotes>;\n};\n\nexport const ffzEmotesInitialState: FfzEmotesState = {\n  global: {\n    ...initialFetchFlags,\n    items: [],\n  },\n  byChannels: {},\n};\n\nconst ffzChannelEmotesInitialState = {\n  ...initialFetchFlags,\n  items: [],\n};\n\nexport const ffzEmotesReducers = {\n  fetchFfzGlobalEmotesRequest: (state: ChatState) => {\n    setFetchFlags(state.ffzEmotes.global, 'request');\n  },\n\n  fetchFfzGlobalEmotesSuccess: (\n    state: ChatState,\n    { payload }: PayloadAction<api.FfzGlobalEmotesResponse>,\n  ): void => {\n    state.ffzEmotes.global.items = parseFfzGlobalEmotes(payload);\n\n    setFetchFlags(state.ffzEmotes.global, 'success');\n  },\n\n  fetchFfzGlobalEmotesFailure: (\n    state: ChatState,\n    { payload }: PayloadAction<string>,\n  ): void => {\n    setFetchFlags(state.ffzEmotes.global, 'failure', payload);\n  },\n\n  fetchFfzChannelEmotesRequest: (\n    state: ChatState,\n    { payload }: PayloadAction<{ channel: string }>,\n  ): void => {\n    const { channel } = payload;\n\n    if (!state.ffzEmotes.byChannels[channel]) {\n      state.ffzEmotes.byChannels[channel] = ffzChannelEmotesInitialState;\n    }\n\n    setFetchFlags(state.ffzEmotes.byChannels[channel], 'request');\n  },\n\n  fetchFfzChannelEmotesSuccess: (\n    state: ChatState,\n    {\n      payload,\n    }: PayloadAction<{ channel: string; data: api.FfzChannelEmotesResponse }>,\n  ): void => {\n    const { channel, data } = payload;\n\n    state.ffzEmotes.byChannels[channel].items = parseFfzChannelEmotes(data);\n\n    setFetchFlags(state.ffzEmotes.byChannels[channel], 'success');\n  },\n\n  fetchFfzChannelEmotesFailure: (\n    state: ChatState,\n    { payload }: PayloadAction<{ channel: string; error: string }>,\n  ): void => {\n    const { channel, error } = payload;\n\n    setFetchFlags(state.ffzEmotes.byChannels[channel], 'failure', error);\n  },\n};\n","/* eslint-disable no-param-reassign */\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport { FetchFlags, initialFetchFlags } from 'utils/constants';\nimport setFetchFlags from 'utils/setFetchFlags';\nimport { ChatState } from 'features/chat/slice';\nimport { parseBadges } from 'features/chat/utils/parseApiResponse';\n\ntype Badges = FetchFlags & {\n  items: Record<string, api.TwitchBadge>;\n};\n\nexport type BadgesState = {\n  global: Badges;\n  byChannels: Record<string, Badges>;\n};\n\nexport const badgesInitialState: BadgesState = {\n  global: {\n    ...initialFetchFlags,\n    items: {},\n  },\n  byChannels: {},\n};\n\nconst badgesChannelInitialState = {\n  ...initialFetchFlags,\n  items: {},\n};\n\nexport const badgesReducers = {\n  fetchGlobalBadgesRequest: (state: ChatState) => {\n    setFetchFlags(state.badges.global, 'request');\n  },\n\n  fetchGlobalBadgesSuccess: (\n    state: ChatState,\n    { payload }: PayloadAction<api.TwitchBadgesResponse>,\n  ): void => {\n    state.badges.global.items = parseBadges(payload);\n\n    setFetchFlags(state.badges.global, 'success');\n  },\n\n  fetchGlobalBadgesFailure: (\n    state: ChatState,\n    { payload }: PayloadAction<string>,\n  ): void => {\n    setFetchFlags(state.badges.global, 'failure', payload);\n  },\n\n  fetchChannelBadgesRequest: (\n    state: ChatState,\n    { payload }: PayloadAction<{ channel: string }>,\n  ): void => {\n    const { channel } = payload;\n\n    if (!state.badges.byChannels[channel]) {\n      state.badges.byChannels[channel] = badgesChannelInitialState;\n    }\n\n    setFetchFlags(state.badges.byChannels[channel], 'request');\n  },\n\n  fetchChannelBadgesSuccess: (\n    state: ChatState,\n    {\n      payload,\n    }: PayloadAction<{ channel: string; data: api.TwitchBadgesResponse }>,\n  ): void => {\n    const { channel, data } = payload;\n\n    state.badges.byChannels[channel].items = parseBadges(data);\n\n    setFetchFlags(state.badges.byChannels[channel], 'success');\n  },\n\n  fetchChannelBadgesFailure: (\n    state: ChatState,\n    { payload }: PayloadAction<{ channel: string; error: string }>,\n  ): void => {\n    const { channel, error } = payload;\n\n    setFetchFlags(state.badges.byChannels[channel], 'failure', error);\n  },\n};\n","/* eslint-disable no-param-reassign */\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport twitchIrc from 'twitch-simple-irc';\n\nimport { ChatState } from 'features/chat/slice';\n\ntype Params = {\n  room: twitchIrc.RoomStateTags | null;\n  user: twitchIrc.UserStateTags | null;\n};\n\nexport type ParamsState = {\n  global: twitchIrc.GlobalUserStateTags | null;\n  byChannels: Record<string, Params>;\n};\n\nexport const paramsInitialState: ParamsState = {\n  global: null,\n  byChannels: {},\n};\n\nconst channelParamsInitialState = {\n  room: null,\n  user: null,\n};\n\nexport const paramsReducers = {\n  updateGlobalUserParams: (\n    state: ChatState,\n    { payload }: PayloadAction<twitchIrc.GlobalUserStateEvent>,\n  ): void => {\n    state.params.global = payload.tags;\n  },\n\n  updateUserParams: (\n    state: ChatState,\n    { payload }: PayloadAction<twitchIrc.UserStateEvent>,\n  ): void => {\n    const { channel, tags } = payload;\n\n    if (!state.params.byChannels[channel]) {\n      state.params.byChannels[channel] = channelParamsInitialState;\n    }\n\n    state.params.byChannels[channel].user = tags;\n  },\n\n  updateRoomParams: (\n    state: ChatState,\n    { payload }: PayloadAction<twitchIrc.RoomStateEvent>,\n  ): void => {\n    const { channel, tags } = payload;\n\n    if (!state.params.byChannels[channel]) {\n      state.params.byChannels[channel] = channelParamsInitialState;\n    }\n\n    // TODO: merge tags\n    state.params.byChannels[channel].room = tags;\n  },\n};\n","/* eslint-disable no-param-reassign */\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport { FetchFlags, initialFetchFlags } from 'utils/constants';\nimport setFetchFlags from 'utils/setFetchFlags';\nimport { ChatState } from 'features/chat/slice';\nimport { parseBlockedUsers } from 'features/chat/utils/parseApiResponse';\n\nexport type BlockedUsersState = FetchFlags & {\n  items: string[];\n};\n\nexport const blockedUsersInitialState = {\n  ...initialFetchFlags,\n  items: [],\n};\n\nexport const blockedUsersReducers = {\n  fetchBlockedUsersRequest: (state: ChatState): void => {\n    setFetchFlags(state.blockedUsers, 'request');\n  },\n\n  fetchBlockedUsersSuccess: (\n    state: ChatState,\n    { payload }: PayloadAction<api.TwitchBlockedUsersResponse>,\n  ): void => {\n    state.blockedUsers.items = parseBlockedUsers(payload);\n\n    setFetchFlags(state.blockedUsers, 'success');\n  },\n\n  fetchBlockedUsersFailure: (\n    state: ChatState,\n    { payload }: PayloadAction<string>,\n  ): void => {\n    setFetchFlags(state.blockedUsers, 'failure', payload);\n  },\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport { AppThunk } from 'app/store';\nimport {\n  messagesInitialState,\n  messagesReducers,\n  MessagesState,\n  OwnMessage,\n} from 'features/chat/slice/messages';\nimport {\n  twitchEmotesInitialState,\n  twitchEmotesReducers,\n  TwitchEmotesState,\n} from 'features/chat/slice/twitchEmotes';\nimport {\n  bttvEmotesInitialState,\n  bttvEmotesReducers,\n  BttvEmotesState,\n} from 'features/chat/slice/bttvEmotes';\nimport {\n  ffzEmotesInitialState,\n  ffzEmotesReducers,\n  FfzEmotesState,\n} from 'features/chat/slice/ffzEmotes';\nimport {\n  badgesInitialState,\n  badgesReducers,\n  BadgesState,\n} from 'features/chat/slice/badges';\nimport {\n  paramsInitialState,\n  paramsReducers,\n  ParamsState,\n} from 'features/chat/slice/params';\nimport {\n  blockedUsersInitialState,\n  blockedUsersReducers,\n  BlockedUsersState,\n} from 'features/chat/slice/blockedUsers';\nimport { normalizeOwnMessage } from 'features/chat/utils/normalizeMessages';\n\nexport type ChatState = {\n  isConnected: boolean;\n  currentChannel: string;\n  messages: MessagesState;\n  twitchEmotes: TwitchEmotesState;\n  bttvEmotes: BttvEmotesState;\n  ffzEmotes: FfzEmotesState;\n  badges: BadgesState;\n  params: ParamsState;\n  blockedUsers: BlockedUsersState;\n};\n\nconst initialState: ChatState = {\n  isConnected: false,\n  currentChannel: '',\n  messages: messagesInitialState,\n  twitchEmotes: twitchEmotesInitialState,\n  bttvEmotes: bttvEmotesInitialState,\n  ffzEmotes: ffzEmotesInitialState,\n  badges: badgesInitialState,\n  params: paramsInitialState,\n  blockedUsers: blockedUsersInitialState,\n};\n\nconst chat = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    updateIsConnected: (state, { payload }: PayloadAction<boolean>): void => {\n      state.isConnected = payload;\n    },\n    updateCurrentChannel: (state, { payload }: PayloadAction<string>): void => {\n      state.currentChannel = payload;\n    },\n\n    ...messagesReducers,\n    ...twitchEmotesReducers,\n    ...bttvEmotesReducers,\n    ...ffzEmotesReducers,\n    ...badgesReducers,\n    ...paramsReducers,\n    ...blockedUsersReducers,\n  },\n});\n\nexport const {\n  updateIsConnected,\n  updateCurrentChannel,\n\n  // messages\n  clearChat,\n  addMessage,\n  addChatHistory,\n\n  // params\n  updateGlobalUserParams,\n  updateUserParams,\n  updateRoomParams,\n} = chat.actions;\n\nexport default chat.reducer;\n\nconst {\n  // messages\n  fetchChatHistoryRequest,\n  fetchChatHistorySuccess,\n  fetchChatHistoryFailure,\n\n  // twitch emotes\n  fetchTwitchEmotesRequest,\n  fetchTwitchEmotesSuccess,\n  fetchTwitchEmotesFailure,\n\n  // bttv emotes\n  fetchBttvGlobalEmotesRequest,\n  fetchBttvGlobalEmotesSuccess,\n  fetchBttvGlobalEmotesFailure,\n  fetchBttvChannelEmotesRequest,\n  fetchBttvChannelEmotesSuccess,\n  fetchBttvChannelEmotesFailure,\n\n  // ffz emotes\n  fetchFfzGlobalEmotesRequest,\n  fetchFfzGlobalEmotesSuccess,\n  fetchFfzGlobalEmotesFailure,\n  fetchFfzChannelEmotesRequest,\n  fetchFfzChannelEmotesSuccess,\n  fetchFfzChannelEmotesFailure,\n\n  // badges\n  fetchGlobalBadgesRequest,\n  fetchGlobalBadgesSuccess,\n  fetchGlobalBadgesFailure,\n  fetchChannelBadgesRequest,\n  fetchChannelBadgesSuccess,\n  fetchChannelBadgesFailure,\n\n  // blocked users\n  fetchBlockedUsersRequest,\n  fetchBlockedUsersSuccess,\n  fetchBlockedUsersFailure,\n} = chat.actions;\n\nexport const fetchChatHistory = (channel: string): AppThunk => async (\n  dispatch,\n) => {\n  try {\n    dispatch(fetchChatHistoryRequest({ channel }));\n    const data = await api.fetchChatHistory(channel);\n    dispatch(fetchChatHistorySuccess({ channel, data }));\n  } catch (error) {\n    dispatch(fetchChatHistoryFailure({ channel, error }));\n  }\n};\n\nexport const fetchTwitchEmotes = (userId: string): AppThunk => async (\n  dispatch,\n) => {\n  try {\n    dispatch(fetchTwitchEmotesRequest());\n    const data = await api.fetchTwitchEmotes(userId);\n    dispatch(fetchTwitchEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchTwitchEmotesFailure(error));\n  }\n};\n\nexport const fetchBttvGlobalEmotes = (): AppThunk => async (dispatch) => {\n  try {\n    dispatch(fetchBttvGlobalEmotesRequest());\n    const data = await api.fetchBttvGlobalEmotes();\n    dispatch(fetchBttvGlobalEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchBttvGlobalEmotesFailure(error));\n  }\n};\n\nexport const fetchBttvChannelEmotes = (\n  channel: string,\n  channelId: string,\n): AppThunk => async (dispatch) => {\n  try {\n    dispatch(fetchBttvChannelEmotesRequest({ channel }));\n    const data = await api.fetchBttvChannelEmotes(channelId);\n    dispatch(fetchBttvChannelEmotesSuccess({ channel, data }));\n  } catch (error) {\n    dispatch(fetchBttvChannelEmotesFailure({ channel, error }));\n  }\n};\n\nexport const fetchFfzGlobalEmotes = (): AppThunk => async (dispatch) => {\n  try {\n    dispatch(fetchFfzGlobalEmotesRequest());\n    const data = await api.fetchFfzGlobalEmotes();\n    dispatch(fetchFfzGlobalEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchFfzGlobalEmotesFailure(error));\n  }\n};\n\nexport const fetchFfzChannelEmotes = (\n  channel: string,\n  channelId: string,\n): AppThunk => async (dispatch) => {\n  try {\n    dispatch(fetchFfzChannelEmotesRequest({ channel }));\n    const data = await api.fetchFfzChannelEmotes(channelId);\n    dispatch(fetchFfzChannelEmotesSuccess({ channel, data }));\n  } catch (error) {\n    dispatch(fetchFfzChannelEmotesFailure({ channel, error }));\n  }\n};\n\nexport const fetchGlobalBadges = (): AppThunk => async (dispatch) => {\n  try {\n    dispatch(fetchGlobalBadgesRequest());\n    const data = await api.fetchGlobalBadges();\n    dispatch(fetchGlobalBadgesSuccess(data));\n  } catch (error) {\n    dispatch(fetchGlobalBadgesFailure(error));\n  }\n};\n\nexport const fetchChannelBadges = (\n  channel: string,\n  channelId: string,\n): AppThunk => async (dispatch) => {\n  try {\n    dispatch(fetchChannelBadgesRequest({ channel }));\n    const data = await api.fetchChannelBadges(channelId);\n    dispatch(fetchChannelBadgesSuccess({ channel, data }));\n  } catch (error) {\n    dispatch(fetchChannelBadgesFailure({ channel, error }));\n  }\n};\n\nexport const fetchBlockedUsers = (userId: string): AppThunk => async (\n  dispatch,\n) => {\n  try {\n    dispatch(fetchBlockedUsersRequest());\n    const data = await api.fetchBlockedUsers(userId);\n    dispatch(fetchBlockedUsersSuccess(data));\n  } catch (error) {\n    dispatch(fetchBlockedUsersFailure(error));\n  }\n};\n\nexport const addOwnMessage = (ownMessage: OwnMessage): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  const state = getState();\n  const message = normalizeOwnMessage(ownMessage, state);\n\n  dispatch(addMessage({ type: 'own-message', message }));\n};\n","import tls from 'tls';\nimport { Socket } from 'net';\nimport { EventEmitter } from 'events';\nimport * as tekko from 'tekko';\n\nimport {\n  TekkoMessage,\n  MessageEvent,\n  GlobalUserStateEvent,\n  GlobalUserStateTags,\n  UserStateEvent,\n  UserStateTags,\n  RoomStateEvent,\n  RoomStateTags,\n  ClearChatEvent,\n  ClearMessageEvent,\n  HostTargetEvent,\n  NoticeEvent,\n  UserNoticeEvent,\n  WhisperEvent,\n  JoinEvent,\n  PartEvent,\n  PingEvent,\n} from './types';\nimport { isNode, getChannelFromMessage, getRandomUsername } from './utils';\nimport {\n  normalizeChatMessage,\n  normalizeState,\n  normalizeCommand,\n  normalizeWhisper,\n  normalizeGlobalUserState,\n} from './normalize';\n\nexport enum Commands {\n  REPLY001 = '001',\n  PING = 'PING',\n  PONG = 'PONG',\n  JOIN = 'JOIN',\n  PART = 'PART',\n  PRIVMSG = 'PRIVMSG',\n  NOTICE = 'NOTICE',\n  USERNOTICE = 'USERNOTICE',\n  GLOBALUSERSTATE = 'GLOBALUSERSTATE',\n  USERSTATE = 'USERSTATE',\n  ROOMSTATE = 'ROOMSTATE',\n  CLEARCHAT = 'CLEARCHAT',\n  CLEARMSG = 'CLEARMSG',\n  HOSTTARGET = 'HOSTTARGET',\n  WHISPER = 'WHISPER',\n}\n\ninterface ClientOptions {\n  name?: string;\n  auth?: string;\n  secure?: boolean;\n}\n\ninterface Channels {\n  [channel: string]: {\n    userState: UserStateTags;\n    roomState: RoomStateTags;\n  };\n}\n\ntype Listener<T> = (data: T) => void;\n\nexport interface Client {\n  on(event: 'connect', listener: () => void): this;\n  on(event: 'disconnect', listener: (error?: Error) => void): this;\n  on(event: 'register', listener: () => void): this;\n  on(event: 'message', listener: Listener<MessageEvent>): this;\n  on(event: 'notice', listener: Listener<NoticeEvent>): this;\n  on(event: 'usernotice', listener: Listener<UserNoticeEvent>): this;\n  on(event: 'whisper', listener: Listener<WhisperEvent>): this;\n  on(event: 'globaluserstate', listener: Listener<GlobalUserStateEvent>): this;\n  on(event: 'userstate', listener: Listener<UserStateEvent>): this;\n  on(event: 'roomstate', listener: Listener<RoomStateEvent>): this;\n  on(event: 'join', listener: Listener<JoinEvent>): this;\n  on(event: 'part', listener: Listener<PartEvent>): this;\n  on(event: 'clearchat', listener: Listener<ClearChatEvent>): this;\n  on(event: 'clearmessage', listener: Listener<ClearMessageEvent>): this;\n  on(event: 'hosttarget', listener: Listener<HostTargetEvent>): this;\n  on(event: 'ping', listener: Listener<PingEvent>): this;\n  on(event: 'error', listener: (error: Error) => void): this;\n\n  emit(event: 'connect'): boolean;\n  emit(event: 'disconnect', error?: Error): boolean;\n  emit(event: 'register'): boolean;\n  emit(event: 'message', data: MessageEvent): boolean;\n  emit(event: 'notice', data: NoticeEvent): boolean;\n  emit(event: 'usernotice', data: UserNoticeEvent): boolean;\n  emit(event: 'whisper', data: WhisperEvent): boolean;\n  emit(event: 'globaluserstate', data: GlobalUserStateEvent): boolean;\n  emit(event: 'userstate', data: UserStateEvent): boolean;\n  emit(event: 'roomstate', data: RoomStateEvent): boolean;\n  emit(event: 'join', data: JoinEvent): boolean;\n  emit(event: 'part', data: PartEvent): boolean;\n  emit(event: 'clearchat', data: ClearChatEvent): boolean;\n  emit(event: 'clearmessage', data: ClearMessageEvent): boolean;\n  emit(event: 'hosttarget', data: HostTargetEvent): boolean;\n  emit(event: 'ping', data: PingEvent): boolean;\n  emit(event: 'error', error: Error): boolean;\n}\n\nexport class Client extends EventEmitter {\n  socket: WebSocket | Socket | null = null;\n\n  options: ClientOptions;\n\n  globalUserState: GlobalUserStateTags | null = null;\n\n  channels: Channels = {};\n\n  private _connected: boolean = false;\n\n  private _connecting: boolean = false;\n\n  private _registered: boolean = false;\n\n  constructor(options: ClientOptions | null | undefined = {}) {\n    super();\n    this.options = { secure: true, ...options };\n  }\n\n  async connect(): Promise<void> {\n    const connection = isNode\n      ? this._connectInNode()\n      : this._connectInBrowser();\n\n    await connection;\n\n    return this._register();\n  }\n\n  disconnect(): void {\n    if (!this._connected) return;\n\n    if (isNode) {\n      (this.socket as Socket).destroy();\n    } else {\n      (this.socket as WebSocket).close();\n    }\n\n    this.socket = null;\n    this._connected = false;\n    this._connecting = false;\n    this._registered = false;\n\n    this.emit('disconnect');\n  }\n\n  receiveRaw(rawData: string) {\n    const data = rawData.trim().split('\\r\\n');\n\n    data.forEach((line) => this._handleMessage(line));\n  }\n\n  sendRaw(message: string): boolean {\n    if (this.socket === null || !message) {\n      return false;\n    }\n\n    if (isNode) {\n      (this.socket as Socket).write(message);\n    } else {\n      (this.socket as WebSocket).send(message);\n    }\n\n    return true;\n  }\n\n  say(channel: string, message: string): boolean {\n    const ircMessage = tekko.format({\n      command: Commands.PRIVMSG,\n      middle: [`#${channel}`],\n      trailing: message,\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  sendCommand(\n    channel: string,\n    command: string,\n    params: string | Array<string> = '',\n  ): boolean {\n    const commandParams = Array.isArray(params) ? params.join(' ') : params;\n    const ircMessage = tekko.format({\n      command: Commands.PRIVMSG,\n      middle: [`#${channel}`],\n      trailing: `/${command} ${commandParams}`,\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  join(channel: string): boolean {\n    if (!this._registered) return false;\n\n    const ircMessage = tekko.format({\n      command: Commands.JOIN,\n      middle: [`#${channel}`],\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  part(channel: string): boolean {\n    if (!this._registered) return false;\n\n    const ircMessage = tekko.format({\n      command: Commands.PART,\n      middle: [`#${channel}`],\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  _handleMessage(raw: string) {\n    const data: TekkoMessage = tekko.parse(raw) as TekkoMessage;\n    data.raw = raw;\n    const { command } = data;\n\n    if (command === Commands.PING) {\n      this.sendRaw(`${Commands.PONG} :tmi.twitch.tv`);\n      this.emit('ping', { raw });\n\n      return;\n    }\n\n    if (command === Commands.REPLY001) {\n      this.options.name = data.middle[0];\n      this._registered = true;\n\n      this.emit('register');\n\n      return;\n    }\n\n    if (command === Commands.PRIVMSG) {\n      const eventData = normalizeChatMessage(data);\n\n      this.emit('message', eventData);\n\n      return;\n    }\n\n    if (command === Commands.USERSTATE) {\n      const channel = getChannelFromMessage(data);\n      const eventData = normalizeState(data) as UserStateEvent;\n\n      this._updateUserState(channel, eventData.tags);\n      this.emit('userstate', eventData);\n\n      return;\n    }\n\n    if (command === Commands.JOIN) {\n      const channel = getChannelFromMessage(data);\n      const eventData = { channel } as JoinEvent;\n\n      this.emit('join', eventData);\n\n      return;\n    }\n\n    if (command === Commands.PART) {\n      const channel = getChannelFromMessage(data);\n      const eventData = { channel } as PartEvent;\n\n      this.emit('part', eventData);\n\n      return;\n    }\n\n    if (command === Commands.ROOMSTATE) {\n      const channel = getChannelFromMessage(data);\n      const eventData = normalizeState(data) as RoomStateEvent;\n\n      this._updateRoomState(channel, eventData.tags);\n      this.emit('roomstate', eventData);\n\n      return;\n    }\n\n    if (command === Commands.NOTICE) {\n      const eventData = normalizeCommand(data) as NoticeEvent;\n\n      this.emit('notice', eventData);\n\n      return;\n    }\n\n    if (command === Commands.USERNOTICE) {\n      const eventData = (normalizeCommand(data) as unknown) as UserNoticeEvent;\n\n      this.emit('usernotice', eventData);\n\n      return;\n    }\n\n    if (command === Commands.CLEARCHAT) {\n      const eventData = normalizeCommand(data) as ClearChatEvent;\n\n      this.emit('clearchat', eventData);\n\n      return;\n    }\n\n    if (command === Commands.CLEARMSG) {\n      const eventData = normalizeCommand(data) as ClearMessageEvent;\n\n      this.emit('clearmessage', eventData);\n\n      return;\n    }\n\n    if (command === Commands.HOSTTARGET) {\n      const eventData = normalizeCommand(data) as HostTargetEvent;\n\n      this.emit('hosttarget', eventData);\n\n      return;\n    }\n\n    if (command === Commands.WHISPER) {\n      const eventData = normalizeWhisper(data);\n\n      this.emit('whisper', eventData);\n\n      return;\n    }\n\n    if (command === Commands.GLOBALUSERSTATE) {\n      const eventData = normalizeGlobalUserState(data);\n\n      this._updateGlobalUserState(eventData.tags);\n      this.emit('globaluserstate', eventData);\n\n      return;\n    }\n  }\n\n  _connectInNode(): Promise<void> {\n    const host = 'irc.chat.twitch.tv';\n    const port = this.options.secure ? 6697 : 6667;\n\n    return new Promise<void>((resolve, reject) => {\n      this._connecting = true;\n\n      const handleConnect = () => {\n        this._connecting = false;\n        this._connected = true;\n        this.emit('connect');\n        resolve();\n      };\n\n      if (this.options.secure) {\n        this.socket = tls.connect(port, host, {}, handleConnect);\n      } else {\n        this.socket = new Socket();\n        this.socket.connect(port, host, handleConnect);\n      }\n\n      this.socket.on('error', (error: Error) => {\n        this._connected = false;\n        this._connecting = false;\n        this.emit('disconnect', error);\n        reject(error);\n      });\n      this.socket.on('data', (data: Buffer) => {\n        this.receiveRaw(data.toString());\n      });\n      this.socket.on('close', () => {\n        this._connected = false;\n        this._connecting = false;\n        this._registered = false;\n        this.emit('disconnect');\n      });\n    });\n  }\n\n  _connectInBrowser(): Promise<void> {\n    const url = this.options.secure\n      ? 'wss://irc-ws.chat.twitch.tv:443'\n      : 'ws://irc-ws.chat.twitch.tv:80';\n\n    return new Promise<void>((resolve, reject) => {\n      this._connecting = true;\n      this.socket = new WebSocket(url);\n\n      this.socket.onopen = () => {\n        this._connected = true;\n        this._connecting = false;\n        this.emit('connect');\n        resolve();\n      };\n      this.socket.onmessage = ({ data }) => this.receiveRaw(data);\n      this.socket.onerror = () => {};\n      this.socket.onclose = ({ wasClean, code, reason }) => {\n        this.socket = null;\n        this._connected = false;\n        this._connecting = false;\n        this._registered = false;\n\n        if (wasClean) {\n          this.emit('disconnect');\n        } else {\n          const error = new Error(`[${code}] ${reason}`);\n          this.emit('disconnect', error);\n          reject(error);\n        }\n      };\n    });\n  }\n\n  _register(): Promise<void> {\n    if (!this._connected) return Promise.reject();\n    if (this._registered) return Promise.resolve();\n\n    const { name, auth } = this.options;\n\n    const nick = name || getRandomUsername();\n    const pass = auth ? `oauth:${auth}` : 'SCHMOOPIIE';\n\n    this.sendRaw('CAP REQ :twitch.tv/tags twitch.tv/commands');\n    this.sendRaw(`PASS ${pass}`);\n    this.sendRaw(`NICK ${nick}`);\n\n    return new Promise<void>((resolve, reject) => {\n      const handleRegister = () => {\n        resolve();\n        this.off('register', handleRegister);\n      };\n\n      this.on('register', handleRegister);\n\n      setTimeout(() => {\n        reject();\n        this.off('register', handleRegister);\n      }, 10000);\n    });\n  }\n\n  _updateGlobalUserState(globalUserState: GlobalUserStateTags) {\n    this.globalUserState = { ...this.globalUserState, ...globalUserState };\n  }\n\n  _updateUserState(channel: string, userState: UserStateTags) {\n    this.channels = {\n      ...this.channels,\n      [channel]: {\n        ...this.channels[channel],\n        userState,\n      },\n    };\n  }\n\n  _updateRoomState(channel: string, roomState: RoomStateTags) {\n    this.channels = {\n      ...this.channels,\n      [channel]: {\n        ...this.channels[channel],\n        roomState,\n      },\n    };\n  }\n\n  get connected() {\n    return this._connected;\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get registered() {\n    return this._registered;\n  }\n}\n\nexport default Client;\n","import tekko from 'tekko';\n\nexport const getRandomUsername = (): string => {\n  const randomSuffix = Math.floor(Math.random() * 100000)\n    .toString()\n    .padStart(5, '0');\n  return `justinfan${randomSuffix}`;\n};\n\nexport const getIsAction = (message: string): boolean =>\n  message.startsWith('\\u0001ACTION ') && message.endsWith('\\u0001');\n\nexport const normalizeActionMessage = (message: string): string =>\n  message.slice(8, -1);\n\nexport const getChannelFromMessage = (message: tekko.Message): string =>\n  message.middle[0].slice(1);\n\nexport const isNode = !!(\n  typeof process !== 'undefined' &&\n  process.versions &&\n  process.versions.node\n);\n","import tekko from 'tekko';\nimport { Emotes, BadgeInfo, Badges, TagType, Tags } from './types';\n\nconst booleanMessageTags = [\n  'mod',\n  'emote-only',\n  'r9k',\n  'rituals',\n  'subs-only',\n  'msg-param-should-share-streak',\n];\n\nconst numberMessageTags = [\n  'tmi-sent-ts',\n  'bits',\n  'ban-duration',\n  'msg-param-cumulative-months',\n  'msg-param-months',\n  'msg-param-promo-gift-total',\n  'msg-param-streak-months',\n  'msg-param-viewerCount',\n  'msg-param-threshold',\n];\n\nconst tagNamesMap: { [key: string]: string } = {\n  'badge-info': 'badgeInfo',\n  'display-name': 'displayName',\n  'emote-sets': 'emoteSets',\n  'room-id': 'roomId',\n  'tmi-sent-ts': 'tmiSentTs',\n  'user-id': 'userId',\n  'target-msg-id': 'targetMsgId',\n  'target-user-id': 'targetUserId',\n  'msg-id': 'msgId',\n  'system-msg': 'systemMsg',\n  'emote-only': 'emoteOnly',\n  'followers-only': 'followersOnly',\n  'subs-only': 'subsOnly',\n  'ban-duration': 'banDuration',\n  'message-id': 'messageId',\n  'thread-id': 'threadId',\n  'msg-param-cumulative-months': 'msgParamCumulativeMonths',\n  'msg-param-displayName': 'msgParamDisplayName',\n  'msg-param-login': 'msgParamLogin',\n  'msg-param-months': 'msgParamMonths',\n  'msg-param-promo-gift-total': 'msgParamPromoGiftTotal',\n  'msg-param-promo-name': 'msgParamPromoName',\n  'msg-param-recipient-display-name': 'msgParamRecipientDisplayName',\n  'msg-param-recipient-id': 'msgParamRecipientId',\n  'msg-param-recipient-user-name': 'msgParamRecipientUserName',\n  'msg-param-sender-login': 'msgParamSenderLogin',\n  'msg-param-sender-name': 'msgParamSenderName',\n  'msg-param-should-share-streak': 'msgParamShouldShareStreak',\n  'msg-param-streak-months': 'msgParamStreakMonths',\n  'msg-param-sub-plan': 'msgParamSubPlan',\n  'msg-param-sub-plan-name': 'msgParamSubPlanName',\n  'msg-param-viewerCount': 'msgParamViewerCount',\n  'msg-param-ritual-name': 'msgParamRitualName',\n  'msg-param-threshold': 'msgParamThreshold',\n};\n\nconst depricatedMessageTags = ['subscriber', 'turbo', 'user-type'];\n\nconst parseMessageEmotes = (raw: string = ''): Emotes => {\n  if (!raw) return {};\n\n  return raw.split('/').reduce((acc, emote) => {\n    const [id, indexes] = emote.split(':');\n\n    return {\n      ...acc,\n      [id]: indexes.split(',').map((index) => {\n        const [start, end] = index.split('-');\n\n        return {\n          start: Number.parseInt(start, 10),\n          end: Number.parseInt(end, 10),\n        };\n      }),\n    };\n  }, {});\n};\n\nconst parseBadges = (data: string = ''): BadgeInfo | Badges => {\n  if (!data) return {};\n\n  return data.split(',').reduce((acc, badge) => {\n    const [name, value] = badge.split('/');\n\n    return {\n      ...acc,\n      [name]: value,\n    };\n  }, {});\n};\n\nconst normalizeTagValue = (name: string, value: string): TagType => {\n  if (name === 'emotes') return parseMessageEmotes(value);\n  if (name === 'badges') return parseBadges(value);\n  if (name === 'badge-info') return parseBadges(value);\n\n  if (name === 'followers-only') {\n    let followersOnly: boolean | number = false;\n    if (value === '-1') {\n      followersOnly = false;\n    } else if (value === '0') {\n      followersOnly = true;\n    } else if (typeof value === 'string') {\n      followersOnly = parseInt(value, 10);\n    }\n    return followersOnly;\n  }\n\n  if (name === 'slow') {\n    let slow: boolean | number = false;\n    if (value === '0') {\n      slow = false;\n    } else if (typeof value === 'string') {\n      slow = parseInt(value, 10);\n    }\n    return slow;\n  }\n\n  if (booleanMessageTags.includes(name)) return value === '1';\n  if (numberMessageTags.includes(name)) return parseInt(value, 10);\n\n  if (typeof value === 'string') {\n    return value.replace('\\\\s', ' ');\n  }\n\n  return value;\n};\n\nexport const parseMessageTags = (data?: tekko.MessageTags): Tags => {\n  if (!data) {\n    return {};\n  }\n\n  return Object.entries(data).reduce((acc, [key, value]) => {\n    if (depricatedMessageTags.includes(key)) {\n      return acc;\n    }\n\n    const newKey = tagNamesMap[key] || key;\n\n    return {\n      ...acc,\n      [newKey]: normalizeTagValue(key, value as string),\n    };\n  }, {});\n};\n","import tekko from 'tekko';\n\nimport {\n  TekkoMessage,\n  GlobalUserStateEvent,\n  GlobalUserStateTags,\n  MessageEvent,\n  MessageTags,\n  WhisperEvent,\n  WhisperTags,\n} from './types';\nimport {\n  getIsAction,\n  normalizeActionMessage,\n  getChannelFromMessage,\n} from './utils';\nimport { parseMessageTags } from './parse';\n\nexport const normalizeChatMessage = (data: TekkoMessage): MessageEvent => {\n  const { raw, trailing, tags, prefix } = data;\n  const { name } = prefix as tekko.MessagePrefix;\n  const isAction = getIsAction(trailing);\n\n  return {\n    raw,\n    message: isAction ? normalizeActionMessage(trailing) : trailing,\n    channel: getChannelFromMessage(data),\n    user: name,\n    get tags() {\n      return (parseMessageTags(tags) as unknown) as MessageTags;\n    },\n    isAction,\n  };\n};\n\nexport const normalizeGlobalUserState = ({\n  raw,\n  tags,\n}: TekkoMessage): GlobalUserStateEvent => ({\n  raw,\n  get tags() {\n    return parseMessageTags(tags) as GlobalUserStateTags;\n  },\n});\n\nexport const normalizeState = (data: TekkoMessage) => {\n  const { raw, tags } = data;\n\n  return {\n    raw,\n    channel: getChannelFromMessage(data),\n    get tags() {\n      return parseMessageTags(tags);\n    },\n  };\n};\n\nexport const normalizeCommand = (data: TekkoMessage) => {\n  const { raw, trailing, tags } = data;\n\n  return {\n    raw,\n    message: trailing,\n    channel: getChannelFromMessage(data),\n    get tags() {\n      return parseMessageTags(tags);\n    },\n  };\n};\n\nexport const normalizeWhisper = ({\n  raw,\n  trailing,\n  tags,\n  prefix,\n  middle: [channel],\n}: TekkoMessage): WhisperEvent => {\n  const { name } = prefix as tekko.MessagePrefix;\n\n  return {\n    raw,\n    message: trailing,\n    channel,\n    user: name,\n    get tags() {\n      return (parseMessageTags(tags) as unknown) as WhisperTags;\n    },\n  };\n};\n","import tekko from 'tekko';\n\nexport interface TekkoMessage extends tekko.Message {\n  raw: string;\n}\n\nexport interface Emotes {\n  [emoteId: string]: Array<{ start: number; end: number }>;\n}\n\nexport interface BadgeInfo {\n  /**\n   * The exact number of months the user has been a subscriber.\n   */\n  subscriber?: number;\n}\n\nexport interface Badges {\n  admin?: string;\n  bits?: string;\n  broadcaster?: string;\n  global_mod?: string;\n  moderator?: string;\n  subscriber?: string;\n  staff?: string;\n  turbo?: string;\n}\n\nexport type TagType = string | boolean | number | Emotes | BadgeInfo | Badges;\n\nexport interface Tags {\n  [key: string]: TagType;\n}\n\ninterface ATags {\n  /**\n   * Metadata related to the chat badges in the `badges` tag.\n   */\n  badgeInfo: BadgeInfo;\n\n  /**\n   * List of chat badges and the version of each badge.\n   * Many badges have only 1 version, but some badges have different versions (images), depending on how long you hold the badge status; e.g., `subscriber`.\n   */\n  badges: Badges;\n\n  /**\n   * Hexadecimal RGB color code; the empty string if it is never set.\n   */\n  color: string;\n\n  /**\n   * The user’s display name, escaped as described in the IRCv3 spec. This is empty if it is never set.\n   */\n  displayName: string;\n\n  /**\n   * Your emote set, a comma-separated list of emote sets.\n   */\n  emoteSets: string;\n\n  /**\n   * Information to replace text in the message with emote images. This can be empty.\n   */\n  emotes: Emotes;\n\n  /**\n   * A unique ID for the message.\n   */\n  id: string;\n\n  /**\n   * `true` if the user has a moderator badge; otherwise, `false`.\n   */\n  mod: boolean;\n\n  /**\n   * The channel ID.\n   */\n  roomId: string;\n\n  /**\n   * Timestamp when the server received the message.\n   */\n  tmiSentTs: number;\n\n  /**\n   * The user’s ID.\n   */\n  userId: string;\n}\n\nexport interface MessageTags\n  extends Pick<\n    ATags,\n    | 'badgeInfo'\n    | 'badges'\n    | 'color'\n    | 'displayName'\n    | 'emotes'\n    | 'id'\n    | 'mod'\n    | 'roomId'\n    | 'tmiSentTs'\n    | 'userId'\n  > {\n  /**\n   * (Sent only for Bits messages) The amount of cheer/Bits employed by the user.\n   */\n  bits?: number;\n}\n\n/**\n * Sends a message to a channel.\n */\nexport interface MessageEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  user: string;\n  tags: MessageTags;\n  isAction: boolean;\n}\n\nexport type GlobalUserStateTags = Pick<\n  ATags,\n  'badgeInfo' | 'badges' | 'color' | 'displayName' | 'emoteSets' | 'userId'\n>;\n\n/**\n * On successful login, provides data about the current logged-in user through IRC tags.\n * It is sent after successfully authenticating (sending a PASS/NICK command).\n */\nexport interface GlobalUserStateEvent {\n  raw: string;\n  tags: GlobalUserStateTags;\n}\n\nexport type UserStateTags = Pick<\n  ATags,\n  'badgeInfo' | 'badges' | 'color' | 'displayName' | 'emoteSets' | 'mod'\n>;\n\n/**\n * Sends user-state data when a user joins a channel or sends a PRIVMSG to a channel.\n */\nexport interface UserStateEvent {\n  raw: string;\n  channel: string;\n  tags: UserStateTags;\n}\n\nexport interface RoomStateTags extends Pick<ATags, 'roomId'> {\n  /**\n   * Emote-only mode. If enabled, only emotes are allowed in chat.\n   */\n  emoteOnly?: boolean;\n\n  /**\n   * Followers-only mode. If enabled, controls which followers can chat.\n   * Valid values:\n   * -1 (disabled),\n   * false (all followers can chat),\n   * non-negative integer (only users following for at least the specified number of minutes can chat).\n   */\n  followersOnly?: boolean | number;\n\n  /**\n   * R9K mode. If enabled, messages with more than 9 characters must be unique.\n   */\n  r9k?: boolean;\n\n  /**\n   * (Not documented)\n   */\n  rituals?: boolean;\n\n  /**\n   * The number of seconds a chatter without moderator privileges must wait between sending messages.\n   */\n  slow?: boolean | number;\n\n  /**\n   * Subscribers-only mode. If enabled, only subscribers and moderators can chat.\n   */\n  subsOnly?: boolean;\n}\n\n/**\n * Sends room-state data when a user joins a channel or a room setting is changed.\n * For a join, the message contains all chat-room settings.\n * For changes, only the relevant tag is sent.\n */\nexport interface RoomStateEvent {\n  raw: string;\n  channel: string;\n  tags: RoomStateTags;\n}\n\n/**\n * Purges all chat messages in a channel, or purges chat messages from a specific user (typically after a timeout or ban).\n */\nexport interface ClearChatEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {\n    /**\n     * Duration of the timeout, in seconds. If omitted, the ban is permanent.\n     */\n    banDuration?: number;\n\n    /**\n     * (Not documented)\n     */\n    roomId: string;\n\n    /**\n     * (Not documented)\n     */\n    targetUserId?: string;\n\n    /**\n     * (Not documented)\n     */\n    tmiSentTs: number;\n  };\n}\n\n/**\n * Removes a single message from a channel. This is triggered by the `/delete <targetMsgId>` command on IRC.\n */\nexport interface ClearMessageEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {\n    /**\n     * Name of the user who sent the message.\n     */\n    login: string;\n\n    /**\n     * UUID of the message.\n     */\n    targetMsgId: string;\n\n    /**\n     * (Not documented)\n     */\n    tmiSentTs: number;\n  };\n}\n\n/**\n * Channel starts or stops host mode.\n */\nexport interface HostTargetEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {};\n}\n\n/**\n * General notices from the server.\n */\nexport interface NoticeEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {\n    /**\n     * A message ID string. Can be used for i18ln.\n     * Valid values: see https://dev.twitch.tv/docs/irc/msg-id\n     */\n    msgId: string;\n  };\n}\n\nexport enum UserNoticeType {\n  sub = 'sub',\n  resub = 'resub',\n  subgift = 'subgift',\n  anonsubgift = 'anonsubgift',\n  submysterygift = 'submysterygift',\n  giftpaidupgrade = 'giftpaidupgrade',\n  rewardgift = 'rewardgift',\n  anongiftpaidupgrade = 'anongiftpaidupgrade',\n  raid = 'raid',\n  unraid = 'unraid',\n  ritual = 'ritual',\n  bitsbadgetier = 'bitsbadgetier',\n}\n\ninterface AUserNoticeTags {\n  /**\n   * (Sent only on sub, resub) The total number of months the user has subscribed.\n   * This is the same as msg-param-months but sent for different types of user notices.\n   */\n  msgParamCumulativeMonths: number;\n\n  /**\n   * (Sent only on raid) The display name of the source user raiding this channel.\n   */\n  msgParamDisplayName: string;\n\n  /**\n   * (Sent on only raid) The name of the source user raiding this channel.\n   */\n  msgParamLogin: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The total number of months the user has subscribed.\n   * This is the same as msg-param-cumulative-months but sent for different types of user notices.\n   */\n  msgParamMonths: number;\n\n  /**\n   * (Sent only on anongiftpaidupgrade, giftpaidupgrade) The number of gifts the gifter has given during the promo indicated by msg-param-promo-name.\n   */\n  msgParamPromoGiftTotal: number;\n\n  /**\n   * (Sent only on anongiftpaidupgrade, giftpaidupgrade) The subscriptions promo, if any, that is ongoing; e.g. Subtember 2018.\n   */\n  msgParamPromoName: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The display name of the subscription gift recipient.\n   */\n  msgParamRecipientDisplayName: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The user ID of the subscription gift recipient.\n   */\n  msgParamRecipientId: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The user name of the subscription gift recipient.\n   */\n  msgParamRecipientUserName: string;\n\n  /**\n   * (Sent only on giftpaidupgrade) The login of the user who gifted the subscription.\n   */\n  msgParamSenderLogin: string;\n\n  /**\n   * (Sent only on giftpaidupgrade) The display name of the user who gifted the subscription.\n   */\n  msgParamSenderName: string;\n\n  /**\n   * (Sent only on sub, resub) Boolean indicating whether users want their streaks to be shared.\n   */\n  msgParamShouldShareStreak: boolean;\n\n  /**\n   * (Sent only on sub, resub) The number of consecutive months the user has subscribed. This is 0 if msg-param-should-share-streak is 0.\n   */\n  msgParamStreakMonths: number;\n\n  /**\n   * (Sent only on sub, resub, subgift, anonsubgift) The type of subscription plan being used.\n   * Valid values: Prime, 1000, 2000, 3000. 1000, 2000, and 3000 refer to the first, second, and third levels of paid subscriptions, respectively (currently $4.99, $9.99, and $24.99).\n   */\n  msgParamSubPlan: string;\n\n  /**\n   * (Sent only on sub, resub, subgift, anonsubgift) The display name of the subscription plan.\n   * This may be a default name or one created by the channel owner.\n   */\n  msgParamSubPlanName: string;\n\n  /**\n   * (Sent only on raid) The number of viewers watching the source channel raiding this channel.\n   */\n  msgParamViewerCount: number;\n\n  /**\n   * (Sent only on ritual) The name of the ritual this notice is for. Valid value: new_chatter.\n   */\n  msgParamRitualName: string;\n\n  /**\n   * (Sent only on bitsbadgetier) The tier of the bits badge the user just earned; e.g. 100, 1000, 10000.\n   */\n  msgParamThreshold: number;\n}\n\ninterface ABaseUserNoticeTags\n  extends Pick<\n    ATags,\n    | 'badgeInfo'\n    | 'badges'\n    | 'color'\n    | 'displayName'\n    | 'emotes'\n    | 'id'\n    | 'mod'\n    | 'roomId'\n    | 'tmiSentTs'\n    | 'userId'\n  > {\n  /**\n   * The name of the user who sent the notice.\n   */\n  login: string;\n\n  /**\n   * The message printed in chat along with this notice.\n   */\n  systemMsg: string;\n}\n\ninterface UserNoticeTagsSub\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamCumulativeMonths'\n      | 'msgParamShouldShareStreak'\n      | 'msgParamStreakMonths'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  /**\n   * The type of notice (not the ID).\n   */\n  msgId: 'sub';\n}\n\ninterface UserNoticeTagsResub\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamCumulativeMonths'\n      | 'msgParamShouldShareStreak'\n      | 'msgParamStreakMonths'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  msgId: 'resub';\n}\n\ninterface UserNoticeTagsSubGift\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamMonths'\n      | 'msgParamRecipientDisplayName'\n      | 'msgParamRecipientId'\n      | 'msgParamRecipientUserName'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  msgId: 'subgift';\n}\n\ninterface UserNoticeTagsAnonSubGift\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamMonths'\n      | 'msgParamRecipientDisplayName'\n      | 'msgParamRecipientId'\n      | 'msgParamRecipientUserName'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  msgId: 'anonsubgift';\n}\n\ninterface UserNoticeTagsSubMysteryGift extends ABaseUserNoticeTags {\n  msgId: 'submysterygift';\n}\n\ninterface UserNoticeTagsGiftPaidUpgrade\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamPromoGiftTotal'\n      | 'msgParamPromoName'\n      | 'msgParamSenderLogin'\n      | 'msgParamSenderName'\n    > {\n  msgId: 'giftpaidupgrade';\n}\n\ninterface UserNoticeTagsAnonGiftPaidUpgrade\n  extends ABaseUserNoticeTags,\n    Pick<AUserNoticeTags, 'msgParamPromoGiftTotal' | 'msgParamPromoName'> {\n  msgId: 'anongiftpaidupgrade';\n}\n\ninterface UserNoticeTagsRewardGift extends ABaseUserNoticeTags {\n  msgId: 'rewardgift';\n}\n\ninterface UserNoticeTagsRaid\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      'msgParamDisplayName' | 'msgParamLogin' | 'msgParamViewerCount'\n    > {\n  msgId: 'raid';\n}\n\ninterface UserNoticeTagsUnraid extends ABaseUserNoticeTags {\n  msgId: 'unraid';\n}\n\ninterface UserNoticeTagsRitual\n  extends ABaseUserNoticeTags,\n    Pick<AUserNoticeTags, 'msgParamRitualName'> {\n  msgId: 'ritual';\n}\n\ninterface UserNoticeTagsBitsBadGetier\n  extends ABaseUserNoticeTags,\n    Pick<AUserNoticeTags, 'msgParamThreshold'> {\n  msgId: 'bitsbadgetier';\n}\n\ntype UserNoticeTags =\n  | UserNoticeTagsSub\n  | UserNoticeTagsResub\n  | UserNoticeTagsSubGift\n  | UserNoticeTagsAnonSubGift\n  | UserNoticeTagsSubMysteryGift\n  | UserNoticeTagsGiftPaidUpgrade\n  | UserNoticeTagsAnonGiftPaidUpgrade\n  | UserNoticeTagsRewardGift\n  | UserNoticeTagsRaid\n  | UserNoticeTagsUnraid\n  | UserNoticeTagsRitual\n  | UserNoticeTagsBitsBadGetier;\n\n/**\n * Sends a notice to the user when any of the following events occurs:\n * - Subscription, resubscription, or gift subscription to a channel.\n * - Incoming raid to a channel.\n *   Raid is a Twitch tool that allows broadcasters to send their viewers to another channel, to help support and grow other members in the community.\n * - Channel ritual.\n *   Many channels have special rituals to celebrate viewer milestones when they are shared.\n *   The rituals notice extends the sharing of these messages to other viewer milestones (initially, a new viewer chatting for the first time).\n */\nexport interface UserNoticeEvent {\n  raw: string;\n  /**\n   * The message. This is omitted if the user did not enter a message.\n   */\n  message: string;\n  channel: string;\n  tags: UserNoticeTags;\n}\n\nexport interface WhisperTags\n  extends Pick<\n    ATags,\n    'badges' | 'color' | 'displayName' | 'emotes' | 'userId'\n  > {\n  /**\n   * (Not documented)\n   */\n  messageId: string;\n\n  /**\n   * (Not documented)\n   */\n  threadId: string;\n}\n\n/**\n * (Not documented)\n */\nexport interface WhisperEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  user: string;\n  tags: WhisperTags;\n}\n\nexport interface PingEvent {\n  raw: string;\n}\n\n/**\n * Join a channel.\n */\nexport interface JoinEvent {\n  raw: string;\n  channel: string;\n  user: string;\n}\n\n/**\n * Depart from a channel.\n */\nexport interface PartEvent {\n  raw: string;\n  channel: string;\n  user: string;\n}\n","import * as R from 'ramda';\n\nimport * as api from 'api';\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\nimport { StateEmotes } from 'features/chat/selectors';\nimport getEmotesByText from 'features/chat/utils/getEmotesByText';\nimport { getEmotesFromUsageStatistic } from 'features/chat/utils/emotesUsageStatistic';\nimport { createSelector } from '@reduxjs/toolkit';\n\nexport type EmoteCategory = {\n  title?: string;\n  items: htmlEntity.Emote[];\n};\n\nconst getTwitchUserEmoteCategories = R.pipe<\n  Record<string, api.TwitchEmote[]>,\n  api.TwitchEmote[][],\n  EmoteCategory[]\n>(\n  R.values,\n  R.map((items) => ({ items: R.map(htmlEntity.createTwitchEmote, items) })),\n);\n\nconst createMainEmoteCategories = (emotes: StateEmotes) => {\n  if (!emotes) return [];\n\n  const {\n    twitchGlobal,\n    twitchUser,\n    bttvGlobal,\n    bttvChannel,\n    ffzGlobal,\n    ffzChannel,\n  } = emotes;\n\n  return [\n    {\n      title: 'BetterTTV Channel Emotes',\n      items: bttvChannel.map(htmlEntity.createBttvEmote),\n    },\n    {\n      title: 'FrankerFaceZ Channel Emotes',\n      items: ffzChannel.map(htmlEntity.createFfzEmote),\n    },\n    ...getTwitchUserEmoteCategories(twitchUser),\n    {\n      title: 'Twitch',\n      items: R.map(\n        htmlEntity.createTwitchEmote,\n        R.propOr([], '0', twitchGlobal),\n      ),\n    },\n    {\n      title: 'BetterTTV',\n      items: bttvGlobal.map(htmlEntity.createBttvEmote),\n    },\n    {\n      title: 'FrankerFaceZ',\n      items: ffzGlobal.map(htmlEntity.createFfzEmote),\n    },\n  ].filter(R.path(['items', 'length'])) as EmoteCategory[];\n};\n\nconst getMainEmoteCategories = createSelector(\n  (emotes: any) => emotes,\n  createMainEmoteCategories,\n);\n\nconst createEmoteCategories = (emotes: StateEmotes, text: string) => {\n  if (!emotes) return [];\n\n  if (text) {\n    const items = getEmotesByText(text, emotes);\n    const title = `${items.length ? '' : 'No '}Search Results for \"${text}\"`;\n\n    return [{ title, items }];\n  }\n\n  const mainEmoteCategories = getMainEmoteCategories(emotes);\n  const frequentlyUsed = getEmotesFromUsageStatistic(emotes);\n\n  if (!frequentlyUsed.length) {\n    return mainEmoteCategories;\n  }\n\n  const frequentlyUsedCategory = {\n    title: 'Frequently Used',\n    items: frequentlyUsed,\n  };\n\n  return [frequentlyUsedCategory, ...mainEmoteCategories] as EmoteCategory[];\n};\n\nexport default createEmoteCategories;\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport { RootState } from 'app/rootReducer';\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\nimport { ChatMessage } from 'features/chat/slice/messages';\nimport createEmoteCategories from 'features/chat/utils/createEmoteCategories';\n\nexport type StateEmotes = {\n  twitchGlobal: Record<string, api.TwitchEmote[]>;\n  twitchUser: Record<string, api.TwitchEmote[]>;\n  bttvGlobal: api.BttvGlobalEmote[];\n  bttvChannel: api.BttvChannelEmote[];\n  ffzGlobal: api.FfzEmote[];\n  ffzChannel: api.FfzEmote[];\n} | null;\n\nexport const currentChannelSelector = (state: RootState) =>\n  state.chat.currentChannel;\n\nexport const isConnectedSelector = (state: RootState) => state.chat.isConnected;\n\n// messages\n\nexport const messagesSelector = (state: RootState): ChatMessage[] =>\n  state.chat.messages[currentChannelSelector(state)]?.items || [];\n\nexport const usersSelector = (state: RootState): string[] =>\n  state.chat.messages[currentChannelSelector(state)]?.users || [];\n\nexport const isHistoryLoadedSelector = (state: RootState) =>\n  state.chat.messages[currentChannelSelector(state)]?.history.isLoaded || false;\n\nexport const isHistoryAddedSelector = (state: RootState) =>\n  state.chat.messages[currentChannelSelector(state)]?.history.isAdded || false;\n\nexport const isEvenSelector = (state: RootState) =>\n  state.chat.messages[currentChannelSelector(state)]?.isEven || false;\n\n// emotes isLoaded\n\nexport const isTwitchEmotesLoadedSelector = (state: RootState) =>\n  state.chat.twitchEmotes.isLoaded;\n\nexport const isBttvGlobalEmotesLoadedSelector = (state: RootState) =>\n  state.chat.bttvEmotes.global.isLoaded;\n\nexport const isBttvChannelEmotesLoadedSelector = (state: RootState) =>\n  state.chat.bttvEmotes.byChannels[currentChannelSelector(state)]?.isLoaded ||\n  false;\n\nexport const isBttvEmotesLoadedSelector = (state: RootState) =>\n  isBttvGlobalEmotesLoadedSelector(state) &&\n  isBttvChannelEmotesLoadedSelector(state);\n\nexport const isFfzGlobalEmotesLoadedSelector = (state: RootState) =>\n  state.chat.ffzEmotes.global.isLoaded;\n\nexport const isFfzChannelEmotesLoadedSelector = (state: RootState) =>\n  state.chat.ffzEmotes.byChannels[currentChannelSelector(state)]?.isLoaded ||\n  false;\n\nexport const isFfzEmotesLoadedSelector = (state: RootState) =>\n  isFfzGlobalEmotesLoadedSelector(state) &&\n  isFfzChannelEmotesLoadedSelector(state);\n\nexport const isEmotesLoadedSelector = (state: RootState) =>\n  isTwitchEmotesLoadedSelector(state) &&\n  isBttvGlobalEmotesLoadedSelector(state) &&\n  isBttvChannelEmotesLoadedSelector(state) &&\n  isFfzGlobalEmotesLoadedSelector(state) &&\n  isFfzChannelEmotesLoadedSelector(state);\n\n// emotes\n\nconst twitchGlobalEmotesSelector = (state: RootState) =>\n  state.chat.twitchEmotes.global;\nconst twitchUserEmotesSelector = (state: RootState) =>\n  state.chat.twitchEmotes.user;\n\nconst bttvGlobalEmotesSelector = (state: RootState) =>\n  state.chat.bttvEmotes.global.items;\nconst bttvChannelEmotesSelector = (state: RootState) =>\n  state.chat.bttvEmotes.byChannels[currentChannelSelector(state)]?.items || [];\n\nconst ffzGlobalEmotesSelector = (state: RootState) =>\n  state.chat.ffzEmotes.global.items;\nconst ffzChannelEmotesSelector = (state: RootState) =>\n  state.chat.ffzEmotes.byChannels[currentChannelSelector(state)]?.items || [];\n\nexport const emotesSelector = createSelector(\n  isEmotesLoadedSelector,\n  twitchGlobalEmotesSelector,\n  twitchUserEmotesSelector,\n  bttvGlobalEmotesSelector,\n  bttvChannelEmotesSelector,\n  ffzGlobalEmotesSelector,\n  ffzChannelEmotesSelector,\n  (\n    isEmotesLoaded,\n    twitchGlobal,\n    twitchUser,\n    bttvGlobal,\n    bttvChannel,\n    ffzGlobal,\n    ffzChannel,\n  ) => {\n    if (!isEmotesLoaded) return null;\n\n    return {\n      twitchGlobal,\n      twitchUser,\n      bttvGlobal,\n      bttvChannel,\n      ffzGlobal,\n      ffzChannel,\n    } as StateEmotes;\n  },\n);\n\nexport const emoteCategoriesSelector = (state: RootState, search: string) => {\n  const emotes = emotesSelector(state);\n\n  return createEmoteCategories(emotes, search);\n};\n\n// Badges\n\nexport const userBadgesSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user?.badges ||\n  {};\n\nexport const isGlobalBadgesLoadedSelector = (state: RootState) =>\n  state.chat.badges.global.isLoaded;\n\nexport const isChannelBadgesLoadedSelector = (state: RootState) =>\n  state.chat.badges.byChannels[currentChannelSelector(state)]?.isLoaded ||\n  false;\n\nexport const isBadgesLoadedSelector = (state: RootState) =>\n  isGlobalBadgesLoadedSelector(state) && isChannelBadgesLoadedSelector(state);\n\nexport const globalBadgesSelector = (state: RootState) =>\n  state.chat.badges.global.items;\n\nexport const channelBadgesSelector = (state: RootState) =>\n  state.chat.badges.byChannels[currentChannelSelector(state)]?.items || {};\n\nexport const userBadgesImagesSelector = createSelector(\n  userBadgesSelector,\n  globalBadgesSelector,\n  channelBadgesSelector,\n  htmlEntity.createBadges,\n);\n\n// params\n\nexport const currentChannelIdSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.room?.roomId ||\n  '';\n\nexport const userColorSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user?.color ||\n  '';\n\nexport const userDisplayNameSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user\n    ?.displayName || '';\n\n// blocked users\n\nexport const isBlockedUsersLoadedSelector = (state: RootState) =>\n  state.chat.blockedUsers.isLoaded;\n\nexport const blockedUsersSelector = (state: RootState) =>\n  state.chat.blockedUsers.items;\n","export * from './chatSelectors';\n","import { LS_OPTIONS } from 'utils/constants';\n\nexport const readOptionsFromLocalStorage = (): object => {\n  try {\n    const options = localStorage.getItem(LS_OPTIONS);\n    return JSON.parse(options as string) || {};\n  } catch {\n    return {};\n  }\n};\n\nexport const writeOptionsToLocalStore = (options: object): void => {\n  localStorage.setItem(\n    LS_OPTIONS,\n    JSON.stringify({\n      ...readOptionsFromLocalStorage(),\n      ...options,\n    }),\n  );\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { AppThunk } from 'app/store';\nimport {\n  writeOptionsToLocalStore,\n  readOptionsFromLocalStorage,\n} from 'features/options/optionsUtils';\n\ntype OptionsState = {\n  showTimestamps: boolean;\n  splitChat: boolean;\n  blacklistKeywords: string;\n  highlightKeywords: string;\n  fixedWidth: boolean;\n};\n\ntype ChangeOption = {\n  name: keyof OptionsState;\n  value: any;\n};\n\nexport const initialState: OptionsState = {\n  showTimestamps: false,\n  splitChat: true,\n  blacklistKeywords: '',\n  highlightKeywords: '',\n  fixedWidth: false,\n  ...readOptionsFromLocalStorage(),\n};\n\nconst options = createSlice({\n  name: 'options',\n  initialState,\n  reducers: {\n    changeOption: (state, { payload }: PayloadAction<ChangeOption>): void => {\n      const { name, value } = payload;\n      (state[name] as unknown) = value;\n    },\n  },\n});\n\nexport const { changeOption } = options.actions;\n\nexport default options.reducer;\n\nexport const changeChatOption = ({\n  name,\n  value,\n}: ChangeOption): AppThunk => async (dispatch): Promise<void> => {\n  writeOptionsToLocalStore({ [name]: value });\n  dispatch(changeOption({ name, value }));\n};\n","const assertNever = (value: never): never => value;\n\nexport default assertNever;\n","/* eslint-disable no-restricted-syntax */\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\nimport { StateEmotes } from 'features/chat/selectors/chatSelectors';\nimport findEmote from 'features/chat/utils/findEmote';\n\nexport type EmotesByText = {\n  begins: htmlEntity.Emote[];\n  contains: htmlEntity.Emote[];\n};\n\nconst getEmotesByText = (\n  text: string,\n  emotes: StateEmotes,\n  limit = -1,\n): htmlEntity.Emote[] => {\n  if (!emotes) return [];\n\n  const result: EmotesByText = {\n    begins: [],\n    contains: [],\n  };\n  const textLower = text.toLowerCase();\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const isOver =\n    findEmote.bttv.byText(result, emotes.bttvChannel, textLower, limit) ||\n    findEmote.ffz.byText(result, emotes.ffzChannel, textLower, limit) ||\n    findEmote.twitch.byText(result, emotes.twitchUser, textLower, limit) ||\n    findEmote.twitch.byText(result, emotes.twitchGlobal, textLower, limit) ||\n    findEmote.bttv.byText(result, emotes.bttvGlobal, textLower, limit) ||\n    findEmote.ffz.byText(result, emotes.ffzGlobal, textLower, limit);\n\n  return [...result.begins, ...result.contains];\n};\n\nexport default getEmotesByText;\n","import * as R from 'ramda';\n\nimport { LS_EMOTES_USAGE_STATISTIC } from 'utils/constants';\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\nimport findEmote from 'features/chat/utils/findEmote';\nimport { StateEmotes } from 'features/chat/selectors';\nimport { MessageEntity } from 'features/chat/slice/messages';\n\ntype Type = 'twitch-emote' | 'bttv-emote' | 'ffz-emote';\n\ntype AUsageItem = {\n  lastUpdatedAt: number;\n  uses: number;\n};\n\ntype UsageItemTwitchFfz = AUsageItem & {\n  type: 'twitch-emote' | 'ffz-emote';\n  id: number;\n};\n\ntype UsageItemBttv = AUsageItem & {\n  type: 'bttv-emote';\n  id: string;\n};\n\ntype UsageItem = UsageItemTwitchFfz | UsageItemBttv;\n\ntype EmotesUsageStatistic = Record<Type, Record<string, UsageItem>>;\n\nexport const readEmotesUsageStatistic = (): Partial<EmotesUsageStatistic> => {\n  try {\n    const statistic = localStorage.getItem(LS_EMOTES_USAGE_STATISTIC);\n\n    return JSON.parse(statistic as string) || {};\n  } catch (e) {\n    return {};\n  }\n};\n\nexport const getUsageStatisticFromEntities = R.pipe<\n  MessageEntity[],\n  any,\n  any,\n  any\n>(\n  R.filter((v: any) =>\n    R.includes(R.prop('type', v), ['twitch-emote', 'bttv-emote', 'ffz-emote']),\n  ),\n  R.groupBy<any>(R.prop('type')),\n  R.map(\n    R.pipe<any, any, any>(\n      R.groupBy<any>(R.prop('id')),\n      R.map((items: any) => ({\n        type: items[0].type,\n        id: items[0].id,\n        lastUpdatedAt: Date.now(),\n        uses: items.length,\n      })),\n    ),\n  ),\n);\n\nconst mergeFn = (key: string, left: any, right: any) =>\n  key === 'uses' ? left + right : right;\n\nexport const writeEmotesUsageStatistic = (entries: MessageEntity[]) => {\n  const statistic = getUsageStatisticFromEntities(entries) as Partial<\n    EmotesUsageStatistic\n  >;\n\n  if (R.isEmpty(statistic)) return;\n\n  const history = readEmotesUsageStatistic();\n\n  const newHistory = R.mergeDeepWithKey(mergeFn, history, statistic);\n\n  localStorage.setItem(LS_EMOTES_USAGE_STATISTIC, JSON.stringify(newHistory));\n};\n\nconst normalizeHistory = R.pipe<any, any, any, any, UsageItem[]>(\n  R.values,\n  R.map(R.values),\n  R.flatten,\n  R.sortWith([R.descend(R.prop('uses')), R.descend(R.prop('lastUpdatedAt'))]),\n);\n\nexport const getEmotesFromUsageStatistic = (\n  emotes: StateEmotes,\n  limit = 27,\n) => {\n  if (!emotes) return [];\n\n  const result: htmlEntity.Emote[] = [];\n  const history = R.pipe(readEmotesUsageStatistic, normalizeHistory)();\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const item of history) {\n    if (result.length === limit) return result;\n\n    let emoteEntity = null;\n\n    if (item.type === 'twitch-emote') {\n      emoteEntity = findEmote.twitch.byId(item.id, emotes);\n    }\n\n    if (item.type === 'bttv-emote') {\n      emoteEntity = findEmote.bttv.byId(item.id, emotes);\n    }\n\n    if (item.type === 'ffz-emote') {\n      emoteEntity = findEmote.ffz.byId(item.id, emotes);\n    }\n\n    if (emoteEntity) {\n      result.push(emoteEntity);\n    }\n  }\n\n  return result;\n};\n"],"sourceRoot":""}