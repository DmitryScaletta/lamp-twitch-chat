{"version":3,"sources":["utils/isAuthRedirect.js","utils/api.js","reducers/auth/auth.js","utils/storeFlags.js","reducers/badges/badges.js","reducers/chat/chat.js","reducers/emotes/twitch.js","reducers/emotes/bttv.js","reducers/emotes/ffz.js","reducers/emotes/index.js","utils/normalizeHref.js","utils/formatMessage.js","reducers/chat/selectors.js","reducers/emotes/selectors.js","reducers/badges/selectors.js","utils/constants.js","utils/getMessageBadges.js","utils/twitchChat.js","utils/normalizeRecentMessages.js","reducers/messages/messages.js","reducers/options/options.js","reducers/index.js","store/index.js","hooks/useLocationHash.js","hooks/useDocumentTitle.js","reducers/messages/selectors.js","utils/replaceEmojis.js","reducers/options/selectors.js","components/Scrollbar.jsx","icons/smiley-face.svg","icons/gears.svg","icons/close.svg","components/IconButton.jsx","components/ChatModal.jsx","components/EmotePicker.jsx","components/Switch.jsx","components/Options.jsx","components/ChatInput.jsx","components/ChatMessage/types.js","components/ChatMessage/Message.jsx","components/ChatMessage/Notice.jsx","components/ChatMessage/UserNotice.jsx","components/ChatMessage/ChatMessage.jsx","components/Chat.jsx","components/Home.jsx","utils/getAuthUrl.js","components/Auth.jsx","components/AuthCallback.jsx","styles/common.js","styles/colors.js","styles/vars.js","styles/index.js","App.jsx","index.jsx"],"names":["isAuthRedirect","hash","startsWith","apiRequestKraken","url","fetch","headers","Accept","process","Authorization","localStorage","accessToken","then","response","json","apiRequest","fetchUser","id","fetchTwitchEmotesBySets","userId","fetchBttvChannelEmotes","channelId","fetchFfzChannelEmotes","fetchRecentMessages","channel","fetchGlobalBadges","language","fetchChannelBadges","fetchBlockedUsers","setIsAuth","createAction","fetchUserRequest","fetchUserSuccess","fetchUserFailure","reducer","handleActions","state","payload","isAuth","user","undefined","isLoading","error","login","displayName","storeFlags","default","isLoaded","isError","request","success","failure","defaultState","global","items","channels","createActions","fetchGlobalBadgesRequest","fetchGlobalBadgesSuccess","fetchGlobalBadgesFailure","fetchChannelBadgesRequest","fetchChannelBadgesSuccess","fetchChannelBadgesFailure","parseBadges","pathOr","combineActions","type","toString","mergeDeepRight","currentChannel","isConnected","globalState","blockedUsers","setCurrentChannel","setIsConnected","updateGlobalUserState","updateUserState","updateRoomState","removeChannel","fetchBlockedUsersRequest","fetchBlockedUsersSuccess","fetchBlockedUsersFailure","parseBlockedUsers","pipe","prop","map","path","tags","userState","roomState","omit","fetchTwitchEmotesRequest","fetchTwitchEmotesSuccess","fetchTwitchEmotesFailure","fetchBttvGlobalEmotesRequest","fetchBttvGlobalEmotesSuccess","fetchBttvGlobalEmotesFailure","fetchBttvChannelEmotesRequest","fetchBttvChannelEmotesSuccess","fetchBttvChannelEmotesFailure","parseBttvChannelEmotes","channelEmotes","sharedEmotes","fetchFfzGlobalEmotesRequest","fetchFfzGlobalEmotesSuccess","fetchFfzGlobalEmotesFailure","fetchFfzChannelEmotesRequest","fetchFfzChannelEmotesSuccess","fetchFfzChannelEmotesFailure","parseFfzGlobalEmotes","values","flatten","parseFfzChannelEmotes","combineReducers","twitch","bttv","ffz","isStartsWithProtocolRegex","normalizeHref","href","test","TWITCH_EMOTES_CDN","mentionRegex","linkRegex","urlRegex","strict","normalizeEmotesFromTags","toPairs","value","v","getFfzSrcSet","dpi","join","createTwitchEmote","alt","code","src","srcSet","createBttvEmote","createFfzEmote","name","urls","createMention","text","target","twitchEmoteType","pt","shape","oneOf","isRequired","string","bttvEmoteType","ffzEmoteType","emojiType","mentionType","linkType","regexMap","4","9","findEntity","word","parseTwitch","twitchEmote","find","RegExp","findTwitchEmote","bttvEmote","propEq","findBttvEmote","ffzEmote","findFfzEmote","char","emojiMatch","twemojiParser","assetType","length","emoji","filter","keys","head","emojilib","mentionMatch","match","toLowerCase","linkMatch","formatMessage","message","embeddedEmotes","emotes","isOwnMessage","hasEmbeddedEmotes","Object","normalizedEmbeddedEmotes","result","offset","arrayOffset","spaceIndex","indexOf","startIndex","endIndex","substring","entity","embeddedEmote","textBefore","push","Array","isArray","entityObject","difference","textAfter","currentChannelSelector","channelIdSelector","isEvenSelector","isBlockedUsersLoadedSelector","chat","blockedUsersSelector","twitchEmotesSelector","createSelector","createGlobalEmotesSelector","createChannelEmotesSelector","bttvGlobalEmotesSelector","bttvChannelEmotesSelector","bttvEmotesSelector","bttvGlobal","bttvChannel","ffzGlobalEmotesSelector","ffzChannelEmotesSelector","ffzEmotesSelector","ffzGlobal","ffzChannel","emotesSelector","regexEmotesMap","createGlobalTwitchEmote","emoteCategoriesSelector","title","propOr","createIsEmotesLoadedSelector","globalLoaded","channelLoaded","isBttvEmotesLoadedSelector","isFfzEmotesLoadedSelector","isTwitchEmotesLoadedSelector","globalBadgesSelector","badges","channelBadgesSelector","isBadgesLoadedSelector","isGlobalBadgesLoadedSelector","isChannelBadgesLoadedSelector","MESSAGE_TYPES","getMessageBadges","globalBadges","channelBadges","version","badge","description","imageUrl1x","image_url_1x","imageUrl2x","image_url_2x","imageUrl4x","image_url_4x","label","createBadge","Boolean","noopIRCCommands","booleanMessageTags","numberMessageTags","depricatedMessageTags","noticeMessageTags","data","split","reduce","acc","normalizeTagValue","raw","emote","indexes","index","start","end","Number","parseInt","parseMessageEmotes","followersOnly","slow","includes","replace","parseMessageTags","entries","key","camelCase","getIsAction","endsWith","normalizeActionMessage","slice","parseState","params","parseUserState","parseRoomState","parseCommand","parseNotice","parseUserNotice","parseClearMessage","parseClearChat","parseHostTarget","Client","options","socket","identity","_queue","_messagesQueue","this","auth","nick","Math","floor","random","pass","sendRaw","emit","hadError","willReconnect","rawData","trim","forEach","line","_handleMessage","shift","isAction","messageEventData","uuid","tmiSentTs","Date","getTime","parsedData","tekkoParse","command","prefix","middle","trailing","parseMessageData","eventData","_emmitOwnMessage","msgId","parseChatMessage","ircMessage","handleError","err","send","WebSocket","addEventListener","_onConnect","_onClose","_onError","_onData","tekkoFormat","mergeDeepWith","concat","commandParams","roomName","EventEmitter","normalizeRecentMessages","messages","m","parse","normalizedMessage","parsedTags","messageArray","isHistory","addMessageEntity","fetchRecentMessagesRequest","fetchRecentMessagesSuccess","fetchRecentMessagesFailure","clearChat","addRecentMessagesAction","sliceMessages","diff","getIsEven","prev","addedItemsCount","isSliced","oldItems","newItems","slicedMessages","isEven","history","targetUserId","isDeleted","getOptionsFromLocalStorage","JSON","showTimestamps","splitChat","blacklistKeywords","highlightKeywords","changeOption","option","setItem","stringify","enhancer","applyMiddleware","thunk","store","createStore","rootReducer","useLocationHash","useState","window","location","setHash","useEffect","handleHashChange","removeEventListener","useDocumentTitle","document","messagesSelector","isHistoryLoadedSelector","replaceEmojis","optionsSelector","isShowTimestampsSelector","isSplitChatSelector","Scrollbar","styled","CustomScrollbar","attrs","disableTracksWidthCompensation","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","fill","d","fillRule","clipRule","_ref","svgRef","props","width","height","viewBox","x","y","ref","ForwardRef","forwardRef","sizes","small","css","medium","IconButton","button","p","size","defaultProps","propTypes","ChatModalRoot","div","CloseButton","CloseIcon","CloseIconSvg","ChatModal","children","onClose","onClick","EmotePickerRoot","Categories","Category","CategoryHeader","CategoryItems","Emote","img","EmotePicker","onEmoteClick","emoteCategories","useSelector","renderCategory","useCallback","SwitchRoot","Label","Input","input","Switch","checked","readOnly","onChange","htmlFor","OptionsRoot","Header","h2","Option","OptionText","span","Options","dispatch","useDispatch","renderOption","renderOptionsCategory","ChatInputRoot","form","ControlsWrapper","Controls","SendButton","TextareaWrapper","EmotesModal","OptionsModal","Textarea","textarea","EmotesButton","SmileyFaceIcon","SmileyFaceIconSvg","GearsIcon","GearsIconSvg","StyledLink","Link","ChatInput","isDisabled","onSubmit","textareaRef","useRef","setText","isEmotesModalVisible","setIsEmotesModalVisible","isOptionsModalVisible","setIsOptionsModalVisible","textareaWrapperRef","React","optionsModalRef","handleCloseEmotesModal","handleCloseOptionsModal","useOnClickOutside","handleKeyDown","e","preventDefault","textareaNode","current","renderEmotesModal","emoteName","t","trimLeft","renderOptionsModal","placeholder","maxLength","disabled","to","arrayOf","oneOfType","badgeInfo","subscriber","color","flags","mod","bool","roomId","tmiSentId","number","systemMsg","msgParamCumulativeMonths","msgParamDisplayName","msgParamLogin","msgParamMonths","msgParamPromoGiftTotal","msgParamPromoName","msgParamRecipientDisplayName","msgParamRecipientId","msgParamRecipientUserName","msgParamSenderLogin","msgParamSenderName","msgParamShouldShareStreak","msgParamStreakMonths","msgParamSubPlan","msgParamSubPlanName","msgParamViewerCount","msgParamRitualName","msgParamThreshold","MessageRoot","isMention","Name","Emoji","Mention","isActive","a","Timestamp","Badge","Message","isShowTimestamps","isVisible","setIsVisible","format","aria-label","renderBadges","item","rel","renderMessageArray","memo","NoticeRoot","Notice","UserNoticeRoot","ChatMessage","ChatRoot","ChatWrapper","Messages","StyledScrollbar","MoreMessagesButton","visible","Chat","onSendMessage","isSplitChat","isMoreMessagesButtonVisible","setIsMoreMessagesButtonVisible","scrollbarRef","handleScrollToBottom","scrollToBottom","onUpdate","clientHeight","contentScrollHeight","scrollTop","client","Home","currentChannelId","isTwitchEmotesLoaded","isBttvEmotesLoaded","isFfzEmotesLoaded","isBadgesLoaded","isHistoryLoaded","isBlockedUsersLoaded","isReadyToAddRecentMessages","rawUser","getItem","handleConnected","handleDisconnected","handleGlobalUserState","handleUserState","handleRoomState","handleMessage","rest","getState","addMessage","handleNotice","handleUserNotice","handleClearChat","connect","on","off","apiFetchGlobalBadges","apiFetchRecentMessages","emoticon_sets","fetchTwitchEmotes","apiFetchBlockedUsers","apiFetchBttvChannelEmotes","apiFetchFfzChannelEmotes","apiFetchChannelBadges","say","authParams","client_id","redirect_uri","response_type","scope","claims","id_token","email_verified","picture","preferred_username","getAuthUrl","search","Auth","AuthCallback","useHistory","URLSearchParams","get","idToken","apiFetchUser","display_name","jwt","decode","sub","lastChannel","createGlobalStyle","colors","vars","common","App","exact","component","ReactGA","initialize","page","pathname","pageview","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e5d817de.chunk.js","sourcesContent":["const isAuthRedirect = (hash) => hash.startsWith('#access_token=');\n\nexport default isAuthRedirect;\n","export const TWITCH_API_HELIX = 'https://api.twitch.tv/helix';\nexport const TWITCH_API_KRAKEN = 'https://api.twitch.tv/kraken';\n\n// TODO: throw an error if fetch completed with not 2** code\n\nconst getHelixHeaders = () => ({\n  Authorization: `Bearer ${localStorage.accessToken}`,\n});\n\nconst getKrakenHeaders = () => ({\n  Accept: 'application/vnd.twitchtv.v5+json',\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `OAuth ${localStorage.accessToken}`,\n});\n\nconst apiRequestHelix = (url) =>\n  fetch(`${TWITCH_API_HELIX}${url}`, {\n    headers: getHelixHeaders(),\n  }).then((response) => response.json());\n\nconst apiRequestKraken = (url) =>\n  fetch(`${TWITCH_API_KRAKEN}${url}`, {\n    headers: getKrakenHeaders(),\n  }).then((response) => response.json());\n\nconst apiRequest = (url) => fetch(url).then((response) => response.json());\n\nexport const fetchUser = (id) => apiRequestHelix(`/users?id=${id}`);\n\nexport const fetchTwitchEmotesBySets = (userId) =>\n  apiRequestKraken(`/users/${userId}/emotes`);\n\nexport const fetchBttvGlobalEmotes = () =>\n  apiRequest('https://api.betterttv.net/3/cached/emotes/global');\nexport const fetchBttvChannelEmotes = (channelId) =>\n  apiRequest(`https://api.betterttv.net/3/cached/users/twitch/${channelId}`);\n\nexport const fetchFfzGlobalEmotes = () =>\n  apiRequest('https://api.frankerfacez.com/v1/set/global');\nexport const fetchFfzChannelEmotes = (channelId) =>\n  apiRequest(`https://api.frankerfacez.com/v1/room/id/${channelId}`);\n\n// apiRequest(`https://api.betterttv.net/3/cached/frankerfacez/users/twitch/${channelId}`);\n\nexport const fetchRecentMessages = (channel) =>\n  apiRequest(\n    `https://recent-messages.robotty.de/api/v2/recent-messages/${channel}?clearchatToNotice=true`,\n  );\n\nexport const fetchGlobalBadges = (language = 'en') =>\n  apiRequest(\n    `https://badges.twitch.tv/v1/badges/global/display?language=${language}`,\n  );\nexport const fetchChannelBadges = (channelId, language = 'en') =>\n  apiRequest(\n    `https://badges.twitch.tv/v1/badges/channels/${channelId}/display?language=${language}`,\n  );\n\nexport const fetchBlockedUsers = (userId) =>\n  apiRequestKraken(`/users/${userId}/blocks`);\n","import { createAction, handleActions } from 'redux-actions';\n\nimport { fetchUser as apiFetchUser } from 'utils/api';\n\nconst defaultState = {\n  isAuth: false,\n  isLoading: false,\n  user: {\n    id: null,\n    login: null,\n    displayName: null,\n  },\n};\n\nexport const setIsAuth = createAction('SET_IS_AUTH');\nconst fetchUserRequest = createAction('FETCH_USER_REQUEST');\nconst fetchUserSuccess = createAction('FETCH_USER_SUCCESS');\nconst fetchUserFailure = createAction('FETCH_USER_FAILURE');\n\nexport const fetchUser = (id) => async (dispatch) => {\n  dispatch(fetchUserRequest());\n\n  try {\n    const response = await apiFetchUser(id);\n    const { login, display_name: displayName } = response.data[0];\n    const user = { id, login, displayName };\n    localStorage.setItem('user', JSON.stringify(user));\n\n    dispatch(fetchUserSuccess(user));\n  } catch (error) {\n    dispatch(fetchUserFailure(error));\n  }\n};\n\nconst handleSetIsAuth = (state, { payload: { isAuth, user } }) => ({\n  ...state,\n  isAuth: isAuth === undefined ? state.isAuth : isAuth,\n  user: { ...state.user, ...user },\n});\n\nconst handleFetchUserRequest = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst handleFetchUserSuccess = (state, { payload }) => ({\n  ...state,\n  isAuth: true,\n  isLoading: false,\n  user: payload,\n});\nconst handleFetchUserFailure = (state, { payload }) => ({\n  ...state,\n  isAuth: false,\n  isLoading: false,\n  error: payload,\n});\n\nconst reducer = handleActions(\n  {\n    [setIsAuth]: handleSetIsAuth,\n    [fetchUserRequest]: handleFetchUserRequest,\n    [fetchUserSuccess]: handleFetchUserSuccess,\n    [fetchUserFailure]: handleFetchUserFailure,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","const storeFlags = {\n  default: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n  },\n  request: {\n    isLoading: true,\n    isLoaded: false,\n    isError: false,\n    error: null,\n  },\n  success: {\n    isLoading: false,\n    isLoaded: true,\n    isError: false,\n    error: null,\n  },\n  failure: {\n    isLoading: false,\n    isLoaded: false,\n    isError: true,\n  },\n};\n\nexport default storeFlags;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\nimport { pathOr, mergeDeepRight } from 'ramda';\n\nimport {\n  fetchGlobalBadges as apiFetchGlobalBadges,\n  fetchChannelBadges as apiFetchChannelBadges,\n} from 'utils/api';\nimport storeFlags from 'utils/storeFlags';\n\nconst defaultState = {\n  global: {\n    ...storeFlags.default,\n    items: {},\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: {},\n    // },\n  },\n};\n\nconst {\n  fetchGlobalBadgesRequest,\n  fetchGlobalBadgesSuccess,\n  fetchGlobalBadgesFailure,\n  fetchChannelBadgesRequest,\n  fetchChannelBadgesSuccess,\n  fetchChannelBadgesFailure,\n} = createActions(\n  'FETCH_GLOBAL_BADGES_REQUEST',\n  'FETCH_GLOBAL_BADGES_SUCCESS',\n  'FETCH_GLOBAL_BADGES_FAILURE',\n  'FETCH_CHANNEL_BADGES_REQUEST',\n  'FETCH_CHANNEL_BADGES_SUCCESS',\n  'FETCH_CHANNEL_BADGES_FAILURE',\n);\n\nconst parseBadges = pathOr({}, ['badge_sets']);\n\nexport const fetchGlobalBadges = () => async (dispatch) => {\n  dispatch(fetchGlobalBadgesRequest());\n\n  try {\n    const response = await apiFetchGlobalBadges();\n    const data = { items: parseBadges(response) };\n\n    dispatch(fetchGlobalBadgesSuccess(data));\n  } catch (error) {\n    dispatch(fetchGlobalBadgesFailure({ error }));\n  }\n};\n\nexport const fetchChannelBadges = (channelId, channel) => async (dispatch) => {\n  dispatch(fetchChannelBadgesRequest({ channel }));\n\n  try {\n    const response = await apiFetchChannelBadges(channelId);\n    const data = {\n      channel,\n      items: parseBadges(response),\n    };\n\n    dispatch(fetchChannelBadgesSuccess(data));\n  } catch (error) {\n    dispatch(fetchChannelBadgesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchFfzGlobalEmotes = (state, { type, payload }) => {\n  if (type === fetchGlobalBadgesRequest.toString()) {\n    return mergeDeepRight(state, {\n      global: { ...storeFlags.request },\n    });\n  }\n\n  if (type === fetchGlobalBadgesSuccess.toString()) {\n    return mergeDeepRight(state, {\n      global: { ...storeFlags.success, items: payload.items },\n    });\n  }\n\n  if (type === fetchGlobalBadgesFailure.toString()) {\n    return mergeDeepRight(state, {\n      global: { ...storeFlags.failure, error: payload.error },\n    });\n  }\n\n  return state;\n};\n\nconst handleFetchFfzChannelEmotes = (state, { type, payload }) => {\n  const { channel } = payload;\n\n  if (type === fetchChannelBadgesRequest.toString()) {\n    return mergeDeepRight(state, {\n      channels: {\n        [channel]: { ...storeFlags.request },\n      },\n    });\n  }\n\n  if (type === fetchChannelBadgesSuccess.toString()) {\n    return mergeDeepRight(state, {\n      channels: {\n        [channel]: { ...storeFlags.success, items: payload.items },\n      },\n    });\n  }\n\n  if (type === fetchChannelBadgesFailure.toString()) {\n    return mergeDeepRight(state, {\n      channels: {\n        [channel]: { ...storeFlags.failure, error: payload.error },\n      },\n    });\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [combineActions(\n      fetchGlobalBadgesRequest,\n      fetchGlobalBadgesSuccess,\n      fetchGlobalBadgesFailure,\n    )]: handleFetchFfzGlobalEmotes,\n\n    [combineActions(\n      fetchChannelBadgesRequest,\n      fetchChannelBadgesSuccess,\n      fetchChannelBadgesFailure,\n    )]: handleFetchFfzChannelEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\nimport { mergeDeepRight, pipe, prop, path, map, omit } from 'ramda';\n\nimport { fetchBlockedUsers as apiFetchBlockedUsers } from 'utils/api';\nimport storeFlags from 'utils/storeFlags';\n\nconst defaultState = {\n  currentChannel: null,\n  isConnected: false,\n  globalState: {},\n  channels: {\n    // [channel]: {\n    //   userState: {},\n    //   roomState: {},\n    // }\n  },\n  blockedUsers: {\n    ...storeFlags.default,\n    items: [],\n  },\n};\n\nexport const {\n  setCurrentChannel,\n  setIsConnected,\n  updateGlobalUserState,\n  updateUserState,\n  updateRoomState,\n  removeChannel,\n} = createActions(\n  'SET_CURRENT_CHANNEL',\n  'SET_IS_CONNECTED',\n  'UPDATE_GLOBAL_USER_STATE',\n  'UPDATE_USER_STATE',\n  'UPDATE_ROOM_STATE',\n  'REMOVE_CHANNEL',\n);\n\nconst {\n  fetchBlockedUsersRequest,\n  fetchBlockedUsersSuccess,\n  fetchBlockedUsersFailure,\n} = createActions(\n  'FETCH_BLOCKED_USERS_REQUEST',\n  'FETCH_BLOCKED_USERS_SUCCESS',\n  'FETCH_BLOCKED_USERS_FAILURE',\n);\n\nconst parseBlockedUsers = pipe(prop('blocks'), map(path(['user', 'name'])));\n\nexport const fetchBlockedUsers = (userId) => async (dispatch) => {\n  dispatch(fetchBlockedUsersRequest());\n  try {\n    const response = await apiFetchBlockedUsers(userId);\n\n    dispatch(fetchBlockedUsersSuccess({ items: parseBlockedUsers(response) }));\n  } catch (error) {\n    dispatch(fetchBlockedUsersFailure({ error }));\n  }\n};\n\nconst handleSetCurrentChannel = (state, { payload }) => ({\n  ...state,\n  currentChannel: payload,\n});\nconst handleSetIsConnected = (state, { payload }) => ({\n  ...state,\n  isConnected: payload,\n});\nconst handleUpdateGlobalUserState = (state, { payload: { tags } }) => ({\n  ...state,\n  globalState: { ...state.globalState, ...tags },\n});\nconst handleUpdateUserState = (state, { payload: { channel, tags } }) => ({\n  ...state,\n  channels: {\n    ...state.channels,\n    [channel]: { ...state.channels[channel], userState: tags },\n  },\n});\nconst handleUpdateRoomState = (state, { payload: { channel, tags } }) => ({\n  ...state,\n  channels: {\n    ...state.channels,\n    [channel]: { ...state.channels[channel], roomState: tags },\n  },\n});\nconst handleRemoveChannel = (state, { payload: channel }) => ({\n  ...state,\n  channels: omit([channel], state.channels),\n});\nconst handleFetchBlockUsers = (state, { type, payload }) => {\n  if (type === fetchBlockedUsersRequest.toString()) {\n    return mergeDeepRight(state, {\n      blockedUsers: { ...storeFlags.request },\n    });\n  }\n\n  if (type === fetchBlockedUsersSuccess.toString()) {\n    return mergeDeepRight(state, {\n      blockedUsers: { ...storeFlags.success, items: payload.items },\n    });\n  }\n\n  if (type === fetchBlockedUsersFailure.toString()) {\n    return mergeDeepRight(state, {\n      blockedUsers: { ...storeFlags.failure, error: payload.error },\n    });\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [setCurrentChannel]: handleSetCurrentChannel,\n    [setIsConnected]: handleSetIsConnected,\n    [updateGlobalUserState]: handleUpdateGlobalUserState,\n    [updateUserState]: handleUpdateUserState,\n    [updateRoomState]: handleUpdateRoomState,\n    [removeChannel]: handleRemoveChannel,\n    [combineActions(\n      fetchBlockedUsersRequest,\n      fetchBlockedUsersSuccess,\n      fetchBlockedUsersFailure,\n    )]: handleFetchBlockUsers,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\n\nimport { fetchTwitchEmotesBySets } from 'utils/api';\n\nconst defaultState = {\n  isLoading: false,\n  isLoaded: false,\n  isError: false,\n  error: null,\n  items: {\n    // [setId]: [\n    //   {\n    //     code: \"PartyPoro\",\n    //     id: 300949540,\n    //   },\n    // ],\n  },\n};\n\nconst {\n  fetchTwitchEmotesRequest,\n  fetchTwitchEmotesSuccess,\n  fetchTwitchEmotesFailure,\n} = createActions(\n  'FETCH_TWITCH_EMOTES_REQUEST',\n  'FETCH_TWITCH_EMOTES_SUCCESS',\n  'FETCH_TWITCH_EMOTES_FAILURE',\n);\n\nexport const fetchTwitchEmotes = (userId) => async (dispatch) => {\n  dispatch(fetchTwitchEmotesRequest);\n\n  try {\n    const response = await fetchTwitchEmotesBySets(userId);\n    const data = { items: response.emoticon_sets };\n\n    dispatch(fetchTwitchEmotesSuccess(data));\n  } catch (e) {\n    dispatch(fetchTwitchEmotesFailure(e));\n  }\n};\n\nconst handleFetchTwitchEmotes = (state, { type, payload }) => {\n  if (type === fetchTwitchEmotesRequest.toString()) {\n    return {\n      ...state,\n      isLoading: true,\n      isLoaded: false,\n      isError: false,\n      error: null,\n    };\n  }\n\n  if (type === fetchTwitchEmotesSuccess.toString()) {\n    return {\n      ...state,\n      isLoading: false,\n      isLoaded: true,\n      isError: false,\n      ...payload,\n    };\n  }\n\n  if (type === fetchTwitchEmotesFailure.toString()) {\n    return {\n      ...state,\n      isLoading: false,\n      isLoaded: false,\n      isError: true,\n      error: payload,\n    };\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [combineActions(\n      fetchTwitchEmotesRequest,\n      fetchTwitchEmotesSuccess,\n      fetchTwitchEmotesFailure,\n    )]: handleFetchTwitchEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\n\nimport {\n  fetchBttvGlobalEmotes as apiFetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes as apiFetchBttvChannelEmotes,\n} from 'utils/api';\n\nconst defaultState = {\n  global: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n    items: [],\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: [],\n    // },\n  },\n};\n\nconst {\n  fetchBttvGlobalEmotesRequest,\n  fetchBttvGlobalEmotesSuccess,\n  fetchBttvGlobalEmotesFailure,\n  fetchBttvChannelEmotesRequest,\n  fetchBttvChannelEmotesSuccess,\n  fetchBttvChannelEmotesFailure,\n} = createActions(\n  'FETCH_BTTV_GLOBAL_EMOTES_REQUEST',\n  'FETCH_BTTV_GLOBAL_EMOTES_SUCCESS',\n  'FETCH_BTTV_GLOBAL_EMOTES_FAILURE',\n  'FETCH_BTTV_CHANNEL_EMOTES_REQUEST',\n  'FETCH_BTTV_CHANNEL_EMOTES_SUCCESS',\n  'FETCH_BTTV_CHANNEL_EMOTES_FAILURE',\n);\n\nconst parseBttvChannelEmotes = ({ channelEmotes, sharedEmotes }) => [\n  ...channelEmotes,\n  ...sharedEmotes,\n];\n\nexport const fetchBttvGlobalEmotes = () => async (dispatch) => {\n  dispatch(fetchBttvGlobalEmotesRequest());\n\n  try {\n    const items = await apiFetchBttvGlobalEmotes();\n    const data = { items };\n\n    dispatch(fetchBttvGlobalEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchBttvGlobalEmotesFailure({ error }));\n  }\n};\n\nexport const fetchBttvChannelEmotes = (channelId, channel) => async (\n  dispatch,\n) => {\n  dispatch(fetchBttvChannelEmotesRequest({ channel }));\n\n  try {\n    const response = await apiFetchBttvChannelEmotes(channelId);\n    const data = {\n      channel,\n      items: parseBttvChannelEmotes(response),\n    };\n\n    dispatch(fetchBttvChannelEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchBttvChannelEmotesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchBttvGlobalEmotes = (state, { type, payload }) => {\n  if (type === fetchBttvGlobalEmotesRequest.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: true,\n        isLoaded: false,\n        isError: false,\n        error: null,\n      },\n    };\n  }\n\n  if (type === fetchBttvGlobalEmotesSuccess.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: true,\n        isError: false,\n        error: null,\n        ...payload,\n      },\n    };\n  }\n\n  if (type === fetchBttvGlobalEmotesFailure.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: false,\n        isError: true,\n        ...payload,\n      },\n    };\n  }\n\n  return state;\n};\n\nconst handleFetchBttvChannelEmotes = (state, { type, payload }) => {\n  const { channel } = payload;\n\n  if (type === fetchBttvChannelEmotesRequest.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: true,\n          isLoaded: false,\n          isError: false,\n          error: null,\n        },\n      },\n    };\n  }\n\n  if (type === fetchBttvChannelEmotesSuccess.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: true,\n          isError: false,\n          error: null,\n          items: payload.items,\n        },\n      },\n    };\n  }\n\n  if (type === fetchBttvChannelEmotesFailure.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: false,\n          isError: true,\n          error: payload.error,\n        },\n      },\n    };\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [combineActions(\n      fetchBttvGlobalEmotesRequest,\n      fetchBttvGlobalEmotesSuccess,\n      fetchBttvGlobalEmotesFailure,\n    )]: handleFetchBttvGlobalEmotes,\n\n    [combineActions(\n      fetchBttvChannelEmotesRequest,\n      fetchBttvChannelEmotesSuccess,\n      fetchBttvChannelEmotesFailure,\n    )]: handleFetchBttvChannelEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\nimport { pipe, pathOr, map, values, flatten } from 'ramda';\n\nimport {\n  fetchFfzGlobalEmotes as apiFetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes as apiFetchFfzChannelEmotes,\n} from 'utils/api';\n\nconst defaultState = {\n  global: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n    items: [],\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: [],\n    // },\n  },\n};\n\nconst {\n  fetchFfzGlobalEmotesRequest,\n  fetchFfzGlobalEmotesSuccess,\n  fetchFfzGlobalEmotesFailure,\n  fetchFfzChannelEmotesRequest,\n  fetchFfzChannelEmotesSuccess,\n  fetchFfzChannelEmotesFailure,\n} = createActions(\n  'FETCH_FFZ_GLOBAL_EMOTES_REQUEST',\n  'FETCH_FFZ_GLOBAL_EMOTES_SUCCESS',\n  'FETCH_FFZ_GLOBAL_EMOTES_FAILURE',\n  'FETCH_FFZ_CHANNEL_EMOTES_REQUEST',\n  'FETCH_FFZ_CHANNEL_EMOTES_SUCCESS',\n  'FETCH_FFZ_CHANNEL_EMOTES_FAILURE',\n);\n\nconst parseFfzGlobalEmotes = pipe(\n  pathOr({}, ['sets']),\n  values,\n  map(pathOr([], ['emoticons'])),\n  flatten,\n);\nconst parseFfzChannelEmotes = parseFfzGlobalEmotes;\n\nexport const fetchFfzGlobalEmotes = () => async (dispatch) => {\n  dispatch(fetchFfzGlobalEmotesRequest());\n\n  try {\n    const response = await apiFetchFfzGlobalEmotes();\n    const data = { items: parseFfzGlobalEmotes(response) };\n\n    dispatch(fetchFfzGlobalEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchFfzGlobalEmotesFailure({ error }));\n  }\n};\n\nexport const fetchFfzChannelEmotes = (channelId, channel) => async (\n  dispatch,\n) => {\n  dispatch(fetchFfzChannelEmotesRequest({ channel }));\n\n  try {\n    const response = await apiFetchFfzChannelEmotes(channelId);\n    const data = {\n      channel,\n      items: parseFfzChannelEmotes(response),\n    };\n\n    dispatch(fetchFfzChannelEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchFfzChannelEmotesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchFfzGlobalEmotes = (state, { type, payload }) => {\n  if (type === fetchFfzGlobalEmotesRequest.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: true,\n        isLoaded: false,\n        isError: false,\n        error: null,\n      },\n    };\n  }\n\n  if (type === fetchFfzGlobalEmotesSuccess.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: true,\n        isError: false,\n        error: null,\n        ...payload,\n      },\n    };\n  }\n\n  if (type === fetchFfzGlobalEmotesFailure.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: false,\n        isError: true,\n        ...payload,\n      },\n    };\n  }\n\n  return state;\n};\n\nconst handleFetchFfzChannelEmotes = (state, { type, payload }) => {\n  const { channel } = payload;\n\n  if (type === fetchFfzChannelEmotesRequest.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: true,\n          isLoaded: false,\n          isError: false,\n          error: null,\n        },\n      },\n    };\n  }\n\n  if (type === fetchFfzChannelEmotesSuccess.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: true,\n          isError: false,\n          error: null,\n          items: payload.items,\n        },\n      },\n    };\n  }\n\n  if (type === fetchFfzChannelEmotesFailure.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: false,\n          isError: true,\n          error: payload.error,\n        },\n      },\n    };\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [combineActions(\n      fetchFfzGlobalEmotesRequest,\n      fetchFfzGlobalEmotesSuccess,\n      fetchFfzGlobalEmotesFailure,\n    )]: handleFetchFfzGlobalEmotes,\n\n    [combineActions(\n      fetchFfzChannelEmotesRequest,\n      fetchFfzChannelEmotesSuccess,\n      fetchFfzChannelEmotesFailure,\n    )]: handleFetchFfzChannelEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport twitch from './twitch';\nimport bttv from './bttv';\nimport ffz from './ffz';\n\nexport default combineReducers({\n  twitch,\n  bttv,\n  ffz,\n});\n","// https://regex101.com/r/cpaNXh/1\nconst isStartsWithProtocolRegex = /^(?:(?:[a-z]+:)?\\/\\/)/;\n\nconst normalizeHref = (href) =>\n  isStartsWithProtocolRegex.test(href) ? href : `//${href}`;\n\nexport default normalizeHref;\n","import pt from 'prop-types';\nimport { parse as twemojiParser } from 'twemoji-parser';\nimport emojilib from 'emojilib/emojis';\nimport urlRegex from 'url-regex';\nimport {\n  pipe,\n  toPairs,\n  map,\n  flatten,\n  find,\n  propEq,\n  join,\n  filter,\n  keys,\n  head,\n} from 'ramda';\n\nimport normalizeHref from 'utils/normalizeHref';\n\nconst TWITCH_EMOTES_CDN = '//static-cdn.jtvnw.net/emoticons/v1';\nconst BTTV_EMOTES_CDN = '//cdn.betterttv.net/emote';\n\nconst mentionRegex = /^@([\\p{Letter}\\p{Number}_]+)/u;\nconst linkRegex = urlRegex({ strict: false });\n\nconst normalizeEmotesFromTags = pipe(\n  toPairs,\n  map(([id, value]) => map((v) => ({ id, ...v }), value)),\n  flatten,\n);\n\nconst getFfzSrcSet = pipe(\n  toPairs,\n  map(([dpi, url]) => `${url} ${dpi}x`),\n  join(', '),\n);\n\nexport const createTwitchEmote = ({ id, code }) => ({\n  type: 'twitch-emote',\n  alt: code,\n  src: `${TWITCH_EMOTES_CDN}/${id}/1.0`,\n  srcSet: `${TWITCH_EMOTES_CDN}/${id}/1.0 1x, ${TWITCH_EMOTES_CDN}/${id}/2.0 2x, ${TWITCH_EMOTES_CDN}/${id}/3.0 4x`,\n});\nexport const createBttvEmote = ({ id, code }) => ({\n  type: 'bttv-emote',\n  alt: code,\n  src: `${BTTV_EMOTES_CDN}/${id}/1x`,\n  srcSet: `${BTTV_EMOTES_CDN}/${id}/2x 2x, ${BTTV_EMOTES_CDN}/${id}/3x 4x`,\n});\nexport const createFfzEmote = ({ name, urls }) => ({\n  type: 'ffz-emote',\n  alt: name,\n  src: urls[1],\n  srcSet: getFfzSrcSet(urls),\n});\nexport const createEmoji = (alt, src) => ({\n  type: 'emoji',\n  alt: `:${alt}:`,\n  src,\n  srcSet: null,\n});\nexport const createMention = (text, target) => ({\n  type: 'mention',\n  text,\n  target,\n});\nexport const createLink = (href) => ({\n  type: 'link',\n  text: href,\n  href: normalizeHref(href),\n});\n\nexport const twitchEmoteType = pt.shape({\n  type: pt.oneOf(['twitch-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const bttvEmoteType = pt.shape({\n  type: pt.oneOf(['bttv-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const ffzEmoteType = pt.shape({\n  type: pt.oneOf(['ffz-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const emojiType = pt.shape({\n  type: pt.oneOf(['emoji']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string,\n});\nexport const mentionType = pt.shape({\n  type: pt.oneOf(['mention']).isRequired,\n  text: pt.string.isRequired,\n  target: pt.string.isRequired,\n});\nexport const linkType = pt.shape({\n  type: pt.oneOf(['link']).isRequired,\n  text: pt.string.isRequired,\n  href: pt.string.isRequired,\n});\n\nconst regexMap = {\n  4: '>\\\\(', // '\\\\&gt\\\\;\\\\('\n  9: '<3', // '\\\\&lt\\\\;3'\n};\n\nconst findTwitchEmote = (name, twitch) =>\n  find(({ id, code }) => {\n    // 1-14 - match by regex\n    if (id >= 1 && id <= 14) {\n      const regexString = regexMap[id] || code;\n      return RegExp(`^${regexString}$`).test(name);\n    }\n    return name === code;\n  }, twitch);\nconst findBttvEmote = (name, bttv) => find(propEq('code', name), bttv);\nconst findFfzEmote = (name, ffz) => find(propEq('name', name), ffz);\nconst findEmoji = (char) =>\n  pipe(filter(propEq('char', char)), keys, head)(emojilib);\n\nconst findEntity = (word, { twitch, bttv, ffz }, { parseTwitch = false }) => {\n  if (parseTwitch) {\n    const twitchEmote = findTwitchEmote(word, twitch);\n    if (twitchEmote)\n      return createTwitchEmote({ id: twitchEmote.id, code: word });\n  }\n\n  const bttvEmote = findBttvEmote(word, bttv);\n  if (bttvEmote) return createBttvEmote(bttvEmote);\n\n  const ffzEmote = findFfzEmote(word, ffz);\n  if (ffzEmote) return createFfzEmote(ffzEmote);\n\n  // Don't parse two or more emotes without spaces between\n  // Don't parse emote if it's not in the emojilib package\n  const emojiMatch = twemojiParser(word, { assetType: 'png' });\n  if (\n    emojiMatch &&\n    emojiMatch.length === 1 &&\n    emojiMatch[0].text.length === word.length\n  ) {\n    const emoji = findEmoji(word);\n\n    if (emoji) {\n      const [{ url }] = emojiMatch;\n      return createEmoji(emoji, url);\n    }\n  }\n\n  // TODO: Use unicode regex if it supports\n  const mentionMatch = word.match(mentionRegex);\n  if (mentionMatch) {\n    const [text, target] = mentionMatch;\n    return [\n      createMention(text, target.toLowerCase()),\n      word.length - text.length,\n    ];\n  }\n\n  const linkMatch = word.match(linkRegex);\n  if (linkMatch && linkMatch[0].length === word.length) {\n    return createLink(word);\n  }\n\n  return null;\n};\n\nconst formatMessage = (message, embeddedEmotes, emotes) => {\n  // If the message was sent by the current user, there is no embedded emotes\n  // So we need to parse twitch emotes manually\n\n  const isOwnMessage = embeddedEmotes === undefined || embeddedEmotes === null;\n  const hasEmbeddedEmotes =\n    embeddedEmotes && Object.keys(embeddedEmotes).length > 0;\n  const normalizedEmbeddedEmotes = normalizeEmotesFromTags(embeddedEmotes);\n\n  const result = [];\n  let offset = 0;\n  // Before that offset all content was added to the result array\n  let arrayOffset = 0;\n\n  // Check every word. From offset to the next space index\n  do {\n    const spaceIndex = message.indexOf(' ', offset + 1);\n\n    const isStart = offset === 0;\n    const isEnd = spaceIndex === -1;\n\n    const startIndex = isStart ? offset : offset + 1;\n    const endIndex = isEnd ? message.length : spaceIndex;\n\n    const word = message.substring(startIndex, endIndex);\n\n    if (word) {\n      let entity = null;\n\n      // Check embedded twitch emotes\n      if (hasEmbeddedEmotes) {\n        const embeddedEmote = find(\n          propEq('start', startIndex),\n          normalizedEmbeddedEmotes,\n        );\n\n        if (embeddedEmote) {\n          entity = createTwitchEmote({ id: embeddedEmote.id, code: word });\n        }\n      }\n\n      // Check other entities\n      if (!entity) {\n        entity = findEntity(word, emotes, { parseTwitch: isOwnMessage });\n      }\n\n      if (entity) {\n        // Push all text before this entity\n        if (arrayOffset !== startIndex) {\n          const textBefore = message.substring(arrayOffset, startIndex);\n          result.push(textBefore);\n        }\n\n        // If entity it's an array it means entity may be not full word\n        // The second element is the difference between word length and entity length\n        if (Array.isArray(entity)) {\n          const [entityObject, difference] = entity;\n          result.push(entityObject);\n          arrayOffset = endIndex - difference;\n        } else {\n          result.push(entity);\n          arrayOffset = endIndex;\n        }\n      }\n    }\n\n    // If it's the last word and it wasn't added to the result add it now\n    if (spaceIndex === -1 && arrayOffset !== endIndex) {\n      const textAfter = message.substring(arrayOffset, endIndex);\n      result.push(textAfter);\n    }\n\n    offset = spaceIndex;\n  } while (offset !== -1);\n\n  return result;\n};\n\nexport default formatMessage;\n","import { path, pathOr } from 'ramda';\n\nexport const currentChannelSelector = pathOr('', ['chat', 'currentChannel']);\n\nexport const channelIdSelector = (state) =>\n  pathOr(\n    null,\n    ['chat', 'channels', currentChannelSelector(state), 'roomState', 'roomId'],\n    state,\n  );\n\nexport const isEvenSelector = (state) =>\n  pathOr(false, ['messages', currentChannelSelector(state), 'isEven'], state);\n\nexport const isBlockedUsersLoadedSelector = (state) =>\n  state.chat.blockedUsers.isLoaded || state.chat.blockedUsers.isError;\n\nexport const blockedUsersSelector = path(['chat', 'blockedUsers', 'items']);\n","import { createSelector } from 'reselect';\nimport { pipe, path, pathOr, propOr, values, flatten, omit, map } from 'ramda';\n\nimport {\n  createTwitchEmote,\n  createBttvEmote,\n  createFfzEmote,\n} from 'utils/formatMessage';\nimport { currentChannelSelector } from 'reducers/chat/selectors';\n\nexport const twitchEmotesSelector = createSelector(\n  pathOr([], ['emotes', 'twitch', 'items']),\n  pipe(values, flatten),\n);\n\nconst createGlobalEmotesSelector = (type) =>\n  pathOr([], ['emotes', type, 'global', 'items']);\nconst createChannelEmotesSelector = (type) => (state) =>\n  pathOr(\n    [],\n    ['emotes', type, 'channels', currentChannelSelector(state), 'items'],\n    state,\n  );\n\nconst bttvGlobalEmotesSelector = createGlobalEmotesSelector('bttv');\nconst bttvChannelEmotesSelector = createChannelEmotesSelector('bttv');\nexport const bttvEmotesSelector = createSelector(\n  bttvGlobalEmotesSelector,\n  bttvChannelEmotesSelector,\n  (bttvGlobal, bttvChannel) => [...bttvGlobal, ...bttvChannel],\n);\n\nconst ffzGlobalEmotesSelector = createGlobalEmotesSelector('ffz');\nconst ffzChannelEmotesSelector = createChannelEmotesSelector('ffz');\nexport const ffzEmotesSelector = createSelector(\n  ffzGlobalEmotesSelector,\n  ffzChannelEmotesSelector,\n  (ffzGlobal, ffzChannel) => [...ffzGlobal, ...ffzChannel],\n);\n\nexport const emotesSelector = (state) => ({\n  twitch: twitchEmotesSelector(state),\n  bttv: bttvEmotesSelector(state),\n  ffz: ffzEmotesSelector(state),\n});\n\n// prettier-ignore\nconst regexEmotesMap = {\n  '[oO](_|\\\\.)[oO]': 'O_o',\n  '\\\\&gt\\\\;\\\\(':     '>(',\n  '\\\\&lt\\\\;3':       '<3',\n  '\\\\:-?(o|O)':      ':O',\n  '\\\\:-?(p|P)':      ':P',\n  '\\\\:-?[\\\\\\\\/]':    ':/',\n  '\\\\:-?[z|Z|\\\\|]':  ':Z',\n  '\\\\:-?\\\\(':        ':(',\n  '\\\\:-?\\\\)':        ':)',\n  '\\\\:-?D':          ':D',\n  '\\\\;-?(p|P)':      ';P',\n  '\\\\;-?\\\\)':        ';)',\n  'R-?\\\\)':          'R)',\n  'B-?\\\\)':          'B)',\n};\n\nconst createGlobalTwitchEmote = ({ id, code }) =>\n  createTwitchEmote({ id, code: regexEmotesMap[code] || code });\n\nexport const emoteCategoriesSelector = createSelector(\n  (state) => state.emotes.twitch.items,\n  bttvGlobalEmotesSelector,\n  bttvChannelEmotesSelector,\n  ffzGlobalEmotesSelector,\n  ffzChannelEmotesSelector,\n  (twitch, bttvGlobal, bttvChannel, ffzGlobal, ffzChannel) =>\n    [\n      {\n        title: 'BetterTTV Channel Emotes',\n        items: bttvChannel.map(createBttvEmote),\n      },\n      {\n        title: 'FrankerFaceZ Channel Emotes',\n        items: ffzChannel.map(createFfzEmote),\n      },\n      ...pipe(\n        omit(['0']),\n        values,\n        map((items) => ({ items: map(createTwitchEmote, items) })),\n      )(twitch),\n      {\n        title: 'Twitch',\n        items: map(createGlobalTwitchEmote, propOr([], '0', twitch)),\n      },\n      {\n        title: 'BetterTTV',\n        items: bttvGlobal.map(createBttvEmote),\n      },\n      {\n        title: 'FrankerFaceZ',\n        items: ffzGlobal.map(createFfzEmote),\n      },\n    ].filter(({ items }) => items.length > 0),\n);\n\nconst createIsEmotesLoadedSelector = (type) => (state) => {\n  const channel = currentChannelSelector(state);\n  const globalLoaded =\n    state.emotes[type].global.isLoaded || state.emotes[type].global.isError;\n  const channelLoaded =\n    path(['emotes', type, 'channels', channel, 'isLoaded'], state) ||\n    path(['emotes', type, 'channels', channel, 'isError'], state);\n  return globalLoaded && channelLoaded;\n};\n\nexport const isBttvEmotesLoadedSelector = createIsEmotesLoadedSelector('bttv');\nexport const isFfzEmotesLoadedSelector = createIsEmotesLoadedSelector('ffz');\nexport const isTwitchEmotesLoadedSelector = (state) =>\n  state.emotes.twitch.isLoaded || state.emotes.twitch.isError;\n\nexport const isEmotesLoadedSelector = (state) =>\n  isTwitchEmotesLoadedSelector(state) &&\n  isBttvEmotesLoadedSelector(state) &&\n  isFfzEmotesLoadedSelector(state);\n","import { pathOr } from 'ramda';\n\nimport { currentChannelSelector } from 'reducers/chat/selectors';\n\nexport const globalBadgesSelector = (state) => state.badges.global.items;\nexport const channelBadgesSelector = (state) =>\n  pathOr({}, ['badges', 'channels', currentChannelSelector(state), 'items']);\n\nconst isGlobalBadgesLoadedSelector = (state) =>\n  state.badges.global.isLoaded || state.badges.global.isError;\n\nconst isChannelBadgesLoadedSelector = (state) => {\n  const channel = currentChannelSelector(state);\n  return (\n    pathOr(false, ['badges', 'channels', channel, 'isLoaded'], state) ||\n    pathOr(false, ['badges', 'channels', channel, 'isError'], state)\n  );\n};\n\nexport const isBadgesLoadedSelector = (state) =>\n  isGlobalBadgesLoadedSelector(state) && isChannelBadgesLoadedSelector(state);\n","export const TWITCH_API_AUTH_BASE = 'https://id.twitch.tv/oauth2/authorize';\n\nexport const TWITCH_API_CLIENT_ID = process.env.REACT_APP_TWITCH_API_CLIENT_ID;\nexport const TWITCH_API_REDIRECT_URI =\n  process.env.REACT_APP_TWITCH_API_REDIRECT_URI;\n\nexport const CHANNEL_MESSAGES_LIMIT = 500;\n\nexport const MESSAGE_TYPES = {\n  MESSAGE: 'MESSAGE',\n  NOTICE_MESSAGE: 'NOTICE_MESSAGE',\n  USER_NOTICE_MESSAGE: 'USER_NOTICE_MESSAGE',\n};\n","import { pathOr, toPairs, map, pipe, filter } from 'ramda';\n\nconst createBadge = ({\n  title,\n  description,\n  image_url_1x: imageUrl1x,\n  image_url_2x: imageUrl2x,\n  image_url_4x: imageUrl4x,\n}) => ({\n  alt: title,\n  label: description,\n  src: imageUrl1x,\n  srcSet: `${imageUrl1x} 1x, ${imageUrl2x} 2x, ${imageUrl4x} 4x`,\n});\n\nconst getMessageBadges = (badges, globalBadges, channelBadges) => {\n  const mapBadges = ([name, version]) => {\n    const badge =\n      pathOr(false, [name, 'versions', version], channelBadges) ||\n      pathOr(false, [name, 'versions', version], globalBadges);\n\n    return badge ? createBadge(badge) : false;\n  };\n\n  return pipe(\n    toPairs,\n    map(mapBadges),\n    filter(Boolean),\n  )(badges);\n};\n\nexport default getMessageBadges;\n","/* eslint-disable no-underscore-dangle */\nimport { pathOr, omit, mergeDeepRight, mergeDeepWith, concat } from 'ramda';\nimport { EventEmitter } from 'events';\nimport { parse as tekkoParse, format as tekkoFormat } from 'tekko';\nimport camelCase from 'camel-case';\nimport uuid from 'uuid/v4';\n\nconst chatUrl = 'wss://irc-ws.chat.twitch.tv:443';\n\nconst noopIRCCommands = [\n  'CAP',\n  '002',\n  '003',\n  '004',\n  '353',\n  '366',\n  '375',\n  '372',\n  '376',\n];\n\nconst booleanMessageTags = [\n  'mod',\n  'emote-only',\n  'r9k',\n  'rituals',\n  'subs-only',\n  'msg-param-should-share-streak',\n];\n\nconst numberMessageTags = [\n  'tmi-sent-ts',\n  'ban-duration',\n  'bits',\n  'msg-param-cumulative-months',\n  'msg-param-months',\n  'msg-param-promo-gift-total',\n  'msg-param-streak-months',\n  'msg-param-viewerCount',\n  'msg-param-threshold',\n];\n\nconst depricatedMessageTags = ['subscriber', 'turbo', 'user-type'];\n\nconst noticeMessageTags = [\n  'msg_banned',\n  'msg_bad_characters',\n  'msg_channel_blocked',\n  'msg_channel_suspended',\n  'msg_duplicate',\n  'msg_emoteonly',\n  'msg_facebook',\n  'msg_followersonly',\n  'msg_followersonly_followed',\n  'msg_followersonly_zero',\n  'msg_r9k',\n  'msg_ratelimit',\n  'msg_rejected',\n  'msg_rejected_mandatory',\n  'msg_room_not_found',\n  'msg_slowmode',\n  'msg_subsonly',\n  'msg_suspended',\n  'msg_timedout',\n  'msg_verified_email',\n];\n\nconst getRandomUsername = () =>\n  `justinfan${Math.floor(Math.random() * 80000 + 1000)}`;\n\nconst parseMessageEmotes = (raw = '') => {\n  if (!raw) return {};\n\n  return raw.split('/').reduce((acc, emote) => {\n    const [id, indexes] = emote.split(':');\n\n    return {\n      ...acc,\n      [id]: indexes.split(',').map((index) => {\n        const [start, end] = index.split('-');\n\n        return {\n          start: Number.parseInt(start, 10),\n          end: Number.parseInt(end, 10),\n        };\n      }),\n    };\n  }, {});\n};\n\nconst parseBadges = (data = '') => {\n  if (!data) return {};\n\n  return data.split(',').reduce((acc, badge) => {\n    const [name, value] = badge.split('/');\n\n    return {\n      ...acc,\n      [name]: value,\n    };\n  }, {});\n};\n\nconst normalizeTagValue = (name, value) => {\n  if (name === 'emotes') return parseMessageEmotes(value);\n  if (name === 'badges') return parseBadges(value);\n  if (name === 'badge-info') return parseBadges(value);\n\n  if (name === 'followers-only') {\n    let followersOnly = false;\n    if (value === '-1') {\n      followersOnly = false;\n    } else if (value === '0') {\n      followersOnly = true;\n    } else if (typeof value === 'string') {\n      followersOnly = parseInt(value, 10);\n    }\n    return followersOnly;\n  }\n\n  if (name === 'slow') {\n    let slow = false;\n    if (value === '0') {\n      slow = false;\n    } else if (typeof value === 'string') {\n      slow = parseInt(value, 10);\n    }\n    return slow;\n  }\n\n  if (booleanMessageTags.includes(name)) return value === '1';\n  if (numberMessageTags.includes(name)) return parseInt(value, 10);\n\n  if (typeof value === 'string') {\n    return value.replace('\\\\s', ' ');\n  }\n\n  return value;\n};\n\nexport const parseMessageTags = (data = {}) =>\n  Object.entries(data)\n    .filter(([key]) => !depricatedMessageTags.includes(key))\n    .reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [camelCase(key)]: normalizeTagValue(key, value),\n      };\n    }, {});\n\nexport const isBroadcaster = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'broadcaster');\n\nexport const isMod = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'moderator');\n\nexport const isSub = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'subscriber');\n\nexport const isVIP = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'vip');\n\nexport const monthsSubbed = (tags = {}) => {\n  const subbed = tags.subscriber;\n\n  return subbed ? parseInt(subbed, 10) : 0;\n};\n\nexport const getIsAction = (message) =>\n  message.startsWith('\\u0001ACTION ') && message.endsWith('\\u0001');\nexport const normalizeActionMessage = (message) => message.slice(8, -1);\n\nexport const parseMessageData = ({\n  raw,\n  command,\n  tags,\n  middle: params,\n  trailing: message,\n  prefix,\n}) => ({\n  raw,\n  command,\n  tags: parseMessageTags(tags),\n  params,\n  message,\n  prefix,\n});\n\nexport const parseChatMessage = ({\n  message,\n  tags,\n  params,\n  prefix: { user },\n}) => {\n  const isAction = getIsAction(message);\n\n  return {\n    message: isAction ? normalizeActionMessage(message) : message,\n    tags,\n    user,\n    channel: params[0].slice(1),\n    isAction,\n  };\n};\n\nconst parseGlobalUserState = ({ tags }) => ({ tags });\nconst parseState = ({ tags, params: [channel] }) => ({\n  tags,\n  channel: channel.slice(1),\n});\nconst parseUserState = parseState;\nconst parseRoomState = parseState;\n\nconst parseCommand = ({ message, tags, params: [channel] }) => ({\n  message,\n  tags,\n  channel: channel.slice(1),\n});\nconst parseNotice = parseCommand;\nconst parseUserNotice = parseCommand;\nconst parseClearMessage = parseCommand;\nconst parseClearChat = parseCommand;\nconst parseHostTarget = parseCommand;\n\nconst parseWhisper = ({\n  message,\n  tags,\n  params: [channel],\n  prefix: { user },\n}) => ({\n  message,\n  tags,\n  channel,\n  user,\n});\n\nclass Client extends EventEmitter {\n  socket;\n\n  options;\n\n  user;\n\n  channels;\n\n  _queue;\n\n  _messagesQueue;\n\n  constructor(options = {}) {\n    super();\n    this.socket = null;\n    this.channels = {};\n    this.options = mergeDeepRight({ identity: {} }, options);\n    this.user = null;\n    this._queue = [];\n    this._messagesQueue = {};\n  }\n\n  _onConnect() {\n    const { name, auth } = this.options.identity;\n\n    const nick = name || getRandomUsername();\n    const pass = auth ? `oauth:${auth}` : 'SCHMOOPIIE';\n\n    this.sendRaw([\n      'CAP REQ :twitch.tv/tags twitch.tv/commands',\n      `PASS ${pass}`,\n      `NICK ${nick}`,\n    ]);\n    this.emit('connected');\n  }\n\n  _onClose(hadError) {\n    // TODO\n    const willReconnect = false;\n    this.emit('disconnected', { willReconnect, hadError });\n    if (willReconnect) {\n      this.connect();\n    }\n  }\n\n  _onError(error) {\n    // TODO\n    this.emit('error', error);\n  }\n\n  _onData(rawData) {\n    const data = rawData.trim().split('\\r\\n');\n    data.forEach((line) => this._handleMessage(line));\n  }\n\n  _emmitOwnMessage(tags, channel) {\n    const message = pathOr([], ['_messagesQueue', channel], this).shift();\n\n    if (typeof message !== 'string') return;\n\n    const isAction = message.startsWith('/me ');\n    const messageEventData = {\n      message: isAction ? message.slice(4) : message,\n      tags: {\n        ...tags,\n        id: uuid(),\n        tmiSentTs: new Date().getTime(),\n        userId: this.user.userId,\n      },\n      user: this.options.identity.name,\n      channel,\n      isAction,\n    };\n\n    this.emit('ownmessage', messageEventData);\n  }\n\n  _handleMessage(raw) {\n    const parsedData = tekkoParse(raw);\n    parsedData.raw = raw;\n    const { command } = parsedData;\n\n    if (command === 'PING') {\n      this.sendRaw('PONG :tmi.twitch.tv');\n      this.emit('ping');\n      return;\n    }\n\n    if (parsedData.prefix && parsedData.prefix.user === 'jtv') {\n      // console.log('JTV');\n      // console.log(parsedData);\n      return;\n    }\n\n    if (command === '001') {\n      const name = parsedData.params[0];\n      this.options.identity.name = name;\n\n      while (this._queue.length) {\n        const ircMessage = this._queue.shift();\n        this.sendRaw(ircMessage);\n      }\n\n      return;\n    }\n\n    // noop\n    if (noopIRCCommands.includes(command)) {\n      return;\n    }\n\n    const data = parseMessageData(parsedData);\n    const channel = pathOr('', ['params', 0], data).slice(1);\n\n    // Sends a message to a channel\n    if (command === 'PRIVMSG') {\n      const eventData = parseChatMessage(data);\n      this.emit('message', eventData);\n      return;\n    }\n\n    // Sends user-state data when a user joins a channel or sends a PRIVMSG to a channel\n    if (command === 'USERSTATE') {\n      const eventData = parseUserState(data);\n\n      this.channels = mergeDeepRight(this.channels, {\n        [channel]: { userState: eventData.tags },\n      });\n\n      const isSendedAfterPrivateMessage =\n        pathOr(0, ['_messagesQueue', channel, 'length'], this) > 0;\n\n      if (isSendedAfterPrivateMessage) {\n        this._emmitOwnMessage(eventData.tags, channel);\n      }\n\n      this.emit('userstate', eventData);\n      return;\n    }\n\n    if (command === 'JOIN') {\n      const eventData = { channel };\n      this.channels = mergeDeepRight(this.channels, { [channel]: {} });\n      this.emit('join', eventData);\n      return;\n    }\n\n    if (command === 'PART') {\n      const eventData = { channel };\n      this.channels = omit([channel], this.channels);\n      this.emit('part', eventData);\n      return;\n    }\n\n    if (command === 'ROOMSTATE') {\n      const eventData = parseRoomState(data);\n      this.channels = mergeDeepRight(this.channels, {\n        [channel]: { roomState: eventData.tags },\n      });\n      this.emit('roomstate', eventData);\n      return;\n    }\n\n    if (command === 'NOTICE') {\n      const eventData = parseNotice(data);\n\n      // Last message was not sent\n      if (noticeMessageTags.includes(data.tags.msgId)) {\n        pathOr([], ['_messagesQueue', channel], this).shift();\n      }\n\n      this.emit('notice', eventData);\n      return;\n    }\n\n    if (command === 'USERNOTICE') {\n      const eventData = parseUserNotice(data);\n      this.emit('usernotice', eventData);\n      return;\n    }\n\n    if (command === 'CLEARCHAT') {\n      const eventData = parseClearChat(data);\n      this.emit('clearchat', eventData);\n      return;\n    }\n\n    if (command === 'CLEARMSG') {\n      const eventData = parseClearMessage(data);\n      this.emit('clearmsg', eventData);\n      return;\n    }\n\n    if (command === 'HOSTTARGET') {\n      const eventData = parseHostTarget(data);\n      this.emit('hosttarget', eventData);\n      return;\n    }\n\n    if (command === 'WHISPER') {\n      const eventData = parseWhisper(data);\n      this.emit('whisper', eventData);\n      return;\n    }\n\n    if (command === 'GLOBALUSERSTATE') {\n      const eventData = parseGlobalUserState(data);\n      this.user = eventData.tags;\n      this.emit('globaluserstate', eventData);\n      return;\n    }\n\n    this.emit('unhandled-command', data);\n  }\n\n  sendRaw(message) {\n    const handleError = (err) => {\n      if (err) {\n        this.emit('error', err);\n      }\n    };\n\n    if (Array.isArray(message)) {\n      message.forEach((line) => this.socket.send(`${line}\\r\\n`, handleError));\n    } else {\n      this.socket.send(`${message}\\r\\n`, handleError);\n    }\n  }\n\n  connect() {\n    this.socket = new WebSocket(chatUrl);\n    const { socket } = this;\n\n    socket.addEventListener('open', () => this._onConnect());\n    socket.addEventListener('close', (hadError) => this._onClose(hadError));\n    socket.addEventListener('error', (error) => this._onError(error));\n    socket.addEventListener('message', (data) => this._onData(data.data));\n  }\n\n  say(channel, message) {\n    // TODO: check if conected to the channel before send\n\n    if (!message) return;\n\n    const ircMessage = tekkoFormat({\n      command: 'PRIVMSG',\n      middle: [`#${channel}`],\n      trailing: message,\n    });\n    this.sendRaw(ircMessage);\n\n    this._messagesQueue = mergeDeepWith(concat, this._messagesQueue, {\n      [channel]: [message],\n    });\n  }\n\n  sendCommand(channel, command, params) {\n    const commandParams = Array.isArray(params) ? params.join(' ') : params;\n    const ircMessage = tekkoFormat({\n      command: 'PRIVMSG',\n      middle: [`#${channel}`],\n      trailing: `/${command} ${commandParams}`,\n    });\n    this.sendRaw(ircMessage);\n  }\n\n  join(roomName) {\n    const ircMessage = tekkoFormat({\n      command: 'JOIN',\n      middle: [`#${roomName}`],\n    });\n\n    if (!this.user) {\n      this._queue.push(ircMessage);\n    } else {\n      this.sendRaw(ircMessage);\n    }\n  }\n\n  part(roomName) {\n    const ircMessage = tekkoFormat({\n      command: 'PART',\n      middle: [`#${roomName}`],\n    });\n\n    if (!this.user) {\n      this._queue.push(ircMessage);\n    } else {\n      this.sendRaw(ircMessage);\n    }\n  }\n}\n\nexport default Client;\n","import { parse } from 'tekko';\n\nimport {\n  globalBadgesSelector,\n  channelBadgesSelector,\n} from 'reducers/badges/selectors';\nimport { emotesSelector } from 'reducers/emotes/selectors';\nimport { blockedUsersSelector } from 'reducers/chat/selectors';\nimport { MESSAGE_TYPES } from 'utils/constants';\nimport {\n  getIsAction,\n  normalizeActionMessage,\n  parseMessageTags,\n} from 'utils/twitchChat';\nimport formatMessage from 'utils/formatMessage';\nimport getMessageBadges from 'utils/getMessageBadges';\n\nconst normalizeRecentMessages = (state, messages) => {\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n  const blockedUsers = blockedUsersSelector(state);\n\n  const filterMessages = ({ command, prefix: { user } }) =>\n    command === 'PRIVMSG' && !blockedUsers.includes(user);\n\n  const normalizeMessages = ({\n    tags,\n    params: [channel, message],\n    prefix: { user },\n  }) => {\n    const isAction = getIsAction(message);\n    const normalizedMessage = isAction\n      ? normalizeActionMessage(message)\n      : message;\n    const parsedTags = parseMessageTags(tags);\n\n    return {\n      type: MESSAGE_TYPES.MESSAGE,\n      message: normalizedMessage,\n      messageArray: formatMessage(normalizedMessage, parsedTags.emotes, emotes),\n      tags: parsedTags,\n      badges: getMessageBadges(parsedTags.badges, globalBadges, channelBadges),\n      user,\n      channel: channel.slice(1),\n      isAction,\n      isHistory: true,\n    };\n  };\n\n  return messages\n    .map((m) => parse(m))\n    .filter(filterMessages)\n    .map(normalizeMessages);\n};\n\nexport default normalizeRecentMessages;\n","import {\n  createAction,\n  createActions,\n  handleActions,\n  combineActions,\n} from 'redux-actions';\nimport { pathOr, mergeDeepRight, concat } from 'ramda';\n\nimport { emotesSelector } from 'reducers/emotes/selectors';\nimport {\n  globalBadgesSelector,\n  channelBadgesSelector,\n} from 'reducers/badges/selectors';\nimport { fetchRecentMessages as apiFetchRecentMessages } from 'utils/api';\nimport { CHANNEL_MESSAGES_LIMIT, MESSAGE_TYPES } from 'utils/constants';\nimport storeFlags from 'utils/storeFlags';\nimport formatMessage from 'utils/formatMessage';\nimport getMessageBadges from 'utils/getMessageBadges';\nimport normalizeRecentMessages from 'utils/normalizeRecentMessages';\n\nconst defaultState = {\n  // [channel]: {\n  //   history: {\n  //     isLoading: true,\n  //     isLoaded: false,\n  //     isError: false,\n  //     error: null,\n  //   },\n  //   isEven: false,\n  //   items: [],\n  // },\n};\n\nconst {\n  addMessageEntity,\n  fetchRecentMessagesRequest,\n  fetchRecentMessagesSuccess,\n  fetchRecentMessagesFailure,\n} = createActions(\n  'ADD_MESSAGE_ENTITY',\n  'FETCH_RECENT_MESSAGES_REQUEST',\n  'FETCH_RECENT_MESSAGES_SUCCESS',\n  'FETCH_RECENT_MESSAGES_FAILURE',\n);\n\nexport const clearChat = createAction('CLEAR_CHAT');\nexport const addRecentMessagesAction = createAction('ADD_RECENT_MESSAGES');\n\nconst sliceMessages = (items) => {\n  const diff = items.length - CHANNEL_MESSAGES_LIMIT;\n  return diff > 0 ? items.slice(diff) : items;\n};\n\nconst getIsEven = (prev, addedItemsCount, isSliced) => {\n  if (isSliced) {\n    return addedItemsCount % 2 ? !prev : prev;\n  }\n  return prev;\n};\n\nexport const addRecentMessages = (channel) => (dispatch, getState) => {\n  const state = getState();\n  const messages = pathOr([], ['messages', channel, 'history', 'items'], state);\n  const data = {\n    channel,\n    items: normalizeRecentMessages(state, messages),\n  };\n\n  dispatch(addRecentMessagesAction(data));\n};\n\nexport const fetchRecentMessages = (channel) => async (dispatch) => {\n  dispatch(fetchRecentMessagesRequest({ channel }));\n  try {\n    const response = await apiFetchRecentMessages(channel);\n    const data = { channel, items: response.messages };\n\n    dispatch(fetchRecentMessagesSuccess(data));\n  } catch (error) {\n    dispatch(fetchRecentMessagesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchRecentMessages = (state, { type, payload }) => {\n  const { channel } = payload;\n\n  if (type === fetchRecentMessagesRequest.toString()) {\n    return mergeDeepRight(state, {\n      [channel]: {\n        history: { ...storeFlags.request },\n      },\n    });\n  }\n\n  if (type === fetchRecentMessagesSuccess.toString()) {\n    return mergeDeepRight(state, {\n      [channel]: {\n        history: { ...storeFlags.success, items: payload.items },\n      },\n    });\n  }\n\n  if (type === fetchRecentMessagesFailure.toString()) {\n    return mergeDeepRight(state, {\n      [channel]: {\n        history: { ...storeFlags.failure, error: payload.error },\n      },\n    });\n  }\n\n  return state;\n};\n\nexport const addMessage = ({ message, tags, ...rest }) => (\n  dispatch,\n  getState,\n) => {\n  const state = getState();\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n\n  const normalizedMessage = {\n    type: MESSAGE_TYPES.MESSAGE,\n    message,\n    messageArray: formatMessage(message, tags.emotes, emotes),\n    tags,\n    badges: getMessageBadges(tags.badges, globalBadges, channelBadges),\n    ...rest,\n  };\n\n  dispatch(addMessageEntity(normalizedMessage));\n};\n\nexport const addNoticeMessage = (message) => (dispatch) => {\n  const normalizedMessage = {\n    ...message,\n    type: MESSAGE_TYPES.NOTICE_MESSAGE,\n  };\n\n  dispatch(addMessageEntity(normalizedMessage));\n};\n\nexport const addUserNoticeMessage = (message) => (dispatch) => {\n  const normalizedMessage = {\n    ...message,\n    type: MESSAGE_TYPES.USER_NOTICE_MESSAGE,\n  };\n\n  dispatch(addMessageEntity(normalizedMessage));\n};\n\nconst handleAddMessageEntity = (state, { payload: message }) => {\n  const { channel } = message;\n  const oldItems = pathOr([], [channel, 'items'], state);\n  const newItems = [...oldItems, message];\n  const slicedMessages = sliceMessages(newItems);\n  const isSliced = newItems.length > slicedMessages.length;\n  const isEven = pathOr(false, [channel, 'isEven'], state);\n\n  return {\n    ...state,\n    [channel]: {\n      ...state[channel],\n      isEven: getIsEven(isEven, 1, isSliced),\n      items: slicedMessages,\n    },\n  };\n};\n\nconst handleAddRecentMessages = (state, { payload: { channel, items } }) => {\n  const newItems = concat(items, pathOr([], [channel, 'items'], state));\n  const slicedMessages = sliceMessages(newItems);\n  const isSliced = newItems.length > slicedMessages.length;\n  const isEven = pathOr(false, [channel, 'isEven'], state);\n\n  return mergeDeepRight(state, {\n    [channel]: {\n      history: { items: [] },\n      items: newItems,\n      isEven: getIsEven(isEven, items.length, isSliced),\n    },\n  });\n};\n\nconst handleClearChat = (state, { payload }) => {\n  const {\n    channel,\n    tags: { targetUserId },\n  } = payload;\n\n  const newItems = state[channel].items.map((message) =>\n    message.tags.userId === targetUserId && !message.isHistory\n      ? { ...message, isDeleted: true }\n      : message,\n  );\n\n  return {\n    ...state,\n    [channel]: {\n      ...state[channel],\n      items: newItems,\n    },\n  };\n};\n\nconst reducer = handleActions(\n  {\n    [addMessageEntity]: handleAddMessageEntity,\n    [addRecentMessagesAction]: handleAddRecentMessages,\n    [combineActions(\n      fetchRecentMessagesRequest,\n      fetchRecentMessagesSuccess,\n      fetchRecentMessagesFailure,\n    )]: handleFetchRecentMessages,\n    [clearChat]: handleClearChat,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createAction, handleActions } from 'redux-actions';\n\nconst getOptionsFromLocalStorage = () => {\n  try {\n    return JSON.parse(localStorage.options);\n  } catch {\n    return {};\n  }\n};\n\nconst defaultState = {\n  showTimestamps: false,\n  splitChat: true,\n  blacklistKeywords: '',\n  highlightKeywords: '',\n  ...getOptionsFromLocalStorage(),\n};\n\nexport const changeOption = createAction('CHANGE_OPTION', (option, value) => {\n  localStorage.setItem(\n    'options',\n    JSON.stringify({\n      ...getOptionsFromLocalStorage(),\n      [option]: value,\n    }),\n  );\n\n  return {\n    option,\n    value,\n  };\n});\nconst handleChangeOption = (state, { payload: { option, value } }) => ({\n  ...state,\n  [option]: value,\n});\n\nconst reducer = handleActions(\n  {\n    [changeOption]: handleChangeOption,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport auth from './auth';\nimport badges from './badges';\nimport chat from './chat';\nimport emotes from './emotes/index';\nimport messages from './messages';\nimport options from './options';\n\nexport default combineReducers({\n  auth,\n  badges,\n  chat,\n  emotes,\n  messages,\n  options,\n});\n","/* eslint-disable no-underscore-dangle */\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from 'reducers';\n\nconst enhancer =\n  process.env.NODE_ENV === 'production'\n    ? applyMiddleware(thunk)\n    : compose(\n        applyMiddleware(thunk),\n        window.__REDUX_DEVTOOLS_EXTENSION__\n          ? window.__REDUX_DEVTOOLS_EXTENSION__()\n          : (noop) => noop,\n      );\n\nconst store = createStore(rootReducer, {}, enhancer);\n\nexport default store;\n","import { useState, useEffect } from 'react';\n\nconst useLocationHash = () => {\n  const [hash, setHash] = useState(window.location.hash);\n\n  useEffect(() => {\n    const handleHashChange = () => setHash(window.location.hash);\n\n    window.addEventListener('hashchange', handleHashChange);\n\n    return () => window.removeEventListener('hashchange', handleHashChange);\n  }, []);\n\n  return hash;\n};\n\nexport default useLocationHash;\n","import { useEffect } from 'react';\n\nconst useDocumentTitle = (title) => {\n  useEffect(() => {\n    document.title = title\n      ? `#${title} - ${process.env.REACT_APP_NAME} `\n      : process.env.REACT_APP_NAME;\n  }, [title]);\n};\n\nexport default useDocumentTitle;\n","import { pathOr } from 'ramda';\n\nimport { currentChannelSelector } from 'reducers/chat/selectors';\n\nexport const messagesSelector = (state) =>\n  pathOr([], ['messages', currentChannelSelector(state), 'items'], state);\n\nexport const isHistoryLoadingSelector = (state) =>\n  pathOr(false, [\n    'messages',\n    currentChannelSelector(state),\n    'history',\n    'isLoading',\n  ])(state);\n\nexport const isHistoryLoadedSelector = (state) =>\n  pathOr(false, [\n    'messages',\n    currentChannelSelector(state),\n    'history',\n    'isLoaded',\n  ])(state);\n","import emojilib from 'emojilib/emojis';\n\nconst replaceEmojis = (text) =>\n  text\n    .split(' ')\n    .map((word) => {\n      if (word[0] !== ':' || word[word.length - 1] !== ':') {\n        return word;\n      }\n\n      const name = word.slice(1, -1);\n      const emoji = emojilib[name];\n\n      return emoji && emoji.char ? emoji.char : word;\n    })\n    .join(' ');\n\nexport default replaceEmojis;\n","export const optionsSelector = (state) => [\n  {\n    title: 'My preferences',\n    items: [\n      {\n        type: 'SWITCH',\n        id: 'show-timestamps',\n        name: 'showTimestamps',\n        title: 'Show Timestamps',\n        description: '',\n        value: state.options.showTimestamps,\n      },\n      {\n        type: 'SWITCH',\n        id: 'split-chat',\n        name: 'splitChat',\n        title: 'Split Chat',\n        description: '',\n        value: state.options.splitChat,\n      },\n      // {\n      //   type: 'INPUT',\n      //   id: 'blacklist-keywords',\n      //   name: 'blacklistKeywords',\n      //   title: 'Set Blacklist Keywords',\n      //   description: '',\n      //   value: state.options.blacklistKeywords,\n      // },\n      // {\n      //   type: 'INPUT',\n      //   id: 'highlight-keywords',\n      //   name: 'highlightKeywords',\n      //   title: 'Set Highlight Keywords',\n      //   description: '',\n      //   value: state.options.highlightKeywords,\n      // },\n    ],\n  },\n];\n\nexport const isShowTimestampsSelector = (state) => state.options.showTimestamps;\nexport const isSplitChatSelector = (state) => state.options.splitChat;\n","import CustomScrollbar from 'react-scrollbars-custom';\nimport styled from 'styled-components';\n\nconst Scrollbar = styled(CustomScrollbar).attrs({\n  disableTracksWidthCompensation: true,\n})`\n  overflow-y: auto;\n\n  .ScrollbarsCustom-TrackY {\n    background: none !important;\n  }\n\n  .ScrollbarsCustom-ThumbY {\n    margin-left: auto;\n    margin-right: auto;\n    width: 6px !important;\n  }\n`;\n\nexport default Scrollbar;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  fill: \"currentColor\"\n}, React.createElement(\"path\", {\n  d: \"M7 11a1 1 0 100-2 1 1 0 000 2zM14 10a1 1 0 11-2 0 1 1 0 012 0zM10 14a2 2 0 002-2H8a2 2 0 002 2z\"\n}), React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-2 0a6 6 0 11-12 0 6 6 0 0112 0z\",\n  clipRule: \"evenodd\"\n}));\n\nvar SvgSmileyFace = function SvgSmileyFace(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    width: \"100%\",\n    height: \"100%\",\n    viewBox: \"0 0 20 20\",\n    x: \"0px\",\n    y: \"0px\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgSmileyFace, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/smiley-face.c033f241.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  fill: \"currentColor\"\n}, React.createElement(\"path\", {\n  d: \"M10 8a2 2 0 100 4 2 2 0 000-4z\"\n}), React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M9 2h2a2.01 2.01 0 001.235 1.855l.53.22a2.01 2.01 0 002.185-.439l1.414 1.414a2.01 2.01 0 00-.439 2.185l.22.53A2.01 2.01 0 0018 9v2a2.01 2.01 0 00-1.855 1.235l-.22.53a2.01 2.01 0 00.44 2.185l-1.415 1.414a2.01 2.01 0 00-2.184-.439l-.531.22A2.01 2.01 0 0011 18H9a2.01 2.01 0 00-1.235-1.854l-.53-.22a2.009 2.009 0 00-2.185.438L3.636 14.95a2.009 2.009 0 00.438-2.184l-.22-.531A2.01 2.01 0 002 11V9c.809 0 1.545-.487 1.854-1.235l.22-.53a2.009 2.009 0 00-.438-2.185L5.05 3.636a2.01 2.01 0 002.185.438l.53-.22A2.01 2.01 0 009 2zm-4 8l1.464 3.536L10 15l3.535-1.464L15 10l-1.465-3.536L10 5 6.464 6.464 5 10z\",\n  clipRule: \"evenodd\"\n}));\n\nvar SvgGears = function SvgGears(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    width: \"100%\",\n    height: \"100%\",\n    viewBox: \"0 0 20 20\",\n    x: \"0px\",\n    y: \"0px\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgGears, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/gears.7c6696a1.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M8.5 10L4 5.5 5.5 4 10 8.5 14.5 4 16 5.5 11.5 10l4.5 4.5-1.5 1.5-4.5-4.5L5.5 16 4 14.5 8.5 10z\"\n});\n\nvar SvgClose = function SvgClose(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    width: \"100%\",\n    height: \"100%\",\n    viewBox: \"0 0 20 20\",\n    x: \"0px\",\n    y: \"0px\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgClose, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/close.918d96cf.svg\";\nexport { ForwardRef as ReactComponent };","import pt from 'prop-types';\nimport styled, { css } from 'styled-components';\n\nconst sizes = {\n  small: css`\n    width: 24px;\n    height: 24px;\n  `,\n  medium: css`\n    width: 30px;\n    height: 30px;\n  `,\n  // large: css``,\n};\n\nconst IconButton = styled.button.attrs({ type: 'button' })`\n  margin: 0;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: none;\n  border: none;\n  outline: none;\n  color: #fff;\n  border-radius: 4px;\n  cursor: pointer;\n\n  ${(p) => sizes[p.size]};\n\n  &:hover,\n  &:focus {\n    background-color: rgba(255, 255, 255, 0.15);\n  }\n\n  &:active {\n    background-color: rgba(255, 255, 255, 0.2);\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n`;\n\nIconButton.defaultProps = {\n  size: 'medium',\n};\n\nIconButton.propTypes = {\n  size: pt.oneOf(Object.keys(sizes)),\n};\n\nexport default IconButton;\n","import React from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport { ReactComponent as CloseIconSvg } from 'icons/close.svg';\nimport IconButton from 'components/IconButton';\n\nconst ChatModalRoot = styled.div`\n  height: 100%;\n  box-shadow: rgba(0, 0, 0, 0.4) 0px 4px 8px 0px,\n    rgba(0, 0, 0, 0.4) 0px 0px 4px 0px;\n  background-color: #18181b;\n  white-space: normal;\n  color: #fff;\n  border-radius: 4px;\n`;\nconst CloseButton = styled(IconButton).attrs({ size: 'small' })`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n`;\nconst CloseIcon = styled(CloseIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\n\nconst ChatModal = ({ children, onClose }) => (\n  <ChatModalRoot>\n    <CloseButton onClick={onClose}>\n      <CloseIcon />\n    </CloseButton>\n    {children}\n  </ChatModalRoot>\n);\n\nChatModal.defaultProps = {};\n\nChatModal.propTypes = {\n  children: pt.node.isRequired,\n  onClose: pt.func.isRequired,\n};\n\nexport default ChatModal;\n","import React, { useCallback } from 'react';\nimport pt from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { emoteCategoriesSelector } from 'reducers/emotes/selectors';\nimport Scrollbar from 'components/Scrollbar';\n\nconst EmotePickerRoot = styled.div`\n  padding-top: 32px;\n  padding-bottom: 16px;\n  height: 100%;\n`;\nconst Categories = styled.div`\n  height: 100%;\n`;\nconst Category = styled.div`\n  padding-top: 10px;\n  padding-right: 16px;\n  padding-left: 16px;\n\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding-bottom: 10px;\n  font-size: 12px;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst CategoryItems = styled.div``;\nconst Emote = styled.img`\n  padding: 2px;\n  width: 32px;\n  height: 32px;\n  object-fit: contain;\n\n  &:hover {\n    background-color: rgba(119, 44, 232, 0.2);\n    cursor: pointer;\n  }\n`;\n\nconst EmotePicker = ({ onEmoteClick }) => {\n  const emoteCategories = useSelector(emoteCategoriesSelector);\n\n  const renderCategory = useCallback(\n    ({ title, items }, key) => (\n      <Category key={key}>\n        {!!title && <CategoryHeader>{title}</CategoryHeader>}\n        <CategoryItems>\n          {items.map(({ alt, src, srcSet }) => (\n            <Emote\n              key={alt}\n              alt={alt}\n              src={src}\n              srcSet={srcSet}\n              onClick={() => onEmoteClick(alt)}\n            />\n          ))}\n        </CategoryItems>\n      </Category>\n    ),\n    [onEmoteClick],\n  );\n\n  return (\n    <EmotePickerRoot>\n      <Categories>\n        <Scrollbar>{emoteCategories.map(renderCategory)}</Scrollbar>\n      </Categories>\n    </EmotePickerRoot>\n  );\n};\n\nEmotePicker.defaultProps = {};\n\nEmotePicker.propTypes = {\n  onEmoteClick: pt.func.isRequired,\n};\n\nexport default EmotePicker;\n","import React from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\n\nconst SwitchRoot = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  line-height: 20px;\n`;\nconst Label = styled.label`\n  content: '';\n  position: relative;\n  display: inline-block;\n  order: 0;\n  width: 35px;\n  height: 20px;\n  vertical-align: bottom;\n  border-radius: 10px/50%;\n  background-color: rgba(0, 0, 0, 0.3);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15), 0 0 2px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.1s ease;\n  cursor: pointer;\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    bottom: 2px;\n    display: block;\n    width: 16px;\n    border-radius: 50%;\n    background-color: #fff;\n    transition: left 0.1s ease;\n  }\n`;\nconst Input = styled.input.attrs({ type: 'checkbox' })`\n  position: absolute;\n  opacity: 0;\n\n  &:checked + ${Label} {\n    background-color: #9147ff;\n\n    &:after {\n      content: '';\n      top: 2px;\n      left: calc(100% - 18px);\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 9px;\n      left: 10px;\n      display: block;\n      height: 3px;\n      width: 7px;\n      border-bottom: 2px solid #fff;\n      border-left: 2px solid #fff;\n      transform: translate3d(-50%, -50%, 0) rotate(-45deg);\n    }\n  }\n`;\n\nconst Switch = ({ id, label, checked, readOnly, onChange }) => (\n  <SwitchRoot>\n    <Input\n      id={id}\n      label={label}\n      checked={checked}\n      readOnly={readOnly}\n      onChange={onChange}\n    />\n    <Label htmlFor={id} />\n  </SwitchRoot>\n);\n\nSwitch.defaultProps = {\n  checked: false,\n  readOnly: false,\n  onChange: () => {},\n};\n\nSwitch.propTypes = {\n  id: pt.string.isRequired,\n  label: pt.string.isRequired,\n  checked: pt.bool,\n  readOnly: pt.bool,\n  onChange: pt.func,\n};\n\nexport default Switch;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport { changeOption } from 'reducers/options';\nimport { optionsSelector } from 'reducers/options/selectors';\nimport Scrollbar from 'components/Scrollbar';\nimport Switch from 'components/Switch';\n\nconst OptionsRoot = styled.div`\n  padding: 16px;\n  height: 100%;\n`;\nconst Header = styled.h2`\n  margin: 0;\n  padding: 0;\n  font-size: 14px;\n  text-align: center;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst Categories = styled(Scrollbar)`\n  height: 100%;\n`;\nconst Category = styled.div`\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding: 8px 0;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst CategoryItems = styled.div``;\nconst Option = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 4px 0;\n  cursor: pointer;\n`;\nconst OptionText = styled.span``;\n\nconst Options = () => {\n  const dispatch = useDispatch();\n  const options = useSelector(optionsSelector);\n\n  const renderOption = useCallback(\n    ({ id, name, title, description, value }) => (\n      <Option\n        key={id}\n        onClick={() => dispatch(changeOption(name, !value))}\n        title={description}\n      >\n        <OptionText>{title}</OptionText>\n        <Switch\n          id={id}\n          label={title}\n          checked={value}\n          onChange={() => dispatch(changeOption(name, value))}\n        />\n      </Option>\n    ),\n    [dispatch],\n  );\n\n  const renderOptionsCategory = useCallback(\n    ({ title, items }, key) => (\n      <Category key={key}>\n        {!!title && <CategoryHeader>{title}</CategoryHeader>}\n        <CategoryItems>{items.map(renderOption)}</CategoryItems>\n      </Category>\n    ),\n    [renderOption],\n  );\n\n  return (\n    <OptionsRoot>\n      <Header>Chat settings</Header>\n      <Categories>{options.map(renderOptionsCategory)}</Categories>\n    </OptionsRoot>\n  );\n};\n\nOptions.defaultProps = {};\n\nOptions.propTypes = {};\n\nexport default Options;\n","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport useOnClickOutside from 'use-onclickoutside';\n\nimport { ReactComponent as SmileyFaceIconSvg } from 'icons/smiley-face.svg';\nimport { ReactComponent as GearsIconSvg } from 'icons/gears.svg';\nimport ChatModal from 'components/ChatModal';\nimport IconButton from 'components/IconButton';\nimport EmotePicker from 'components/EmotePicker';\nimport Options from 'components/Options';\n\nconst ChatInputRoot = styled.form`\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n  background-color: #18181b;\n\n  & > :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nconst ControlsWrapper = styled.div`\n  position: relative;\n`;\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n\n  & > :not(:last-child) {\n    margin-right: 8px;\n  }\n`;\nconst SendButton = styled.button`\n  padding: 0 10px;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #9147ff;\n  outline: none;\n  font-size: 12px;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #772ce8;\n  }\n\n  &:active {\n    background-color: #5c16c5;\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n\n  &[disabled] {\n    background-color: rgba(255, 255, 255, 0.26);\n    color: rgba(255, 255, 255, 0.8);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\nconst TextareaWrapper = styled.div`\n  position: relative;\n`;\nconst EmotesModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 0;\n  bottom: 100%;\n  margin-bottom: 8px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nconst OptionsModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 0;\n  bottom: 100%;\n  margin-bottom: 10px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nconst Textarea = styled.textarea`\n  display: block;\n  padding: 10px;\n  width: 100%;\n  height: 38px;\n  max-height: 91px;\n  min-height: 40px;\n  overflow: hidden;\n  border: 2px solid transparent;\n  background-color: rgba(255, 255, 255, 0.15);\n  font-family: inherit;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\nconst EmotesButton = styled(IconButton)`\n  position: absolute;\n  right: 5px;\n  bottom: 5px;\n`;\nconst SmileyFaceIcon = styled(SmileyFaceIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\nconst GearsIcon = styled(GearsIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\nconst StyledLink = styled(Link)`\n  color: #bf94ff;\n  text-decoration: none;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\n\nconst ChatInput = ({ isAuth, isDisabled, onSubmit }) => {\n  const textareaRef = useRef(null);\n  const [text, setText] = useState('');\n  const [isEmotesModalVisible, setIsEmotesModalVisible] = useState(false);\n  const [isOptionsModalVisible, setIsOptionsModalVisible] = useState(false);\n  const textareaWrapperRef = React.useRef(null);\n  const optionsModalRef = React.useRef(null);\n\n  const handleCloseEmotesModal = () => setIsEmotesModalVisible(false);\n  const handleCloseOptionsModal = () => setIsOptionsModalVisible(false);\n\n  useOnClickOutside(textareaWrapperRef, handleCloseEmotesModal);\n  useOnClickOutside(optionsModalRef, handleCloseOptionsModal);\n\n  const handleChange = (e) => setText(e.target.value);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(text);\n    setText('');\n  };\n\n  const handleKeyDown = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        const message = text.trim();\n        if (message) {\n          onSubmit(message);\n          setText('');\n        }\n      }\n    },\n    [onSubmit, setText, text],\n  );\n\n  useEffect(() => {\n    const textareaNode = textareaRef.current;\n\n    textareaNode.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      textareaNode.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [handleKeyDown]);\n\n  const renderEmotesModal = useCallback(\n    () => (\n      <EmotesModal>\n        <ChatModal onClose={handleCloseEmotesModal}>\n          <EmotePicker\n            onEmoteClick={(emoteName) =>\n              setText((t) => `${t.trim()} ${emoteName} `.trimLeft())\n            }\n          />\n        </ChatModal>\n      </EmotesModal>\n    ),\n    [],\n  );\n\n  const renderOptionsModal = useCallback(\n    () => (\n      <OptionsModal ref={optionsModalRef}>\n        <ChatModal onClose={handleCloseOptionsModal}>\n          <Options />\n        </ChatModal>\n      </OptionsModal>\n    ),\n    [],\n  );\n\n  return (\n    <ChatInputRoot onSubmit={handleSubmit}>\n      <TextareaWrapper ref={textareaWrapperRef}>\n        {isEmotesModalVisible && renderEmotesModal()}\n        <Textarea\n          placeholder=\"Send a message\"\n          ref={textareaRef}\n          maxLength={500}\n          disabled={isDisabled}\n          onChange={handleChange}\n          value={text}\n        />\n        <EmotesButton\n          onClick={() => setIsEmotesModalVisible(!isEmotesModalVisible)}\n        >\n          <SmileyFaceIcon />\n        </EmotesButton>\n      </TextareaWrapper>\n      <ControlsWrapper>\n        <Controls>\n          {!isAuth && (\n            <StyledLink to=\"/chat/auth\">Sign in with Twitch</StyledLink>\n          )}\n          <IconButton\n            onClick={() => setIsOptionsModalVisible(!isOptionsModalVisible)}\n          >\n            <GearsIcon />\n          </IconButton>\n          <SendButton disabled={isDisabled} type=\"submit\">\n            Chat\n          </SendButton>\n        </Controls>\n        {isOptionsModalVisible && renderOptionsModal()}\n      </ControlsWrapper>\n    </ChatInputRoot>\n  );\n};\n\nChatInput.defaultProps = {\n  isDisabled: false,\n};\n\nChatInput.propTypes = {\n  isAuth: pt.bool.isRequired,\n  isDisabled: pt.bool,\n  onSubmit: pt.func.isRequired,\n};\n\nexport default ChatInput;\n","import pt from 'prop-types';\n\nimport { MESSAGE_TYPES } from 'utils/constants';\nimport {\n  twitchEmoteType,\n  bttvEmoteType,\n  ffzEmoteType,\n  emojiType,\n  mentionType,\n  linkType,\n} from 'utils/formatMessage';\n\nexport const messageType = pt.shape({\n  type: pt.oneOf([MESSAGE_TYPES.MESSAGE]).isRequired,\n  message: pt.string.isRequired,\n  messageArray: pt.arrayOf(\n    pt.oneOfType([\n      pt.string,\n      twitchEmoteType,\n      bttvEmoteType,\n      ffzEmoteType,\n      emojiType,\n      mentionType,\n      linkType,\n    ]),\n  ).isRequired,\n  tags: pt.shape({\n    badgeInfo: pt.shape({\n      subscriber: pt.string,\n    }),\n    badges: pt.shape({}),\n    color: pt.string,\n    displayName: pt.string.isRequired,\n    emotes: pt.shape({}),\n    flags: pt.string,\n    id: pt.string,\n    mod: pt.bool,\n    roomId: pt.string,\n    tmiSentId: pt.oneOfType([pt.string, pt.number]),\n    userId: pt.string,\n  }).isRequired,\n  badges: pt.arrayOf(\n    pt.shape({\n      alt: pt.string,\n      label: pt.string,\n      src: pt.string.isRequired,\n      srcSet: pt.string,\n    }),\n  ),\n  user: pt.string.isRequired,\n  isHistory: pt.bool,\n  isAction: pt.bool,\n  isDeleted: pt.bool,\n});\n\nexport const noticeType = pt.shape({\n  type: pt.oneOf([MESSAGE_TYPES.NOTICE_MESSAGE]).isRequired,\n  message: pt.string.isRequired,\n  channel: pt.string.isRequired,\n  tags: pt.shape({\n    msgId: pt.string.isRequired,\n  }).isRequired,\n});\n\nexport const userNoticeType = pt.shape({\n  type: pt.oneOf([MESSAGE_TYPES.USER_NOTICE_MESSAGE]).isRequired,\n  message: pt.string,\n  channel: pt.string.isRequired,\n  tags: pt.shape({\n    badgeInfo: pt.shape({\n      subscriber: pt.string,\n    }),\n    badges: pt.shape({}),\n    color: pt.string,\n    displayName: pt.string.isRequired,\n    emotes: pt.shape({}),\n    id: pt.string,\n    login: pt.string,\n    mod: pt.bool,\n    msgId: pt.string,\n    systemMsg: pt.string,\n    tmiSentId: pt.oneOfType([pt.string, pt.number]),\n    userId: pt.string,\n    msgParamCumulativeMonths: pt.number,\n    msgParamDisplayName: pt.string,\n    msgParamLogin: pt.string,\n    msgParamMonths: pt.number,\n    msgParamPromoGiftTotal: pt.number,\n    msgParamPromoName: pt.string,\n    msgParamRecipientDisplayName: pt.string,\n    msgParamRecipientId: pt.string,\n    msgParamRecipientUserName: pt.string,\n    msgParamSenderLogin: pt.string,\n    msgParamSenderName: pt.string,\n    msgParamShouldShareStreak: pt.bool,\n    msgParamStreakMonths: pt.number,\n    msgParamSubPlan: pt.string,\n    msgParamSubPlanName: pt.string,\n    msgParamViewerCount: pt.number,\n    msgParamRitualName: pt.string,\n    msgParamThreshold: pt.number,\n  }).isRequired,\n});\n","import React, { useState } from 'react';\nimport pt from 'prop-types';\nimport styled, { css } from 'styled-components';\nimport { format } from 'date-fns/fp';\n\nimport { messageType } from './types';\n\nconst getChatMessageBg = (p) => {\n  if (p.isMention) return 'rgba(255, 0, 0, 0.3)';\n  if (p.isEven) return '#1f1925';\n  return 'transparent';\n};\n\nconst MessageRoot = styled.div`\n  padding: 5px 20px;\n  color: ${(p) => (p.isAction ? p.color : '#fff')};\n  opacity: ${(p) => (p.isHistory || p.isDeleted ? '0.5' : '1')};\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${getChatMessageBg};\n`;\nconst Name = styled.span`\n  font-weight: bold;\n  color: ${(p) => p.color};\n`;\nconst Emote = styled.img`\n  display: inline-block;\n  margin: -5px 0;\n  vertical-align: middle;\n`;\nconst Emoji = styled.img`\n  display: inline-block;\n  margin-top: -5px;\n  margin-bottom: -4px;\n  width: 20px;\n  height: auto;\n  vertical-align: middle;\n`;\nconst Mention = styled.span`\n  ${(p) =>\n    (p.isActive || p.isOwnMessage) &&\n    css`\n      padding: 2px 4px;\n    `};\n  ${(p) =>\n    p.isOwnMessage &&\n    css`\n      background-color: #40404a;\n      color: #fff;\n    `};\n  ${(p) =>\n    p.isActive &&\n    css`\n      background-color: #fafafa;\n      color: #18181b;\n    `};\n`;\nconst Link = styled.a`\n  color: #bf94ff;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Timestamp = styled.span`\n  margin-right: 5px;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst Badge = styled.img`\n  margin-bottom: 2px;\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst renderMessageArray = (user, login) => (item, key) => {\n  if (typeof item !== 'object') return item;\n\n  if (\n    item.type === 'twitch-emote' ||\n    item.type === 'bttv-emote' ||\n    item.type === 'ffz-emote'\n  ) {\n    return (\n      <Emote key={key} src={item.src} srcSet={item.srcSet} alt={item.alt} />\n    );\n  }\n\n  if (item.type === 'emoji') {\n    return (\n      <Emoji key={key} src={item.src} srcSet={item.srcSet} alt={item.alt} />\n    );\n  }\n\n  if (item.type === 'mention') {\n    return (\n      <Mention\n        key={key}\n        isActive={item.target === login}\n        isOwnMessage={user === login}\n      >\n        {item.text}\n      </Mention>\n    );\n  }\n\n  if (item.type === 'link') {\n    return (\n      <Link\n        key={key}\n        href={item.href}\n        rel=\"noreferrer noopener\"\n        target=\"_blank\"\n      >\n        {item.text}\n      </Link>\n    );\n  }\n\n  return null;\n};\n\nconst renderBadges = (badges) =>\n  badges.map(({ alt, label, src, srcSet }, key) => (\n    // eslint-disable-next-line react/no-array-index-key\n    <Badge key={key} alt={alt} aria-label={label} src={src} srcSet={srcSet} />\n  ));\n\nconst MESSAGE_DELETED_LABED = '<message deleted>';\n\nconst Message = ({\n  message: {\n    message,\n    messageArray,\n    tags: { color, displayName, tmiSentTs },\n    badges,\n    user,\n    isHistory,\n    isAction,\n    isDeleted,\n  },\n  login,\n  isEven,\n  isShowTimestamps,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const isMention = user !== login && RegExp(login, 'gi').test(message);\n\n  return (\n    <MessageRoot\n      isHistory={isHistory}\n      isAction={isAction}\n      isEven={isEven}\n      isMention={isMention}\n      isDeleted={isDeleted}\n      color={color}\n    >\n      {isShowTimestamps && (\n        <Timestamp>{format('h:mm', new Date(tmiSentTs))}</Timestamp>\n      )}\n      {badges.length > 0 && renderBadges(badges)}\n      <Name color={color}>{displayName}</Name>\n      {isAction ? ' ' : ': '}\n      {isDeleted && !isVisible ? (\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n        <Link onClick={() => setIsVisible(true)}>{MESSAGE_DELETED_LABED}</Link>\n      ) : (\n        messageArray.map(renderMessageArray(user, login))\n      )}\n    </MessageRoot>\n  );\n};\n\nMessage.defaultProps = {\n  login: '',\n  isEven: false,\n  isShowTimestamps: false,\n};\n\nMessage.propTypes = {\n  message: messageType.isRequired,\n  login: pt.string,\n  isEven: pt.bool,\n  isShowTimestamps: pt.bool,\n};\n\nexport default React.memo(Message);\n","import React from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport { noticeType } from './types';\n\nconst NoticeRoot = styled.div`\n  padding: 5px 20px;\n  color: rgba(255, 255, 255, 0.6);\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${(p) => (p.isEven ? '#1f1925' : 'transparent')};\n`;\n\nconst Notice = ({ message: { message }, isEven }) => (\n  <NoticeRoot isEven={isEven}>{message}</NoticeRoot>\n);\n\nNotice.defaultProps = {\n  isEven: false,\n};\n\nNotice.propTypes = {\n  message: noticeType.isRequired,\n  isEven: pt.bool,\n};\n\nexport default React.memo(Notice);\n","import React from 'react';\n// import pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport { userNoticeType } from './types';\n\nconst UserNoticeRoot = styled.div`\n  padding: 5px 20px 5px 16px;\n  line-height: 20px;\n  word-wrap: break-word;\n  border-left: 4px solid #9147ff;\n  color: #fff;\n`;\n\nconst UserNotice = ({\n  message: {\n    tags: { systemMsg },\n  },\n}) => <UserNoticeRoot>{systemMsg}</UserNoticeRoot>;\n\nUserNotice.propTypes = {\n  message: userNoticeType.isRequired,\n};\n\nexport default React.memo(UserNotice);\n","import React from 'react';\nimport pt from 'prop-types';\n\nimport { MESSAGE_TYPES } from 'utils/constants';\nimport { messageType, noticeType, userNoticeType } from './types';\nimport Message from './Message';\nimport Notice from './Notice';\nimport UserNotice from './UserNotice';\n\nconst ChatMessage = ({ message, login, isEven, isShowTimestamps }) => {\n  if (message.type === MESSAGE_TYPES.MESSAGE) {\n    return (\n      <Message\n        message={message}\n        login={login}\n        isEven={isEven}\n        isShowTimestamps={isShowTimestamps}\n      />\n    );\n  }\n\n  if (message.type === MESSAGE_TYPES.NOTICE_MESSAGE) {\n    return <Notice message={message} isEven={isEven} />;\n  }\n\n  if (message.type === MESSAGE_TYPES.USER_NOTICE_MESSAGE) {\n    return <UserNotice message={message} />;\n  }\n\n  return null;\n};\n\nChatMessage.defaultProps = {\n  login: '',\n  isEven: false,\n  isShowTimestamps: false,\n};\n\nChatMessage.propTypes = {\n  message: pt.oneOfType([messageType, noticeType, userNoticeType]).isRequired,\n  login: pt.string,\n  isEven: pt.bool,\n  isShowTimestamps: pt.bool,\n};\n\nexport default ChatMessage;\n","import React, { useState, useEffect, useRef } from 'react';\nimport pt from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { messagesSelector } from 'reducers/messages/selectors';\nimport { isEvenSelector } from 'reducers/chat/selectors';\nimport {\n  isShowTimestampsSelector,\n  isSplitChatSelector,\n} from 'reducers/options/selectors';\nimport Scrollbar from 'components/Scrollbar';\nimport ChatInput from 'components/ChatInput';\nimport ChatMessage from 'components/ChatMessage';\n\nconst MORE_MESSAGES_OFFSET = 100;\n\nconst ChatRoot = styled.div`\n  height: 100vh;\n  font-size: 12px;\n`;\nconst ChatWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background-color: #18181b;\n`;\nconst Messages = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\nconst StyledScrollbar = styled(Scrollbar)`\n  .ScrollbarsCustom-Content {\n    padding-bottom: 10px !important;\n  }\n`;\nconst MoreMessagesButton = styled.button`\n  position: absolute;\n  left: 50%;\n  bottom: 10px;\n  display: ${(p) => (p.visible ? 'block' : 'none')};\n  padding: 5px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  transform: translateX(-50%);\n`;\n\nconst Chat = ({ onSendMessage }) => {\n  const isAuth = useSelector((state) => state.auth.isAuth);\n  const messages = useSelector(messagesSelector);\n  // TODO: check if the user has a rights to send messages\n  const isConnected = useSelector((state) => state.chat.isConnected);\n  const isEven = useSelector(isEvenSelector);\n  const login = useSelector((state) => state.auth.user.login);\n  const isShowTimestamps = useSelector(isShowTimestampsSelector);\n  const isSplitChat = useSelector(isSplitChatSelector);\n  const [\n    isMoreMessagesButtonVisible,\n    setIsMoreMessagesButtonVisible,\n  ] = useState(false);\n  const scrollbarRef = useRef(null);\n\n  const handleScrollToBottom = () => {\n    if (scrollbarRef.current && scrollbarRef.current.scrollToBottom) {\n      scrollbarRef.current.scrollToBottom();\n    }\n  };\n\n  useEffect(() => {\n    if (!isMoreMessagesButtonVisible) {\n      handleScrollToBottom();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages]);\n\n  const handleScrollUpdate = ({\n    clientHeight,\n    contentScrollHeight,\n    scrollTop,\n  }) => {\n    const maxScrollTop = contentScrollHeight - clientHeight;\n    const isVisible = scrollTop + MORE_MESSAGES_OFFSET < maxScrollTop;\n\n    setIsMoreMessagesButtonVisible(isVisible);\n  };\n\n  const getIsEven = (key) => {\n    if (!isSplitChat) return false;\n    return isEven ? key % 2 === 1 : key % 2 === 0;\n  };\n\n  return (\n    <ChatRoot>\n      <ChatWrapper>\n        <Messages>\n          <StyledScrollbar onUpdate={handleScrollUpdate} ref={scrollbarRef}>\n            {messages.map((message, key) => (\n              <ChatMessage\n                key={message.tags.id}\n                message={message}\n                login={login}\n                isEven={getIsEven(key)}\n                isShowTimestamps={isShowTimestamps}\n              />\n            ))}\n          </StyledScrollbar>\n          <MoreMessagesButton\n            onClick={handleScrollToBottom}\n            visible={isMoreMessagesButtonVisible}\n          >\n            More messages below\n          </MoreMessagesButton>\n        </Messages>\n        <ChatInput\n          onSubmit={onSendMessage}\n          isDisabled={!isAuth || !isConnected}\n          isAuth={isAuth}\n        />\n      </ChatWrapper>\n    </ChatRoot>\n  );\n};\n\nChat.propTypes = {\n  onSendMessage: pt.func.isRequired,\n};\n\nexport default Chat;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport uuid from 'uuid/v4';\n\nimport useLocationHash from 'hooks/useLocationHash';\nimport useDocumentTitle from 'hooks/useDocumentTitle';\nimport { fetchTwitchEmotes } from 'reducers/emotes/twitch';\nimport {\n  fetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes,\n} from 'reducers/emotes/bttv';\nimport {\n  fetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes,\n} from 'reducers/emotes/ffz';\nimport {\n  isTwitchEmotesLoadedSelector,\n  isBttvEmotesLoadedSelector,\n  isFfzEmotesLoadedSelector,\n} from 'reducers/emotes/selectors';\nimport {\n  addMessage,\n  addNoticeMessage,\n  addUserNoticeMessage,\n  fetchRecentMessages,\n  addRecentMessages,\n  clearChat,\n} from 'reducers/messages';\nimport { isHistoryLoadedSelector } from 'reducers/messages/selectors';\nimport {\n  setCurrentChannel,\n  setIsConnected,\n  updateGlobalUserState,\n  updateUserState,\n  updateRoomState,\n  fetchBlockedUsers,\n} from 'reducers/chat';\nimport {\n  currentChannelSelector,\n  channelIdSelector,\n  blockedUsersSelector,\n  isBlockedUsersLoadedSelector,\n} from 'reducers/chat/selectors';\nimport { fetchGlobalBadges, fetchChannelBadges } from 'reducers/badges';\nimport { isBadgesLoadedSelector } from 'reducers/badges/selectors';\nimport { setIsAuth } from 'reducers/auth';\nimport Client from 'utils/twitchChat';\nimport replaceEmojis from 'utils/replaceEmojis';\nimport Chat from 'components/Chat';\n\nlet client = null;\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const isAuth = useSelector((state) => state.auth.isAuth);\n  const login = useSelector((state) => state.auth.user.login);\n  const userId = useSelector((state) => state.auth.user.id);\n  const currentChannel = useSelector(currentChannelSelector);\n  const currentChannelId = useSelector(channelIdSelector);\n  const blockedUsers = useSelector(blockedUsersSelector);\n\n  const isTwitchEmotesLoaded = useSelector(isTwitchEmotesLoadedSelector);\n  const isBttvEmotesLoaded = useSelector(isBttvEmotesLoadedSelector);\n  const isFfzEmotesLoaded = useSelector(isFfzEmotesLoadedSelector);\n  const isBadgesLoaded = useSelector(isBadgesLoadedSelector);\n  const isHistoryLoaded = useSelector(isHistoryLoadedSelector);\n  const isBlockedUsersLoaded = useSelector(isBlockedUsersLoadedSelector);\n  const hash = useLocationHash();\n\n  const isReadyToAddRecentMessages =\n    currentChannel &&\n    (isAuth ? isTwitchEmotesLoaded : true) &&\n    (isAuth ? isBlockedUsersLoaded : true) &&\n    isBttvEmotesLoaded &&\n    isFfzEmotesLoaded &&\n    isBadgesLoaded &&\n    isHistoryLoaded;\n\n  useDocumentTitle(currentChannel);\n\n  useEffect(() => {\n    const rawUser = localStorage.getItem('user');\n\n    if (rawUser) {\n      const user = JSON.parse(rawUser);\n\n      dispatch(setIsAuth({ isAuth: true, user }));\n    }\n\n    // TODO: try to connect to the chat. if there is an error, set isAuth to false and connect without login\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (hash && hash.length > 1) {\n      const channel = hash.slice(1);\n      dispatch(setCurrentChannel(channel));\n      localStorage.setItem('lastChannel', channel);\n    }\n  }, [dispatch, hash]);\n\n  useEffect(() => {\n    if (!currentChannel) return () => {};\n\n    const options = {\n      identity: {\n        name: login,\n        auth: localStorage.accessToken,\n      },\n    };\n\n    const handleConnected = () => dispatch(setIsConnected(true));\n    const handleDisconnected = () => dispatch(setIsConnected(true));\n\n    const handleGlobalUserState = (data) =>\n      dispatch(updateGlobalUserState(data));\n\n    const handleUserState = (data) => dispatch(updateUserState(data));\n    const handleRoomState = (data) => dispatch(updateRoomState(data));\n    const handleMessage = (data) => {\n      if (blockedUsers.includes(data.user)) return;\n      dispatch(addMessage(data));\n    };\n\n    const handleNotice = (data) => {\n      const normalizedMessage = { ...data, tags: { ...data.tags, id: uuid() } };\n      dispatch(addNoticeMessage(normalizedMessage));\n    };\n    const handleUserNotice = (data) => dispatch(addUserNoticeMessage(data));\n\n    const handleClearChat = (data) => {\n      if (!data.tags.targetUserId) return;\n      dispatch(clearChat(data));\n    };\n\n    if (!client) {\n      client = new Client(isAuth ? options : {});\n      client.connect();\n    }\n\n    // TODO: update blocked users if the /block command was sent\n\n    client.on('connected', handleConnected);\n    client.on('disconnected', handleDisconnected);\n    client.on('globaluserstate', handleGlobalUserState);\n    client.on('userstate', handleUserState);\n    client.on('roomstate', handleRoomState);\n    client.on('message', handleMessage);\n    client.on('ownmessage', handleMessage);\n    client.on('notice', handleNotice);\n    client.on('usernotice', handleUserNotice);\n    client.on('clearchat', handleClearChat);\n\n    // TODO: Part the previous channel before join\n    client.join(currentChannel);\n\n    return () => {\n      client.off('connected', handleConnected);\n      client.off('disconnected', handleDisconnected);\n      client.off('globaluserstate', handleGlobalUserState);\n      client.off('userstate', handleUserState);\n      client.off('roomstate', handleRoomState);\n      client.off('message', handleMessage);\n      client.off('ownmessage', handleMessage);\n      client.off('notice', handleNotice);\n      client.off('usernotice', handleUserNotice);\n      client.off('clearchat', handleClearChat);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, login, currentChannel, isAuth, blockedUsers.length]);\n\n  useEffect(() => {\n    dispatch(fetchBttvGlobalEmotes());\n    dispatch(fetchFfzGlobalEmotes());\n    dispatch(fetchGlobalBadges());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (currentChannel) {\n      dispatch(fetchRecentMessages(currentChannel));\n    }\n  }, [dispatch, currentChannel]);\n\n  useEffect(() => {\n    if (isReadyToAddRecentMessages) {\n      dispatch(addRecentMessages(currentChannel));\n    }\n  }, [dispatch, currentChannel, isReadyToAddRecentMessages]);\n\n  useEffect(() => {\n    if (userId) {\n      dispatch(fetchTwitchEmotes(userId));\n      dispatch(fetchBlockedUsers(userId));\n    }\n  }, [dispatch, userId]);\n\n  useEffect(() => {\n    // TODO: check if emotes for the current channel is already in the store\n    if (currentChannel && currentChannelId) {\n      dispatch(fetchBttvChannelEmotes(currentChannelId, currentChannel));\n      dispatch(fetchFfzChannelEmotes(currentChannelId, currentChannel));\n      dispatch(fetchChannelBadges(currentChannelId, currentChannel));\n    }\n  }, [dispatch, currentChannel, currentChannelId]);\n\n  const handleSendMessage = (message) => {\n    const normalizedMessage = replaceEmojis(message.trim());\n    client.say(currentChannel, normalizedMessage);\n  };\n\n  return <Chat onSendMessage={handleSendMessage} />;\n};\n\nexport default Home;\n","import {\n  TWITCH_API_AUTH_BASE,\n  TWITCH_API_CLIENT_ID,\n  TWITCH_API_REDIRECT_URI,\n} from 'utils/constants';\n\nconst authParams = {\n  client_id: TWITCH_API_CLIENT_ID,\n  redirect_uri: TWITCH_API_REDIRECT_URI,\n  response_type: 'token+id_token',\n  scope: [\n    'openid',\n    'channel:moderate',\n    'chat:edit',\n    'chat:read',\n    'whispers:read',\n    'whispers:edit',\n    'user_blocks_read',\n    'user_blocks_edit',\n    'user_subscriptions',\n  ].join('+'),\n  claims: JSON.stringify({\n    id_token: { email_verified: null, picture: null, preferred_username: null },\n  }),\n  // state: uid(),\n};\n\nconst getAuthUrl = () => {\n  const search = Object.entries(authParams)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n\n  return `${TWITCH_API_AUTH_BASE}?${search}`;\n};\n\nexport default getAuthUrl;\n","import getAuthUrl from 'utils/getAuthUrl';\n\nconst Auth = () => {\n  window.location.href = getAuthUrl();\n\n  return null;\n};\n\nexport default Auth;\n","import { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport jwt from 'jsonwebtoken';\n\nimport { fetchUser } from 'reducers/auth';\n\nconst AuthCallback = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  if (!window.location.hash) return null;\n\n  const params = new URLSearchParams(window.location.hash.slice(1));\n\n  const accessToken = params.get('access_token');\n  const idToken = params.get('id_token');\n\n  if (!accessToken || !idToken) return null;\n\n  localStorage.setItem('accessToken', accessToken);\n  localStorage.setItem('idToken', idToken);\n\n  const { sub: id } = jwt.decode(idToken);\n\n  dispatch(fetchUser(id));\n\n  const lastChannel = localStorage.getItem('lastChannel');\n\n  history.push(lastChannel ? `/chat/#${lastChannel}` : '/chat/');\n\n  return null;\n};\n\nexport default AuthCallback;\n","import { css } from 'styled-components';\n\nexport default css`\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    margin: 0;\n    font-family: Roobert, Helvetica Neue, Helvetica, Arial, sans-serif;\n  }\n`;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { createGlobalStyle } from 'styled-components';\n\nimport common from 'styles/common';\nimport colors from 'styles/colors';\nimport vars from 'styles/vars';\n\nexport default createGlobalStyle`\n  :root {\n    ${colors};\n    ${vars};\n  }\n  ${common};\n`;\n","import React from 'react';\nimport pt from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport isAuthRedirect from 'utils/isAuthRedirect';\nimport Home from 'components/Home';\nimport Auth from 'components/Auth';\nimport AuthCallback from 'components/AuthCallback';\nimport GlobalStyles from 'styles';\n\nconst getHomeComponent = () =>\n  isAuthRedirect(window.location.hash) ? AuthCallback : Home;\n\nconst App = ({ store }) => (\n  <>\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/chat/\" component={getHomeComponent()} />\n          <Route exact path=\"/chat/auth\" component={Auth} />\n        </Switch>\n      </Router>\n    </Provider>\n    <GlobalStyles />\n  </>\n);\n\nApp.propTypes = {\n  store: pt.shape({}).isRequired,\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactGA from 'react-ga';\n\nimport isAuthRedirect from 'utils/isAuthRedirect';\nimport store from 'store';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nif (process.env.NODE_ENV === 'production') {\n  ReactGA.initialize('UA-139550930-3');\n\n  if (!isAuthRedirect(window.location.hash)) {\n    const page =\n      window.location.pathname + window.location.search + window.location.hash;\n    ReactGA.pageview(page);\n  }\n}\n\nReactDOM.render(<App store={store} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}