{"version":3,"sources":["utils/isAuthRedirect.js","utils/api.js","reducers/auth/auth.js","utils/constants.js","reducers/badges/badges.js","reducers/chat/chat.js","reducers/emotes/twitch.js","reducers/emotes/bttv.js","reducers/emotes/ffz.js","reducers/emotes/index.js","utils/normalizeHref.js","utils/formatMessage.js","reducers/chat/selectors.js","reducers/emotes/selectors.js","reducers/badges/selectors.js","utils/getMessageBadges.js","utils/twitchChat.js","utils/normalizeRecentMessages.js","reducers/messages/messages.js","reducers/options/options.js","reducers/index.js","store/index.js","hooks/useLocationHash.js","hooks/useDocumentTitle.js","reducers/messages/selectors.js","utils/replaceEmojis.js","reducers/options/selectors.js","components/Scrollbar.jsx","icons/smiley-face.svg","icons/gears.svg","icons/close.svg","components/IconButton.jsx","components/ChatModal.jsx","components/EmotePicker.jsx","components/Switch.jsx","components/Options.jsx","components/ChatInput.jsx","components/ChatMessage/types.js","components/ChatMessage/Message.jsx","components/ChatMessage/Notice.jsx","components/ChatMessage/UserNotice.jsx","components/ChatMessage/ChatMessage.jsx","components/Chat.jsx","components/Home.jsx","utils/getAuthUrl.js","components/Auth.jsx","components/AuthCallback.jsx","styles/common.js","styles/colors.js","styles/vars.js","styles/index.js","App.jsx","index.jsx"],"names":["isAuthRedirect","hash","startsWith","apiRequestKraken","url","fetch","headers","Accept","process","Authorization","localStorage","accessToken","then","response","json","apiRequest","fetchUser","id","fetchTwitchEmotesBySets","userId","fetchBttvChannelEmotes","channelId","fetchFfzChannelEmotes","fetchRecentMessages","channel","fetchGlobalBadges","language","fetchChannelBadges","fetchBlockedUsers","setIsAuth","createAction","fetchUserRequest","fetchUserSuccess","fetchUserFailure","reducer","handleActions","state","payload","isAuth","user","undefined","isLoading","error","login","displayName","MESSAGE_TYPES","STORE_FLAGS","isLoaded","isError","defaultState","global","items","channels","createActions","fetchGlobalBadgesRequest","fetchGlobalBadgesSuccess","fetchGlobalBadgesFailure","fetchChannelBadgesRequest","fetchChannelBadgesSuccess","fetchChannelBadgesFailure","parseBadges","pathOr","handleFetchGlobalBadges","mergeDeepRight","handleFetchChannelBadges","currentChannel","isConnected","globalState","blockedUsers","setCurrentChannel","setIsConnected","updateGlobalUserState","updateUserState","updateRoomState","removeChannel","fetchBlockedUsersRequest","fetchBlockedUsersSuccess","fetchBlockedUsersFailure","parseBlockedUsers","pipe","prop","map","path","handleFetchBlockUsers","tags","userState","roomState","omit","fetchTwitchEmotesRequest","fetchTwitchEmotesSuccess","fetchTwitchEmotesFailure","handleFetchTwitchEmotes","fetchBttvGlobalEmotesRequest","fetchBttvGlobalEmotesSuccess","fetchBttvGlobalEmotesFailure","fetchBttvChannelEmotesRequest","fetchBttvChannelEmotesSuccess","fetchBttvChannelEmotesFailure","parseBttvChannelEmotes","channelEmotes","sharedEmotes","handleFetchBttvGlobalEmotes","handleFetchBttvChannelEmotes","fetchFfzGlobalEmotesRequest","fetchFfzGlobalEmotesSuccess","fetchFfzGlobalEmotesFailure","fetchFfzChannelEmotesRequest","fetchFfzChannelEmotesSuccess","fetchFfzChannelEmotesFailure","parseFfzEmotes","defaultSets","default_sets","sets","pick","values","propOr","flatten","handleFetchFfzGlobalEmotes","handleFetchFfzChannelEmotes","combineReducers","twitch","bttv","ffz","isStartsWithProtocolRegex","normalizeHref","href","test","TWITCH_EMOTES_CDN","mentionRegex","linkRegex","urlRegex","strict","normalizeEmotesFromTags","toPairs","value","v","getFfzSrcSet","dpi","join","createTwitchEmote","type","alt","code","src","srcSet","createBttvEmote","createFfzEmote","name","urls","createMention","text","target","twitchEmoteType","pt","shape","oneOf","isRequired","string","bttvEmoteType","ffzEmoteType","emojiType","mentionType","linkType","regexMap","4","9","findEntity","word","parseTwitch","twitchEmote","find","RegExp","findTwitchEmote","bttvEmote","propEq","findBttvEmote","ffzEmote","findFfzEmote","char","emojiMatch","twemojiParser","assetType","length","emoji","filter","keys","head","emojilib","mentionMatch","match","toLowerCase","linkMatch","formatMessage","message","embeddedEmotes","emotes","isOwnMessage","hasEmbeddedEmotes","Object","normalizedEmbeddedEmotes","result","offset","arrayOffset","spaceIndex","indexOf","startIndex","endIndex","substring","entity","embeddedEmote","textBefore","push","Array","isArray","entityObject","difference","textAfter","currentChannelSelector","channelIdSelector","isEvenSelector","isBlockedUsersLoadedSelector","chat","blockedUsersSelector","twitchEmotesSelector","createSelector","createGlobalEmotesSelector","createChannelEmotesSelector","bttvGlobalEmotesSelector","bttvChannelEmotesSelector","bttvEmotesSelector","bttvGlobal","bttvChannel","ffzGlobalEmotesSelector","ffzChannelEmotesSelector","ffzEmotesSelector","ffzGlobal","ffzChannel","emotesSelector","regexEmotesMap","createGlobalTwitchEmote","emoteCategoriesSelector","title","createIsEmotesLoadedSelector","globalLoaded","channelLoaded","isBttvEmotesLoadedSelector","isFfzEmotesLoadedSelector","isTwitchEmotesLoadedSelector","globalBadgesSelector","badges","channelBadgesSelector","isBadgesLoadedSelector","isGlobalBadgesLoadedSelector","isChannelBadgesLoadedSelector","getMessageBadges","globalBadges","channelBadges","version","badge","description","imageUrl1x","image_url_1x","imageUrl2x","image_url_2x","imageUrl4x","image_url_4x","label","createBadge","Boolean","noopIRCCommands","booleanMessageTags","numberMessageTags","depricatedMessageTags","noticeMessageTags","data","split","reduce","acc","normalizeTagValue","raw","emote","indexes","index","start","end","Number","parseInt","parseMessageEmotes","followersOnly","slow","includes","replace","parseMessageTags","entries","key","camelCase","getIsAction","endsWith","normalizeActionMessage","slice","parseState","params","parseUserState","parseRoomState","parseCommand","parseNotice","parseUserNotice","parseClearMessage","parseClearChat","parseHostTarget","Client","options","socket","identity","_queue","_messagesQueue","this","auth","nick","Math","floor","random","pass","sendRaw","emit","hadError","willReconnect","rawData","trim","forEach","line","_handleMessage","shift","isAction","messageEventData","uuid","tmiSentTs","Date","getTime","parsedData","tekkoParse","command","prefix","middle","trailing","parseMessageData","eventData","_emmitOwnMessage","msgId","parseChatMessage","ircMessage","handleError","err","send","WebSocket","addEventListener","_onConnect","_onClose","_onError","_onData","tekkoFormat","mergeDeepWith","concat","commandParams","roomName","EventEmitter","normalizeRecentMessages","messages","m","parse","normalizedMessage","parsedTags","messageArray","isHistory","addMessageEntity","addRecentMessagesAction","addRecentMessages","fetchRecentMessagesRequest","fetchRecentMessagesSuccess","fetchRecentMessagesFailure","clearChat","sliceMessages","diff","getIsEven","prev","addedItemsCount","isSliced","handleFetchRecentMessages","history","oldItems","newItems","slicedMessages","isEven","targetUserId","isDeleted","getOptionsFromLocalStorage","JSON","showTimestamps","splitChat","blacklistKeywords","highlightKeywords","changeOption","option","setItem","stringify","enhancer","applyMiddleware","thunk","store","createStore","rootReducer","useLocationHash","useState","window","location","setHash","useEffect","handleHashChange","removeEventListener","useDocumentTitle","document","messagesSelector","isHistoryLoadedSelector","replaceEmojis","optionsSelector","isShowTimestampsSelector","isSplitChatSelector","Scrollbar","styled","CustomScrollbar","attrs","disableTracksWidthCompensation","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","fill","d","fillRule","clipRule","_ref","svgRef","props","width","height","viewBox","x","y","ref","ForwardRef","forwardRef","sizes","small","css","medium","IconButton","button","p","size","defaultProps","propTypes","ChatModalRoot","div","CloseButton","CloseIcon","CloseIconSvg","ChatModal","children","onClose","onClick","EmotePickerRoot","Categories","Category","CategoryHeader","CategoryItems","Emote","img","EmotePicker","onEmoteClick","emoteCategories","useSelector","renderCategory","useCallback","SwitchRoot","Label","Input","input","Switch","checked","readOnly","onChange","htmlFor","OptionsRoot","Header","h2","Option","OptionText","span","Options","dispatch","useDispatch","renderOption","renderOptionsCategory","ChatInputRoot","form","ControlsWrapper","Controls","SendButton","TextareaWrapper","EmotesModal","OptionsModal","Textarea","textarea","EmotesButton","SmileyFaceIcon","SmileyFaceIconSvg","GearsIcon","GearsIconSvg","StyledLink","Link","ChatInput","isDisabled","onSubmit","textareaRef","useRef","setText","isEmotesModalVisible","setIsEmotesModalVisible","isOptionsModalVisible","setIsOptionsModalVisible","textareaWrapperRef","React","optionsModalRef","handleCloseEmotesModal","handleCloseOptionsModal","useOnClickOutside","handleKeyDown","e","preventDefault","textareaNode","current","renderEmotesModal","emoteName","t","trimLeft","renderOptionsModal","placeholder","maxLength","disabled","to","arrayOf","oneOfType","badgeInfo","subscriber","color","flags","mod","bool","roomId","tmiSentId","number","systemMsg","msgParamCumulativeMonths","msgParamDisplayName","msgParamLogin","msgParamMonths","msgParamPromoGiftTotal","msgParamPromoName","msgParamRecipientDisplayName","msgParamRecipientId","msgParamRecipientUserName","msgParamSenderLogin","msgParamSenderName","msgParamShouldShareStreak","msgParamStreakMonths","msgParamSubPlan","msgParamSubPlanName","msgParamViewerCount","msgParamRitualName","msgParamThreshold","MessageRoot","isMention","Name","Emoji","Mention","isActive","a","Timestamp","Badge","Message","isShowTimestamps","isVisible","setIsVisible","format","aria-label","renderBadges","item","rel","renderMessageArray","memo","NoticeRoot","Notice","UserNoticeRoot","ChatMessage","ChatRoot","ChatWrapper","Messages","StyledScrollbar","MoreMessagesButton","visible","Chat","onSendMessage","isSplitChat","isMoreMessagesButtonVisible","setIsMoreMessagesButtonVisible","scrollbarRef","handleScrollToBottom","scrollToBottom","onUpdate","clientHeight","contentScrollHeight","scrollTop","client","Home","currentChannelId","isTwitchEmotesLoaded","isBttvEmotesLoaded","isFfzEmotesLoaded","isBadgesLoaded","isHistoryLoaded","isBlockedUsersLoaded","isReadyToAddRecentMessages","rawUser","getItem","handleConnected","handleDisconnected","handleGlobalUserState","handleUserState","handleRoomState","handleMessage","rest","getState","addMessage","handleNotice","handleUserNotice","handleClearChat","connect","on","off","apiFetchGlobalBadges","apiFetchRecentMessages","emoticon_sets","fetchTwitchEmotes","apiFetchBlockedUsers","apiFetchBttvChannelEmotes","apiFetchFfzChannelEmotes","apiFetchChannelBadges","say","authParams","client_id","redirect_uri","response_type","scope","claims","id_token","email_verified","picture","preferred_username","getAuthUrl","search","Auth","AuthCallback","useHistory","URLSearchParams","get","idToken","apiFetchUser","display_name","jwt","decode","sub","lastChannel","createGlobalStyle","colors","vars","common","App","exact","component","ReactGA","initialize","page","pathname","pageview","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3ff94258.chunk.js","sourcesContent":["const isAuthRedirect = (hash) => hash.startsWith('#access_token=');\n\nexport default isAuthRedirect;\n","export const TWITCH_API_HELIX = 'https://api.twitch.tv/helix';\nexport const TWITCH_API_KRAKEN = 'https://api.twitch.tv/kraken';\n\n// TODO: throw an error if fetch completed with not 2** code\n\nconst getHelixHeaders = () => ({\n  Authorization: `Bearer ${localStorage.accessToken}`,\n});\n\nconst getKrakenHeaders = () => ({\n  Accept: 'application/vnd.twitchtv.v5+json',\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `OAuth ${localStorage.accessToken}`,\n});\n\nconst apiRequestHelix = (url) =>\n  fetch(`${TWITCH_API_HELIX}${url}`, {\n    headers: getHelixHeaders(),\n  }).then((response) => response.json());\n\nconst apiRequestKraken = (url) =>\n  fetch(`${TWITCH_API_KRAKEN}${url}`, {\n    headers: getKrakenHeaders(),\n  }).then((response) => response.json());\n\nconst apiRequest = (url) => fetch(url).then((response) => response.json());\n\nexport const fetchUser = (id) => apiRequestHelix(`/users?id=${id}`);\n\nexport const fetchTwitchEmotesBySets = (userId) =>\n  apiRequestKraken(`/users/${userId}/emotes`);\n\nexport const fetchBttvGlobalEmotes = () =>\n  apiRequest('https://api.betterttv.net/3/cached/emotes/global');\nexport const fetchBttvChannelEmotes = (channelId) =>\n  apiRequest(`https://api.betterttv.net/3/cached/users/twitch/${channelId}`);\n\nexport const fetchFfzGlobalEmotes = () =>\n  apiRequest('https://api.frankerfacez.com/v1/set/global');\nexport const fetchFfzChannelEmotes = (channelId) =>\n  apiRequest(`https://api.frankerfacez.com/v1/room/id/${channelId}`);\n\n// apiRequest(`https://api.betterttv.net/3/cached/frankerfacez/users/twitch/${channelId}`);\n\nexport const fetchRecentMessages = (channel) =>\n  apiRequest(\n    `https://recent-messages.robotty.de/api/v2/recent-messages/${channel}?clearchatToNotice=true`,\n  );\n\nexport const fetchGlobalBadges = (language = 'en') =>\n  apiRequest(\n    `https://badges.twitch.tv/v1/badges/global/display?language=${language}`,\n  );\nexport const fetchChannelBadges = (channelId, language = 'en') =>\n  apiRequest(\n    `https://badges.twitch.tv/v1/badges/channels/${channelId}/display?language=${language}`,\n  );\n\nexport const fetchBlockedUsers = (userId) =>\n  apiRequestKraken(`/users/${userId}/blocks`);\n","import { createAction, handleActions } from 'redux-actions';\n\nimport { fetchUser as apiFetchUser } from 'utils/api';\n\nconst defaultState = {\n  isAuth: false,\n  isLoading: false,\n  user: {\n    id: null,\n    login: null,\n    displayName: null,\n  },\n};\n\nexport const setIsAuth = createAction('SET_IS_AUTH');\nconst fetchUserRequest = createAction('FETCH_USER_REQUEST');\nconst fetchUserSuccess = createAction('FETCH_USER_SUCCESS');\nconst fetchUserFailure = createAction('FETCH_USER_FAILURE');\n\nexport const fetchUser = (id) => async (dispatch) => {\n  dispatch(fetchUserRequest());\n\n  try {\n    const response = await apiFetchUser(id);\n    const { login, display_name: displayName } = response.data[0];\n    const user = { id, login, displayName };\n    localStorage.setItem('user', JSON.stringify(user));\n\n    dispatch(fetchUserSuccess(user));\n  } catch (error) {\n    dispatch(fetchUserFailure(error));\n  }\n};\n\nconst handleSetIsAuth = (state, { payload: { isAuth, user } }) => ({\n  ...state,\n  isAuth: isAuth === undefined ? state.isAuth : isAuth,\n  user: { ...state.user, ...user },\n});\n\nconst handleFetchUserRequest = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst handleFetchUserSuccess = (state, { payload }) => ({\n  ...state,\n  isAuth: true,\n  isLoading: false,\n  user: payload,\n});\nconst handleFetchUserFailure = (state, { payload }) => ({\n  ...state,\n  isAuth: false,\n  isLoading: false,\n  error: payload,\n});\n\nconst reducer = handleActions(\n  {\n    [setIsAuth]: handleSetIsAuth,\n    [fetchUserRequest]: handleFetchUserRequest,\n    [fetchUserSuccess]: handleFetchUserSuccess,\n    [fetchUserFailure]: handleFetchUserFailure,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","export const TWITCH_API_AUTH_BASE = 'https://id.twitch.tv/oauth2/authorize';\n\nexport const TWITCH_API_CLIENT_ID = process.env.REACT_APP_TWITCH_API_CLIENT_ID;\nexport const TWITCH_API_REDIRECT_URI =\n  process.env.REACT_APP_TWITCH_API_REDIRECT_URI;\n\nexport const CHANNEL_MESSAGES_LIMIT = 500;\n\nexport const MESSAGE_TYPES = {\n  MESSAGE: 'MESSAGE',\n  NOTICE_MESSAGE: 'NOTICE_MESSAGE',\n  USER_NOTICE_MESSAGE: 'USER_NOTICE_MESSAGE',\n};\n\nexport const STORE_FLAGS = {\n  DEFAULT: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n  },\n  REQUEST: {\n    isLoading: true,\n    isLoaded: false,\n    isError: false,\n    error: null,\n  },\n  SUCCESS: {\n    isLoading: false,\n    isLoaded: true,\n    isError: false,\n    error: null,\n  },\n  FAILURE: {\n    isLoading: false,\n    isLoaded: false,\n    isError: true,\n  },\n};\n","import { createActions, handleActions } from 'redux-actions';\nimport { pathOr, mergeDeepRight } from 'ramda';\n\nimport {\n  fetchGlobalBadges as apiFetchGlobalBadges,\n  fetchChannelBadges as apiFetchChannelBadges,\n} from 'utils/api';\nimport { STORE_FLAGS } from 'utils/constants';\n\nconst defaultState = {\n  global: {\n    ...STORE_FLAGS.DEFAULT,\n    items: {},\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: {},\n    // },\n  },\n};\n\nconst {\n  fetchGlobalBadgesRequest,\n  fetchGlobalBadgesSuccess,\n  fetchGlobalBadgesFailure,\n  fetchChannelBadgesRequest,\n  fetchChannelBadgesSuccess,\n  fetchChannelBadgesFailure,\n} = createActions(\n  'FETCH_GLOBAL_BADGES_REQUEST',\n  'FETCH_GLOBAL_BADGES_SUCCESS',\n  'FETCH_GLOBAL_BADGES_FAILURE',\n  'FETCH_CHANNEL_BADGES_REQUEST',\n  'FETCH_CHANNEL_BADGES_SUCCESS',\n  'FETCH_CHANNEL_BADGES_FAILURE',\n);\n\nconst parseBadges = pathOr({}, ['badge_sets']);\n\nexport const fetchGlobalBadges = () => async (dispatch) => {\n  dispatch(fetchGlobalBadgesRequest());\n\n  try {\n    const response = await apiFetchGlobalBadges();\n    const data = { items: parseBadges(response) };\n\n    dispatch(fetchGlobalBadgesSuccess(data));\n  } catch (error) {\n    dispatch(fetchGlobalBadgesFailure({ error }));\n  }\n};\n\nexport const fetchChannelBadges = (channelId, channel) => async (dispatch) => {\n  dispatch(fetchChannelBadgesRequest({ channel }));\n\n  try {\n    const response = await apiFetchChannelBadges(channelId);\n    const data = {\n      channel,\n      items: parseBadges(response),\n    };\n\n    dispatch(fetchChannelBadgesSuccess(data));\n  } catch (error) {\n    dispatch(fetchChannelBadgesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchGlobalBadges = {\n  [fetchGlobalBadgesRequest]: (state) =>\n    mergeDeepRight(state, {\n      global: { ...STORE_FLAGS.REQUEST },\n    }),\n  [fetchGlobalBadgesSuccess]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      global: { ...STORE_FLAGS.SUCCESS, items: payload.items },\n    }),\n  [fetchGlobalBadgesFailure]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      global: { ...STORE_FLAGS.FAILURE, error: payload.error },\n    }),\n};\n\nconst handleFetchChannelBadges = {\n  [fetchChannelBadgesRequest]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      channels: {\n        [payload.channel]: { ...STORE_FLAGS.REQUEST },\n      },\n    }),\n  [fetchChannelBadgesSuccess]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      channels: {\n        [payload.channel]: { ...STORE_FLAGS.SUCCESS, items: payload.items },\n      },\n    }),\n  [fetchChannelBadgesFailure]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      channels: {\n        [payload.channel]: { ...STORE_FLAGS.FAILURE, error: payload.error },\n      },\n    }),\n};\n\nconst reducer = handleActions(\n  {\n    ...handleFetchGlobalBadges,\n    ...handleFetchChannelBadges,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions } from 'redux-actions';\nimport { mergeDeepRight, pipe, prop, path, map, omit } from 'ramda';\n\nimport { fetchBlockedUsers as apiFetchBlockedUsers } from 'utils/api';\nimport { STORE_FLAGS } from 'utils/constants';\n\nconst defaultState = {\n  currentChannel: null,\n  isConnected: false,\n  globalState: {},\n  channels: {\n    // [channel]: {\n    //   userState: {},\n    //   roomState: {},\n    // }\n  },\n  blockedUsers: {\n    ...STORE_FLAGS.DEFAULT,\n    items: [],\n  },\n};\n\nexport const {\n  setCurrentChannel,\n  setIsConnected,\n  updateGlobalUserState,\n  updateUserState,\n  updateRoomState,\n  removeChannel,\n} = createActions(\n  'SET_CURRENT_CHANNEL',\n  'SET_IS_CONNECTED',\n  'UPDATE_GLOBAL_USER_STATE',\n  'UPDATE_USER_STATE',\n  'UPDATE_ROOM_STATE',\n  'REMOVE_CHANNEL',\n);\n\nconst {\n  fetchBlockedUsersRequest,\n  fetchBlockedUsersSuccess,\n  fetchBlockedUsersFailure,\n} = createActions(\n  'FETCH_BLOCKED_USERS_REQUEST',\n  'FETCH_BLOCKED_USERS_SUCCESS',\n  'FETCH_BLOCKED_USERS_FAILURE',\n);\n\nconst parseBlockedUsers = pipe(prop('blocks'), map(path(['user', 'name'])));\n\nexport const fetchBlockedUsers = (userId) => async (dispatch) => {\n  dispatch(fetchBlockedUsersRequest());\n  try {\n    const response = await apiFetchBlockedUsers(userId);\n\n    dispatch(fetchBlockedUsersSuccess({ items: parseBlockedUsers(response) }));\n  } catch (error) {\n    dispatch(fetchBlockedUsersFailure({ error }));\n  }\n};\n\nconst handleSetCurrentChannel = (state, { payload }) => ({\n  ...state,\n  currentChannel: payload,\n});\nconst handleSetIsConnected = (state, { payload }) => ({\n  ...state,\n  isConnected: payload,\n});\nconst handleUpdateGlobalUserState = (state, { payload: { tags } }) => ({\n  ...state,\n  globalState: { ...state.globalState, ...tags },\n});\nconst handleUpdateUserState = (state, { payload: { channel, tags } }) =>\n  mergeDeepRight(state, {\n    channels: {\n      [channel]: { userState: tags },\n    },\n  });\nconst handleUpdateRoomState = (state, { payload: { channel, tags } }) =>\n  mergeDeepRight(state, {\n    channels: {\n      [channel]: { roomState: tags },\n    },\n  });\nconst handleRemoveChannel = (state, { payload: channel }) => ({\n  ...state,\n  channels: omit([channel], state.channels),\n});\nconst handleFetchBlockUsers = {\n  [fetchBlockedUsersRequest]: (state) =>\n    mergeDeepRight(state, {\n      blockedUsers: { ...STORE_FLAGS.REQUEST },\n    }),\n  [fetchBlockedUsersSuccess]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      blockedUsers: { ...STORE_FLAGS.SUCCESS, items: payload.items },\n    }),\n  [fetchBlockedUsersFailure]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      blockedUsers: { ...STORE_FLAGS.FAILURE, error: payload.error },\n    }),\n};\n\nconst reducer = handleActions(\n  {\n    [setCurrentChannel]: handleSetCurrentChannel,\n    [setIsConnected]: handleSetIsConnected,\n    [updateGlobalUserState]: handleUpdateGlobalUserState,\n    [updateUserState]: handleUpdateUserState,\n    [updateRoomState]: handleUpdateRoomState,\n    [removeChannel]: handleRemoveChannel,\n    ...handleFetchBlockUsers,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions } from 'redux-actions';\n\nimport { STORE_FLAGS } from 'utils/constants';\nimport { fetchTwitchEmotesBySets } from 'utils/api';\n\nconst defaultState = {\n  ...STORE_FLAGS.DEFAULT,\n  items: {\n    // [setId]: [\n    //   {\n    //     code: \"PartyPoro\",\n    //     id: 300949540,\n    //   },\n    // ],\n  },\n};\n\nconst {\n  fetchTwitchEmotesRequest,\n  fetchTwitchEmotesSuccess,\n  fetchTwitchEmotesFailure,\n} = createActions(\n  'FETCH_TWITCH_EMOTES_REQUEST',\n  'FETCH_TWITCH_EMOTES_SUCCESS',\n  'FETCH_TWITCH_EMOTES_FAILURE',\n);\n\nexport const fetchTwitchEmotes = (userId) => async (dispatch) => {\n  dispatch(fetchTwitchEmotesRequest);\n\n  try {\n    const response = await fetchTwitchEmotesBySets(userId);\n    const data = { items: response.emoticon_sets };\n\n    dispatch(fetchTwitchEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchTwitchEmotesFailure({ error }));\n  }\n};\n\nconst handleFetchTwitchEmotes = {\n  [fetchTwitchEmotesRequest]: (state) => ({\n    ...state,\n    ...STORE_FLAGS.REQUEST,\n  }),\n  [fetchTwitchEmotesSuccess]: (state, { payload }) => ({\n    ...state,\n    ...STORE_FLAGS.SUCCESS,\n    items: payload.items,\n  }),\n  [fetchTwitchEmotesFailure]: (state, { payload }) => ({\n    ...state,\n    ...STORE_FLAGS.FAILURE,\n    error: payload.error,\n  }),\n};\n\nconst reducer = handleActions(handleFetchTwitchEmotes, defaultState);\n\nexport default reducer;\n","import { createActions, handleActions } from 'redux-actions';\nimport { mergeDeepRight } from 'ramda';\n\nimport {\n  fetchBttvGlobalEmotes as apiFetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes as apiFetchBttvChannelEmotes,\n} from 'utils/api';\nimport { STORE_FLAGS } from 'utils/constants';\n\nconst defaultState = {\n  global: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n    items: [],\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: [],\n    // },\n  },\n};\n\nconst {\n  fetchBttvGlobalEmotesRequest,\n  fetchBttvGlobalEmotesSuccess,\n  fetchBttvGlobalEmotesFailure,\n  fetchBttvChannelEmotesRequest,\n  fetchBttvChannelEmotesSuccess,\n  fetchBttvChannelEmotesFailure,\n} = createActions(\n  'FETCH_BTTV_GLOBAL_EMOTES_REQUEST',\n  'FETCH_BTTV_GLOBAL_EMOTES_SUCCESS',\n  'FETCH_BTTV_GLOBAL_EMOTES_FAILURE',\n  'FETCH_BTTV_CHANNEL_EMOTES_REQUEST',\n  'FETCH_BTTV_CHANNEL_EMOTES_SUCCESS',\n  'FETCH_BTTV_CHANNEL_EMOTES_FAILURE',\n);\n\nconst parseBttvChannelEmotes = ({ channelEmotes, sharedEmotes }) => [\n  ...channelEmotes,\n  ...sharedEmotes,\n];\n\nexport const fetchBttvGlobalEmotes = () => async (dispatch) => {\n  dispatch(fetchBttvGlobalEmotesRequest());\n\n  try {\n    const items = await apiFetchBttvGlobalEmotes();\n    const data = { items };\n\n    dispatch(fetchBttvGlobalEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchBttvGlobalEmotesFailure({ error }));\n  }\n};\n\nexport const fetchBttvChannelEmotes = (channelId, channel) => async (\n  dispatch,\n) => {\n  dispatch(fetchBttvChannelEmotesRequest({ channel }));\n\n  try {\n    const response = await apiFetchBttvChannelEmotes(channelId);\n    const data = {\n      channel,\n      items: parseBttvChannelEmotes(response),\n    };\n\n    dispatch(fetchBttvChannelEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchBttvChannelEmotesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchBttvGlobalEmotes = {\n  [fetchBttvGlobalEmotesRequest]: (state) =>\n    mergeDeepRight(state, {\n      global: { ...STORE_FLAGS.REQUEST },\n    }),\n  [fetchBttvGlobalEmotesSuccess]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      global: { ...STORE_FLAGS.SUCCESS, items: payload.items },\n    }),\n  [fetchBttvGlobalEmotesFailure]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      global: { ...STORE_FLAGS.FAILURE, error: payload.error },\n    }),\n};\n\nconst handleFetchBttvChannelEmotes = {\n  [fetchBttvChannelEmotesRequest]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      channels: {\n        [payload.channel]: { ...STORE_FLAGS.REQUEST },\n      },\n    }),\n  [fetchBttvChannelEmotesSuccess]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      channels: {\n        [payload.channel]: { ...STORE_FLAGS.SUCCESS, items: payload.items },\n      },\n    }),\n  [fetchBttvChannelEmotesFailure]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      channels: {\n        [payload.channel]: { ...STORE_FLAGS.FAILURE, error: payload.error },\n      },\n    }),\n};\n\nconst reducer = handleActions(\n  {\n    ...handleFetchBttvGlobalEmotes,\n    ...handleFetchBttvChannelEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions } from 'redux-actions';\nimport {\n  mergeDeepRight,\n  pipe,\n  propOr,\n  map,\n  values,\n  flatten,\n  pick,\n} from 'ramda';\n\nimport {\n  fetchFfzGlobalEmotes as apiFetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes as apiFetchFfzChannelEmotes,\n} from 'utils/api';\nimport { STORE_FLAGS } from 'utils/constants';\n\nconst defaultState = {\n  global: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n    items: [],\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: [],\n    // },\n  },\n};\n\nconst {\n  fetchFfzGlobalEmotesRequest,\n  fetchFfzGlobalEmotesSuccess,\n  fetchFfzGlobalEmotesFailure,\n  fetchFfzChannelEmotesRequest,\n  fetchFfzChannelEmotesSuccess,\n  fetchFfzChannelEmotesFailure,\n} = createActions(\n  'FETCH_FFZ_GLOBAL_EMOTES_REQUEST',\n  'FETCH_FFZ_GLOBAL_EMOTES_SUCCESS',\n  'FETCH_FFZ_GLOBAL_EMOTES_FAILURE',\n  'FETCH_FFZ_CHANNEL_EMOTES_REQUEST',\n  'FETCH_FFZ_CHANNEL_EMOTES_SUCCESS',\n  'FETCH_FFZ_CHANNEL_EMOTES_FAILURE',\n);\n\nconst parseFfzEmotes = ({ default_sets: defaultSets, sets }) =>\n  pipe(pick(defaultSets), values, map(propOr([], 'emoticons')), flatten)(sets);\n\nexport const fetchFfzGlobalEmotes = () => async (dispatch) => {\n  dispatch(fetchFfzGlobalEmotesRequest());\n\n  try {\n    const response = await apiFetchFfzGlobalEmotes();\n    const data = { items: parseFfzEmotes(response) };\n\n    dispatch(fetchFfzGlobalEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchFfzGlobalEmotesFailure({ error }));\n  }\n};\n\nexport const fetchFfzChannelEmotes = (channelId, channel) => async (\n  dispatch,\n) => {\n  dispatch(fetchFfzChannelEmotesRequest({ channel }));\n\n  try {\n    const response = await apiFetchFfzChannelEmotes(channelId);\n    const data = {\n      channel,\n      items: parseFfzEmotes(response),\n    };\n\n    dispatch(fetchFfzChannelEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchFfzChannelEmotesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchFfzGlobalEmotes = {\n  [fetchFfzGlobalEmotesRequest]: (state) =>\n    mergeDeepRight(state, {\n      global: { ...STORE_FLAGS.REQUEST },\n    }),\n  [fetchFfzGlobalEmotesSuccess]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      global: { ...STORE_FLAGS.SUCCESS, items: payload.items },\n    }),\n  [fetchFfzGlobalEmotesFailure]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      global: { ...STORE_FLAGS.FAILURE, error: payload.error },\n    }),\n};\n\nconst handleFetchFfzChannelEmotes = {\n  [fetchFfzChannelEmotesRequest]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      channels: {\n        [payload.channel]: { ...STORE_FLAGS.REQUEST },\n      },\n    }),\n  [fetchFfzChannelEmotesSuccess]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      channels: {\n        [payload.channel]: { ...STORE_FLAGS.SUCCESS, items: payload.items },\n      },\n    }),\n  [fetchFfzChannelEmotesFailure]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      channels: {\n        [payload.channel]: { ...STORE_FLAGS.FAILURE, error: payload.error },\n      },\n    }),\n};\n\nconst reducer = handleActions(\n  {\n    ...handleFetchFfzGlobalEmotes,\n    ...handleFetchFfzChannelEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport twitch from './twitch';\nimport bttv from './bttv';\nimport ffz from './ffz';\n\nexport default combineReducers({\n  twitch,\n  bttv,\n  ffz,\n});\n","// https://regex101.com/r/cpaNXh/1\nconst isStartsWithProtocolRegex = /^(?:(?:[a-z]+:)?\\/\\/)/;\n\nconst normalizeHref = (href) =>\n  isStartsWithProtocolRegex.test(href) ? href : `//${href}`;\n\nexport default normalizeHref;\n","import pt from 'prop-types';\nimport { parse as twemojiParser } from 'twemoji-parser';\nimport emojilib from 'emojilib/emojis';\nimport urlRegex from 'url-regex';\nimport {\n  pipe,\n  toPairs,\n  map,\n  flatten,\n  find,\n  propEq,\n  join,\n  filter,\n  keys,\n  head,\n} from 'ramda';\n\nimport normalizeHref from 'utils/normalizeHref';\n\nconst TWITCH_EMOTES_CDN = '//static-cdn.jtvnw.net/emoticons/v1';\nconst BTTV_EMOTES_CDN = '//cdn.betterttv.net/emote';\n\nconst mentionRegex = /^@([\\p{Letter}\\p{Number}_]+)/u;\nconst linkRegex = urlRegex({ strict: false });\n\nconst normalizeEmotesFromTags = pipe(\n  toPairs,\n  map(([id, value]) => map((v) => ({ id, ...v }), value)),\n  flatten,\n);\n\nconst getFfzSrcSet = pipe(\n  toPairs,\n  map(([dpi, url]) => `${url} ${dpi}x`),\n  join(', '),\n);\n\nexport const createTwitchEmote = ({ id, code }) => ({\n  type: 'twitch-emote',\n  alt: code,\n  src: `${TWITCH_EMOTES_CDN}/${id}/1.0`,\n  srcSet: `${TWITCH_EMOTES_CDN}/${id}/1.0 1x, ${TWITCH_EMOTES_CDN}/${id}/2.0 2x, ${TWITCH_EMOTES_CDN}/${id}/3.0 4x`,\n});\nexport const createBttvEmote = ({ id, code }) => ({\n  type: 'bttv-emote',\n  alt: code,\n  src: `${BTTV_EMOTES_CDN}/${id}/1x`,\n  srcSet: `${BTTV_EMOTES_CDN}/${id}/2x 2x, ${BTTV_EMOTES_CDN}/${id}/3x 4x`,\n});\nexport const createFfzEmote = ({ name, urls }) => ({\n  type: 'ffz-emote',\n  alt: name,\n  src: urls[1],\n  srcSet: getFfzSrcSet(urls),\n});\nexport const createEmoji = (alt, src) => ({\n  type: 'emoji',\n  alt: `:${alt}:`,\n  src,\n  srcSet: null,\n});\nexport const createMention = (text, target) => ({\n  type: 'mention',\n  text,\n  target,\n});\nexport const createLink = (href) => ({\n  type: 'link',\n  text: href,\n  href: normalizeHref(href),\n});\n\nexport const twitchEmoteType = pt.shape({\n  type: pt.oneOf(['twitch-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const bttvEmoteType = pt.shape({\n  type: pt.oneOf(['bttv-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const ffzEmoteType = pt.shape({\n  type: pt.oneOf(['ffz-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const emojiType = pt.shape({\n  type: pt.oneOf(['emoji']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string,\n});\nexport const mentionType = pt.shape({\n  type: pt.oneOf(['mention']).isRequired,\n  text: pt.string.isRequired,\n  target: pt.string.isRequired,\n});\nexport const linkType = pt.shape({\n  type: pt.oneOf(['link']).isRequired,\n  text: pt.string.isRequired,\n  href: pt.string.isRequired,\n});\n\nconst regexMap = {\n  4: '>\\\\(', // '\\\\&gt\\\\;\\\\('\n  9: '<3', // '\\\\&lt\\\\;3'\n};\n\nconst findTwitchEmote = (name, twitch) =>\n  find(({ id, code }) => {\n    // 1-14 - match by regex\n    if (id >= 1 && id <= 14) {\n      const regexString = regexMap[id] || code;\n      return RegExp(`^${regexString}$`).test(name);\n    }\n    return name === code;\n  }, twitch);\nconst findBttvEmote = (name, bttv) => find(propEq('code', name), bttv);\nconst findFfzEmote = (name, ffz) => find(propEq('name', name), ffz);\nconst findEmoji = (char) =>\n  pipe(filter(propEq('char', char)), keys, head)(emojilib);\n\nconst findEntity = (word, { twitch, bttv, ffz }, { parseTwitch = false }) => {\n  if (parseTwitch) {\n    const twitchEmote = findTwitchEmote(word, twitch);\n    if (twitchEmote)\n      return createTwitchEmote({ id: twitchEmote.id, code: word });\n  }\n\n  const bttvEmote = findBttvEmote(word, bttv);\n  if (bttvEmote) return createBttvEmote(bttvEmote);\n\n  const ffzEmote = findFfzEmote(word, ffz);\n  if (ffzEmote) return createFfzEmote(ffzEmote);\n\n  // Don't parse two or more emotes without spaces between\n  // Don't parse emote if it's not in the emojilib package\n  const emojiMatch = twemojiParser(word, { assetType: 'png' });\n  if (\n    emojiMatch &&\n    emojiMatch.length === 1 &&\n    emojiMatch[0].text.length === word.length\n  ) {\n    const emoji = findEmoji(word);\n\n    if (emoji) {\n      const [{ url }] = emojiMatch;\n      return createEmoji(emoji, url);\n    }\n  }\n\n  // TODO: Use unicode regex if it supports\n  const mentionMatch = word.match(mentionRegex);\n  if (mentionMatch) {\n    const [text, target] = mentionMatch;\n    return [\n      createMention(text, target.toLowerCase()),\n      word.length - text.length,\n    ];\n  }\n\n  const linkMatch = word.match(linkRegex);\n  if (linkMatch && linkMatch[0].length === word.length) {\n    return createLink(word);\n  }\n\n  return null;\n};\n\nconst formatMessage = (message, embeddedEmotes, emotes) => {\n  // If the message was sent by the current user, there is no embedded emotes\n  // So we need to parse twitch emotes manually\n\n  const isOwnMessage = embeddedEmotes === undefined || embeddedEmotes === null;\n  const hasEmbeddedEmotes =\n    embeddedEmotes && Object.keys(embeddedEmotes).length > 0;\n  const normalizedEmbeddedEmotes = normalizeEmotesFromTags(embeddedEmotes);\n\n  const result = [];\n  let offset = 0;\n  // Before that offset all content was added to the result array\n  let arrayOffset = 0;\n\n  // Check every word. From offset to the next space index\n  do {\n    const spaceIndex = message.indexOf(' ', offset + 1);\n\n    const isStart = offset === 0;\n    const isEnd = spaceIndex === -1;\n\n    const startIndex = isStart ? offset : offset + 1;\n    const endIndex = isEnd ? message.length : spaceIndex;\n\n    const word = message.substring(startIndex, endIndex);\n\n    if (word) {\n      let entity = null;\n\n      // Check embedded twitch emotes\n      if (hasEmbeddedEmotes) {\n        const embeddedEmote = find(\n          propEq('start', startIndex),\n          normalizedEmbeddedEmotes,\n        );\n\n        if (embeddedEmote) {\n          entity = createTwitchEmote({ id: embeddedEmote.id, code: word });\n        }\n      }\n\n      // Check other entities\n      if (!entity) {\n        entity = findEntity(word, emotes, { parseTwitch: isOwnMessage });\n      }\n\n      if (entity) {\n        // Push all text before this entity\n        if (arrayOffset !== startIndex) {\n          const textBefore = message.substring(arrayOffset, startIndex);\n          result.push(textBefore);\n        }\n\n        // If entity it's an array it means entity may be not full word\n        // The second element is the difference between word length and entity length\n        if (Array.isArray(entity)) {\n          const [entityObject, difference] = entity;\n          result.push(entityObject);\n          arrayOffset = endIndex - difference;\n        } else {\n          result.push(entity);\n          arrayOffset = endIndex;\n        }\n      }\n    }\n\n    // If it's the last word and it wasn't added to the result add it now\n    if (spaceIndex === -1 && arrayOffset !== endIndex) {\n      const textAfter = message.substring(arrayOffset, endIndex);\n      result.push(textAfter);\n    }\n\n    offset = spaceIndex;\n  } while (offset !== -1);\n\n  return result;\n};\n\nexport default formatMessage;\n","import { pathOr } from 'ramda';\n\nexport const currentChannelSelector = pathOr('', ['chat', 'currentChannel']);\n\nexport const channelIdSelector = (state) =>\n  pathOr(\n    null,\n    ['chat', 'channels', currentChannelSelector(state), 'roomState', 'roomId'],\n    state,\n  );\n\nexport const isEvenSelector = (state) =>\n  pathOr(false, ['messages', currentChannelSelector(state), 'isEven'], state);\n\nexport const isBlockedUsersLoadedSelector = (state) =>\n  state.chat.blockedUsers.isLoaded || state.chat.blockedUsers.isError;\n\nexport const blockedUsersSelector = (state) => state.chat.blockedUsers.items;\n","import { createSelector } from 'reselect';\nimport { pipe, path, pathOr, propOr, values, flatten, omit, map } from 'ramda';\n\nimport {\n  createTwitchEmote,\n  createBttvEmote,\n  createFfzEmote,\n} from 'utils/formatMessage';\nimport { currentChannelSelector } from 'reducers/chat/selectors';\n\nexport const twitchEmotesSelector = createSelector(\n  pathOr([], ['emotes', 'twitch', 'items']),\n  pipe(values, flatten),\n);\n\nconst createGlobalEmotesSelector = (type) =>\n  pathOr([], ['emotes', type, 'global', 'items']);\nconst createChannelEmotesSelector = (type) => (state) =>\n  pathOr(\n    [],\n    ['emotes', type, 'channels', currentChannelSelector(state), 'items'],\n    state,\n  );\n\nconst bttvGlobalEmotesSelector = createGlobalEmotesSelector('bttv');\nconst bttvChannelEmotesSelector = createChannelEmotesSelector('bttv');\nexport const bttvEmotesSelector = createSelector(\n  bttvGlobalEmotesSelector,\n  bttvChannelEmotesSelector,\n  (bttvGlobal, bttvChannel) => [...bttvGlobal, ...bttvChannel],\n);\n\nconst ffzGlobalEmotesSelector = createGlobalEmotesSelector('ffz');\nconst ffzChannelEmotesSelector = createChannelEmotesSelector('ffz');\nexport const ffzEmotesSelector = createSelector(\n  ffzGlobalEmotesSelector,\n  ffzChannelEmotesSelector,\n  (ffzGlobal, ffzChannel) => [...ffzGlobal, ...ffzChannel],\n);\n\nexport const emotesSelector = (state) => ({\n  twitch: twitchEmotesSelector(state),\n  bttv: bttvEmotesSelector(state),\n  ffz: ffzEmotesSelector(state),\n});\n\n// prettier-ignore\nconst regexEmotesMap = {\n  '[oO](_|\\\\.)[oO]': 'O_o',\n  '\\\\&gt\\\\;\\\\(':     '>(',\n  '\\\\&lt\\\\;3':       '<3',\n  '\\\\:-?(o|O)':      ':O',\n  '\\\\:-?(p|P)':      ':P',\n  '\\\\:-?[\\\\\\\\/]':    ':/',\n  '\\\\:-?[z|Z|\\\\|]':  ':Z',\n  '\\\\:-?\\\\(':        ':(',\n  '\\\\:-?\\\\)':        ':)',\n  '\\\\:-?D':          ':D',\n  '\\\\;-?(p|P)':      ';P',\n  '\\\\;-?\\\\)':        ';)',\n  'R-?\\\\)':          'R)',\n  'B-?\\\\)':          'B)',\n};\n\nconst createGlobalTwitchEmote = ({ id, code }) =>\n  createTwitchEmote({ id, code: regexEmotesMap[code] || code });\n\nexport const emoteCategoriesSelector = createSelector(\n  (state) => state.emotes.twitch.items,\n  bttvGlobalEmotesSelector,\n  bttvChannelEmotesSelector,\n  ffzGlobalEmotesSelector,\n  ffzChannelEmotesSelector,\n  (twitch, bttvGlobal, bttvChannel, ffzGlobal, ffzChannel) =>\n    [\n      {\n        title: 'BetterTTV Channel Emotes',\n        items: bttvChannel.map(createBttvEmote),\n      },\n      {\n        title: 'FrankerFaceZ Channel Emotes',\n        items: ffzChannel.map(createFfzEmote),\n      },\n      ...pipe(\n        omit(['0']),\n        values,\n        map((items) => ({ items: map(createTwitchEmote, items) })),\n      )(twitch),\n      {\n        title: 'Twitch',\n        items: map(createGlobalTwitchEmote, propOr([], '0', twitch)),\n      },\n      {\n        title: 'BetterTTV',\n        items: bttvGlobal.map(createBttvEmote),\n      },\n      {\n        title: 'FrankerFaceZ',\n        items: ffzGlobal.map(createFfzEmote),\n      },\n    ].filter(({ items }) => items.length > 0),\n);\n\nconst createIsEmotesLoadedSelector = (type) => (state) => {\n  const channel = currentChannelSelector(state);\n  const globalLoaded =\n    state.emotes[type].global.isLoaded || state.emotes[type].global.isError;\n  const channelLoaded =\n    path(['emotes', type, 'channels', channel, 'isLoaded'], state) ||\n    path(['emotes', type, 'channels', channel, 'isError'], state);\n  return globalLoaded && channelLoaded;\n};\n\nexport const isBttvEmotesLoadedSelector = createIsEmotesLoadedSelector('bttv');\nexport const isFfzEmotesLoadedSelector = createIsEmotesLoadedSelector('ffz');\nexport const isTwitchEmotesLoadedSelector = (state) =>\n  state.emotes.twitch.isLoaded || state.emotes.twitch.isError;\n\nexport const isEmotesLoadedSelector = (state) =>\n  isTwitchEmotesLoadedSelector(state) &&\n  isBttvEmotesLoadedSelector(state) &&\n  isFfzEmotesLoadedSelector(state);\n","import { pathOr } from 'ramda';\n\nimport { currentChannelSelector } from 'reducers/chat/selectors';\n\nexport const globalBadgesSelector = (state) => state.badges.global.items;\nexport const channelBadgesSelector = (state) =>\n  pathOr({}, ['badges', 'channels', currentChannelSelector(state), 'items']);\n\nconst isGlobalBadgesLoadedSelector = (state) =>\n  state.badges.global.isLoaded || state.badges.global.isError;\n\nconst isChannelBadgesLoadedSelector = (state) => {\n  const channel = currentChannelSelector(state);\n  return (\n    pathOr(false, ['badges', 'channels', channel, 'isLoaded'], state) ||\n    pathOr(false, ['badges', 'channels', channel, 'isError'], state)\n  );\n};\n\nexport const isBadgesLoadedSelector = (state) =>\n  isGlobalBadgesLoadedSelector(state) && isChannelBadgesLoadedSelector(state);\n","import { pathOr, toPairs, map, pipe, filter } from 'ramda';\n\nconst createBadge = ({\n  title,\n  description,\n  image_url_1x: imageUrl1x,\n  image_url_2x: imageUrl2x,\n  image_url_4x: imageUrl4x,\n}) => ({\n  alt: title,\n  label: description,\n  src: imageUrl1x,\n  srcSet: `${imageUrl1x} 1x, ${imageUrl2x} 2x, ${imageUrl4x} 4x`,\n});\n\nconst getMessageBadges = (badges, globalBadges, channelBadges) => {\n  const mapBadges = ([name, version]) => {\n    const badge =\n      pathOr(false, [name, 'versions', version], channelBadges) ||\n      pathOr(false, [name, 'versions', version], globalBadges);\n\n    return badge ? createBadge(badge) : false;\n  };\n\n  return pipe(\n    toPairs,\n    map(mapBadges),\n    filter(Boolean),\n  )(badges);\n};\n\nexport default getMessageBadges;\n","/* eslint-disable no-underscore-dangle */\nimport { pathOr, omit, mergeDeepRight, mergeDeepWith, concat } from 'ramda';\nimport { EventEmitter } from 'events';\nimport { parse as tekkoParse, format as tekkoFormat } from 'tekko';\nimport camelCase from 'camel-case';\nimport uuid from 'uuid/v4';\n\nconst chatUrl = 'wss://irc-ws.chat.twitch.tv:443';\n\nconst noopIRCCommands = [\n  'CAP',\n  '002',\n  '003',\n  '004',\n  '353',\n  '366',\n  '375',\n  '372',\n  '376',\n];\n\nconst booleanMessageTags = [\n  'mod',\n  'emote-only',\n  'r9k',\n  'rituals',\n  'subs-only',\n  'msg-param-should-share-streak',\n];\n\nconst numberMessageTags = [\n  'tmi-sent-ts',\n  'ban-duration',\n  'bits',\n  'msg-param-cumulative-months',\n  'msg-param-months',\n  'msg-param-promo-gift-total',\n  'msg-param-streak-months',\n  'msg-param-viewerCount',\n  'msg-param-threshold',\n];\n\nconst depricatedMessageTags = ['subscriber', 'turbo', 'user-type'];\n\nconst noticeMessageTags = [\n  'msg_banned',\n  'msg_bad_characters',\n  'msg_channel_blocked',\n  'msg_channel_suspended',\n  'msg_duplicate',\n  'msg_emoteonly',\n  'msg_facebook',\n  'msg_followersonly',\n  'msg_followersonly_followed',\n  'msg_followersonly_zero',\n  'msg_r9k',\n  'msg_ratelimit',\n  'msg_rejected',\n  'msg_rejected_mandatory',\n  'msg_room_not_found',\n  'msg_slowmode',\n  'msg_subsonly',\n  'msg_suspended',\n  'msg_timedout',\n  'msg_verified_email',\n];\n\nconst getRandomUsername = () =>\n  `justinfan${Math.floor(Math.random() * 80000 + 1000)}`;\n\nconst parseMessageEmotes = (raw = '') => {\n  if (!raw) return {};\n\n  return raw.split('/').reduce((acc, emote) => {\n    const [id, indexes] = emote.split(':');\n\n    return {\n      ...acc,\n      [id]: indexes.split(',').map((index) => {\n        const [start, end] = index.split('-');\n\n        return {\n          start: Number.parseInt(start, 10),\n          end: Number.parseInt(end, 10),\n        };\n      }),\n    };\n  }, {});\n};\n\nconst parseBadges = (data = '') => {\n  if (!data) return {};\n\n  return data.split(',').reduce((acc, badge) => {\n    const [name, value] = badge.split('/');\n\n    return {\n      ...acc,\n      [name]: value,\n    };\n  }, {});\n};\n\nconst normalizeTagValue = (name, value) => {\n  if (name === 'emotes') return parseMessageEmotes(value);\n  if (name === 'badges') return parseBadges(value);\n  if (name === 'badge-info') return parseBadges(value);\n\n  if (name === 'followers-only') {\n    let followersOnly = false;\n    if (value === '-1') {\n      followersOnly = false;\n    } else if (value === '0') {\n      followersOnly = true;\n    } else if (typeof value === 'string') {\n      followersOnly = parseInt(value, 10);\n    }\n    return followersOnly;\n  }\n\n  if (name === 'slow') {\n    let slow = false;\n    if (value === '0') {\n      slow = false;\n    } else if (typeof value === 'string') {\n      slow = parseInt(value, 10);\n    }\n    return slow;\n  }\n\n  if (booleanMessageTags.includes(name)) return value === '1';\n  if (numberMessageTags.includes(name)) return parseInt(value, 10);\n\n  if (typeof value === 'string') {\n    return value.replace('\\\\s', ' ');\n  }\n\n  return value;\n};\n\nexport const parseMessageTags = (data = {}) =>\n  Object.entries(data)\n    .filter(([key]) => !depricatedMessageTags.includes(key))\n    .reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [camelCase(key)]: normalizeTagValue(key, value),\n      };\n    }, {});\n\nexport const isBroadcaster = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'broadcaster');\n\nexport const isMod = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'moderator');\n\nexport const isSub = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'subscriber');\n\nexport const isVIP = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'vip');\n\nexport const monthsSubbed = (tags = {}) => {\n  const subbed = tags.subscriber;\n\n  return subbed ? parseInt(subbed, 10) : 0;\n};\n\nexport const getIsAction = (message) =>\n  message.startsWith('\\u0001ACTION ') && message.endsWith('\\u0001');\nexport const normalizeActionMessage = (message) => message.slice(8, -1);\n\nexport const parseMessageData = ({\n  raw,\n  command,\n  tags,\n  middle: params,\n  trailing: message,\n  prefix,\n}) => ({\n  raw,\n  command,\n  tags: parseMessageTags(tags),\n  params,\n  message,\n  prefix,\n});\n\nexport const parseChatMessage = ({\n  message,\n  tags,\n  params,\n  prefix: { user },\n}) => {\n  const isAction = getIsAction(message);\n\n  return {\n    message: isAction ? normalizeActionMessage(message) : message,\n    tags,\n    user,\n    channel: params[0].slice(1),\n    isAction,\n  };\n};\n\nconst parseGlobalUserState = ({ tags }) => ({ tags });\nconst parseState = ({ tags, params: [channel] }) => ({\n  tags,\n  channel: channel.slice(1),\n});\nconst parseUserState = parseState;\nconst parseRoomState = parseState;\n\nconst parseCommand = ({ message, tags, params: [channel] }) => ({\n  message,\n  tags,\n  channel: channel.slice(1),\n});\nconst parseNotice = parseCommand;\nconst parseUserNotice = parseCommand;\nconst parseClearMessage = parseCommand;\nconst parseClearChat = parseCommand;\nconst parseHostTarget = parseCommand;\n\nconst parseWhisper = ({\n  message,\n  tags,\n  params: [channel],\n  prefix: { user },\n}) => ({\n  message,\n  tags,\n  channel,\n  user,\n});\n\nclass Client extends EventEmitter {\n  socket;\n\n  options;\n\n  user;\n\n  channels;\n\n  _queue;\n\n  _messagesQueue;\n\n  constructor(options = {}) {\n    super();\n    this.socket = null;\n    this.channels = {};\n    this.options = mergeDeepRight({ identity: {} }, options);\n    this.user = null;\n    this._queue = [];\n    this._messagesQueue = {};\n  }\n\n  _onConnect() {\n    const { name, auth } = this.options.identity;\n\n    const nick = name || getRandomUsername();\n    const pass = auth ? `oauth:${auth}` : 'SCHMOOPIIE';\n\n    this.sendRaw([\n      'CAP REQ :twitch.tv/tags twitch.tv/commands',\n      `PASS ${pass}`,\n      `NICK ${nick}`,\n    ]);\n    this.emit('connected');\n  }\n\n  _onClose(hadError) {\n    // TODO\n    const willReconnect = false;\n    this.emit('disconnected', { willReconnect, hadError });\n    if (willReconnect) {\n      this.connect();\n    }\n  }\n\n  _onError(error) {\n    // TODO\n    this.emit('error', error);\n  }\n\n  _onData(rawData) {\n    const data = rawData.trim().split('\\r\\n');\n    data.forEach((line) => this._handleMessage(line));\n  }\n\n  _emmitOwnMessage(tags, channel) {\n    const message = pathOr([], ['_messagesQueue', channel], this).shift();\n\n    if (typeof message !== 'string') return;\n\n    const isAction = message.startsWith('/me ');\n    const messageEventData = {\n      message: isAction ? message.slice(4) : message,\n      tags: {\n        ...tags,\n        id: uuid(),\n        tmiSentTs: new Date().getTime(),\n        userId: this.user.userId,\n      },\n      user: this.options.identity.name,\n      channel,\n      isAction,\n    };\n\n    this.emit('ownmessage', messageEventData);\n  }\n\n  _handleMessage(raw) {\n    const parsedData = tekkoParse(raw);\n    parsedData.raw = raw;\n    const { command } = parsedData;\n\n    if (command === 'PING') {\n      this.sendRaw('PONG :tmi.twitch.tv');\n      this.emit('ping');\n      return;\n    }\n\n    if (parsedData.prefix && parsedData.prefix.user === 'jtv') {\n      // console.log('JTV');\n      // console.log(parsedData);\n      return;\n    }\n\n    if (command === '001') {\n      const name = parsedData.params[0];\n      this.options.identity.name = name;\n\n      while (this._queue.length) {\n        const ircMessage = this._queue.shift();\n        this.sendRaw(ircMessage);\n      }\n\n      return;\n    }\n\n    // noop\n    if (noopIRCCommands.includes(command)) {\n      return;\n    }\n\n    const data = parseMessageData(parsedData);\n    const channel = pathOr('', ['params', 0], data).slice(1);\n\n    // Sends a message to a channel\n    if (command === 'PRIVMSG') {\n      const eventData = parseChatMessage(data);\n      this.emit('message', eventData);\n      return;\n    }\n\n    // Sends user-state data when a user joins a channel or sends a PRIVMSG to a channel\n    if (command === 'USERSTATE') {\n      const eventData = parseUserState(data);\n\n      this.channels = mergeDeepRight(this.channels, {\n        [channel]: { userState: eventData.tags },\n      });\n\n      const isSendedAfterPrivateMessage =\n        pathOr(0, ['_messagesQueue', channel, 'length'], this) > 0;\n\n      if (isSendedAfterPrivateMessage) {\n        this._emmitOwnMessage(eventData.tags, channel);\n      }\n\n      this.emit('userstate', eventData);\n      return;\n    }\n\n    if (command === 'JOIN') {\n      const eventData = { channel };\n      this.channels = mergeDeepRight(this.channels, { [channel]: {} });\n      this.emit('join', eventData);\n      return;\n    }\n\n    if (command === 'PART') {\n      const eventData = { channel };\n      this.channels = omit([channel], this.channels);\n      this.emit('part', eventData);\n      return;\n    }\n\n    if (command === 'ROOMSTATE') {\n      const eventData = parseRoomState(data);\n      this.channels = mergeDeepRight(this.channels, {\n        [channel]: { roomState: eventData.tags },\n      });\n      this.emit('roomstate', eventData);\n      return;\n    }\n\n    if (command === 'NOTICE') {\n      const eventData = parseNotice(data);\n\n      // Last message was not sent\n      if (noticeMessageTags.includes(data.tags.msgId)) {\n        pathOr([], ['_messagesQueue', channel], this).shift();\n      }\n\n      this.emit('notice', eventData);\n      return;\n    }\n\n    if (command === 'USERNOTICE') {\n      const eventData = parseUserNotice(data);\n      this.emit('usernotice', eventData);\n      return;\n    }\n\n    if (command === 'CLEARCHAT') {\n      const eventData = parseClearChat(data);\n      this.emit('clearchat', eventData);\n      return;\n    }\n\n    if (command === 'CLEARMSG') {\n      const eventData = parseClearMessage(data);\n      this.emit('clearmsg', eventData);\n      return;\n    }\n\n    if (command === 'HOSTTARGET') {\n      const eventData = parseHostTarget(data);\n      this.emit('hosttarget', eventData);\n      return;\n    }\n\n    if (command === 'WHISPER') {\n      const eventData = parseWhisper(data);\n      this.emit('whisper', eventData);\n      return;\n    }\n\n    if (command === 'GLOBALUSERSTATE') {\n      const eventData = parseGlobalUserState(data);\n      this.user = eventData.tags;\n      this.emit('globaluserstate', eventData);\n      return;\n    }\n\n    this.emit('unhandled-command', data);\n  }\n\n  sendRaw(message) {\n    const handleError = (err) => {\n      if (err) {\n        this.emit('error', err);\n      }\n    };\n\n    if (Array.isArray(message)) {\n      message.forEach((line) => this.socket.send(`${line}\\r\\n`, handleError));\n    } else {\n      this.socket.send(`${message}\\r\\n`, handleError);\n    }\n  }\n\n  connect() {\n    this.socket = new WebSocket(chatUrl);\n    const { socket } = this;\n\n    socket.addEventListener('open', () => this._onConnect());\n    socket.addEventListener('close', (hadError) => this._onClose(hadError));\n    socket.addEventListener('error', (error) => this._onError(error));\n    socket.addEventListener('message', (data) => this._onData(data.data));\n  }\n\n  say(channel, message) {\n    // TODO: check if conected to the channel before send\n\n    if (!message) return;\n\n    const ircMessage = tekkoFormat({\n      command: 'PRIVMSG',\n      middle: [`#${channel}`],\n      trailing: message,\n    });\n    this.sendRaw(ircMessage);\n\n    this._messagesQueue = mergeDeepWith(concat, this._messagesQueue, {\n      [channel]: [message],\n    });\n  }\n\n  sendCommand(channel, command, params) {\n    const commandParams = Array.isArray(params) ? params.join(' ') : params;\n    const ircMessage = tekkoFormat({\n      command: 'PRIVMSG',\n      middle: [`#${channel}`],\n      trailing: `/${command} ${commandParams}`,\n    });\n    this.sendRaw(ircMessage);\n  }\n\n  join(roomName) {\n    const ircMessage = tekkoFormat({\n      command: 'JOIN',\n      middle: [`#${roomName}`],\n    });\n\n    if (!this.user) {\n      this._queue.push(ircMessage);\n    } else {\n      this.sendRaw(ircMessage);\n    }\n  }\n\n  part(roomName) {\n    const ircMessage = tekkoFormat({\n      command: 'PART',\n      middle: [`#${roomName}`],\n    });\n\n    if (!this.user) {\n      this._queue.push(ircMessage);\n    } else {\n      this.sendRaw(ircMessage);\n    }\n  }\n}\n\nexport default Client;\n","import { parse } from 'tekko';\n\nimport {\n  globalBadgesSelector,\n  channelBadgesSelector,\n} from 'reducers/badges/selectors';\nimport { emotesSelector } from 'reducers/emotes/selectors';\nimport { blockedUsersSelector } from 'reducers/chat/selectors';\nimport { MESSAGE_TYPES } from 'utils/constants';\nimport {\n  getIsAction,\n  normalizeActionMessage,\n  parseMessageTags,\n} from 'utils/twitchChat';\nimport formatMessage from 'utils/formatMessage';\nimport getMessageBadges from 'utils/getMessageBadges';\n\nconst normalizeRecentMessages = (state, messages) => {\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n  const blockedUsers = blockedUsersSelector(state);\n\n  const filterMessages = ({ command, prefix: { user } }) =>\n    command === 'PRIVMSG' && !blockedUsers.includes(user);\n\n  const normalizeMessages = ({\n    tags,\n    params: [channel, message],\n    prefix: { user },\n  }) => {\n    const isAction = getIsAction(message);\n    const normalizedMessage = isAction\n      ? normalizeActionMessage(message)\n      : message;\n    const parsedTags = parseMessageTags(tags);\n\n    return {\n      type: MESSAGE_TYPES.MESSAGE,\n      message: normalizedMessage,\n      messageArray: formatMessage(normalizedMessage, parsedTags.emotes, emotes),\n      tags: parsedTags,\n      badges: getMessageBadges(parsedTags.badges, globalBadges, channelBadges),\n      user,\n      channel: channel.slice(1),\n      isAction,\n      isHistory: true,\n    };\n  };\n\n  return messages\n    .map((m) => parse(m))\n    .filter(filterMessages)\n    .map(normalizeMessages);\n};\n\nexport default normalizeRecentMessages;\n","import { createAction, createActions, handleActions } from 'redux-actions';\nimport { pathOr, mergeDeepRight, concat } from 'ramda';\n\nimport { emotesSelector } from 'reducers/emotes/selectors';\nimport {\n  globalBadgesSelector,\n  channelBadgesSelector,\n} from 'reducers/badges/selectors';\nimport { fetchRecentMessages as apiFetchRecentMessages } from 'utils/api';\nimport {\n  CHANNEL_MESSAGES_LIMIT,\n  MESSAGE_TYPES,\n  STORE_FLAGS,\n} from 'utils/constants';\nimport formatMessage from 'utils/formatMessage';\nimport getMessageBadges from 'utils/getMessageBadges';\nimport normalizeRecentMessages from 'utils/normalizeRecentMessages';\n\nconst defaultState = {\n  // [channel]: {\n  //   history: {\n  //     isLoading: true,\n  //     isLoaded: false,\n  //     isError: false,\n  //     error: null,\n  //   },\n  //   isEven: false,\n  //   items: [],\n  // },\n};\n\nconst {\n  addMessageEntity,\n  addRecentMessages: addRecentMessagesAction,\n  fetchRecentMessagesRequest,\n  fetchRecentMessagesSuccess,\n  fetchRecentMessagesFailure,\n} = createActions(\n  'ADD_MESSAGE_ENTITY',\n  'ADD_RECENT_MESSAGES',\n  'FETCH_RECENT_MESSAGES_REQUEST',\n  'FETCH_RECENT_MESSAGES_SUCCESS',\n  'FETCH_RECENT_MESSAGES_FAILURE',\n);\n\nexport const clearChat = createAction('CLEAR_CHAT');\n\nconst sliceMessages = (items) => {\n  const diff = items.length - CHANNEL_MESSAGES_LIMIT;\n  return diff > 0 ? items.slice(diff) : items;\n};\n\nconst getIsEven = (prev, addedItemsCount, isSliced) => {\n  if (isSliced) {\n    return addedItemsCount % 2 ? !prev : prev;\n  }\n  return prev;\n};\n\nexport const addRecentMessages = (channel) => (dispatch, getState) => {\n  const state = getState();\n  const messages = pathOr([], ['messages', channel, 'history', 'items'], state);\n  const data = {\n    channel,\n    items: normalizeRecentMessages(state, messages),\n  };\n\n  dispatch(addRecentMessagesAction(data));\n};\n\nexport const fetchRecentMessages = (channel) => async (dispatch) => {\n  dispatch(fetchRecentMessagesRequest({ channel }));\n  try {\n    const response = await apiFetchRecentMessages(channel);\n    const data = { channel, items: response.messages };\n\n    dispatch(fetchRecentMessagesSuccess(data));\n  } catch (error) {\n    dispatch(fetchRecentMessagesFailure({ channel, error }));\n  }\n};\n\nexport const addMessage = ({ message, tags, ...rest }) => (\n  dispatch,\n  getState,\n) => {\n  const state = getState();\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n\n  const normalizedMessage = {\n    type: MESSAGE_TYPES.MESSAGE,\n    message,\n    messageArray: formatMessage(message, tags.emotes, emotes),\n    tags,\n    badges: getMessageBadges(tags.badges, globalBadges, channelBadges),\n    ...rest,\n  };\n\n  dispatch(addMessageEntity(normalizedMessage));\n};\n\nexport const addNoticeMessage = (message) => (dispatch) => {\n  const normalizedMessage = {\n    ...message,\n    type: MESSAGE_TYPES.NOTICE_MESSAGE,\n  };\n\n  dispatch(addMessageEntity(normalizedMessage));\n};\n\nexport const addUserNoticeMessage = (message) => (dispatch) => {\n  const normalizedMessage = {\n    ...message,\n    type: MESSAGE_TYPES.USER_NOTICE_MESSAGE,\n  };\n\n  dispatch(addMessageEntity(normalizedMessage));\n};\n\nconst handleAddMessageEntity = (state, { payload: message }) => {\n  const { channel } = message;\n  const oldItems = pathOr([], [channel, 'items'], state);\n  const newItems = [...oldItems, message];\n  const slicedMessages = sliceMessages(newItems);\n  const isSliced = newItems.length > slicedMessages.length;\n  const isEven = pathOr(false, [channel, 'isEven'], state);\n\n  return {\n    ...state,\n    [channel]: {\n      ...state[channel],\n      isEven: getIsEven(isEven, 1, isSliced),\n      items: slicedMessages,\n    },\n  };\n};\n\nconst handleAddRecentMessages = (state, { payload: { channel, items } }) => {\n  const newItems = concat(items, pathOr([], [channel, 'items'], state));\n  const slicedMessages = sliceMessages(newItems);\n  const isSliced = newItems.length > slicedMessages.length;\n  const isEven = pathOr(false, [channel, 'isEven'], state);\n\n  return mergeDeepRight(state, {\n    [channel]: {\n      history: { items: [] },\n      items: newItems,\n      isEven: getIsEven(isEven, items.length, isSliced),\n    },\n  });\n};\n\nconst handleClearChat = (state, { payload }) => {\n  const {\n    channel,\n    tags: { targetUserId },\n  } = payload;\n\n  const newItems = state[channel].items.map((message) =>\n    message.tags.userId === targetUserId && !message.isHistory\n      ? { ...message, isDeleted: true }\n      : message,\n  );\n\n  return {\n    ...state,\n    [channel]: {\n      ...state[channel],\n      items: newItems,\n    },\n  };\n};\n\nconst handleFetchRecentMessages = {\n  [fetchRecentMessagesRequest]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      [payload.channel]: {\n        history: { ...STORE_FLAGS.REQUEST },\n      },\n    }),\n  [fetchRecentMessagesSuccess]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      [payload.channel]: {\n        history: { ...STORE_FLAGS.SUCCESS, items: payload.items },\n      },\n    }),\n  [fetchRecentMessagesFailure]: (state, { payload }) =>\n    mergeDeepRight(state, {\n      [payload.channel]: {\n        history: { ...STORE_FLAGS.FAILURE, error: payload.error },\n      },\n    }),\n};\n\nconst reducer = handleActions(\n  {\n    [addMessageEntity]: handleAddMessageEntity,\n    [addRecentMessagesAction]: handleAddRecentMessages,\n    [clearChat]: handleClearChat,\n    ...handleFetchRecentMessages,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createAction, handleActions } from 'redux-actions';\n\nconst getOptionsFromLocalStorage = () => {\n  try {\n    return JSON.parse(localStorage.options);\n  } catch {\n    return {};\n  }\n};\n\nconst defaultState = {\n  showTimestamps: false,\n  splitChat: true,\n  blacklistKeywords: '',\n  highlightKeywords: '',\n  ...getOptionsFromLocalStorage(),\n};\n\nexport const changeOption = createAction('CHANGE_OPTION', (option, value) => {\n  localStorage.setItem(\n    'options',\n    JSON.stringify({\n      ...getOptionsFromLocalStorage(),\n      [option]: value,\n    }),\n  );\n\n  return {\n    option,\n    value,\n  };\n});\nconst handleChangeOption = (state, { payload: { option, value } }) => ({\n  ...state,\n  [option]: value,\n});\n\nconst reducer = handleActions(\n  {\n    [changeOption]: handleChangeOption,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport auth from './auth';\nimport badges from './badges';\nimport chat from './chat';\nimport emotes from './emotes/index';\nimport messages from './messages';\nimport options from './options';\n\nexport default combineReducers({\n  auth,\n  badges,\n  chat,\n  emotes,\n  messages,\n  options,\n});\n","/* eslint-disable no-underscore-dangle */\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from 'reducers';\n\nconst enhancer =\n  process.env.NODE_ENV === 'production'\n    ? applyMiddleware(thunk)\n    : compose(\n        applyMiddleware(thunk),\n        window.__REDUX_DEVTOOLS_EXTENSION__\n          ? window.__REDUX_DEVTOOLS_EXTENSION__()\n          : (noop) => noop,\n      );\n\nconst store = createStore(rootReducer, {}, enhancer);\n\nexport default store;\n","import { useState, useEffect } from 'react';\n\nconst useLocationHash = () => {\n  const [hash, setHash] = useState(window.location.hash);\n\n  useEffect(() => {\n    const handleHashChange = () => setHash(window.location.hash);\n\n    window.addEventListener('hashchange', handleHashChange);\n\n    return () => window.removeEventListener('hashchange', handleHashChange);\n  }, []);\n\n  return hash;\n};\n\nexport default useLocationHash;\n","import { useEffect } from 'react';\n\nconst useDocumentTitle = (title) => {\n  useEffect(() => {\n    document.title = title\n      ? `#${title} - ${process.env.REACT_APP_NAME} `\n      : process.env.REACT_APP_NAME;\n  }, [title]);\n};\n\nexport default useDocumentTitle;\n","import { pathOr } from 'ramda';\n\nimport { currentChannelSelector } from 'reducers/chat/selectors';\n\nexport const messagesSelector = (state) =>\n  pathOr([], ['messages', currentChannelSelector(state), 'items'], state);\n\nexport const isHistoryLoadingSelector = (state) =>\n  pathOr(false, [\n    'messages',\n    currentChannelSelector(state),\n    'history',\n    'isLoading',\n  ])(state);\n\nexport const isHistoryLoadedSelector = (state) =>\n  pathOr(false, [\n    'messages',\n    currentChannelSelector(state),\n    'history',\n    'isLoaded',\n  ])(state);\n","import emojilib from 'emojilib/emojis';\n\nconst replaceEmojis = (text) =>\n  text\n    .split(' ')\n    .map((word) => {\n      if (word[0] !== ':' || word[word.length - 1] !== ':') {\n        return word;\n      }\n\n      const name = word.slice(1, -1);\n      const emoji = emojilib[name];\n\n      return emoji && emoji.char ? emoji.char : word;\n    })\n    .join(' ');\n\nexport default replaceEmojis;\n","export const optionsSelector = (state) => [\n  {\n    title: 'My preferences',\n    items: [\n      {\n        type: 'SWITCH',\n        id: 'show-timestamps',\n        name: 'showTimestamps',\n        title: 'Show Timestamps',\n        description: '',\n        value: state.options.showTimestamps,\n      },\n      {\n        type: 'SWITCH',\n        id: 'split-chat',\n        name: 'splitChat',\n        title: 'Split Chat',\n        description: '',\n        value: state.options.splitChat,\n      },\n      // {\n      //   type: 'INPUT',\n      //   id: 'blacklist-keywords',\n      //   name: 'blacklistKeywords',\n      //   title: 'Set Blacklist Keywords',\n      //   description: '',\n      //   value: state.options.blacklistKeywords,\n      // },\n      // {\n      //   type: 'INPUT',\n      //   id: 'highlight-keywords',\n      //   name: 'highlightKeywords',\n      //   title: 'Set Highlight Keywords',\n      //   description: '',\n      //   value: state.options.highlightKeywords,\n      // },\n    ],\n  },\n];\n\nexport const isShowTimestampsSelector = (state) => state.options.showTimestamps;\nexport const isSplitChatSelector = (state) => state.options.splitChat;\n","import CustomScrollbar from 'react-scrollbars-custom';\nimport styled from 'styled-components';\n\nconst Scrollbar = styled(CustomScrollbar).attrs({\n  disableTracksWidthCompensation: true,\n})`\n  overflow-y: auto;\n\n  .ScrollbarsCustom-TrackY {\n    background: none !important;\n  }\n\n  .ScrollbarsCustom-ThumbY {\n    margin-left: auto;\n    margin-right: auto;\n    width: 6px !important;\n  }\n`;\n\nexport default Scrollbar;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  fill: \"currentColor\"\n}, React.createElement(\"path\", {\n  d: \"M7 11a1 1 0 100-2 1 1 0 000 2zM14 10a1 1 0 11-2 0 1 1 0 012 0zM10 14a2 2 0 002-2H8a2 2 0 002 2z\"\n}), React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-2 0a6 6 0 11-12 0 6 6 0 0112 0z\",\n  clipRule: \"evenodd\"\n}));\n\nvar SvgSmileyFace = function SvgSmileyFace(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    width: \"100%\",\n    height: \"100%\",\n    viewBox: \"0 0 20 20\",\n    x: \"0px\",\n    y: \"0px\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgSmileyFace, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/smiley-face.c033f241.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  fill: \"currentColor\"\n}, React.createElement(\"path\", {\n  d: \"M10 8a2 2 0 100 4 2 2 0 000-4z\"\n}), React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M9 2h2a2.01 2.01 0 001.235 1.855l.53.22a2.01 2.01 0 002.185-.439l1.414 1.414a2.01 2.01 0 00-.439 2.185l.22.53A2.01 2.01 0 0018 9v2a2.01 2.01 0 00-1.855 1.235l-.22.53a2.01 2.01 0 00.44 2.185l-1.415 1.414a2.01 2.01 0 00-2.184-.439l-.531.22A2.01 2.01 0 0011 18H9a2.01 2.01 0 00-1.235-1.854l-.53-.22a2.009 2.009 0 00-2.185.438L3.636 14.95a2.009 2.009 0 00.438-2.184l-.22-.531A2.01 2.01 0 002 11V9c.809 0 1.545-.487 1.854-1.235l.22-.53a2.009 2.009 0 00-.438-2.185L5.05 3.636a2.01 2.01 0 002.185.438l.53-.22A2.01 2.01 0 009 2zm-4 8l1.464 3.536L10 15l3.535-1.464L15 10l-1.465-3.536L10 5 6.464 6.464 5 10z\",\n  clipRule: \"evenodd\"\n}));\n\nvar SvgGears = function SvgGears(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    width: \"100%\",\n    height: \"100%\",\n    viewBox: \"0 0 20 20\",\n    x: \"0px\",\n    y: \"0px\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgGears, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/gears.7c6696a1.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M8.5 10L4 5.5 5.5 4 10 8.5 14.5 4 16 5.5 11.5 10l4.5 4.5-1.5 1.5-4.5-4.5L5.5 16 4 14.5 8.5 10z\"\n});\n\nvar SvgClose = function SvgClose(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    width: \"100%\",\n    height: \"100%\",\n    viewBox: \"0 0 20 20\",\n    x: \"0px\",\n    y: \"0px\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgClose, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/close.918d96cf.svg\";\nexport { ForwardRef as ReactComponent };","import pt from 'prop-types';\nimport styled, { css } from 'styled-components';\n\nconst sizes = {\n  small: css`\n    width: 24px;\n    height: 24px;\n  `,\n  medium: css`\n    width: 30px;\n    height: 30px;\n  `,\n  // large: css``,\n};\n\nconst IconButton = styled.button.attrs({ type: 'button' })`\n  margin: 0;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: none;\n  border: none;\n  outline: none;\n  color: #fff;\n  border-radius: 4px;\n  cursor: pointer;\n\n  ${(p) => sizes[p.size]};\n\n  &:hover,\n  &:focus {\n    background-color: rgba(255, 255, 255, 0.15);\n  }\n\n  &:active {\n    background-color: rgba(255, 255, 255, 0.2);\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n`;\n\nIconButton.defaultProps = {\n  size: 'medium',\n};\n\nIconButton.propTypes = {\n  size: pt.oneOf(Object.keys(sizes)),\n};\n\nexport default IconButton;\n","import React from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport { ReactComponent as CloseIconSvg } from 'icons/close.svg';\nimport IconButton from 'components/IconButton';\n\nconst ChatModalRoot = styled.div`\n  height: 100%;\n  box-shadow: rgba(0, 0, 0, 0.4) 0px 4px 8px 0px,\n    rgba(0, 0, 0, 0.4) 0px 0px 4px 0px;\n  background-color: #18181b;\n  white-space: normal;\n  color: #fff;\n  border-radius: 4px;\n`;\nconst CloseButton = styled(IconButton).attrs({ size: 'small' })`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n`;\nconst CloseIcon = styled(CloseIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\n\nconst ChatModal = ({ children, onClose }) => (\n  <ChatModalRoot>\n    <CloseButton onClick={onClose}>\n      <CloseIcon />\n    </CloseButton>\n    {children}\n  </ChatModalRoot>\n);\n\nChatModal.defaultProps = {};\n\nChatModal.propTypes = {\n  children: pt.node.isRequired,\n  onClose: pt.func.isRequired,\n};\n\nexport default ChatModal;\n","import React, { useCallback } from 'react';\nimport pt from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { emoteCategoriesSelector } from 'reducers/emotes/selectors';\nimport Scrollbar from 'components/Scrollbar';\n\nconst EmotePickerRoot = styled.div`\n  padding-top: 32px;\n  padding-bottom: 16px;\n  height: 100%;\n`;\nconst Categories = styled.div`\n  height: 100%;\n`;\nconst Category = styled.div`\n  padding-top: 10px;\n  padding-right: 16px;\n  padding-left: 16px;\n\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding-bottom: 10px;\n  font-size: 12px;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst CategoryItems = styled.div``;\nconst Emote = styled.img`\n  padding: 2px;\n  width: 32px;\n  height: 32px;\n  object-fit: contain;\n\n  &:hover {\n    background-color: rgba(119, 44, 232, 0.2);\n    cursor: pointer;\n  }\n`;\n\nconst EmotePicker = ({ onEmoteClick }) => {\n  const emoteCategories = useSelector(emoteCategoriesSelector);\n\n  const renderCategory = useCallback(\n    ({ title, items }, key) => (\n      <Category key={key}>\n        {!!title && <CategoryHeader>{title}</CategoryHeader>}\n        <CategoryItems>\n          {items.map(({ alt, src, srcSet }) => (\n            <Emote\n              key={alt}\n              alt={alt}\n              src={src}\n              srcSet={srcSet}\n              onClick={() => onEmoteClick(alt)}\n            />\n          ))}\n        </CategoryItems>\n      </Category>\n    ),\n    [onEmoteClick],\n  );\n\n  return (\n    <EmotePickerRoot>\n      <Categories>\n        <Scrollbar>{emoteCategories.map(renderCategory)}</Scrollbar>\n      </Categories>\n    </EmotePickerRoot>\n  );\n};\n\nEmotePicker.defaultProps = {};\n\nEmotePicker.propTypes = {\n  onEmoteClick: pt.func.isRequired,\n};\n\nexport default EmotePicker;\n","import React from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\n\nconst SwitchRoot = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  line-height: 20px;\n`;\nconst Label = styled.label`\n  content: '';\n  position: relative;\n  display: inline-block;\n  order: 0;\n  width: 35px;\n  height: 20px;\n  vertical-align: bottom;\n  border-radius: 10px/50%;\n  background-color: rgba(0, 0, 0, 0.3);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15), 0 0 2px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.1s ease;\n  cursor: pointer;\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    bottom: 2px;\n    display: block;\n    width: 16px;\n    border-radius: 50%;\n    background-color: #fff;\n    transition: left 0.1s ease;\n  }\n`;\nconst Input = styled.input.attrs({ type: 'checkbox' })`\n  position: absolute;\n  opacity: 0;\n\n  &:checked + ${Label} {\n    background-color: #9147ff;\n\n    &:after {\n      content: '';\n      top: 2px;\n      left: calc(100% - 18px);\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 9px;\n      left: 10px;\n      display: block;\n      height: 3px;\n      width: 7px;\n      border-bottom: 2px solid #fff;\n      border-left: 2px solid #fff;\n      transform: translate3d(-50%, -50%, 0) rotate(-45deg);\n    }\n  }\n`;\n\nconst Switch = ({ id, label, checked, readOnly, onChange }) => (\n  <SwitchRoot>\n    <Input\n      id={id}\n      label={label}\n      checked={checked}\n      readOnly={readOnly}\n      onChange={onChange}\n    />\n    <Label htmlFor={id} />\n  </SwitchRoot>\n);\n\nSwitch.defaultProps = {\n  checked: false,\n  readOnly: false,\n  onChange: () => {},\n};\n\nSwitch.propTypes = {\n  id: pt.string.isRequired,\n  label: pt.string.isRequired,\n  checked: pt.bool,\n  readOnly: pt.bool,\n  onChange: pt.func,\n};\n\nexport default Switch;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport { changeOption } from 'reducers/options';\nimport { optionsSelector } from 'reducers/options/selectors';\nimport Scrollbar from 'components/Scrollbar';\nimport Switch from 'components/Switch';\n\nconst OptionsRoot = styled.div`\n  padding: 16px;\n  height: 100%;\n`;\nconst Header = styled.h2`\n  margin: 0;\n  padding: 0;\n  font-size: 14px;\n  text-align: center;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst Categories = styled(Scrollbar)`\n  height: 100%;\n`;\nconst Category = styled.div`\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding: 8px 0;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst CategoryItems = styled.div``;\nconst Option = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 4px 0;\n  cursor: pointer;\n`;\nconst OptionText = styled.span``;\n\nconst Options = () => {\n  const dispatch = useDispatch();\n  const options = useSelector(optionsSelector);\n\n  const renderOption = useCallback(\n    ({ id, name, title, description, value }) => (\n      <Option\n        key={id}\n        onClick={() => dispatch(changeOption(name, !value))}\n        title={description}\n      >\n        <OptionText>{title}</OptionText>\n        <Switch\n          id={id}\n          label={title}\n          checked={value}\n          onChange={() => dispatch(changeOption(name, value))}\n        />\n      </Option>\n    ),\n    [dispatch],\n  );\n\n  const renderOptionsCategory = useCallback(\n    ({ title, items }, key) => (\n      <Category key={key}>\n        {!!title && <CategoryHeader>{title}</CategoryHeader>}\n        <CategoryItems>{items.map(renderOption)}</CategoryItems>\n      </Category>\n    ),\n    [renderOption],\n  );\n\n  return (\n    <OptionsRoot>\n      <Header>Chat settings</Header>\n      <Categories>{options.map(renderOptionsCategory)}</Categories>\n    </OptionsRoot>\n  );\n};\n\nOptions.defaultProps = {};\n\nOptions.propTypes = {};\n\nexport default Options;\n","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport useOnClickOutside from 'use-onclickoutside';\n\nimport { ReactComponent as SmileyFaceIconSvg } from 'icons/smiley-face.svg';\nimport { ReactComponent as GearsIconSvg } from 'icons/gears.svg';\nimport ChatModal from 'components/ChatModal';\nimport IconButton from 'components/IconButton';\nimport EmotePicker from 'components/EmotePicker';\nimport Options from 'components/Options';\n\nconst ChatInputRoot = styled.form`\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n  background-color: #18181b;\n\n  & > :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nconst ControlsWrapper = styled.div`\n  position: relative;\n`;\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n\n  & > :not(:last-child) {\n    margin-right: 8px;\n  }\n`;\nconst SendButton = styled.button`\n  padding: 0 10px;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #9147ff;\n  outline: none;\n  font-size: 12px;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #772ce8;\n  }\n\n  &:active {\n    background-color: #5c16c5;\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n\n  &[disabled] {\n    background-color: rgba(255, 255, 255, 0.26);\n    color: rgba(255, 255, 255, 0.8);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\nconst TextareaWrapper = styled.div`\n  position: relative;\n`;\nconst EmotesModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 0;\n  bottom: 100%;\n  margin-bottom: 8px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nconst OptionsModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 0;\n  bottom: 100%;\n  margin-bottom: 10px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nconst Textarea = styled.textarea`\n  display: block;\n  padding: 10px;\n  width: 100%;\n  height: 38px;\n  max-height: 91px;\n  min-height: 40px;\n  overflow: hidden;\n  border: 2px solid transparent;\n  background-color: rgba(255, 255, 255, 0.15);\n  font-family: inherit;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\nconst EmotesButton = styled(IconButton)`\n  position: absolute;\n  right: 5px;\n  bottom: 5px;\n`;\nconst SmileyFaceIcon = styled(SmileyFaceIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\nconst GearsIcon = styled(GearsIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\nconst StyledLink = styled(Link)`\n  color: #bf94ff;\n  text-decoration: none;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\n\nconst ChatInput = ({ isAuth, isDisabled, onSubmit }) => {\n  const textareaRef = useRef(null);\n  const [text, setText] = useState('');\n  const [isEmotesModalVisible, setIsEmotesModalVisible] = useState(false);\n  const [isOptionsModalVisible, setIsOptionsModalVisible] = useState(false);\n  const textareaWrapperRef = React.useRef(null);\n  const optionsModalRef = React.useRef(null);\n\n  const handleCloseEmotesModal = () => setIsEmotesModalVisible(false);\n  const handleCloseOptionsModal = () => setIsOptionsModalVisible(false);\n\n  useOnClickOutside(textareaWrapperRef, handleCloseEmotesModal);\n  useOnClickOutside(optionsModalRef, handleCloseOptionsModal);\n\n  const handleChange = (e) => setText(e.target.value);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(text);\n    setText('');\n  };\n\n  const handleKeyDown = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        const message = text.trim();\n        if (message) {\n          onSubmit(message);\n          setText('');\n        }\n      }\n    },\n    [onSubmit, setText, text],\n  );\n\n  useEffect(() => {\n    const textareaNode = textareaRef.current;\n\n    textareaNode.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      textareaNode.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [handleKeyDown]);\n\n  const renderEmotesModal = useCallback(\n    () => (\n      <EmotesModal>\n        <ChatModal onClose={handleCloseEmotesModal}>\n          <EmotePicker\n            onEmoteClick={(emoteName) =>\n              setText((t) => `${t.trim()} ${emoteName} `.trimLeft())\n            }\n          />\n        </ChatModal>\n      </EmotesModal>\n    ),\n    [],\n  );\n\n  const renderOptionsModal = useCallback(\n    () => (\n      <OptionsModal ref={optionsModalRef}>\n        <ChatModal onClose={handleCloseOptionsModal}>\n          <Options />\n        </ChatModal>\n      </OptionsModal>\n    ),\n    [],\n  );\n\n  return (\n    <ChatInputRoot onSubmit={handleSubmit}>\n      <TextareaWrapper ref={textareaWrapperRef}>\n        {isEmotesModalVisible && renderEmotesModal()}\n        <Textarea\n          placeholder=\"Send a message\"\n          ref={textareaRef}\n          maxLength={500}\n          disabled={isDisabled}\n          onChange={handleChange}\n          value={text}\n        />\n        <EmotesButton\n          onClick={() => setIsEmotesModalVisible(!isEmotesModalVisible)}\n        >\n          <SmileyFaceIcon />\n        </EmotesButton>\n      </TextareaWrapper>\n      <ControlsWrapper>\n        <Controls>\n          {!isAuth && (\n            <StyledLink to=\"/chat/auth\">Sign in with Twitch</StyledLink>\n          )}\n          <IconButton\n            onClick={() => setIsOptionsModalVisible(!isOptionsModalVisible)}\n          >\n            <GearsIcon />\n          </IconButton>\n          <SendButton disabled={isDisabled} type=\"submit\">\n            Chat\n          </SendButton>\n        </Controls>\n        {isOptionsModalVisible && renderOptionsModal()}\n      </ControlsWrapper>\n    </ChatInputRoot>\n  );\n};\n\nChatInput.defaultProps = {\n  isDisabled: false,\n};\n\nChatInput.propTypes = {\n  isAuth: pt.bool.isRequired,\n  isDisabled: pt.bool,\n  onSubmit: pt.func.isRequired,\n};\n\nexport default ChatInput;\n","import pt from 'prop-types';\n\nimport { MESSAGE_TYPES } from 'utils/constants';\nimport {\n  twitchEmoteType,\n  bttvEmoteType,\n  ffzEmoteType,\n  emojiType,\n  mentionType,\n  linkType,\n} from 'utils/formatMessage';\n\nexport const messageType = pt.shape({\n  type: pt.oneOf([MESSAGE_TYPES.MESSAGE]).isRequired,\n  message: pt.string.isRequired,\n  messageArray: pt.arrayOf(\n    pt.oneOfType([\n      pt.string,\n      twitchEmoteType,\n      bttvEmoteType,\n      ffzEmoteType,\n      emojiType,\n      mentionType,\n      linkType,\n    ]),\n  ).isRequired,\n  tags: pt.shape({\n    badgeInfo: pt.shape({\n      subscriber: pt.string,\n    }),\n    badges: pt.shape({}),\n    color: pt.string,\n    displayName: pt.string.isRequired,\n    emotes: pt.shape({}),\n    flags: pt.string,\n    id: pt.string,\n    mod: pt.bool,\n    roomId: pt.string,\n    tmiSentId: pt.oneOfType([pt.string, pt.number]),\n    userId: pt.string,\n  }).isRequired,\n  badges: pt.arrayOf(\n    pt.shape({\n      alt: pt.string,\n      label: pt.string,\n      src: pt.string.isRequired,\n      srcSet: pt.string,\n    }),\n  ),\n  user: pt.string.isRequired,\n  isHistory: pt.bool,\n  isAction: pt.bool,\n  isDeleted: pt.bool,\n});\n\nexport const noticeType = pt.shape({\n  type: pt.oneOf([MESSAGE_TYPES.NOTICE_MESSAGE]).isRequired,\n  message: pt.string.isRequired,\n  channel: pt.string.isRequired,\n  tags: pt.shape({\n    msgId: pt.string.isRequired,\n  }).isRequired,\n});\n\nexport const userNoticeType = pt.shape({\n  type: pt.oneOf([MESSAGE_TYPES.USER_NOTICE_MESSAGE]).isRequired,\n  message: pt.string,\n  channel: pt.string.isRequired,\n  tags: pt.shape({\n    badgeInfo: pt.shape({\n      subscriber: pt.string,\n    }),\n    badges: pt.shape({}),\n    color: pt.string,\n    displayName: pt.string.isRequired,\n    emotes: pt.shape({}),\n    id: pt.string,\n    login: pt.string,\n    mod: pt.bool,\n    msgId: pt.string,\n    systemMsg: pt.string,\n    tmiSentId: pt.oneOfType([pt.string, pt.number]),\n    userId: pt.string,\n    msgParamCumulativeMonths: pt.number,\n    msgParamDisplayName: pt.string,\n    msgParamLogin: pt.string,\n    msgParamMonths: pt.number,\n    msgParamPromoGiftTotal: pt.number,\n    msgParamPromoName: pt.string,\n    msgParamRecipientDisplayName: pt.string,\n    msgParamRecipientId: pt.string,\n    msgParamRecipientUserName: pt.string,\n    msgParamSenderLogin: pt.string,\n    msgParamSenderName: pt.string,\n    msgParamShouldShareStreak: pt.bool,\n    msgParamStreakMonths: pt.number,\n    msgParamSubPlan: pt.string,\n    msgParamSubPlanName: pt.string,\n    msgParamViewerCount: pt.number,\n    msgParamRitualName: pt.string,\n    msgParamThreshold: pt.number,\n  }).isRequired,\n});\n","import React, { useState } from 'react';\nimport pt from 'prop-types';\nimport styled, { css } from 'styled-components';\nimport { format } from 'date-fns/fp';\n\nimport { messageType } from './types';\n\nconst getChatMessageBg = (p) => {\n  if (p.isMention) return 'rgba(255, 0, 0, 0.3)';\n  if (p.isEven) return '#1f1925';\n  return 'transparent';\n};\n\nconst MessageRoot = styled.div`\n  padding: 5px 20px;\n  color: ${(p) => (p.isAction ? p.color : '#fff')};\n  opacity: ${(p) => (p.isHistory || p.isDeleted ? '0.5' : '1')};\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${getChatMessageBg};\n`;\nconst Name = styled.span`\n  font-weight: bold;\n  color: ${(p) => p.color};\n`;\nconst Emote = styled.img`\n  display: inline-block;\n  margin: -5px 0;\n  vertical-align: middle;\n`;\nconst Emoji = styled.img`\n  display: inline-block;\n  margin-top: -5px;\n  margin-bottom: -4px;\n  width: 20px;\n  height: auto;\n  vertical-align: middle;\n`;\nconst Mention = styled.span`\n  ${(p) =>\n    (p.isActive || p.isOwnMessage) &&\n    css`\n      padding: 2px 4px;\n    `};\n  ${(p) =>\n    p.isOwnMessage &&\n    css`\n      background-color: #40404a;\n      color: #fff;\n    `};\n  ${(p) =>\n    p.isActive &&\n    css`\n      background-color: #fafafa;\n      color: #18181b;\n    `};\n`;\nconst Link = styled.a`\n  color: #bf94ff;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Timestamp = styled.span`\n  margin-right: 5px;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst Badge = styled.img`\n  margin-bottom: 2px;\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst renderMessageArray = (user, login) => (item, key) => {\n  if (typeof item !== 'object') return item;\n\n  if (\n    item.type === 'twitch-emote' ||\n    item.type === 'bttv-emote' ||\n    item.type === 'ffz-emote'\n  ) {\n    return (\n      <Emote key={key} src={item.src} srcSet={item.srcSet} alt={item.alt} />\n    );\n  }\n\n  if (item.type === 'emoji') {\n    return (\n      <Emoji key={key} src={item.src} srcSet={item.srcSet} alt={item.alt} />\n    );\n  }\n\n  if (item.type === 'mention') {\n    return (\n      <Mention\n        key={key}\n        isActive={item.target === login}\n        isOwnMessage={user === login}\n      >\n        {item.text}\n      </Mention>\n    );\n  }\n\n  if (item.type === 'link') {\n    return (\n      <Link\n        key={key}\n        href={item.href}\n        rel=\"noreferrer noopener\"\n        target=\"_blank\"\n      >\n        {item.text}\n      </Link>\n    );\n  }\n\n  return null;\n};\n\nconst renderBadges = (badges) =>\n  badges.map(({ alt, label, src, srcSet }, key) => (\n    // eslint-disable-next-line react/no-array-index-key\n    <Badge key={key} alt={alt} aria-label={label} src={src} srcSet={srcSet} />\n  ));\n\nconst MESSAGE_DELETED_LABED = '<message deleted>';\n\nconst Message = ({\n  message: {\n    message,\n    messageArray,\n    tags: { color, displayName, tmiSentTs },\n    badges,\n    user,\n    isHistory,\n    isAction,\n    isDeleted,\n  },\n  login,\n  isEven,\n  isShowTimestamps,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const isMention = user !== login && RegExp(login, 'gi').test(message);\n\n  return (\n    <MessageRoot\n      isHistory={isHistory}\n      isAction={isAction}\n      isEven={isEven}\n      isMention={isMention}\n      isDeleted={isDeleted}\n      color={color}\n    >\n      {isShowTimestamps && (\n        <Timestamp>{format('h:mm', new Date(tmiSentTs))}</Timestamp>\n      )}\n      {badges.length > 0 && renderBadges(badges)}\n      <Name color={color}>{displayName}</Name>\n      {isAction ? ' ' : ': '}\n      {isDeleted && !isVisible ? (\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n        <Link onClick={() => setIsVisible(true)}>{MESSAGE_DELETED_LABED}</Link>\n      ) : (\n        messageArray.map(renderMessageArray(user, login))\n      )}\n    </MessageRoot>\n  );\n};\n\nMessage.defaultProps = {\n  login: '',\n  isEven: false,\n  isShowTimestamps: false,\n};\n\nMessage.propTypes = {\n  message: messageType.isRequired,\n  login: pt.string,\n  isEven: pt.bool,\n  isShowTimestamps: pt.bool,\n};\n\nexport default React.memo(Message);\n","import React from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport { noticeType } from './types';\n\nconst NoticeRoot = styled.div`\n  padding: 5px 20px;\n  color: rgba(255, 255, 255, 0.6);\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${(p) => (p.isEven ? '#1f1925' : 'transparent')};\n`;\n\nconst Notice = ({ message: { message }, isEven }) => (\n  <NoticeRoot isEven={isEven}>{message}</NoticeRoot>\n);\n\nNotice.defaultProps = {\n  isEven: false,\n};\n\nNotice.propTypes = {\n  message: noticeType.isRequired,\n  isEven: pt.bool,\n};\n\nexport default React.memo(Notice);\n","import React from 'react';\n// import pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport { userNoticeType } from './types';\n\nconst UserNoticeRoot = styled.div`\n  padding: 5px 20px 5px 16px;\n  line-height: 20px;\n  word-wrap: break-word;\n  border-left: 4px solid #9147ff;\n  color: #fff;\n`;\n\nconst UserNotice = ({\n  message: {\n    tags: { systemMsg },\n  },\n}) => <UserNoticeRoot>{systemMsg}</UserNoticeRoot>;\n\nUserNotice.propTypes = {\n  message: userNoticeType.isRequired,\n};\n\nexport default React.memo(UserNotice);\n","import React from 'react';\nimport pt from 'prop-types';\n\nimport { MESSAGE_TYPES } from 'utils/constants';\nimport { messageType, noticeType, userNoticeType } from './types';\nimport Message from './Message';\nimport Notice from './Notice';\nimport UserNotice from './UserNotice';\n\nconst ChatMessage = ({ message, login, isEven, isShowTimestamps }) => {\n  if (message.type === MESSAGE_TYPES.MESSAGE) {\n    return (\n      <Message\n        message={message}\n        login={login}\n        isEven={isEven}\n        isShowTimestamps={isShowTimestamps}\n      />\n    );\n  }\n\n  if (message.type === MESSAGE_TYPES.NOTICE_MESSAGE) {\n    return <Notice message={message} isEven={isEven} />;\n  }\n\n  if (message.type === MESSAGE_TYPES.USER_NOTICE_MESSAGE) {\n    return <UserNotice message={message} />;\n  }\n\n  return null;\n};\n\nChatMessage.defaultProps = {\n  login: '',\n  isEven: false,\n  isShowTimestamps: false,\n};\n\nChatMessage.propTypes = {\n  message: pt.oneOfType([messageType, noticeType, userNoticeType]).isRequired,\n  login: pt.string,\n  isEven: pt.bool,\n  isShowTimestamps: pt.bool,\n};\n\nexport default ChatMessage;\n","import React, { useState, useEffect, useRef } from 'react';\nimport pt from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { messagesSelector } from 'reducers/messages/selectors';\nimport { isEvenSelector } from 'reducers/chat/selectors';\nimport {\n  isShowTimestampsSelector,\n  isSplitChatSelector,\n} from 'reducers/options/selectors';\nimport Scrollbar from 'components/Scrollbar';\nimport ChatInput from 'components/ChatInput';\nimport ChatMessage from 'components/ChatMessage';\n\nconst MORE_MESSAGES_OFFSET = 100;\n\nconst ChatRoot = styled.div`\n  height: 100vh;\n  font-size: 12px;\n`;\nconst ChatWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background-color: #18181b;\n`;\nconst Messages = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\nconst StyledScrollbar = styled(Scrollbar)`\n  .ScrollbarsCustom-Content {\n    padding-bottom: 10px !important;\n  }\n`;\nconst MoreMessagesButton = styled.button`\n  position: absolute;\n  left: 50%;\n  bottom: 10px;\n  display: ${(p) => (p.visible ? 'block' : 'none')};\n  padding: 5px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  transform: translateX(-50%);\n`;\n\nconst Chat = ({ onSendMessage }) => {\n  const isAuth = useSelector((state) => state.auth.isAuth);\n  const messages = useSelector(messagesSelector);\n  // TODO: check if the user has a rights to send messages\n  const isConnected = useSelector((state) => state.chat.isConnected);\n  const isEven = useSelector(isEvenSelector);\n  const login = useSelector((state) => state.auth.user.login);\n  const isShowTimestamps = useSelector(isShowTimestampsSelector);\n  const isSplitChat = useSelector(isSplitChatSelector);\n  const [\n    isMoreMessagesButtonVisible,\n    setIsMoreMessagesButtonVisible,\n  ] = useState(false);\n  const scrollbarRef = useRef(null);\n\n  const handleScrollToBottom = () => {\n    if (scrollbarRef.current && scrollbarRef.current.scrollToBottom) {\n      scrollbarRef.current.scrollToBottom();\n    }\n  };\n\n  useEffect(() => {\n    if (!isMoreMessagesButtonVisible) {\n      handleScrollToBottom();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages]);\n\n  const handleScrollUpdate = ({\n    clientHeight,\n    contentScrollHeight,\n    scrollTop,\n  }) => {\n    const maxScrollTop = contentScrollHeight - clientHeight;\n    const isVisible = scrollTop + MORE_MESSAGES_OFFSET < maxScrollTop;\n\n    setIsMoreMessagesButtonVisible(isVisible);\n  };\n\n  const getIsEven = (key) => {\n    if (!isSplitChat) return false;\n    return isEven ? key % 2 === 1 : key % 2 === 0;\n  };\n\n  return (\n    <ChatRoot>\n      <ChatWrapper>\n        <Messages>\n          <StyledScrollbar onUpdate={handleScrollUpdate} ref={scrollbarRef}>\n            {messages.map((message, key) => (\n              <ChatMessage\n                key={message.tags.id}\n                message={message}\n                login={login}\n                isEven={getIsEven(key)}\n                isShowTimestamps={isShowTimestamps}\n              />\n            ))}\n          </StyledScrollbar>\n          <MoreMessagesButton\n            onClick={handleScrollToBottom}\n            visible={isMoreMessagesButtonVisible}\n          >\n            More messages below\n          </MoreMessagesButton>\n        </Messages>\n        <ChatInput\n          onSubmit={onSendMessage}\n          isDisabled={!isAuth || !isConnected}\n          isAuth={isAuth}\n        />\n      </ChatWrapper>\n    </ChatRoot>\n  );\n};\n\nChat.propTypes = {\n  onSendMessage: pt.func.isRequired,\n};\n\nexport default Chat;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport uuid from 'uuid/v4';\n\nimport useLocationHash from 'hooks/useLocationHash';\nimport useDocumentTitle from 'hooks/useDocumentTitle';\nimport { fetchTwitchEmotes } from 'reducers/emotes/twitch';\nimport {\n  fetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes,\n} from 'reducers/emotes/bttv';\nimport {\n  fetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes,\n} from 'reducers/emotes/ffz';\nimport {\n  isTwitchEmotesLoadedSelector,\n  isBttvEmotesLoadedSelector,\n  isFfzEmotesLoadedSelector,\n} from 'reducers/emotes/selectors';\nimport {\n  addMessage,\n  addNoticeMessage,\n  addUserNoticeMessage,\n  fetchRecentMessages,\n  addRecentMessages,\n  clearChat,\n} from 'reducers/messages';\nimport { isHistoryLoadedSelector } from 'reducers/messages/selectors';\nimport {\n  setCurrentChannel,\n  setIsConnected,\n  updateGlobalUserState,\n  updateUserState,\n  updateRoomState,\n  fetchBlockedUsers,\n} from 'reducers/chat';\nimport {\n  currentChannelSelector,\n  channelIdSelector,\n  blockedUsersSelector,\n  isBlockedUsersLoadedSelector,\n} from 'reducers/chat/selectors';\nimport { fetchGlobalBadges, fetchChannelBadges } from 'reducers/badges';\nimport { isBadgesLoadedSelector } from 'reducers/badges/selectors';\nimport { setIsAuth } from 'reducers/auth';\nimport Client from 'utils/twitchChat';\nimport replaceEmojis from 'utils/replaceEmojis';\nimport Chat from 'components/Chat';\n\nlet client = null;\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const isAuth = useSelector((state) => state.auth.isAuth);\n  const login = useSelector((state) => state.auth.user.login);\n  const userId = useSelector((state) => state.auth.user.id);\n  const currentChannel = useSelector(currentChannelSelector);\n  const currentChannelId = useSelector(channelIdSelector);\n  const blockedUsers = useSelector(blockedUsersSelector);\n\n  const isTwitchEmotesLoaded = useSelector(isTwitchEmotesLoadedSelector);\n  const isBttvEmotesLoaded = useSelector(isBttvEmotesLoadedSelector);\n  const isFfzEmotesLoaded = useSelector(isFfzEmotesLoadedSelector);\n  const isBadgesLoaded = useSelector(isBadgesLoadedSelector);\n  const isHistoryLoaded = useSelector(isHistoryLoadedSelector);\n  const isBlockedUsersLoaded = useSelector(isBlockedUsersLoadedSelector);\n  const hash = useLocationHash();\n\n  const isReadyToAddRecentMessages =\n    currentChannel &&\n    (isAuth ? isTwitchEmotesLoaded : true) &&\n    (isAuth ? isBlockedUsersLoaded : true) &&\n    isBttvEmotesLoaded &&\n    isFfzEmotesLoaded &&\n    isBadgesLoaded &&\n    isHistoryLoaded;\n\n  useDocumentTitle(currentChannel);\n\n  useEffect(() => {\n    const rawUser = localStorage.getItem('user');\n\n    if (rawUser) {\n      const user = JSON.parse(rawUser);\n\n      dispatch(setIsAuth({ isAuth: true, user }));\n    }\n\n    // TODO: try to connect to the chat. if there is an error, set isAuth to false and connect without login\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (hash && hash.length > 1) {\n      const channel = hash.slice(1);\n      dispatch(setCurrentChannel(channel));\n      localStorage.setItem('lastChannel', channel);\n    }\n  }, [dispatch, hash]);\n\n  useEffect(() => {\n    if (!currentChannel) return () => {};\n\n    const options = {\n      identity: {\n        name: login,\n        auth: localStorage.accessToken,\n      },\n    };\n\n    const handleConnected = () => dispatch(setIsConnected(true));\n    const handleDisconnected = () => dispatch(setIsConnected(true));\n\n    const handleGlobalUserState = (data) =>\n      dispatch(updateGlobalUserState(data));\n\n    const handleUserState = (data) => dispatch(updateUserState(data));\n    const handleRoomState = (data) => dispatch(updateRoomState(data));\n    const handleMessage = (data) => {\n      if (blockedUsers.includes(data.user)) return;\n      dispatch(addMessage(data));\n    };\n\n    const handleNotice = (data) => {\n      const normalizedMessage = { ...data, tags: { ...data.tags, id: uuid() } };\n      dispatch(addNoticeMessage(normalizedMessage));\n    };\n    const handleUserNotice = (data) => dispatch(addUserNoticeMessage(data));\n\n    const handleClearChat = (data) => {\n      if (!data.tags.targetUserId) return;\n      dispatch(clearChat(data));\n    };\n\n    if (!client) {\n      client = new Client(isAuth ? options : {});\n      client.connect();\n    }\n\n    // TODO: update blocked users if the /block command was sent\n\n    client.on('connected', handleConnected);\n    client.on('disconnected', handleDisconnected);\n    client.on('globaluserstate', handleGlobalUserState);\n    client.on('userstate', handleUserState);\n    client.on('roomstate', handleRoomState);\n    client.on('message', handleMessage);\n    client.on('ownmessage', handleMessage);\n    client.on('notice', handleNotice);\n    client.on('usernotice', handleUserNotice);\n    client.on('clearchat', handleClearChat);\n\n    // TODO: Part the previous channel before join\n    client.join(currentChannel);\n\n    return () => {\n      client.off('connected', handleConnected);\n      client.off('disconnected', handleDisconnected);\n      client.off('globaluserstate', handleGlobalUserState);\n      client.off('userstate', handleUserState);\n      client.off('roomstate', handleRoomState);\n      client.off('message', handleMessage);\n      client.off('ownmessage', handleMessage);\n      client.off('notice', handleNotice);\n      client.off('usernotice', handleUserNotice);\n      client.off('clearchat', handleClearChat);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, login, currentChannel, isAuth, blockedUsers.length]);\n\n  useEffect(() => {\n    dispatch(fetchBttvGlobalEmotes());\n    dispatch(fetchFfzGlobalEmotes());\n    dispatch(fetchGlobalBadges());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (currentChannel) {\n      dispatch(fetchRecentMessages(currentChannel));\n    }\n  }, [dispatch, currentChannel]);\n\n  useEffect(() => {\n    if (isReadyToAddRecentMessages) {\n      dispatch(addRecentMessages(currentChannel));\n    }\n  }, [dispatch, currentChannel, isReadyToAddRecentMessages]);\n\n  useEffect(() => {\n    if (userId) {\n      dispatch(fetchTwitchEmotes(userId));\n      dispatch(fetchBlockedUsers(userId));\n    }\n  }, [dispatch, userId]);\n\n  useEffect(() => {\n    // TODO: check if emotes for the current channel is already in the store\n    if (currentChannel && currentChannelId) {\n      dispatch(fetchBttvChannelEmotes(currentChannelId, currentChannel));\n      dispatch(fetchFfzChannelEmotes(currentChannelId, currentChannel));\n      dispatch(fetchChannelBadges(currentChannelId, currentChannel));\n    }\n  }, [dispatch, currentChannel, currentChannelId]);\n\n  const handleSendMessage = (message) => {\n    const normalizedMessage = replaceEmojis(message.trim());\n    client.say(currentChannel, normalizedMessage);\n  };\n\n  return <Chat onSendMessage={handleSendMessage} />;\n};\n\nexport default Home;\n","import {\n  TWITCH_API_AUTH_BASE,\n  TWITCH_API_CLIENT_ID,\n  TWITCH_API_REDIRECT_URI,\n} from 'utils/constants';\n\nconst authParams = {\n  client_id: TWITCH_API_CLIENT_ID,\n  redirect_uri: TWITCH_API_REDIRECT_URI,\n  response_type: 'token+id_token',\n  scope: [\n    'openid',\n    'channel:moderate',\n    'chat:edit',\n    'chat:read',\n    'whispers:read',\n    'whispers:edit',\n    'user_blocks_read',\n    'user_blocks_edit',\n    'user_subscriptions',\n  ].join('+'),\n  claims: JSON.stringify({\n    id_token: { email_verified: null, picture: null, preferred_username: null },\n  }),\n  // state: uid(),\n};\n\nconst getAuthUrl = () => {\n  const search = Object.entries(authParams)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n\n  return `${TWITCH_API_AUTH_BASE}?${search}`;\n};\n\nexport default getAuthUrl;\n","import getAuthUrl from 'utils/getAuthUrl';\n\nconst Auth = () => {\n  window.location.href = getAuthUrl();\n\n  return null;\n};\n\nexport default Auth;\n","import { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport jwt from 'jsonwebtoken';\n\nimport { fetchUser } from 'reducers/auth';\n\nconst AuthCallback = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  if (!window.location.hash) return null;\n\n  const params = new URLSearchParams(window.location.hash.slice(1));\n\n  const accessToken = params.get('access_token');\n  const idToken = params.get('id_token');\n\n  if (!accessToken || !idToken) return null;\n\n  localStorage.setItem('accessToken', accessToken);\n  localStorage.setItem('idToken', idToken);\n\n  const { sub: id } = jwt.decode(idToken);\n\n  dispatch(fetchUser(id));\n\n  const lastChannel = localStorage.getItem('lastChannel');\n\n  history.push(lastChannel ? `/chat/#${lastChannel}` : '/chat/');\n\n  return null;\n};\n\nexport default AuthCallback;\n","import { css } from 'styled-components';\n\nexport default css`\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    margin: 0;\n    font-family: Roobert, Helvetica Neue, Helvetica, Arial, sans-serif;\n  }\n`;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { createGlobalStyle } from 'styled-components';\n\nimport common from 'styles/common';\nimport colors from 'styles/colors';\nimport vars from 'styles/vars';\n\nexport default createGlobalStyle`\n  :root {\n    ${colors};\n    ${vars};\n  }\n  ${common};\n`;\n","import React from 'react';\nimport pt from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport isAuthRedirect from 'utils/isAuthRedirect';\nimport Home from 'components/Home';\nimport Auth from 'components/Auth';\nimport AuthCallback from 'components/AuthCallback';\nimport GlobalStyles from 'styles';\n\nconst getHomeComponent = () =>\n  isAuthRedirect(window.location.hash) ? AuthCallback : Home;\n\nconst App = ({ store }) => (\n  <>\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/chat/\" component={getHomeComponent()} />\n          <Route exact path=\"/chat/auth\" component={Auth} />\n        </Switch>\n      </Router>\n    </Provider>\n    <GlobalStyles />\n  </>\n);\n\nApp.propTypes = {\n  store: pt.shape({}).isRequired,\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactGA from 'react-ga';\n\nimport isAuthRedirect from 'utils/isAuthRedirect';\nimport store from 'store';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nif (process.env.NODE_ENV === 'production') {\n  ReactGA.initialize('UA-139550930-3');\n\n  if (!isAuthRedirect(window.location.hash)) {\n    const page =\n      window.location.pathname + window.location.search + window.location.hash;\n    ReactGA.pageview(page);\n  }\n}\n\nReactDOM.render(<App store={store} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}