{"version":3,"sources":["features/blockedUsers/blockedUsersSelectors.ts","features/badges/badgesSlice.ts","features/options/optionsUtils.ts","features/options/optionsSlice.ts","features/emotes/utils/getEmotesByText.ts","features/emotes/utils/emotesUsageStatistic.ts","features/messageCards/messageCardsSelectors.ts","features/blockedUsers/blockedUsersSlice.ts","features/chat/chatSelectors.ts","utils/normalizeHref.ts","features/messages/utils/htmlEntity.ts","features/auth/authSelectors.ts","utils/fetchRequest.ts","api/twitch.ts","api/bttv.ts","api/ffz.ts","api/recentMessages.ts","api/youtube.ts","features/emotes/utils/findEmote.ts","features/emotes/utils/createEmoteCategories.ts","features/emotes/emotesSelectors.ts","features/options/optionsSelectors.ts","features/chat/utils/parseApiResponse.ts","features/chat/chatSlice.ts","features/badges/badgesSelectors.ts","features/auth/authSlice.ts","features/messages/utils/parseMessageEntities.ts","features/messages/utils/checkIsHighlighted.ts","features/messageCards/utils/getMessageCardFromEntities.ts","assets/ts-tink.ogg","features/messages/utils/normalizeMessages.ts","features/messages/utils/sliceMessagesByLimit.ts","features/messages/utils/sliceItemsByLimit.ts","features/messages/messagesSlice.ts","features/auth/authUtils.ts","features/emotes/emotesSlice.ts","features/auth/useInitializeAuth.ts","features/messages/messagesSelectors.ts","features/chat/hooks/useFetchChatData.ts","features/chat/hooks/useCurrentChannel.ts","features/messages/utils/replaceEmojis.ts","features/chat/hooks/useTwitchClient.ts","features/chat/utils/getUsersByBeginText.ts","features/chat/utils/suggestions.ts","features/chat/hooks/useChatInput.ts","icons/close.svg","components/IconButton.tsx","components/ChatModal.tsx","icons/smiley-face.svg","components/Scrollbar.tsx","icons/search.svg","features/emotes/EmotePicker.tsx","features/chat/ChatInput.tsx","icons/gears.svg","icons/twitch.svg","components/Button.tsx","components/Switch.tsx","features/options/Options.tsx","features/chat/ChatControls.tsx","utils/colors.ts","features/messageCards/MessageCard.tsx","features/messages/Message.tsx","features/messages/Notice.tsx","features/messages/UserNotice.tsx","features/messages/ChatMessage.tsx","features/messages/Messages.tsx","features/chat/JoinChannel.tsx","features/chat/Chat.tsx","features/auth/Auth.tsx","features/auth/Logout.tsx","features/auth/AuthCallback.tsx","styles/common.js","styles/colors.js","styles/vars.js","styles/index.js","app/App.tsx","serviceWorker.ts","app/rootReducer.ts","app/store.ts","index.tsx","utils/assertNever.ts","features/messageCards/messageCardsSlice.ts","utils/constants.ts"],"names":["isBlockedUsersLoadedSelector","state","blockedUsers","status","blockedUsersSelector","items","fetchGlobalBadges","createAsyncThunk","api","fetchChannelBadges","channelId","badges","createSlice","name","initialState","global","error","byChannels","reducers","extraReducers","builder","addCase","pending","fulfilled","payload","parseBadges","rejected","meta","arg","channel","readOptionsFromLocalStorage","options","localStorage","getItem","LS_OPTIONS","JSON","parse","showTimestamps","timeFormat24Hours","splitChat","blacklistKeywords","highlightKeywords","fixedWidth","highlightNotifications","showTwitchCards","showYoutubeCards","changeOption","reducer","value","prepare","setItem","stringify","actions","getEmotesByText","text","emotes","limit","result","begins","contains","textLower","toLowerCase","findEmote","bttv","byText","bttvChannel","ffz","ffzChannel","twitch","twitchUser","twitchGlobal","bttvGlobal","ffzGlobal","emoji","readEmotesUsageStatistic","statistic","LS_EMOTES_USAGE_STATISTIC","e","getUsageStatisticFromEntities","R","v","type","id","lastUpdatedAt","Date","now","uses","length","mergeFn","key","left","right","writeEmotesUsageStatistic","entries","history","newHistory","normalizeHistory","getEmotesFromUsageStatistic","item","emoteEntity","byId","push","messageCardSelector","card","messageCards","twitchClips","twitchVideos","youtubeVideos","assertNever","fetchBlockedUsers","parseBlockedUsers","currentChannelSelector","chat","currentChannel","isConnectedSelector","isConnected","currentChannelIdSelector","params","room","roomId","userColorSelector","user","color","userDisplayNameSelector","displayName","userBadgesSelector","isStartsWithProtocolRegex","normalizeHref","href","test","regexEmotesMap","getFfzSrcSet","dpi","url","createTwitchEmote","code","String","alt","src","TWITCH_EMOTES_CDN","srcSet","createBttvEmote","BTTV_EMOTES_CDN","createFfzEmote","urls","createEmoji","short","unified","createMention","target","createLink","createBadges","globalBadges","channelBadges","version","badge","versions","title","description","image_url_1x","imageUrl1x","image_url_2x","imageUrl2x","image_url_4x","imageUrl4x","label","createBadge","Boolean","isAuthReadySelector","auth","isAuthSelector","userLoginSelector","userLogin","userIdSelector","userId","fetchRequest","async","timeout","restOptions","fetchTimeout","API_REQUESTS_TIMEOUT","controller","AbortController","signal","setTimeout","abort","response","fetch","ok","Error","statusText","json","apiRequestHelix","headers","process","Authorization","LS_ACCESS_TOKEN","apiRequestKraken","Accept","fetchUser","fetchTwitchEmotes","language","fetchTwitchClip","fetchTwitchVideo","fetchBttvGlobalEmotes","fetchBttvChannelEmotes","fetchFfzGlobalEmotes","fetchFfzChannelEmotes","fetchRecentMessages","fetchYoutubeVideo","emojisList","Object","values","emojisMap","findTwitchEmoteByIdInSets","sets","set","emote","htmlEntity","emotesMap","1","2","7","findTwitchEmoteByNameInSets","includes","byName","index","indexOf","findById","findByName","byChar","char","keywords","keyword","emojiEntity","getTwitchUserEmoteCategories","getMainEmoteCategories","createSelector","map","filter","createEmoteCategories","mainEmoteCategories","frequentlyUsed","isTwitchEmotesLoadedSelector","isBttvGlobalEmotesLoadedSelector","isBttvChannelEmotesLoadedSelector","isFfzGlobalEmotesLoadedSelector","isFfzChannelEmotesLoadedSelector","isEmotesLoadedSelector","twitchEmotesSelector","twitchGlobalEmotesSelector","twitchUserEmotesSelector","emotesSelector","isEmotesLoaded","emoteCategoriesSelector","search","optionsSelector","isShowTimestampsSelector","isSplitChatSelector","isFixedWidthSelector","isHighlightNotificationsSelector","isShowTwitchCardsSelector","isShowYoutubeCardsSelector","isTimeFormat24HoursSelector","parseTwitchEmotes","parseBttvGlobalEmotes","data","parseBttvChannelEmotes","channelEmotes","sharedEmotes","parseFfzGlobalEmotes","default_sets","defaultSets","parseFfzChannelEmotes","parseTwitchClip","thumbnail_url","thumbnailUrl","creator_name","creatorName","x1","replace","parseTwitchVideo","user_name","userName","published_at","publishedAt","date","format","thumbnailReplace","parseYoutubeVideo","snippet","channelTitle","thumbnails","default","medium","x2","high","x4","updateIsConnected","updateCurrentChannel","updateGlobalUserParams","tags","updateUserParams","updateRoomParams","isGlobalBadgesLoadedSelector","isChannelBadgesLoadedSelector","globalBadgesSelector","channelBadgesSelector","userBadgesImagesSelector","users","login","writeUserToLocatStorage","initializeAuth","isAuth","invalidateAuth","MENTION_REGEX","LINK_REGEX","urlRegex","strict","parseMessageEntities","message","embeddedEmotes","isOwnMessage","words","split","checkEmbeddedEmotes","keys","normalizedEmbeddedEmotes","reduce","acc","start","normalizeEmbeddedEmotes","offset","forEach","word","i","arr","isLast","entity","parseTwitch","twitchEmote","mentionMatch","match","tail","linkMatch","findEntity","Array","isArray","entityItem","string","count","getCodePointsCount","checkIsHighlighted","messageUser","messageText","RegExp","twitchClipRegex","twitchVideoRegex","youtubeVideoRegex","getMessageCardFromEntities","entities","parseYoutube","m","exec","tink","Howl","tinkSfx","normalizeHistoryMessages","rawMessages","rawMessage","tekko","command","prefix","isAction","twitchIrc","normalizedMessage","parsedTags","isHighlighted","slice","timestamp","tmiSentTs","isHistory","isDeleted","normalizeHistoryMessage","sliceMessagesByLimit","addedItemsCount","isEven","diff","isSliced","sliceItemsByLimit","messagesSlice","clearChat","targetUserId","receiveMessagesAction","messages","newItems","newIsEven","CHANNEL_MESSAGES_LIMIT","newUsers","STORE_USERS_LIMIT","isAdded","trim","recentUserMessages","splice","unshift","newRecentUserMessages","RECENT_USER_MESSAGES_LIMIT","normalizePayload","isHighlightNotifications","isShowTwitchCards","isShowYoutubeCards","play","normalizeMessage","msgId","nanoid","noticeType","normalizeNotice","systemMsg","systemMessage","normalizeUserNotice","startsWith","normalizeOwnMessage","receiveMessage","dispatch","getState","addRecentMessages","slicedRawHistory","authParams","client_id","TWITCH_API_CLIENT_ID","redirect_uri","TWITCH_API_REDIRECT_URI","response_type","scope","join","claims","id_token","email_verified","picture","preferred_username","getAuthUrl","TWITCH_API_AUTH_BASE","isAuthRedirect","hash","LS_USER","readUserFromLocatStorage","useInitializeAuth","useDispatch","isAuthReady","useSelector","useEffect","idToken","jwtData","jwt","decode","sub","messagesSelector","usersSelector","recentUserMessagesSelector","isHistoryLoadedSelector","isHistoryAddedSelector","isEvenSelector","useFetchChatData","currentChannelId","isTwitchEmotesLoaded","isBttvGlobalEmotesLoaded","isBttvChannelEmotesLoaded","isFfzGlobalEmotesLoaded","isFfzChannelEmotesLoaded","isGlobalBadgesLoaded","isChannelBadgesLoaded","isHistoryLoaded","isBlockedUsersLoaded","isHistoryAdded","isReadyToAddHistory","useCurrentChannel","useHistory","location","LS_LAST_CHANNEL","document","lastChannel","pathname","replaceEmojis","useTwitchClient","prevChannel","usePrevious","clientRef","useRef","registerEvents","useCallback","client","current","on","part","create","connect","sendMessage","handleUserState","ownMessage","removeListeners","handleNotice","NOTICE_MESSAGE_TAGS","off","say","getUsersByBeginText","beginText","currentUserLogin","beginTextLower","currentUserLoginLower","nameLower","suggestionsInitialState","isActive","activeIndex","end","setSuggestionsIndexUp","setSuggestionsIndexDown","replaceSuggestionText","currentItem","insertedText","substring","useChatInput","chatInputRef","inputText","setInputText","useState","suggestions","setSuggestions","useSetState","recentUserMessagesIndex","setRecentUserMessagesIndex","handleSendMessage","deps","handleChange","d","selectionStart","spaceIndexBefore","lastIndexOf","spaceIndexAfter","usersMatch","SUGGESTION_TYPES","regex","emotesMatch","handleKeyUp","handleKeyDown","preventDefault","t","newIndex","defaultValue","handleSuggestionMouseEnter","handleSuggestionClick","focus","handleBlur","handleNameRightClick","trimLeft","handleEmoteClick","_extends","assign","arguments","source","prototype","hasOwnProperty","call","apply","this","_ref","fill","SvgClose","titleId","props","svgRef","xmlns","viewBox","ref","ForwardRef","sizes","small","css","IconButton","styled","button","attrs","p","$size","ChatModalRoot","div","CloseButton","CloseIcon","CloseIconSvg","ChatModal","children","onClose","onClick","fillRule","clipRule","SvgSmileyFace","Scrollbar","CustomScrollbar","disableTracksWidthCompensation","SvgSearch","EmotePickerRoot","Categories","Category","CategoryHeader","CategoryItems","Emote","img","SearchBlock","SearchInput","input","SearchIcon","SearchIconSvg","EmotePicker","onEmoteClick","setSearch","searchInputRef","emoteCategories","placeholder","onChange","ChatInputRoot","ChatInputInner","Suggestions","SuggestionItem","$isActive","SuggestionImage","TextareaInput","TextareaWrapper","$isSuggestions","EmotesModal","Textarea","TextareaAutosize","$showScroll","EmotesButton","SmileyFaceIcon","SmileyFaceIconSvg","ChatInput","React","forwardRef","isDisabled","onKeyUp","onKeyDown","onBlur","onSuggestionMouseEnter","onSuggestionClick","textareaRef","suggestionsRef","useOnClickOutside","refs","isShowTextareaScroll","setIsShowTextareaScroll","isEmotesModalVisible","setIsEmotesModalVisible","handleCloseEmotesModal","renderUser","onMouseEnter","renderEmote","renderSuggestions","maxLength","maxRows","disabled","onHeightChange","height","memo","SvgGears","_ref2","_ref3","SvgTwitch","Button","SwitchRoot","Label","Input","Switch","checked","readOnly","aria-label","htmlFor","defaultProps","OptionsRoot","Header","h2","Option","OptionText","span","Profile","UserName","LogOutButton","Link","Badge","Options","userDisplayName","userColor","userBadgesImages","renderOption","renderOptionsCategory","to","ChatControlsRoot","Controls","OptionsModal","OptionsButton","GearsIcon","GearsIconSvg","TwitchIcon","TwitchIconSvg","ChatControls","onSendMessage","isOptionsModalVisible","setIsOptionsModalVisible","handleCloseOptionsModal","optionsRef","as","prev","hueToRgb","pp","qq","calculateColorBackground","parseInt","substr","calculateColorReplacement","background","light","factor","hsl","r","g","b","max","Math","min","l","h","s","rgbToHsl","rgb","round","q","hslToRgb","toString","padStart","colorCache","Map","MessageCardRoot","a","rel","$clickable","Preview","Image","PreviewLoading","Content","textStyles","Title","Description","textLoadingStyle","TitleLoading","DescriptionLoading","errorImageSrc","errorImageSrcSet","errorDescription","MessageCard","cardInfo","MessageRoot","$isAction","$color","$isHistory","$isDeleted","$isHighlighted","$isEven","Name","Emoji","EmoteWrapper","Mention","$isOwnMessage","Timestamp","renderMessageArray","messageLogin","data-emote-id","renderBadges","Message","onNameRightClick","isVisible","setIsVisible","isShowTimestamps","timeFormat","newColor","darkenedMode","cacheKey","has","get","bgColor","size","delete","next","calculateColor","onContextMenu","NoticeRoot","Notice","UserNoticeRoot","UserNotice","ChatMessage","MessagesRoot","StyledScrollbar","MoreMessagesButton","$isVisible","Messages","isMoreMessagesButtonVisible","setIsMoreMessagesButtonVisible","isSplitChat","scrollbarRef","handleScrollToBottom","scrollToBottom","getIsEven","onUpdate","clientHeight","contentScrollHeight","scrollTop","JoinChannelRoot","JoinButton","JoinChannel","setValue","inputRef","handleChangeChannel","onKeyPress","ChatRoot","ChatWrapper","$isFixedWidth","Chat","isFixedWidth","chatInput","Auth","window","Logout","removeItem","LS_ID_TOKEN","AuthCallback","URLSearchParams","accessToken","createGlobalStyle","colors","vars","common","getHomeComponent","App","exact","path","render","component","isLocalhost","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","console","log","onSuccess","catch","rootReducer","combineReducers","store","configureStore","ReactGA","initialize","page","pageview","require","ReactDOM","getElementById","URL","origin","addEventListener","contentType","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.511d0912.chunk.js","sourcesContent":["import type { RootState } from 'app/rootReducer';\n\nexport const isBlockedUsersLoadedSelector = (state: RootState) =>\n  state.blockedUsers.status !== 'idle' &&\n  state.blockedUsers.status !== 'loading';\n\nexport const blockedUsersSelector = (state: RootState) =>\n  state.blockedUsers.items;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchResult } from 'utils/types';\nimport { parseBadges } from 'features/chat/utils/parseApiResponse';\n\ntype Badges = Record<string, api.TwitchBadge>;\n\ntype BadgesState = {\n  global: FetchResult<Badges>;\n  byChannels: Record<string, FetchResult<Badges>>;\n};\n\nconst initialState: BadgesState = {\n  global: {\n    status: 'idle',\n    error: {},\n    items: {},\n  },\n  byChannels: {},\n};\n\nexport const fetchGlobalBadges = createAsyncThunk(\n  'chat/fetchGlobalBadges',\n  () => api.fetchGlobalBadges(),\n);\n\ntype FetchChannelBadgesParams = {\n  channel: string;\n  channelId: string;\n};\n\nexport const fetchChannelBadges = createAsyncThunk(\n  'chat/fetchChannelBadges',\n  ({ channelId }: FetchChannelBadgesParams) =>\n    api.fetchChannelBadges(channelId),\n);\n\nconst badges = createSlice({\n  name: 'badges',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // global badges\n    builder.addCase(fetchGlobalBadges.pending, (state) => {\n      state.global.status = 'loading';\n      state.global.error = {};\n    });\n\n    builder.addCase(fetchGlobalBadges.fulfilled, (state, { payload }) => {\n      state.global.status = 'success';\n      state.global.items = parseBadges(payload);\n    });\n\n    builder.addCase(fetchGlobalBadges.rejected, (state, { error }) => {\n      state.global.status = 'error';\n      state.global.error = error;\n    });\n\n    // channel badges\n    builder.addCase(fetchChannelBadges.pending, (state, { meta: { arg } }) => {\n      const { channel } = arg;\n\n      if (!state.byChannels[channel]) {\n        state.byChannels[channel] = {\n          status: 'loading',\n          error: {},\n          items: {},\n        };\n      } else {\n        state.byChannels[channel].status = 'loading';\n        state.byChannels[channel].error = {};\n      }\n    });\n\n    builder.addCase(\n      fetchChannelBadges.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.byChannels[channel].status = 'success';\n        state.byChannels[channel].items = parseBadges(payload);\n      },\n    );\n\n    builder.addCase(\n      fetchChannelBadges.rejected,\n      (state, { error, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.byChannels[channel].status = 'error';\n        state.byChannels[channel].error = error;\n      },\n    );\n  },\n});\n\nexport default badges.reducer;\n","import { LS_OPTIONS } from 'utils/constants';\n\nexport const readOptionsFromLocalStorage = (): Record<string, unknown> => {\n  try {\n    const options = localStorage.getItem(LS_OPTIONS);\n    return JSON.parse(options as string) || {};\n  } catch {\n    return {};\n  }\n};\n\nexport const writeOptionsToLocalStore = (options: Record<string, unknown>) => {\n  localStorage.setItem(\n    LS_OPTIONS,\n    JSON.stringify({\n      ...readOptionsFromLocalStorage(),\n      ...options,\n    }),\n  );\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\n\nimport {\n  writeOptionsToLocalStore,\n  readOptionsFromLocalStorage,\n} from 'features/options/optionsUtils';\n\ntype OptionsState = {\n  showTimestamps: boolean;\n  timeFormat24Hours: boolean;\n  splitChat: boolean;\n  blacklistKeywords: string;\n  highlightKeywords: string;\n  fixedWidth: boolean;\n  highlightNotifications: boolean;\n  showTwitchCards: boolean;\n  showYoutubeCards: boolean;\n};\n\ntype ChangeOption = {\n  name: keyof OptionsState;\n  value: any;\n};\n\nexport const initialState: OptionsState = {\n  showTimestamps: false,\n  timeFormat24Hours: false,\n  splitChat: true,\n  blacklistKeywords: '',\n  highlightKeywords: '',\n  fixedWidth: false,\n  highlightNotifications: true,\n  showTwitchCards: true,\n  showYoutubeCards: true,\n  ...readOptionsFromLocalStorage(),\n};\n\nconst options = createSlice({\n  name: 'options',\n  initialState,\n  reducers: {\n    changeOption: {\n      reducer: (state, { payload }: PayloadAction<ChangeOption>) => {\n        const { name, value } = payload;\n\n        (state[name] as unknown) = value;\n      },\n      prepare: (payload: ChangeOption) => {\n        const { name, value } = payload;\n\n        writeOptionsToLocalStore({ [name]: value });\n\n        return { payload };\n      },\n    },\n  },\n});\n\nexport const { changeOption } = options.actions;\n\nexport default options.reducer;\n","/* eslint-disable no-restricted-syntax */\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport findEmote from 'features/emotes/utils/findEmote';\n\nexport type EmotesByText = {\n  begins: htmlEntity.Emote[];\n  contains: htmlEntity.Emote[];\n};\n\nconst getEmotesByText = (\n  text: string,\n  emotes: StateEmotes,\n  limit = -1,\n): htmlEntity.Emote[] => {\n  if (!emotes) return [];\n\n  const result: EmotesByText = {\n    begins: [],\n    contains: [],\n  };\n  const textLower = text.toLowerCase();\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const isOver =\n    findEmote.bttv.byText(result, emotes.bttvChannel, textLower, limit) ||\n    findEmote.ffz.byText(result, emotes.ffzChannel, textLower, limit) ||\n    findEmote.twitch.byText(result, emotes.twitchUser, textLower, limit) ||\n    findEmote.twitch.byText(result, emotes.twitchGlobal, textLower, limit) ||\n    findEmote.bttv.byText(result, emotes.bttvGlobal, textLower, limit) ||\n    findEmote.ffz.byText(result, emotes.ffzGlobal, textLower, limit) ||\n    findEmote.emoji.byText(result, textLower, limit);\n\n  return [...result.begins, ...result.contains];\n};\n\nexport default getEmotesByText;\n","import * as R from 'ramda';\n\nimport { LS_EMOTES_USAGE_STATISTIC } from 'utils/constants';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport findEmote from 'features/emotes/utils/findEmote';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport type { MessageEntity } from 'features/messages/messagesSlice';\n\ntype Type = 'twitch-emote' | 'bttv-emote' | 'ffz-emote';\n\ntype AUsageItem = {\n  lastUpdatedAt: number;\n  uses: number;\n};\n\ntype UsageItemTwitch = AUsageItem & {\n  type: 'twitch-emote';\n  id: string;\n};\n\ntype UsageItemBttv = AUsageItem & {\n  type: 'bttv-emote';\n  id: string;\n};\n\ntype UsageItemFfz = AUsageItem & {\n  type: 'ffz-emote';\n  id: number;\n};\n\ntype UsageItem = UsageItemTwitch | UsageItemBttv | UsageItemFfz;\n\ntype EmotesUsageStatistic = Record<Type, Record<string, UsageItem>>;\n\nexport const readEmotesUsageStatistic = (): Partial<EmotesUsageStatistic> => {\n  try {\n    const statistic = localStorage.getItem(LS_EMOTES_USAGE_STATISTIC);\n\n    return JSON.parse(statistic as string) || {};\n  } catch (e) {\n    return {};\n  }\n};\n\nexport const getUsageStatisticFromEntities = R.pipe<\n  MessageEntity[],\n  any,\n  any,\n  any\n>(\n  R.filter((v: any) =>\n    R.includes(R.prop('type', v), ['twitch-emote', 'bttv-emote', 'ffz-emote']),\n  ),\n  R.groupBy<any>(R.prop('type')),\n  R.map(\n    R.pipe<any, any, any>(\n      R.groupBy<any>(R.prop('id')),\n      R.map((items: any) => ({\n        type: items[0].type,\n        id: items[0].id,\n        lastUpdatedAt: Date.now(),\n        uses: items.length,\n      })),\n    ),\n  ),\n);\n\nconst mergeFn = (key: string, left: any, right: any) =>\n  key === 'uses' ? left + right : right;\n\nexport const writeEmotesUsageStatistic = (entries: MessageEntity[]) => {\n  const statistic = getUsageStatisticFromEntities(entries) as Partial<\n    EmotesUsageStatistic\n  >;\n\n  if (R.isEmpty(statistic)) return;\n\n  const history = readEmotesUsageStatistic();\n\n  const newHistory = R.mergeDeepWithKey(mergeFn, history, statistic);\n\n  localStorage.setItem(LS_EMOTES_USAGE_STATISTIC, JSON.stringify(newHistory));\n};\n\nconst normalizeHistory = R.pipe<any, any, any, any, UsageItem[]>(\n  R.values,\n  R.map(R.values),\n  R.flatten,\n  R.sortWith([R.descend(R.prop('uses')), R.descend(R.prop('lastUpdatedAt'))]),\n);\n\nexport const getEmotesFromUsageStatistic = (\n  emotes: StateEmotes,\n  limit = 27,\n) => {\n  if (!emotes) return [];\n\n  const result: htmlEntity.Emote[] = [];\n  const history = R.pipe(readEmotesUsageStatistic, normalizeHistory)();\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const item of history) {\n    if (result.length === limit) return result;\n\n    let emoteEntity = null;\n\n    if (item.type === 'twitch-emote') {\n      emoteEntity = findEmote.twitch.byId(item.id, emotes);\n    }\n\n    if (item.type === 'bttv-emote') {\n      emoteEntity = findEmote.bttv.byId(item.id, emotes);\n    }\n\n    if (item.type === 'ffz-emote') {\n      emoteEntity = findEmote.ffz.byId(item.id, emotes);\n    }\n\n    if (emoteEntity) {\n      result.push(emoteEntity);\n    }\n  }\n\n  return result;\n};\n","import type { RootState } from 'app/rootReducer';\nimport assertNever from 'utils/assertNever';\nimport type { MessageCardInfo } from 'features/messages/messagesSlice';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const messageCardSelector = (\n  card: Omit<MessageCardInfo, 'url'> | null,\n) => (state: RootState) => {\n  if (!card) return null;\n\n  if (card.type === 'twitch-clip') {\n    return state.messageCards.twitchClips[card.id];\n  }\n\n  if (card.type === 'twitch-video') {\n    return state.messageCards.twitchVideos[card.id];\n  }\n\n  if (card.type === 'youtube-video') {\n    return state.messageCards.youtubeVideos[card.id];\n  }\n\n  return assertNever(card.type);\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchResult } from 'utils/types';\nimport { parseBlockedUsers } from 'features/chat/utils/parseApiResponse';\n\ntype BlockedUsersState = FetchResult<string[]>;\n\nconst initialState: BlockedUsersState = {\n  status: 'idle',\n  error: {},\n  items: [],\n};\n\nexport const fetchBlockedUsers = createAsyncThunk(\n  'chat/fetchBlockedUsers',\n  api.fetchBlockedUsers,\n);\n\nconst blockedUsers = createSlice({\n  name: 'blockedUsers',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchBlockedUsers.pending, (state) => {\n      state.status = 'loading';\n      state.error = {};\n    });\n\n    builder.addCase(fetchBlockedUsers.fulfilled, (state, { payload }) => {\n      state.status = 'success';\n      state.items = parseBlockedUsers(payload);\n    });\n\n    builder.addCase(fetchBlockedUsers.rejected, (state, { error }) => {\n      state.status = 'error';\n      state.error = error;\n    });\n  },\n});\n\nexport default blockedUsers.reducer;\n","import type { RootState } from 'app/rootReducer';\n\nexport const currentChannelSelector = (state: RootState) =>\n  state.chat.currentChannel;\n\nexport const isConnectedSelector = (state: RootState) => state.chat.isConnected;\n\nexport const currentChannelIdSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.room?.roomId ||\n  '';\n\nexport const userColorSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user?.color ||\n  '';\n\nexport const userDisplayNameSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user\n    ?.displayName || '';\n\nexport const userBadgesSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user?.badges ||\n  {};\n","// https://regex101.com/r/cpaNXh/1\nconst isStartsWithProtocolRegex = /^(?:(?:[a-z]+:)?\\/\\/)/;\n\nconst normalizeHref = (href: string) =>\n  isStartsWithProtocolRegex.test(href) ? href : `//${href}`;\n\nexport default normalizeHref;\n","import * as R from 'ramda';\nimport type twitchIrc from '@honeykingdom/twitch-simple-irc';\n\nimport * as api from 'api';\nimport normalizeHref from 'utils/normalizeHref';\nimport { TWITCH_EMOTES_CDN, BTTV_EMOTES_CDN } from 'utils/constants';\n\nexport type TwitchEmote = {\n  type: 'twitch-emote';\n  id: string;\n  alt: string;\n  src: string;\n  srcSet: string;\n};\nexport type BttvEmote = {\n  type: 'bttv-emote';\n  id: string;\n  alt: string;\n  src: string;\n  srcSet: string;\n};\nexport type FfzEmote = {\n  type: 'ffz-emote';\n  id: number;\n  alt: string;\n  src: string;\n  srcSet: string;\n};\nexport type Emoji = {\n  type: 'emoji';\n  alt: string;\n  src: string;\n  srcSet?: string;\n};\nexport type Mention = {\n  type: 'mention';\n  text: string;\n  target: string;\n};\nexport type Link = {\n  type: 'link';\n  text: string;\n  href: string;\n};\nexport type Badge = {\n  alt: string;\n  label: string;\n  src: string;\n  srcSet: string;\n};\n\nexport type Emote = TwitchEmote | BttvEmote | FfzEmote | Emoji;\n\n// prettier-ignore\nexport const regexEmotesMap: Record<string, string> = {\n  '[oO](_|\\\\.)[oO]': 'O_o',\n  '\\\\&gt\\\\;\\\\(':     '>(',\n  '\\\\&lt\\\\;3':       '<3',\n  '\\\\:-?(o|O)':      ':O',\n  '\\\\:-?(p|P)':      ':P',\n  '\\\\:-?[\\\\\\\\/]':    ':/',\n  '\\\\:-?[z|Z|\\\\|]':  ':Z',\n  '\\\\:-?\\\\(':        ':(',\n  '\\\\:-?\\\\)':        ':)',\n  '\\\\:-?D':          ':D',\n  '\\\\;-?(p|P)':      ';P',\n  '\\\\;-?\\\\)':        ';)',\n  'R-?\\\\)':          'R)',\n  'B-?\\\\)':          'B)',\n};\n\nexport const getFfzSrcSet = R.pipe<any, [string, string][], string[], string>(\n  R.toPairs,\n  R.map(([dpi, url]) => `${url} ${dpi}x`),\n  R.join(', '),\n);\n\ntype CreateTwitchEmoteParams = api.TwitchEmote | { id: string; code: string };\n\nexport const createTwitchEmote = ({\n  id,\n  code,\n}: CreateTwitchEmoteParams): TwitchEmote => ({\n  type: 'twitch-emote',\n  id: String(id),\n  alt: regexEmotesMap[code] || code,\n  src: `${TWITCH_EMOTES_CDN}/${id}/1.0`,\n  srcSet: `${TWITCH_EMOTES_CDN}/${id}/1.0 1x, ${TWITCH_EMOTES_CDN}/${id}/2.0 2x, ${TWITCH_EMOTES_CDN}/${id}/3.0 4x`,\n});\n\nexport const createBttvEmote = ({\n  id,\n  code,\n}: api.BttvGlobalEmote | api.BttvChannelEmote): BttvEmote => ({\n  type: 'bttv-emote',\n  id,\n  alt: code,\n  src: `${BTTV_EMOTES_CDN}/${id}/1x`,\n  srcSet: `${BTTV_EMOTES_CDN}/${id}/2x 2x, ${BTTV_EMOTES_CDN}/${id}/3x 4x`,\n});\n\nexport const createFfzEmote = ({ id, name, urls }: api.FfzEmote): FfzEmote => ({\n  type: 'ffz-emote',\n  id,\n  alt: name,\n  src: urls[1],\n  srcSet: getFfzSrcSet(urls),\n});\n\nexport const createEmoji = ({\n  short,\n  unified,\n}: {\n  short: string;\n  unified: string;\n}): Emoji => ({\n  type: 'emoji',\n  alt: `:${short}:`,\n  src: `//twemoji.maxcdn.com/v/latest/72x72/${unified}.png`,\n});\n\nexport const createMention = (text: string, target: string): Mention => ({\n  type: 'mention',\n  text,\n  target,\n});\n\nexport const createLink = (href: string): Link => ({\n  type: 'link',\n  text: href,\n  href: normalizeHref(href),\n});\n\nexport const createBadge = ({\n  title,\n  description,\n  image_url_1x: imageUrl1x,\n  image_url_2x: imageUrl2x,\n  image_url_4x: imageUrl4x,\n}: api.TwitchBadgeVersion): Badge => ({\n  alt: title,\n  label: description,\n  src: imageUrl1x,\n  srcSet: `${imageUrl1x} 1x, ${imageUrl2x} 2x, ${imageUrl4x} 4x`,\n});\n\nexport const createBadges = (\n  badges: twitchIrc.Badges,\n  globalBadges: Record<string, api.TwitchBadge>,\n  channelBadges: Record<string, api.TwitchBadge>,\n): Badge[] => {\n  const mapBadges = ([name, version]: [string, string]): Badge | false => {\n    const badge =\n      channelBadges[name]?.versions[version] ||\n      globalBadges[name]?.versions[version];\n\n    return badge ? createBadge(badge) : false;\n  };\n\n  return R.pipe<any, [string, string][], any[], any[]>(\n    R.toPairs,\n    R.map(mapBadges),\n    R.filter(Boolean),\n  )(badges);\n};\n","import type { RootState } from 'app/rootReducer';\n\nexport const isAuthReadySelector = (state: RootState) =>\n  state.auth.status !== 'idle' && state.auth.status !== 'loading';\n\nexport const isAuthSelector = (state: RootState) =>\n  state.auth.status === 'success';\n\nexport const userLoginSelector = (state: RootState) => state.auth.userLogin;\n\nexport const userIdSelector = (state: RootState) => state.auth.userId;\n","import { API_REQUESTS_TIMEOUT } from 'utils/constants';\n\nexport interface FetchRequestOptions extends RequestInit {\n  timeout?: number;\n}\n\nconst fetchRequest = async (\n  url: string,\n  { timeout, ...restOptions }: FetchRequestOptions = {},\n) => {\n  let options = { ...restOptions };\n  const fetchTimeout = timeout || API_REQUESTS_TIMEOUT;\n\n  if (fetchTimeout) {\n    const controller = new AbortController();\n\n    options = { ...options, signal: controller.signal };\n\n    setTimeout(() => controller.abort(), fetchTimeout);\n  }\n\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  const body = await response.json();\n\n  return body;\n};\n\nexport default fetchRequest;\n","import { LS_ACCESS_TOKEN } from 'utils/constants';\nimport fetchRequest from 'utils/fetchRequest';\nimport type { FetchRequestOptions } from 'utils/fetchRequest';\n\nconst TWITCH_API_HELIX = 'https://api.twitch.tv/helix';\nconst TWITCH_API_KRAKEN = 'https://api.twitch.tv/kraken';\n\nconst getHelixHeaders = () => ({\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `Bearer ${localStorage.getItem(LS_ACCESS_TOKEN)}`,\n});\n\nconst getKrakenHeaders = () => ({\n  Accept: 'application/vnd.twitchtv.v5+json',\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `OAuth ${localStorage.getItem(LS_ACCESS_TOKEN)}`,\n});\n\nconst apiRequestHelix = (url: string, options?: FetchRequestOptions) =>\n  fetchRequest(`${TWITCH_API_HELIX}${url}`, {\n    ...options,\n    headers: getHelixHeaders(),\n  } as FetchRequestOptions);\n\nconst apiRequestKraken = (url: string, options?: FetchRequestOptions) =>\n  fetchRequest(`${TWITCH_API_KRAKEN}${url}`, {\n    ...options,\n    headers: getKrakenHeaders(),\n  } as FetchRequestOptions);\n\nexport interface TwitchUser {\n  id: string;\n  login: string;\n  display_name: string;\n  type: string;\n  broadcaster_type: string;\n  description: string;\n  profile_image_url: string;\n  offline_image_url: string;\n  view_count: number;\n}\n\nexport interface TwitchUsersResponse {\n  data: TwitchUser[];\n}\n\nexport interface TwitchEmote {\n  id: number;\n  code: string;\n}\n\nexport interface TwitchEmotesResponse {\n  emoticon_sets: Record<string, TwitchEmote[]>;\n}\n\nexport interface TwitchBadgeVersion {\n  image_url_1x: string;\n  image_url_2x: string;\n  image_url_4x: string;\n  description: string;\n  title: string;\n  click_action: string;\n  click_url: string;\n  last_updated: null;\n}\n\nexport interface TwitchBadge {\n  versions: Record<string, TwitchBadgeVersion>;\n}\n\nexport interface TwitchBadgesResponse {\n  badge_sets: Record<string, TwitchBadge>;\n}\n\nexport interface TwitchBlockedUser {\n  display_name: string;\n  _id: string;\n  name: string;\n  type: string;\n  bio: string | null;\n  created_at: string;\n  updated_at: string;\n  logo: string;\n}\n\nexport interface TwitchBlockedUsersResponse {\n  _total: number;\n  blocks: {\n    user: TwitchBlockedUser;\n  }[];\n}\n\ninterface TwitchClipData {\n  id: string;\n  url: string;\n  embed_url: string;\n  broadcaster_id: string;\n  broadcaster_name: string;\n  creator_id: string;\n  creator_name: string;\n  video_id: string;\n  game_id: string;\n  language: string;\n  title: string;\n  view_count: number;\n  created_at: string;\n  thumbnail_url: string;\n}\n\nexport interface TwitchClipResponse {\n  data: TwitchClipData[];\n  pagination: Record<string, unknown>;\n}\n\ninterface TwitchVideoData {\n  id: string;\n  user_id: string;\n  user_name: string;\n  title: string;\n  description: string;\n  created_at: string;\n  published_at: string;\n  url: string;\n  thumbnail_url: string;\n  viewable: 'public' | 'private';\n  view_count: number;\n  language: string;\n  type: 'upload' | 'archive' | 'highlight';\n  duration: string;\n}\n\nexport interface TwitchVideoResponse {\n  data: TwitchVideoData[];\n  pagination: Record<string, unknown>;\n}\n\nexport const fetchUser = (userId: string): Promise<TwitchUsersResponse> =>\n  apiRequestHelix(`/users?id=${userId}`);\n\nexport const fetchTwitchEmotes = (\n  userId: string,\n): Promise<TwitchEmotesResponse> => apiRequestKraken(`/users/${userId}/emotes`);\n\nexport const fetchGlobalBadges = (\n  language = 'en',\n): Promise<TwitchBadgesResponse> =>\n  fetchRequest(\n    `https://badges.twitch.tv/v1/badges/global/display?language=${language}`,\n  );\n\nexport const fetchChannelBadges = (\n  channelId: string,\n  language = 'en',\n): Promise<TwitchBadgesResponse> =>\n  fetchRequest(\n    `https://badges.twitch.tv/v1/badges/channels/${channelId}/display?language=${language}`,\n  );\n\nexport const fetchBlockedUsers = (\n  userId: string,\n): Promise<TwitchBlockedUsersResponse> =>\n  apiRequestKraken(`/users/${userId}/blocks`);\n\nexport const fetchTwitchClip = (id: string): Promise<TwitchClipResponse> =>\n  apiRequestHelix(`/clips?id=${id}`);\n\nexport const fetchTwitchVideo = (id: string): Promise<TwitchVideoResponse> =>\n  apiRequestHelix(`/videos?id=${id}`);\n","import fetchRequest from 'utils/fetchRequest';\n\nexport interface BttvEmote {\n  id: string;\n  code: string;\n  imageType: 'png' | 'gif';\n}\n\nexport interface BttvGlobalEmote extends BttvEmote {\n  userId: string;\n}\n\nexport interface BttvChannelEmote extends BttvEmote {\n  user: {\n    id: string;\n    name: string;\n    displayName: string;\n    providerId: string;\n  };\n}\n\nexport type BttvGlobalEmotesResponse = BttvGlobalEmote[];\n\nexport interface BttvChannelEmotesResponse {\n  id: string;\n  bots: string[];\n  channelEmotes: BttvChannelEmote[];\n  sharedEmotes: BttvChannelEmote[];\n}\n\nexport const fetchBttvGlobalEmotes = (): Promise<BttvGlobalEmotesResponse> =>\n  fetchRequest('https://api.betterttv.net/3/cached/emotes/global');\n\nexport const fetchBttvChannelEmotes = (\n  channelId: string,\n): Promise<BttvChannelEmotesResponse> =>\n  fetchRequest(`https://api.betterttv.net/3/cached/users/twitch/${channelId}`);\n","import fetchRequest from 'utils/fetchRequest';\n\nexport interface FfzEmote {\n  css: null;\n  height: number;\n  hidden: boolean;\n  id: number;\n  margins: null;\n  modifier: boolean;\n  name: string;\n  offset: null;\n  owner: {\n    _id: number;\n    display_name: string;\n    name: string;\n  };\n  public: boolean;\n  urls: {\n    '1': string;\n    '2'?: string;\n    '4'?: string;\n  };\n  width: number;\n}\n\ninterface FfzEmoteSet {\n  _type: number;\n  css: null;\n  description: null;\n  emoticons: FfzEmote[];\n  icon: null;\n  id: number;\n  title: string;\n}\n\nexport interface FfzGlobalEmotesResponse {\n  default_sets: number[];\n  sets: Record<string, FfzEmoteSet>;\n  users: Record<string, string[]>;\n}\n\nexport interface FfzChannelEmotesResponse {\n  room: {\n    _id: number;\n    css: null;\n    display_name: string;\n    id: string;\n    is_group: boolean;\n    mod_urls: null;\n    moderator_badge: null;\n    set: number;\n    twitch_id: number;\n    user_badges: Record<string, unknown>;\n  };\n  sets: Record<string, FfzEmoteSet>;\n}\n\nexport const fetchFfzGlobalEmotes = (): Promise<FfzGlobalEmotesResponse> =>\n  fetchRequest('https://api.frankerfacez.com/v1/set/global');\n\nexport const fetchFfzChannelEmotes = (\n  channelId: string,\n): Promise<FfzChannelEmotesResponse> =>\n  fetchRequest(`https://api.frankerfacez.com/v1/room/id/${channelId}`);\n","import fetchRequest from 'utils/fetchRequest';\n\nexport interface RecentMessagesResponse {\n  messages: string[];\n  error: null;\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport const fetchRecentMessages = (\n  channel: string,\n): Promise<RecentMessagesResponse> => {\n  if (channel === 'nasvay_s') {\n    return fetchRequest(\n      `https://honeykingdom.herokuapp.com/api/v1/recent-messages/${channel}`,\n    );\n  }\n\n  return fetchRequest(\n    `https://recent-messages.robotty.de/api/v2/recent-messages/${channel}?clearchatToNotice=true`,\n  );\n};\n","import fetchRequest from 'utils/fetchRequest';\n\nconst YOUTUBE_API_BASE = 'https://www.googleapis.com/youtube/v3';\n\ninterface YoutubeThumbnail {\n  url: string;\n  width: number;\n  height: number;\n}\n\ninterface YoutubeVideoItem {\n  kind: string;\n  etag: string;\n  id: string;\n  snippet: {\n    publishedAt: string;\n    channelId: string;\n    title: string;\n    description: string;\n    thumbnails: {\n      default: YoutubeThumbnail;\n      medium: YoutubeThumbnail;\n      high: YoutubeThumbnail;\n      standard: YoutubeThumbnail;\n      maxres: YoutubeThumbnail;\n    };\n    channelTitle: string;\n    tags: string[];\n    categoryId: string;\n    liveBroadcastContent: string;\n    defaultLanguage: string;\n    localized: {\n      title: string;\n      description: string;\n    };\n    defaultAudioLanguage: string;\n  };\n}\n\nexport interface YoutubeVideoResponse {\n  kind: string;\n  etag: string;\n  items: YoutubeVideoItem[];\n  pageInfo: {\n    totalResults: number;\n    resultsPerPage: number;\n  };\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport const fetchYoutubeVideo = (id: string): Promise<YoutubeVideoResponse> =>\n  fetchRequest(\n    `${YOUTUBE_API_BASE}/videos?part=snippet&id=${id}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`,\n  );\n","import * as R from 'ramda';\n\nimport * as api from 'api';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport type { EmotesByText } from 'features/emotes/utils/getEmotesByText';\nimport emojisMap from 'features/emotes/emojisMap.json';\n\nconst emojisList = Object.values(emojisMap);\n\n// by id\n\nconst findTwitchEmoteByIdInSets = (\n  id: number | string,\n  sets: Record<string, api.TwitchEmote[]>,\n) => {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const set of Object.values(sets)) {\n    // eslint-disable-next-line eqeqeq\n    const result = R.find((emote) => emote.id == id, set);\n\n    if (result) return htmlEntity.createTwitchEmote(result);\n  }\n\n  return null;\n};\n\nconst findTwitchEmoteById = (\n  id: number | string,\n  { twitchGlobal, twitchUser }: NonNullable<StateEmotes>,\n) =>\n  findTwitchEmoteByIdInSets(id, twitchGlobal) ||\n  findTwitchEmoteByIdInSets(id, twitchUser);\n\nconst findBttvEmoteById = (\n  id: string,\n  { bttvGlobal, bttvChannel }: NonNullable<StateEmotes>,\n) => {\n  const findById = R.find<api.BttvGlobalEmote | api.BttvChannelEmote>(\n    R.propEq('id', id),\n  );\n  const result = findById(bttvGlobal) || findById(bttvChannel);\n\n  return result ? htmlEntity.createBttvEmote(result) : null;\n};\n\nconst findFfzEmoteById = (\n  id: number,\n  { ffzGlobal, ffzChannel }: NonNullable<StateEmotes>,\n) => {\n  const findById = R.find<api.FfzEmote>(R.propEq('id', id));\n  const result = findById(ffzGlobal) || findById(ffzChannel);\n\n  return result ? htmlEntity.createFfzEmote(result) : null;\n};\n\nconst findEmojiByChar = (char: string) => {\n  const result = R.find(R.propEq('char', char), emojisList);\n\n  return result ? htmlEntity.createEmoji(result) : null;\n};\n\n// by name\n\nconst emotesMap: Record<string, string[]> = {\n  1: [':-)', ':)'],\n  2: [':-(', ':('],\n  7: ['B-)', 'B)'],\n};\n\nconst findTwitchEmoteByNameInSets = (\n  name: string,\n  sets: Record<string, api.TwitchEmote[]>,\n) => {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const set of Object.values(sets)) {\n    const result = R.find(\n      ({ id, code }) =>\n        emotesMap[id] ? emotesMap[id].includes(name) : name === code,\n      set,\n    );\n\n    if (result) return htmlEntity.createTwitchEmote(result);\n  }\n\n  return null;\n};\n\nconst findTwitchEmoteByName = (\n  name: string,\n  { twitchGlobal, twitchUser }: NonNullable<StateEmotes>,\n) =>\n  findTwitchEmoteByNameInSets(name, twitchGlobal) ||\n  findTwitchEmoteByNameInSets(name, twitchUser);\n\nconst findBttvEmoteByName = (\n  name: string,\n  { bttvGlobal, bttvChannel }: NonNullable<StateEmotes>,\n) => {\n  const findByName = R.find<api.BttvGlobalEmote | api.BttvChannelEmote>(\n    R.propEq('code', name),\n  );\n  const result = findByName(bttvGlobal) || findByName(bttvChannel);\n\n  return result ? htmlEntity.createBttvEmote(result) : null;\n};\n\nconst findFfzEmoteByName = (\n  name: string,\n  { ffzGlobal, ffzChannel }: NonNullable<StateEmotes>,\n) => {\n  const findByName = R.find<api.FfzEmote>(R.propEq('name', name));\n  const result = findByName(ffzGlobal) || findByName(ffzChannel);\n\n  return result ? htmlEntity.createFfzEmote(result) : null;\n};\n\n// by text\n\n/* eslint-disable no-restricted-syntax */\nconst findTwitchEmotesByText = (\n  result: EmotesByText,\n  sets: Record<string, api.TwitchEmote[]>,\n  text: string,\n  limit: number,\n) => {\n  for (const items of Object.values(sets)) {\n    for (const emote of items) {\n      if (result.begins.length + result.contains.length === limit) return true;\n\n      const index = emote.code.toLowerCase().indexOf(text);\n\n      if (index !== -1) {\n        const type = index === 0 ? 'begins' : 'contains';\n\n        result[type].push(htmlEntity.createTwitchEmote(emote));\n      }\n    }\n  }\n\n  return false;\n};\n\nconst findBttvEmotesByText = (\n  result: EmotesByText,\n  bttv: api.BttvGlobalEmote[] | api.BttvChannelEmote[],\n  text: string,\n  limit: number,\n) => {\n  for (const emote of bttv) {\n    if (result.begins.length + result.contains.length === limit) return true;\n\n    const index = emote.code.toLowerCase().indexOf(text);\n\n    if (index !== -1) {\n      const type = index === 0 ? 'begins' : 'contains';\n\n      result[type].push(htmlEntity.createBttvEmote(emote));\n    }\n  }\n\n  return false;\n};\n\nconst findFfzEmotesByText = (\n  result: EmotesByText,\n  ffz: api.FfzEmote[],\n  text: string,\n  limit: number,\n) => {\n  for (const emote of ffz) {\n    if (result.begins.length + result.contains.length === limit) return true;\n\n    const index = emote.name.toLowerCase().indexOf(text);\n\n    if (index !== -1) {\n      const type = index === 0 ? 'begins' : 'contains';\n\n      result[type].push(htmlEntity.createFfzEmote(emote));\n    }\n  }\n\n  return false;\n};\n\nconst findEmojisByText = (\n  result: EmotesByText,\n  text: string,\n  limit: number,\n) => {\n  for (const emoji of emojisList) {\n    if (result.begins.length + result.contains.length === limit) return true;\n\n    const { short, keywords } = emoji;\n\n    let index = short.toLowerCase().indexOf(text);\n\n    if (index !== -1) {\n      const type = index === 0 ? 'begins' : 'contains';\n      const emojiEntity = htmlEntity.createEmoji(emoji);\n\n      result[type].push(emojiEntity);\n\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    for (const keyword of keywords) {\n      index = keyword.toLowerCase().indexOf(text);\n\n      if (index !== -1) {\n        const emojiEntity = htmlEntity.createEmoji(emoji);\n\n        result.contains.push(emojiEntity);\n\n        break;\n      }\n    }\n  }\n\n  return false;\n};\n/* eslint-enable no-restricted-syntax */\n\nconst findEmote = {\n  twitch: {\n    byId: findTwitchEmoteById,\n    byName: findTwitchEmoteByName,\n    byText: findTwitchEmotesByText,\n  },\n  bttv: {\n    byId: findBttvEmoteById,\n    byName: findBttvEmoteByName,\n    byText: findBttvEmotesByText,\n  },\n  ffz: {\n    byId: findFfzEmoteById,\n    byName: findFfzEmoteByName,\n    byText: findFfzEmotesByText,\n  },\n  emoji: {\n    byChar: findEmojiByChar,\n    byText: findEmojisByText,\n  },\n};\n\nexport default findEmote;\n","import * as R from 'ramda';\nimport { createSelector } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport getEmotesByText from 'features/emotes/utils/getEmotesByText';\nimport { getEmotesFromUsageStatistic } from 'features/emotes/utils/emotesUsageStatistic';\n\nexport type EmoteCategory = {\n  title?: string;\n  items: htmlEntity.Emote[];\n};\n\nconst getTwitchUserEmoteCategories = R.pipe<\n  Record<string, api.TwitchEmote[]>,\n  api.TwitchEmote[][],\n  EmoteCategory[]\n>(\n  R.values,\n  R.map((items) => ({ items: R.map(htmlEntity.createTwitchEmote, items) })),\n);\n\nconst createMainEmoteCategories = (emotes: StateEmotes) => {\n  if (!emotes) return [];\n\n  const {\n    twitchGlobal,\n    twitchUser,\n    bttvGlobal,\n    bttvChannel,\n    ffzGlobal,\n    ffzChannel,\n  } = emotes;\n\n  return [\n    {\n      title: 'BetterTTV Channel Emotes',\n      items: bttvChannel.map(htmlEntity.createBttvEmote),\n    },\n    {\n      title: 'FrankerFaceZ Channel Emotes',\n      items: ffzChannel.map(htmlEntity.createFfzEmote),\n    },\n    ...getTwitchUserEmoteCategories(twitchUser),\n    {\n      title: 'Twitch',\n      items: R.map(\n        htmlEntity.createTwitchEmote,\n        R.propOr([], '0', twitchGlobal),\n      ),\n    },\n    {\n      title: 'BetterTTV',\n      items: bttvGlobal.map(htmlEntity.createBttvEmote),\n    },\n    {\n      title: 'FrankerFaceZ',\n      items: ffzGlobal.map(htmlEntity.createFfzEmote),\n    },\n  ].filter(R.path(['items', 'length'])) as EmoteCategory[];\n};\n\nconst getMainEmoteCategories = createSelector(\n  (emotes: StateEmotes) => emotes,\n  createMainEmoteCategories,\n);\n\nconst createEmoteCategories = (emotes: StateEmotes, text: string) => {\n  if (!emotes) return [];\n\n  if (text) {\n    const items = getEmotesByText(text, emotes);\n    const title = `${items.length ? '' : 'No '}Search Results for \"${text}\"`;\n\n    return [{ title, items }];\n  }\n\n  const mainEmoteCategories = getMainEmoteCategories(emotes);\n  const frequentlyUsed = getEmotesFromUsageStatistic(emotes);\n\n  if (!frequentlyUsed.length) {\n    return mainEmoteCategories;\n  }\n\n  const frequentlyUsedCategory = {\n    title: 'Frequently Used',\n    items: frequentlyUsed,\n  };\n\n  return [frequentlyUsedCategory, ...mainEmoteCategories] as EmoteCategory[];\n};\n\nexport default createEmoteCategories;\n","import * as R from 'ramda';\nimport { createSelector } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { RootState } from 'app/rootReducer';\nimport { currentChannelSelector } from 'features/chat/chatSelectors';\nimport createEmoteCategories from 'features/emotes/utils/createEmoteCategories';\n\nexport type StateEmotes = {\n  twitchGlobal: Record<string, api.TwitchEmote[]>;\n  twitchUser: Record<string, api.TwitchEmote[]>;\n  bttvGlobal: api.BttvGlobalEmote[];\n  bttvChannel: api.BttvChannelEmote[];\n  ffzGlobal: api.FfzEmote[];\n  ffzChannel: api.FfzEmote[];\n} | null;\n\n// emotes isLoaded\nexport const isTwitchEmotesLoadedSelector = (state: RootState) =>\n  state.emotes.twitch.status === 'success' ||\n  state.emotes.twitch.status === 'error';\n\nexport const isBttvGlobalEmotesLoadedSelector = (state: RootState) =>\n  state.emotes.bttv.global.status === 'success' ||\n  state.emotes.bttv.global.status === 'error';\n\nexport const isBttvChannelEmotesLoadedSelector = (state: RootState) => {\n  const currentChannel = currentChannelSelector(state);\n\n  return (\n    state.emotes.bttv.byChannels[currentChannel]?.status === 'success' ||\n    state.emotes.bttv.byChannels[currentChannel]?.status === 'error' ||\n    false\n  );\n};\n\nexport const isBttvEmotesLoadedSelector = (state: RootState) =>\n  isBttvGlobalEmotesLoadedSelector(state) &&\n  isBttvChannelEmotesLoadedSelector(state);\n\nexport const isFfzGlobalEmotesLoadedSelector = (state: RootState) =>\n  state.emotes.ffz.global.status === 'success' ||\n  state.emotes.ffz.global.status === 'error';\n\nexport const isFfzChannelEmotesLoadedSelector = (state: RootState) => {\n  const currentChannel = currentChannelSelector(state);\n\n  return (\n    state.emotes.ffz.byChannels[currentChannel]?.status === 'success' ||\n    state.emotes.ffz.byChannels[currentChannel]?.status === 'error' ||\n    false\n  );\n};\n\nexport const isFfzEmotesLoadedSelector = (state: RootState) =>\n  isFfzGlobalEmotesLoadedSelector(state) &&\n  isFfzChannelEmotesLoadedSelector(state);\n\nexport const isEmotesLoadedSelector = (state: RootState) =>\n  isTwitchEmotesLoadedSelector(state) &&\n  isBttvGlobalEmotesLoadedSelector(state) &&\n  isBttvChannelEmotesLoadedSelector(state) &&\n  isFfzGlobalEmotesLoadedSelector(state) &&\n  isFfzChannelEmotesLoadedSelector(state);\n\n// emotes\nconst twitchEmotesSelector = (state: RootState) => state.emotes.twitch.items;\nconst twitchGlobalEmotesSelector = createSelector(\n  twitchEmotesSelector,\n  R.pick(['0']),\n);\nconst twitchUserEmotesSelector = createSelector(\n  twitchEmotesSelector,\n  R.omit(['0']),\n);\n\nconst bttvGlobalEmotesSelector = (state: RootState) =>\n  state.emotes.bttv.global.items;\nconst bttvChannelEmotesSelector = (state: RootState) =>\n  state.emotes.bttv.byChannels[currentChannelSelector(state)]?.items || [];\n\nconst ffzGlobalEmotesSelector = (state: RootState) =>\n  state.emotes.ffz.global.items;\nconst ffzChannelEmotesSelector = (state: RootState) =>\n  state.emotes.ffz.byChannels[currentChannelSelector(state)]?.items || [];\n\nexport const emotesSelector = createSelector(\n  isEmotesLoadedSelector,\n  twitchGlobalEmotesSelector,\n  twitchUserEmotesSelector,\n  bttvGlobalEmotesSelector,\n  bttvChannelEmotesSelector,\n  ffzGlobalEmotesSelector,\n  ffzChannelEmotesSelector,\n  (\n    isEmotesLoaded,\n    twitchGlobal,\n    twitchUser,\n    bttvGlobal,\n    bttvChannel,\n    ffzGlobal,\n    ffzChannel,\n  ) => {\n    if (!isEmotesLoaded) return null;\n\n    return {\n      twitchGlobal,\n      twitchUser,\n      bttvGlobal,\n      bttvChannel,\n      ffzGlobal,\n      ffzChannel,\n    } as StateEmotes;\n  },\n);\n\nexport const emoteCategoriesSelector = (state: RootState, search: string) => {\n  const emotes = emotesSelector(state);\n\n  return createEmoteCategories(emotes, search);\n};\n","import type { RootState } from 'app/rootReducer';\n\ntype OptionItem = {\n  type: 'switch' | 'input';\n  id: string;\n  name: string;\n  title: string;\n  description: string;\n  value: boolean | string;\n};\n\ntype OptionCategories = {\n  title: string;\n  items: OptionItem[];\n};\n\nexport const optionsSelector = (state: RootState): OptionCategories[] => [\n  {\n    title: 'My preferences',\n    items: [\n      {\n        type: 'switch',\n        id: 'show-timestamps',\n        name: 'showTimestamps',\n        title: 'Show Timestamps',\n        description: '',\n        value: state.options.showTimestamps,\n      },\n      {\n        type: 'switch',\n        id: 'time-format-24-hours',\n        name: 'timeFormat24Hours',\n        title: 'Time Format: 24 Hours',\n        description: '',\n        value: state.options.timeFormat24Hours,\n      },\n      {\n        type: 'switch',\n        id: 'split-chat',\n        name: 'splitChat',\n        title: 'Split Chat',\n        description: '',\n        value: state.options.splitChat,\n      },\n      {\n        type: 'switch',\n        id: 'fixed-width',\n        name: 'fixedWidth',\n        title: 'Fixed Width',\n        description: '',\n        value: state.options.fixedWidth,\n      },\n      {\n        type: 'switch',\n        id: 'highlight-notifications',\n        name: 'highlightNotifications',\n        title: 'Play a sound on highlights',\n        description: 'Plays a sound for messages directed at you',\n        value: state.options.highlightNotifications,\n      },\n      {\n        type: 'switch',\n        id: 'show-twitch-cards',\n        name: 'showTwitchCards',\n        title: 'Show Twitch clips and vods in the chat',\n        description: 'Show previews for Twitch clips and vods in the chat',\n        value: state.options.showTwitchCards,\n      },\n      {\n        type: 'switch',\n        id: 'show-youtube-cards',\n        name: 'showYoutubeCards',\n        title: 'Show Youtube videos in the chat',\n        description: 'Show previews for Youtube videos in the chat',\n        value: state.options.showYoutubeCards,\n      },\n      // {\n      //   type: 'input',\n      //   id: 'blacklist-keywords',\n      //   name: 'blacklistKeywords',\n      //   title: 'Set Blacklist Keywords',\n      //   description: '',\n      //   value: state.options.blacklistKeywords,\n      // },\n      // {\n      //   type: 'input',\n      //   id: 'highlight-keywords',\n      //   name: 'highlightKeywords',\n      //   title: 'Set Highlight Keywords',\n      //   description: '',\n      //   value: state.options.highlightKeywords,\n      // },\n    ],\n  },\n];\n\nexport const isShowTimestampsSelector = (state: RootState) =>\n  state.options.showTimestamps;\n\nexport const isSplitChatSelector = (state: RootState) =>\n  state.options.splitChat;\n\nexport const isFixedWidthSelector = (state: RootState) =>\n  state.options.fixedWidth;\n\nexport const isHighlightNotificationsSelector = (state: RootState) =>\n  state.options.highlightNotifications;\n\nexport const isShowTwitchCardsSelector = (state: RootState) =>\n  state.options.showTwitchCards;\n\nexport const isShowYoutubeCardsSelector = (state: RootState) =>\n  state.options.showYoutubeCards;\n\nexport const isTimeFormat24HoursSelector = (state: RootState) =>\n  state.options.timeFormat24Hours;\n","import * as R from 'ramda';\nimport { format } from 'date-fns/fp';\n\nimport * as api from 'api';\n\nexport const parseTwitchEmotes = R.prop('emoticon_sets');\n\nexport const parseBttvGlobalEmotes = (\n  data: api.BttvGlobalEmotesResponse,\n): api.BttvGlobalEmote[] => data;\n\nexport const parseBttvChannelEmotes = (\n  data: api.BttvChannelEmotesResponse,\n): api.BttvChannelEmote[] => [...data.channelEmotes, ...data.sharedEmotes];\n\nexport const parseFfzGlobalEmotes = ({\n  default_sets: defaultSets,\n  sets,\n}: api.FfzGlobalEmotesResponse): api.FfzEmote[] =>\n  R.pipe<any, any, any, any, api.FfzEmote[]>(\n    R.pick((defaultSets as unknown) as string[]),\n    R.values,\n    R.map(R.propOr([], 'emoticons')),\n    R.flatten,\n  )(sets);\n\nexport const parseFfzChannelEmotes: (\n  data: api.FfzChannelEmotesResponse,\n) => api.FfzEmote[] = R.pipe(\n  R.pathOr({}, ['sets']),\n  R.values,\n  R.map(R.pathOr([], ['emoticons'])),\n  R.flatten,\n);\n\nexport const parseBlockedUsers = R.pipe<\n  api.TwitchBlockedUsersResponse,\n  Record<string, unknown>[],\n  string[]\n>(R.prop('blocks'), R.map<any, any>(R.path(['user', 'name'])));\n\nexport const parseBadges = R.prop('badge_sets');\n\n// TODO: if message card was loaded, the second message with different timing doesn't work\n\nexport const parseTwitchClip = ({ data }: api.TwitchClipResponse) => {\n  if (data.length === 0) return null;\n\n  const {\n    id,\n    thumbnail_url: thumbnailUrl,\n    title,\n    creator_name: creatorName,\n  } = data[0];\n\n  const x1 = thumbnailUrl.replace('480x272', '86x45');\n  const x2 = thumbnailUrl.replace('480x272', '260x147');\n\n  return {\n    id,\n    src: x1,\n    srcSet: `${x1} 1x, ${x2} 2x`,\n    title,\n    description: `Clipped by ${creatorName}`,\n  };\n};\n\nexport const parseTwitchVideo = ({ data }: api.TwitchVideoResponse) => {\n  if (data.length === 0) return null;\n\n  const {\n    id,\n    thumbnail_url: thumbnailUrl,\n    title,\n    user_name: userName,\n    published_at: publishedAt,\n  } = data[0];\n\n  const date = format('PP', new Date(publishedAt));\n\n  const thumbnailReplace = '%{width}x%{height}';\n\n  const x1 = thumbnailUrl.replace(thumbnailReplace, '80x45');\n  const x2 = thumbnailUrl.replace(thumbnailReplace, '160x90');\n  const x4 = thumbnailUrl.replace(thumbnailReplace, '320x180');\n\n  return {\n    id,\n    src: x1,\n    srcSet: `${x1} 1x, ${x2} 2x, ${x4} 4x`,\n    title,\n    description: `${date} · ${userName}`,\n  };\n};\n\nexport const parseYoutubeVideo = ({ items }: api.YoutubeVideoResponse) => {\n  if (items.length === 0) return null;\n\n  const {\n    id,\n    snippet: {\n      title,\n      publishedAt,\n      channelTitle,\n      thumbnails: {\n        default: { url: x1 },\n        medium: { url: x2 },\n        high: { url: x4 },\n      },\n    },\n  } = items[0];\n\n  const date = format('PP', new Date(publishedAt));\n\n  return {\n    id,\n    src: x1,\n    srcSet: `${x1} 1x, ${x2} 2x, ${x4} 4x`,\n    title,\n    description: `${date} · ${channelTitle}`,\n  };\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\nimport type twitchIrc from '@honeykingdom/twitch-simple-irc';\n\ntype Params = {\n  room: twitchIrc.RoomStateTags | null;\n  user: twitchIrc.UserStateTags | null;\n};\n\ntype ChatState = {\n  isConnected: boolean;\n  currentChannel: string;\n  params: {\n    global: twitchIrc.GlobalUserStateTags | null;\n    byChannels: Record<string, Params>;\n  };\n};\n\nconst initialState: ChatState = {\n  isConnected: false,\n  currentChannel: '',\n  params: {\n    global: null,\n    byChannels: {},\n  },\n};\n\nconst chat = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    updateIsConnected: (state, { payload }: PayloadAction<boolean>) => {\n      state.isConnected = payload;\n    },\n\n    updateCurrentChannel: (state, { payload }: PayloadAction<string>) => {\n      state.currentChannel = payload;\n    },\n\n    updateGlobalUserParams: (\n      state,\n      { payload }: PayloadAction<twitchIrc.GlobalUserStateEvent>,\n    ) => {\n      state.params.global = payload.tags;\n    },\n\n    updateUserParams: (\n      state,\n      { payload }: PayloadAction<twitchIrc.UserStateEvent>,\n    ) => {\n      const { channel, tags } = payload;\n\n      if (!state.params.byChannels[channel]) {\n        state.params.byChannels[channel] = {\n          room: null,\n          user: null,\n        };\n      }\n\n      state.params.byChannels[channel].user = tags;\n    },\n\n    updateRoomParams: (\n      state,\n      { payload }: PayloadAction<twitchIrc.RoomStateEvent>,\n    ) => {\n      const { channel, tags } = payload;\n\n      if (!state.params.byChannels[channel]) {\n        state.params.byChannels[channel] = {\n          room: null,\n          user: null,\n        };\n      }\n\n      // TODO: merge tags\n      state.params.byChannels[channel].room = tags;\n    },\n  },\n});\n\nexport const {\n  updateIsConnected,\n  updateCurrentChannel,\n\n  // params\n  updateGlobalUserParams,\n  updateUserParams,\n  updateRoomParams,\n} = chat.actions;\n\nexport default chat.reducer;\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport type { RootState } from 'app/rootReducer';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport {\n  currentChannelSelector,\n  userBadgesSelector,\n} from 'features/chat/chatSelectors';\n\nexport const isGlobalBadgesLoadedSelector = (state: RootState) =>\n  state.badges.global.status === 'success' ||\n  state.badges.global.status === 'error';\n\nexport const isChannelBadgesLoadedSelector = (state: RootState) =>\n  state.badges.byChannels[currentChannelSelector(state)]?.status ===\n    'success' ||\n  state.badges.byChannels[currentChannelSelector(state)]?.status === 'error';\n\nexport const isBadgesLoadedSelector = (state: RootState) =>\n  isGlobalBadgesLoadedSelector(state) && isChannelBadgesLoadedSelector(state);\n\nexport const globalBadgesSelector = (state: RootState) =>\n  state.badges.global.items;\n\nexport const channelBadgesSelector = (state: RootState) =>\n  state.badges.byChannels[currentChannelSelector(state)]?.items || {};\n\nexport const userBadgesImagesSelector = createSelector(\n  userBadgesSelector,\n  globalBadgesSelector,\n  channelBadgesSelector,\n  htmlEntity.createBadges,\n);\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchStatus } from 'utils/types';\nimport { writeUserToLocatStorage } from 'features/auth/authUtils';\n\ntype AuthState = {\n  status: FetchStatus;\n  userId: string | null;\n  userLogin: string | null;\n};\n\ntype InitializeAuth = {\n  isAuth: boolean;\n  userId?: string;\n  userLogin?: string;\n};\n\nexport const initialState: AuthState = {\n  status: 'idle',\n  userId: null,\n  userLogin: null,\n};\n\nexport const fetchUser = createAsyncThunk(\n  'auth/fetchUser',\n  async (userId: string) => {\n    const users = await api.fetchUser(userId);\n    const { id, login } = users.data[0];\n    const user = { id, login };\n\n    writeUserToLocatStorage(user);\n\n    return user;\n  },\n);\n\nconst auth = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    initializeAuth: (state, { payload }: PayloadAction<InitializeAuth>) => {\n      state.status = payload.isAuth ? 'success' : 'error';\n\n      if (payload.userId) {\n        state.userId = payload.userId;\n      }\n\n      if (payload.userLogin) {\n        state.userLogin = payload.userLogin;\n      }\n    },\n\n    invalidateAuth: (): AuthState => initialState,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchUser.pending, (state) => {\n      state.status = 'loading';\n    });\n\n    builder.addCase(fetchUser.fulfilled, (state, { payload }) => {\n      state.status = 'success';\n      state.userId = payload.id;\n      state.userLogin = payload.login;\n    });\n\n    builder.addCase(fetchUser.rejected, (state) => {\n      state.status = 'error';\n    });\n  },\n});\n\nexport const { initializeAuth, invalidateAuth } = auth.actions;\n\nexport default auth.reducer;\n","import urlRegex from 'url-regex';\nimport type twitchIrc from '@honeykingdom/twitch-simple-irc';\n\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport type { MessageEntity } from 'features/messages/messagesSlice';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport findEmote from 'features/emotes/utils/findEmote';\n\nconst MENTION_REGEX = /^(@([\\p{Letter}\\p{Number}_]+))(.*)/u;\nconst LINK_REGEX = urlRegex({ strict: false });\n\n// https://discuss.dev.twitch.tv/t/28414/2\nconst getCodePointsCount = (string: string) => {\n  let count = 0;\n\n  // eslint-disable-next-line no-restricted-syntax, @typescript-eslint/no-unused-vars\n  for (const char of string) {\n    count += 1;\n  }\n\n  return count;\n};\n\nconst normalizeEmbeddedEmotes = (embeddedEmotes: twitchIrc.Emotes) =>\n  Object.entries(embeddedEmotes).reduce<Record<string, string>>(\n    (result, [key, items]) => ({\n      ...result,\n      ...items.reduce((acc, { start }) => ({ ...acc, [start]: key }), {}),\n    }),\n    {},\n  );\n\nconst findEntity = (\n  word: string,\n  emotes: StateEmotes,\n  parseTwitch: boolean,\n):\n  | htmlEntity.TwitchEmote\n  | htmlEntity.BttvEmote\n  | htmlEntity.FfzEmote\n  | htmlEntity.Emoji\n  | [htmlEntity.Mention, string]\n  | htmlEntity.Link\n  | null => {\n  if (!emotes) return null;\n\n  if (parseTwitch) {\n    const twitchEmote = findEmote.twitch.byName(word, emotes);\n\n    if (twitchEmote) return twitchEmote;\n  }\n\n  const emote =\n    findEmote.bttv.byName(word, emotes) ||\n    findEmote.ffz.byName(word, emotes) ||\n    findEmote.emoji.byChar(word);\n\n  if (emote) return emote;\n\n  const mentionMatch = word.match(MENTION_REGEX);\n\n  if (mentionMatch) {\n    const [, text, target, tail] = mentionMatch;\n\n    return [htmlEntity.createMention(text, target.toLowerCase()), tail];\n  }\n\n  const linkMatch = word.match(LINK_REGEX);\n\n  if (linkMatch && linkMatch[0].length === word.length) {\n    return htmlEntity.createLink(word);\n  }\n\n  return null;\n};\n\nconst parseMessageEntities = (\n  message: string,\n  emotes: StateEmotes | null,\n  embeddedEmotes: twitchIrc.Emotes | null,\n  isOwnMessage = false,\n): MessageEntity[] => {\n  const words = message.split(' ');\n\n  const checkEmbeddedEmotes =\n    !isOwnMessage && !!embeddedEmotes && Object.keys(embeddedEmotes).length > 0;\n\n  const normalizedEmbeddedEmotes = checkEmbeddedEmotes\n    ? normalizeEmbeddedEmotes(embeddedEmotes as twitchIrc.Emotes)\n    : {};\n\n  const result: MessageEntity[] = [];\n  let offset = 0;\n\n  words.forEach((word, i, arr) => {\n    const isLast = arr.length - 1 === i;\n    let entity = null;\n\n    if (checkEmbeddedEmotes) {\n      const id = normalizedEmbeddedEmotes[offset];\n\n      if (id) {\n        entity = htmlEntity.createTwitchEmote({ id, code: word });\n      }\n    }\n\n    if (!entity) {\n      entity = findEntity(word, emotes, isOwnMessage);\n    }\n\n    if (entity) {\n      if (Array.isArray(entity)) {\n        const [entityItem, tail] = entity;\n\n        result.push(entityItem);\n        result.push(isLast ? tail : `${tail} `);\n      } else {\n        result.push(entity);\n\n        if (!isLast) {\n          result.push(' ');\n        }\n      }\n    } else {\n      const isLastItemString = typeof result[result.length - 1] === 'string';\n\n      if (isLastItemString) {\n        result[result.length - 1] += isLast ? word : `${word} `;\n      } else {\n        result.push(isLast ? word : `${word} `);\n      }\n    }\n\n    offset += getCodePointsCount(word) + 1;\n  });\n\n  return result;\n};\n\nexport default parseMessageEntities;\n","const checkIsHighlighted = (\n  userLogin: string | null,\n  messageUser: string,\n  messageText: string,\n) =>\n  !!userLogin &&\n  userLogin !== messageUser &&\n  RegExp(userLogin, 'gi').test(messageText);\n\nexport default checkIsHighlighted;\n","import type {\n  MessageEntity,\n  MessageCardInfo,\n} from 'features/messages/messagesSlice';\n\n// https://regex101.com/r/jGbDV1/5\nconst twitchClipRegex = /^(?:https?:\\/\\/)?(?:clips\\.twitch\\.tv\\/|(?:www\\.|m\\.)?twitch\\.tv\\/(?:[\\d\\w]+)\\/clip\\/)([\\d\\w-]+)(?:\\?.+)?$/;\n\n// https://regex101.com/r/xsgeA4/4\nconst twitchVideoRegex = /^(?:https?:\\/\\/)?(?:www\\.|m\\.)?twitch\\.tv\\/videos\\/(\\d+)(?:\\?.+)?$/;\n\n// https://regexr.com/3dj5t\nconst youtubeVideoRegex = /^((?:https?:)?\\/\\/)?((?:www|m)\\.)?(?:youtube\\.com|youtu.be)(\\/(?:[\\w-]+\\?v=|embed\\/|v\\/)?)([\\w-]+)(\\S+)?$/;\n\nconst getMessageCardFromEntities = (\n  entities: MessageEntity[],\n  [parseTwitch, parseYoutube]: [boolean, boolean] = [true, true],\n): MessageCardInfo | null => {\n  if (!parseTwitch && !parseYoutube) return null;\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const entity of entities) {\n    if (typeof entity === 'object' && entity.type === 'link') {\n      if (parseTwitch) {\n        // twitch clip\n        let m = twitchClipRegex.exec(entity.text);\n\n        if (m) {\n          return {\n            type: 'twitch-clip',\n            id: m[1],\n            url: entity.href,\n          };\n        }\n\n        // twitch video\n        m = twitchVideoRegex.exec(entity.text);\n\n        if (m) {\n          return {\n            type: 'twitch-video',\n            id: m[1],\n            url: entity.href,\n          };\n        }\n      }\n\n      if (parseYoutube) {\n        // youtube video\n        const m = youtubeVideoRegex.exec(entity.text);\n\n        if (m) {\n          return {\n            type: 'youtube-video',\n            id: m[4],\n            url: entity.href,\n          };\n        }\n      }\n    }\n  }\n\n  return null;\n};\n\nexport default getMessageCardFromEntities;\n","export default __webpack_public_path__ + \"static/media/ts-tink.6eea13b1.ogg\";","import { nanoid } from '@reduxjs/toolkit';\nimport * as twitchIrc from '@honeykingdom/twitch-simple-irc';\nimport * as tekko from 'tekko';\nimport { Howl } from 'howler';\n\nimport type * as api from 'api';\nimport type { RootState } from 'app/rootReducer';\nimport type {\n  Message,\n  Notice,\n  UserNotice,\n  OwnMessage,\n} from 'features/messages/messagesSlice';\nimport { emotesSelector } from 'features/emotes/emotesSelectors';\nimport { blockedUsersSelector } from 'features/blockedUsers/blockedUsersSelectors';\nimport {\n  globalBadgesSelector,\n  channelBadgesSelector,\n} from 'features/badges/badgesSelectors';\nimport {\n  isHighlightNotificationsSelector,\n  isShowTwitchCardsSelector,\n  isShowYoutubeCardsSelector,\n} from 'features/options/optionsSelectors';\nimport { userLoginSelector, userIdSelector } from 'features/auth/authSelectors';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport parseMessageEntities from 'features/messages/utils/parseMessageEntities';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport checkIsHighlighted from 'features/messages/utils/checkIsHighlighted';\nimport getMessageCardFromEntities from 'features/messageCards/utils/getMessageCardFromEntities';\nimport { writeEmotesUsageStatistic } from 'features/emotes/utils/emotesUsageStatistic';\n\nimport tinkSfx from 'assets/ts-tink.ogg';\n\nconst tink = new Howl({ src: [tinkSfx] });\n\nexport const normalizeMessage = (\n  { message, tags, user, channel, isAction }: twitchIrc.MessageEvent,\n  state: RootState,\n): Message | null => {\n  const blockedUsers = blockedUsersSelector(state);\n  const isBlockedUser = blockedUsers.includes(user);\n\n  if (isBlockedUser) {\n    return null;\n  }\n\n  const isHighlightNotifications = isHighlightNotificationsSelector(state);\n  const isShowTwitchCards = isShowTwitchCardsSelector(state);\n  const isShowYoutubeCards = isShowYoutubeCardsSelector(state);\n  const userLogin = userLoginSelector(state);\n  const isHighlighted = checkIsHighlighted(userLogin, user, message);\n\n  if (isHighlighted && isHighlightNotifications) {\n    tink.play();\n  }\n\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n\n  const entities = parseMessageEntities(message, emotes, tags.emotes);\n  const badges = htmlEntity.createBadges(\n    tags.badges,\n    globalBadges,\n    channelBadges,\n  );\n  const card = getMessageCardFromEntities(entities, [\n    isShowTwitchCards,\n    isShowYoutubeCards,\n  ]);\n\n  return {\n    type: 'message',\n    id: tags.id,\n    message,\n    channel,\n    entities,\n    user: {\n      id: tags.userId,\n      login: user,\n      displayName: tags.displayName,\n      color: tags.color,\n      badges,\n    },\n    timestamp: tags.tmiSentTs,\n    card,\n    isAction,\n    isHistory: false,\n    isDeleted: false,\n    isHighlighted,\n    isOwnMessage: false,\n  };\n};\n\nexport const normalizeNotice = ({\n  message,\n  channel,\n  tags: { msgId },\n}: twitchIrc.NoticeEvent): Notice => ({\n  type: 'notice',\n  id: nanoid(),\n  message,\n  channel,\n  noticeType: msgId,\n});\n\nexport const normalizeUserNotice = ({\n  message,\n  channel,\n  tags: { id, msgId, login, systemMsg },\n}: twitchIrc.UserNoticeEvent): UserNotice => ({\n  type: 'user-notice',\n  id,\n  message,\n  channel,\n  noticeType: msgId,\n  systemMessage: systemMsg,\n  user: {\n    login,\n  },\n});\n\nexport const normalizeOwnMessage = (\n  { message, channel, tags }: OwnMessage,\n  state: RootState,\n): Message => {\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n  const userLogin = userLoginSelector(state) as string;\n  const userId = userIdSelector(state) as string;\n  const isShowTwitchCards = isShowTwitchCardsSelector(state);\n  const isShowYoutubeCards = isShowYoutubeCardsSelector(state);\n\n  const isAction = message.startsWith('/me ');\n  const normalizedMessage = isAction ? message.slice(4) : message;\n\n  const entities = parseMessageEntities(normalizedMessage, emotes, null, true);\n  const badges = htmlEntity.createBadges(\n    tags.badges,\n    globalBadges,\n    channelBadges,\n  );\n  const card = getMessageCardFromEntities(entities, [\n    isShowTwitchCards,\n    isShowYoutubeCards,\n  ]);\n\n  writeEmotesUsageStatistic(entities);\n\n  return {\n    type: 'message',\n    id: nanoid(),\n    message: normalizedMessage,\n    channel,\n    entities,\n    user: {\n      id: userId,\n      login: userLogin,\n      displayName: tags.displayName,\n      color: tags.color,\n      badges,\n    },\n    timestamp: Date.now(),\n    card,\n    isAction,\n    isHistory: false,\n    isDeleted: false,\n    isHighlighted: false,\n    isOwnMessage: true,\n  };\n};\n\nexport const normalizeHistoryMessage = (\n  { tags, params: [channel, message], prefix }: tekko.Message,\n  emotes: StateEmotes,\n  globalBadges: Record<string, api.TwitchBadge>,\n  channelBadges: Record<string, api.TwitchBadge>,\n  userLogin: string | null,\n): Message => {\n  const isAction = twitchIrc.getIsAction(message);\n  const normalizedMessage = isAction\n    ? twitchIrc.normalizeActionMessage(message)\n    : message;\n  const parsedTags = (twitchIrc.parseMessageTags(\n    tags,\n  ) as unknown) as twitchIrc.MessageTags;\n\n  const messageUser = prefix ? prefix.name : '';\n  const isHighlighted = checkIsHighlighted(\n    userLogin,\n    messageUser,\n    normalizedMessage,\n  );\n\n  const entities = parseMessageEntities(\n    normalizedMessage,\n    emotes,\n    parsedTags.emotes,\n  );\n  const badges = htmlEntity.createBadges(\n    parsedTags.badges,\n    globalBadges,\n    channelBadges,\n  );\n\n  // TODO: add cards for history?\n  // const card = getMessageCardFromEntities(entities);\n\n  return {\n    type: 'message',\n    id: parsedTags.id,\n    message: normalizedMessage,\n    channel: channel.slice(1),\n    entities,\n    user: {\n      id: parsedTags.userId,\n      login: messageUser,\n      displayName: parsedTags.displayName,\n      color: parsedTags.color,\n      badges,\n    },\n    timestamp: parsedTags.tmiSentTs,\n    card: null,\n    isAction,\n    isHistory: true,\n    isDeleted: false,\n    isHighlighted,\n    isOwnMessage: false,\n  };\n};\n\nexport const normalizeHistoryMessages = (\n  rawMessages: string[],\n  state: RootState,\n): Message[] => {\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n  const blockedUsers = blockedUsersSelector(state);\n  const userLogin = userLoginSelector(state);\n\n  return rawMessages.reduce<Message[]>((acc, rawMessage) => {\n    const message = tekko.parse(rawMessage) as tekko.Message;\n\n    const { command, prefix } = message;\n\n    if (\n      command === 'PRIVMSG' &&\n      prefix &&\n      !blockedUsers.includes(prefix.name)\n    ) {\n      acc.push(\n        normalizeHistoryMessage(\n          message,\n          emotes,\n          globalBadges,\n          channelBadges,\n          userLogin,\n        ),\n      );\n    }\n\n    return acc;\n  }, []);\n};\n","type SliceMessagesParams<T> = {\n  items: T[];\n  limit: number;\n  addedItemsCount: number;\n  isEven: boolean;\n};\n\nconst sliceMessagesByLimit = <T>({\n  items,\n  limit,\n  addedItemsCount,\n  isEven,\n}: SliceMessagesParams<T>): [T[], boolean] => {\n  const diff = items.length - limit;\n  const isSliced = diff > 0;\n\n  const newItems = isSliced ? items.slice(diff) : items;\n  const newIsEven = isSliced && addedItemsCount % 2 ? !isEven : isEven;\n\n  return [newItems, newIsEven];\n};\n\nexport default sliceMessagesByLimit;\n","const sliceItemsByLimit = <T>(items: T[], limit: number) => {\n  const diff = items.length - limit;\n\n  return diff > 0 ? items.slice(diff) : items;\n};\n\nexport default sliceItemsByLimit;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\nimport type twitchIrc from '@honeykingdom/twitch-simple-irc';\n\nimport * as api from 'api';\nimport type { AppThunk } from 'app/store';\nimport type { RootState } from 'app/rootReducer';\nimport type { FetchResult } from 'utils/types';\nimport {\n  CHANNEL_MESSAGES_LIMIT,\n  STORE_USERS_LIMIT,\n  RECENT_USER_MESSAGES_LIMIT,\n} from 'utils/constants';\nimport assertNever from 'utils/assertNever';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport {\n  normalizeMessage,\n  normalizeNotice,\n  normalizeUserNotice,\n  normalizeHistoryMessages,\n  normalizeOwnMessage,\n} from 'features/messages/utils/normalizeMessages';\nimport sliceMessagesByLimit from 'features/messages/utils/sliceMessagesByLimit';\nimport sliceItemsByLimit from 'features/messages/utils/sliceItemsByLimit';\nimport {\n  fetchTwitchClip,\n  fetchTwitchVideo,\n  fetchYoutubeVideo,\n} from 'features/messageCards/messageCardsSlice';\nimport { messageCardSelector } from 'features/messageCards/messageCardsSelectors';\n\nexport type MessageEntity =\n  | htmlEntity.TwitchEmote\n  | htmlEntity.BttvEmote\n  | htmlEntity.FfzEmote\n  | htmlEntity.Emoji\n  | htmlEntity.Mention\n  | htmlEntity.Link\n  | string;\n\nexport type MessageCardInfo = {\n  type: 'twitch-clip' | 'twitch-video' | 'youtube-video';\n  id: string;\n  url: string;\n};\n\nexport type Message = {\n  type: 'message';\n  id: string;\n  message: string;\n  channel: string;\n  entities: MessageEntity[];\n  user: {\n    id: string;\n    login: string;\n    displayName: string;\n    color: string;\n    badges: htmlEntity.Badge[];\n  };\n  timestamp: number;\n  card: MessageCardInfo | null;\n  isAction: boolean;\n  isHistory: boolean;\n  isDeleted: boolean;\n  isHighlighted: boolean;\n  isOwnMessage: boolean;\n};\n\nexport type Notice = {\n  type: 'notice';\n  id: string;\n  message: string;\n  channel: string;\n  noticeType: string;\n};\n\nexport type UserNotice = {\n  type: 'user-notice';\n  id: string;\n  message: string;\n  channel: string;\n  noticeType: keyof typeof twitchIrc.UserNoticeType;\n  systemMessage: string;\n  user: {\n    login: string;\n  };\n};\n\nexport type ChatMessage = Message | Notice | UserNotice;\n\nexport type OwnMessage = {\n  message: string;\n  channel: string;\n  tags: twitchIrc.UserStateTags;\n};\n\ntype ReceiveMessage = {\n  type: 'message';\n  message: twitchIrc.MessageEvent;\n};\ntype ReceiveNotice = {\n  type: 'notice';\n  message: twitchIrc.NoticeEvent;\n};\ntype ReceiveUserNotice = {\n  type: 'user-notice';\n  message: twitchIrc.UserNoticeEvent;\n};\ntype ReceiveOwnMessage = {\n  type: 'own-message';\n  message: OwnMessage;\n};\n\ntype ReceiveMessagePayload =\n  | ReceiveMessage\n  | ReceiveNotice\n  | ReceiveUserNotice\n  | ReceiveOwnMessage;\n\ntype ReceiveMessagesActionPayload = {\n  messages: ChatMessage[];\n  channel: string;\n  type?: 'message' | 'history';\n};\n\ntype MessagesStateChannel = {\n  history: FetchResult<string[]> & {\n    isAdded: boolean;\n  };\n  isEven: boolean;\n  items: ChatMessage[];\n  users: string[];\n  recentUserMessages: string[];\n};\n\ntype MessagesState = Record<string, MessagesStateChannel>;\n\nconst initialState: MessagesState = {};\n\nexport const fetchRecentMessages = createAsyncThunk(\n  'chat/fetchRecentMessages',\n  api.fetchRecentMessages,\n);\n\n// TODO: write function than adds a user to the users array\n\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    clearChat: (\n      state,\n      { payload }: PayloadAction<twitchIrc.ClearChatEvent>,\n    ) => {\n      const {\n        channel,\n        tags: { targetUserId },\n      } = payload;\n\n      // eslint-disable-next-line no-restricted-syntax\n      for (const message of state[channel].items) {\n        if (\n          message.type === 'message' &&\n          message.user.id === targetUserId &&\n          !message.isHistory\n        ) {\n          message.isDeleted = true;\n        }\n      }\n    },\n\n    receiveMessagesAction: (\n      state,\n      { payload }: PayloadAction<ReceiveMessagesActionPayload>,\n    ) => {\n      const { messages, channel, type = 'message' } = payload;\n\n      if (messages.length === 0) return;\n\n      const items =\n        type === 'message'\n          ? [...state[channel].items, ...messages]\n          : [...messages, ...state[channel].items];\n\n      const [newItems, newIsEven] = sliceMessagesByLimit({\n        items,\n        limit: CHANNEL_MESSAGES_LIMIT,\n        addedItemsCount: messages.length,\n        isEven: state[channel].isEven,\n      });\n\n      state[channel].isEven = newIsEven;\n      state[channel].items = newItems;\n\n      // TODO: add colors for users if it's not set\n\n      // add users\n      const { users } = state[channel];\n\n      messages.forEach((message) => {\n        if (\n          message.type === 'message' &&\n          !users.includes(message.user.displayName)\n        ) {\n          users.push(message.user.displayName);\n        }\n      });\n\n      const newUsers = sliceItemsByLimit(users, STORE_USERS_LIMIT);\n\n      state[channel].users = newUsers;\n\n      if (type === 'history') {\n        state[channel].history.items = [];\n        state[channel].history.isAdded = true;\n      }\n\n      if (type === 'message') {\n        messages.forEach((message) => {\n          if (message.type !== 'message' || !message.isOwnMessage) return;\n\n          const normalizedMessage = message.message.trim();\n          const index = state[channel].recentUserMessages.indexOf(\n            normalizedMessage,\n          );\n\n          if (index > -1) {\n            state[channel].recentUserMessages.splice(1, 1);\n          }\n\n          state[channel].recentUserMessages.unshift(normalizedMessage);\n\n          const newRecentUserMessages = sliceItemsByLimit(\n            state[channel].recentUserMessages,\n            RECENT_USER_MESSAGES_LIMIT,\n          );\n\n          state[channel].recentUserMessages = newRecentUserMessages;\n        });\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchRecentMessages.pending, (state, { meta: { arg } }) => {\n      const channel = arg;\n\n      if (!state[channel]) {\n        state[channel] = {\n          history: {\n            status: 'loading',\n            error: {},\n            items: [],\n            isAdded: false,\n          },\n          isEven: false,\n          items: [],\n          users: [],\n          recentUserMessages: [],\n        };\n      } else {\n        state[channel].history.status = 'loading';\n        state[channel].history.error = {};\n      }\n    });\n\n    builder.addCase(\n      fetchRecentMessages.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const channel = arg;\n\n        state[channel].history.status = 'success';\n        state[channel].history.items = payload.messages;\n      },\n    );\n\n    builder.addCase(\n      fetchRecentMessages.rejected,\n      (state, { error, meta: { arg } }) => {\n        const channel = arg;\n\n        state[channel].history.status = 'error';\n        state[channel].history.error = error;\n      },\n    );\n  },\n});\n\nexport const { clearChat } = messagesSlice.actions;\n\nexport default messagesSlice.reducer;\n\nconst { receiveMessagesAction } = messagesSlice.actions;\n\nconst normalizePayload = (\n  payload: ReceiveMessagePayload,\n  state: RootState,\n): ChatMessage | null => {\n  if (payload.type === 'message') {\n    return normalizeMessage(payload.message, state);\n  }\n\n  if (payload.type === 'notice') {\n    return normalizeNotice(payload.message);\n  }\n\n  if (payload.type === 'user-notice') {\n    return normalizeUserNotice(payload.message);\n  }\n\n  if (payload.type === 'own-message') {\n    return normalizeOwnMessage(payload.message, state);\n  }\n\n  return assertNever(payload);\n};\n\nexport const receiveMessage = (payload: ReceiveMessagePayload): AppThunk => (\n  dispatch,\n  getState,\n) => {\n  const state = getState();\n  const message = normalizePayload(payload, state);\n\n  if (!message) return;\n\n  // fetch a message card if any\n  if (message.type === 'message' && message.card) {\n    const card = messageCardSelector(message.card)(state);\n\n    if (!card || card.status === 'error') {\n      const { id, url } = message.card;\n      const params = { id, url };\n\n      if (message.card.type === 'twitch-clip') {\n        dispatch(fetchTwitchClip(params));\n      }\n\n      if (message.card.type === 'twitch-video') {\n        dispatch(fetchTwitchVideo(params));\n      }\n\n      if (message.card.type === 'youtube-video') {\n        dispatch(fetchYoutubeVideo(params));\n      }\n    }\n  }\n\n  const params = { messages: [message], channel: message.channel };\n\n  dispatch(receiveMessagesAction(params));\n};\n\nexport const addRecentMessages = (channel: string): AppThunk => (\n  dispatch,\n  getState,\n) => {\n  const state = getState();\n\n  const slicedRawHistory = sliceItemsByLimit(\n    state.messages[channel].history.items,\n    CHANNEL_MESSAGES_LIMIT,\n  );\n\n  const messages = normalizeHistoryMessages(slicedRawHistory, state);\n\n  dispatch(receiveMessagesAction({ messages, channel, type: 'history' }));\n};\n","import {\n  TWITCH_API_AUTH_BASE,\n  TWITCH_API_CLIENT_ID,\n  TWITCH_API_REDIRECT_URI,\n  LS_USER,\n} from 'utils/constants';\n\ntype StoredUser = {\n  id: string;\n  login: string;\n};\n\nconst authParams = {\n  client_id: TWITCH_API_CLIENT_ID,\n  redirect_uri: TWITCH_API_REDIRECT_URI,\n  response_type: 'token+id_token',\n  scope: [\n    'openid',\n    'channel:moderate',\n    'chat:edit',\n    'chat:read',\n    'whispers:read',\n    'whispers:edit',\n    'user_blocks_read',\n    'user_blocks_edit',\n    'user_subscriptions',\n  ].join('+'),\n  claims: JSON.stringify({\n    id_token: { email_verified: null, picture: null, preferred_username: null },\n  }),\n  // TODO:\n  // state: uid(),\n};\n\nexport const getAuthUrl = () => {\n  const search = Object.entries(authParams)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n\n  return `${TWITCH_API_AUTH_BASE}?${search}`;\n};\n\nexport const isAuthRedirect = (hash: string) =>\n  hash.startsWith('#access_token=');\n\nexport const writeUserToLocatStorage = (user: StoredUser) => {\n  localStorage.setItem(LS_USER, JSON.stringify(user));\n};\n\nexport const readUserFromLocatStorage = (): StoredUser | null => {\n  let user;\n\n  try {\n    user = JSON.parse(localStorage.getItem(LS_USER) as string);\n  } catch (e) {\n    user = null;\n  }\n\n  if (!user || !user.id || !user.login) return null;\n\n  return user as StoredUser;\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchResult } from 'utils/types';\nimport {\n  parseTwitchEmotes,\n  parseBttvGlobalEmotes,\n  parseBttvChannelEmotes,\n  parseFfzGlobalEmotes,\n  parseFfzChannelEmotes,\n} from 'features/chat/utils/parseApiResponse';\n\ntype EmotesState = {\n  twitch: FetchResult<Record<string, api.TwitchEmote[]>>;\n  bttv: {\n    global: FetchResult<api.BttvGlobalEmote[]>;\n    byChannels: Record<string, FetchResult<api.BttvChannelEmote[]>>;\n  };\n  ffz: {\n    global: FetchResult<api.FfzEmote[]>;\n    byChannels: Record<string, FetchResult<api.FfzEmote[]>>;\n  };\n};\n\nconst initialState: EmotesState = {\n  twitch: {\n    status: 'idle',\n    error: {},\n    items: {},\n  },\n  bttv: {\n    global: {\n      status: 'idle',\n      error: {},\n      items: [],\n    },\n    byChannels: {},\n  },\n  ffz: {\n    global: {\n      status: 'idle',\n      error: {},\n      items: [],\n    },\n    byChannels: {},\n  },\n};\n\nexport const fetchTwitchEmotes = createAsyncThunk(\n  'chat/fetchTwitchEmotes',\n  api.fetchTwitchEmotes,\n);\n\nexport const fetchBttvGlobalEmotes = createAsyncThunk(\n  'chat/fetchBttvGlobalEmotes',\n  api.fetchBttvGlobalEmotes,\n);\n\ntype FetchBttvChannelEmotesParams = {\n  channel: string;\n  channelId: string;\n};\n\nexport const fetchBttvChannelEmotes = createAsyncThunk(\n  'chat/fetchBttvChannelEmotes',\n  ({ channelId }: FetchBttvChannelEmotesParams) =>\n    api.fetchBttvChannelEmotes(channelId),\n);\n\nexport const fetchFfzGlobalEmotes = createAsyncThunk(\n  'chat/fetchFfzGlobalEmotes',\n  api.fetchFfzGlobalEmotes,\n);\n\ntype FetchFfzChannelEmotesParams = {\n  channel: string;\n  channelId: string;\n};\n\nexport const fetchFfzChannelEmotes = createAsyncThunk(\n  'chat/fetchFfzChannelEmotes',\n  ({ channelId }: FetchFfzChannelEmotesParams) =>\n    api.fetchFfzChannelEmotes(channelId),\n);\n\nconst emotes = createSlice({\n  name: 'emotes',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // twitch\n    builder.addCase(fetchTwitchEmotes.pending, (state) => {\n      state.twitch.status = 'loading';\n      state.twitch.error = {};\n    });\n\n    builder.addCase(fetchTwitchEmotes.fulfilled, (state, { payload }) => {\n      state.twitch.status = 'success';\n      state.twitch.items = parseTwitchEmotes(payload);\n    });\n\n    builder.addCase(fetchTwitchEmotes.rejected, (state, { error }) => {\n      state.twitch.status = 'error';\n      state.twitch.error = error;\n    });\n\n    // bttv global\n    builder.addCase(fetchBttvGlobalEmotes.pending, (state) => {\n      state.bttv.global.status = 'loading';\n      state.bttv.global.error = {};\n    });\n\n    builder.addCase(fetchBttvGlobalEmotes.fulfilled, (state, { payload }) => {\n      state.bttv.global.status = 'success';\n      state.bttv.global.items = parseBttvGlobalEmotes(payload);\n    });\n\n    builder.addCase(fetchBttvGlobalEmotes.rejected, (state, { error }) => {\n      state.bttv.global.status = 'error';\n      state.bttv.global.error = error;\n    });\n\n    // bttv channel\n    builder.addCase(\n      fetchBttvChannelEmotes.pending,\n      (state, { meta: { arg } }) => {\n        const { channel } = arg;\n\n        if (!state.bttv.byChannels[channel]) {\n          state.bttv.byChannels[channel] = {\n            status: 'loading',\n            error: {},\n            items: [],\n          };\n        } else {\n          state.bttv.byChannels[channel].status = 'loading';\n          state.bttv.byChannels[channel].error = {};\n        }\n      },\n    );\n\n    builder.addCase(\n      fetchBttvChannelEmotes.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.bttv.byChannels[channel].status = 'success';\n        state.bttv.byChannels[channel].items = parseBttvChannelEmotes(payload);\n      },\n    );\n\n    builder.addCase(\n      fetchBttvChannelEmotes.rejected,\n      (state, { error, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.bttv.byChannels[channel].status = 'error';\n        state.bttv.byChannels[channel].error = error;\n      },\n    );\n\n    // ffz global\n    builder.addCase(fetchFfzGlobalEmotes.pending, (state) => {\n      state.ffz.global.status = 'loading';\n      state.ffz.global.error = {};\n    });\n\n    builder.addCase(fetchFfzGlobalEmotes.fulfilled, (state, { payload }) => {\n      state.ffz.global.status = 'success';\n      state.ffz.global.items = parseFfzGlobalEmotes(payload);\n    });\n\n    builder.addCase(fetchFfzGlobalEmotes.rejected, (state, { error }) => {\n      state.ffz.global.status = 'error';\n      state.ffz.global.error = error;\n    });\n\n    // ffz channel\n    builder.addCase(\n      fetchFfzChannelEmotes.pending,\n      (state, { meta: { arg } }) => {\n        const { channel } = arg;\n\n        if (!state.ffz.byChannels[channel]) {\n          state.ffz.byChannels[channel] = {\n            status: 'loading',\n            error: {},\n            items: [],\n          };\n        } else {\n          state.ffz.byChannels[channel].status = 'loading';\n          state.ffz.byChannels[channel].error = {};\n        }\n      },\n    );\n\n    builder.addCase(\n      fetchFfzChannelEmotes.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.ffz.byChannels[channel].status = 'success';\n        state.ffz.byChannels[channel].items = parseFfzChannelEmotes(payload);\n      },\n    );\n\n    builder.addCase(\n      fetchFfzChannelEmotes.rejected,\n      (state, { error, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.ffz.byChannels[channel].status = 'error';\n        state.ffz.byChannels[channel].error = error;\n      },\n    );\n  },\n});\n\nexport default emotes.reducer;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport jwt from 'jsonwebtoken';\n\nimport { initializeAuth, fetchUser } from 'features/auth/authSlice';\nimport { isAuthReadySelector } from 'features/auth/authSelectors';\nimport { readUserFromLocatStorage } from 'features/auth/authUtils';\n\nconst useInitializeAuth = () => {\n  const dispatch = useDispatch();\n  const isAuthReady = useSelector(isAuthReadySelector);\n\n  useEffect(() => {\n    if (isAuthReady) return;\n\n    const { idToken } = localStorage;\n    const user = readUserFromLocatStorage();\n\n    if (!idToken) {\n      dispatch(initializeAuth({ isAuth: false }));\n      return;\n    }\n\n    if (user) {\n      const { id, login } = user;\n      const params = { isAuth: true, userId: id, userLogin: login };\n\n      dispatch(initializeAuth(params));\n    } else {\n      const jwtData = jwt.decode(idToken);\n\n      if (jwtData) {\n        dispatch(fetchUser(jwtData.sub));\n      } else {\n        dispatch(initializeAuth({ isAuth: false }));\n      }\n    }\n  }, [dispatch, isAuthReady]);\n};\n\nexport default useInitializeAuth;\n","import type { RootState } from 'app/rootReducer';\nimport { currentChannelSelector } from 'features/chat/chatSelectors';\n\nexport const messagesSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.items || [];\n\nexport const usersSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.users || [];\n\nexport const recentUserMessagesSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.recentUserMessages || [];\n\nexport const isHistoryLoadedSelector = (state: RootState) => {\n  const currentChannel = currentChannelSelector(state);\n\n  return (\n    state.messages[currentChannel]?.history.status === 'success' ||\n    state.messages[currentChannel]?.history.status === 'error' ||\n    false\n  );\n};\n\nexport const isHistoryAddedSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.history.isAdded || false;\n\nexport const isEvenSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.isEven || false;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  currentChannelSelector,\n  currentChannelIdSelector,\n} from 'features/chat/chatSelectors';\nimport {\n  isHistoryAddedSelector,\n  isHistoryLoadedSelector,\n} from 'features/messages/messagesSelectors';\nimport {\n  isTwitchEmotesLoadedSelector,\n  isBttvGlobalEmotesLoadedSelector,\n  isBttvChannelEmotesLoadedSelector,\n  isFfzGlobalEmotesLoadedSelector,\n  isFfzChannelEmotesLoadedSelector,\n} from 'features/emotes/emotesSelectors';\nimport {\n  isGlobalBadgesLoadedSelector,\n  isChannelBadgesLoadedSelector,\n} from 'features/badges/badgesSelectors';\nimport { isBlockedUsersLoadedSelector } from 'features/blockedUsers/blockedUsersSelectors';\nimport {\n  isAuthReadySelector,\n  isAuthSelector,\n  userIdSelector,\n} from 'features/auth/authSelectors';\nimport {\n  addRecentMessages,\n  fetchRecentMessages,\n} from 'features/messages/messagesSlice';\nimport {\n  fetchTwitchEmotes,\n  fetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes,\n  fetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes,\n} from 'features/emotes/emotesSlice';\nimport {\n  fetchChannelBadges,\n  fetchGlobalBadges,\n} from 'features/badges/badgesSlice';\nimport { fetchBlockedUsers } from 'features/blockedUsers/blockedUsersSlice';\n\nconst useFetchChatData = () => {\n  const dispatch = useDispatch();\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n  const userId = useSelector(userIdSelector);\n  const currentChannel = useSelector(currentChannelSelector);\n  const currentChannelId = useSelector(currentChannelIdSelector);\n\n  const isTwitchEmotesLoaded = useSelector(isTwitchEmotesLoadedSelector);\n  const isBttvGlobalEmotesLoaded = useSelector(\n    isBttvGlobalEmotesLoadedSelector,\n  );\n  const isBttvChannelEmotesLoaded = useSelector(\n    isBttvChannelEmotesLoadedSelector,\n  );\n  const isFfzGlobalEmotesLoaded = useSelector(isFfzGlobalEmotesLoadedSelector);\n  const isFfzChannelEmotesLoaded = useSelector(\n    isFfzChannelEmotesLoadedSelector,\n  );\n  const isGlobalBadgesLoaded = useSelector(isGlobalBadgesLoadedSelector);\n  const isChannelBadgesLoaded = useSelector(isChannelBadgesLoadedSelector);\n  const isHistoryLoaded = useSelector(isHistoryLoadedSelector);\n  const isBlockedUsersLoaded = useSelector(isBlockedUsersLoadedSelector);\n  const isHistoryAdded = useSelector(isHistoryAddedSelector);\n\n  const isAllEmotesLoaded =\n    (isAuth ? isTwitchEmotesLoaded : true) &&\n    isBttvGlobalEmotesLoaded &&\n    isBttvChannelEmotesLoaded &&\n    isFfzGlobalEmotesLoaded &&\n    isFfzChannelEmotesLoaded;\n\n  const isReadyToAddHistory =\n    isAuthReady &&\n    currentChannel &&\n    !isHistoryAdded &&\n    isAllEmotesLoaded &&\n    (isAuth ? isBlockedUsersLoaded : true) &&\n    isGlobalBadgesLoaded &&\n    isChannelBadgesLoaded &&\n    isHistoryLoaded;\n\n  useEffect(() => {\n    dispatch(fetchBttvGlobalEmotes());\n    dispatch(fetchFfzGlobalEmotes());\n    dispatch(fetchGlobalBadges());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (isReadyToAddHistory) {\n      dispatch(addRecentMessages(currentChannel));\n    }\n  }, [dispatch, currentChannel, isReadyToAddHistory]);\n\n  useEffect(() => {\n    if (!isHistoryAdded && currentChannel) {\n      dispatch(fetchRecentMessages(currentChannel));\n    }\n  }, [dispatch, currentChannel, isHistoryAdded]);\n\n  useEffect(() => {\n    if (isAuthReady && isAuth && userId) {\n      dispatch(fetchTwitchEmotes(userId));\n      dispatch(fetchBlockedUsers(userId));\n    }\n  }, [dispatch, isAuthReady, isAuth, userId]);\n\n  // TODO: check if emotes and badges is already in the store\n\n  useEffect(() => {\n    if (currentChannel && currentChannelId) {\n      const params = {\n        channel: currentChannel,\n        channelId: currentChannelId,\n      };\n\n      dispatch(fetchBttvChannelEmotes(params));\n      dispatch(fetchFfzChannelEmotes(params));\n      dispatch(fetchChannelBadges(params));\n    }\n  }, [dispatch, currentChannel, currentChannelId]);\n};\n\nexport default useFetchChatData;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { LS_LAST_CHANNEL } from 'utils/constants';\nimport { updateCurrentChannel } from 'features/chat/chatSlice';\n\n// TODO: remove lastChannel if can't connect to the channel\n\nconst useCurrentChannel = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { hash } = history.location;\n\n  useEffect(() => {\n    if (hash && hash.length > 1) {\n      const channel = hash.slice(1);\n\n      dispatch(updateCurrentChannel(channel));\n\n      localStorage.setItem(LS_LAST_CHANNEL, channel);\n\n      document.title = channel\n        ? `#${channel} - ${process.env.REACT_APP_NAME} `\n        : (process.env.REACT_APP_NAME as string);\n\n      return;\n    }\n\n    const lastChannel = localStorage.getItem(LS_LAST_CHANNEL);\n\n    if (lastChannel) {\n      history.push({ pathname: '/chat/', hash: lastChannel });\n\n      dispatch(updateCurrentChannel(lastChannel));\n    } else {\n      dispatch(updateCurrentChannel(''));\n    }\n  }, [dispatch, history, hash]);\n};\n\nexport default useCurrentChannel;\n","import emojisMap from 'features/emotes/emojisMap.json';\n\nconst replaceEmojis = (text: string) =>\n  text\n    .split(' ')\n    .map((word: string) => {\n      if (word[0] !== ':' || word[word.length - 1] !== ':') {\n        return word;\n      }\n\n      const name = word.slice(1, -1);\n      const emoji = emojisMap[name];\n\n      return emoji && emoji.char ? emoji.char : word;\n    })\n    .join(' ');\n\nexport default replaceEmojis;\n","import { useEffect, useRef, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as twitchIrc from '@honeykingdom/twitch-simple-irc';\nimport { usePrevious } from 'react-use';\n\nimport { NOTICE_MESSAGE_TAGS, LS_ACCESS_TOKEN } from 'utils/constants';\nimport {\n  updateIsConnected,\n  updateGlobalUserParams,\n  updateUserParams,\n  updateRoomParams,\n} from 'features/chat/chatSlice';\nimport { receiveMessage, clearChat } from 'features/messages/messagesSlice';\nimport { invalidateAuth } from 'features/auth/authSlice';\nimport {\n  currentChannelSelector,\n  isConnectedSelector,\n} from 'features/chat/chatSelectors';\nimport {\n  isAuthSelector,\n  isAuthReadySelector,\n  userLoginSelector,\n} from 'features/auth/authSelectors';\nimport replaceEmojis from 'features/messages/utils/replaceEmojis';\n\nconst useTwitchClient = () => {\n  const dispatch = useDispatch();\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n  const userLogin = useSelector(userLoginSelector);\n  const isConnected = useSelector(isConnectedSelector);\n  const currentChannel = useSelector(currentChannelSelector);\n  const prevChannel = usePrevious(currentChannel);\n  const clientRef = useRef<twitchIrc.Client | null>(null);\n\n  const registerEvents = useCallback(\n    (client: typeof clientRef) => {\n      if (!client.current) return;\n\n      const handleRegister = () => dispatch(updateIsConnected(true));\n\n      const handleDisconnect = () => dispatch(updateIsConnected(false));\n\n      const handleGlobalUserState = (data: twitchIrc.GlobalUserStateEvent) =>\n        dispatch(updateGlobalUserParams(data));\n\n      const handleUserState = (data: twitchIrc.UserStateEvent) =>\n        dispatch(updateUserParams(data));\n\n      const handleRoomState = (data: twitchIrc.RoomStateEvent) =>\n        dispatch(updateRoomParams(data));\n\n      const handleMessage = (message: twitchIrc.MessageEvent) => {\n        dispatch(receiveMessage({ type: 'message', message }));\n      };\n\n      const handleNotice = (message: twitchIrc.NoticeEvent) => {\n        if (\n          client.current &&\n          message.message === 'Login authentication failed'\n        ) {\n          dispatch(invalidateAuth());\n          // eslint-disable-next-line no-param-reassign\n          client.current = null;\n          return;\n        }\n\n        dispatch(receiveMessage({ type: 'notice', message }));\n      };\n\n      const handleUserNotice = (message: twitchIrc.UserNoticeEvent) =>\n        dispatch(receiveMessage({ type: 'user-notice', message }));\n\n      const handleClearChat = (data: twitchIrc.ClearChatEvent) => {\n        if (!data.tags.targetUserId) return;\n        dispatch(clearChat(data));\n      };\n\n      client.current.on('register', handleRegister);\n      client.current.on('disconnect', handleDisconnect);\n      client.current.on('globaluserstate', handleGlobalUserState);\n      client.current.on('userstate', handleUserState);\n      client.current.on('roomstate', handleRoomState);\n      client.current.on('message', handleMessage);\n      client.current.on('notice', handleNotice);\n      client.current.on('usernotice', handleUserNotice);\n      client.current.on('clearchat', handleClearChat);\n    },\n    [dispatch],\n  );\n\n  useEffect(\n    () => () => {\n      if (clientRef.current) {\n        clientRef.current = null;\n      }\n    },\n    [clientRef],\n  );\n\n  useEffect(() => {\n    if (!currentChannel || !isAuthReady) return;\n\n    if (!clientRef.current) {\n      const options = isAuth\n        ? {\n            name: userLogin as string,\n            auth: localStorage.getItem(LS_ACCESS_TOKEN) as string,\n          }\n        : null;\n\n      (async () => {\n        clientRef.current = twitchIrc.Client.create(options);\n\n        registerEvents(clientRef);\n\n        await clientRef.current.connect();\n\n        clientRef.current.join(currentChannel);\n      })();\n\n      return;\n    }\n\n    if (prevChannel && prevChannel !== currentChannel) {\n      clientRef.current.part(prevChannel);\n      clientRef.current.join(currentChannel);\n    }\n  }, [\n    dispatch,\n    registerEvents,\n    isAuth,\n    isAuthReady,\n    isConnected,\n    userLogin,\n    currentChannel,\n    prevChannel,\n  ]);\n\n  const sendMessage = useCallback(\n    (channel: string, message: string) => {\n      if (!clientRef.current || !message.trim()) return;\n\n      const normalizedMessage = replaceEmojis(message.trim());\n\n      clientRef.current.say(channel, normalizedMessage);\n\n      function handleUserState(data: twitchIrc.UserStateEvent) {\n        if (data.channel === channel) {\n          const ownMessage = {\n            message: normalizedMessage,\n            channel,\n            tags: data.tags,\n          };\n\n          dispatch(\n            receiveMessage({ type: 'own-message', message: ownMessage }),\n          );\n\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          removeListeners();\n        }\n      }\n\n      function handleNotice(data: twitchIrc.NoticeEvent) {\n        if (\n          data.channel === channel &&\n          NOTICE_MESSAGE_TAGS.includes(data.tags.msgId)\n        ) {\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          removeListeners();\n        }\n      }\n\n      function removeListeners() {\n        if (!clientRef.current) return;\n\n        clientRef.current.off('notice', handleNotice);\n        clientRef.current.off('userstate', handleUserState);\n      }\n\n      clientRef.current.on('notice', handleNotice);\n      clientRef.current.on('userstate', handleUserState);\n\n      setTimeout(() => removeListeners(), 10000);\n    },\n    [clientRef, dispatch],\n  );\n\n  return { sendMessage };\n};\n\nexport default useTwitchClient;\n","const getUsersByBeginText = (\n  beginText: string,\n  users: string[],\n  currentUserLogin: string | null,\n  limit = 5,\n) => {\n  const result = [];\n  const beginTextLower = beginText.toLowerCase();\n  const currentUserLoginLower = (currentUserLogin || '').toLowerCase();\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const name of users) {\n    if (result.length === limit) return result;\n\n    const nameLower = name.toLowerCase();\n\n    if (\n      (beginTextLower === '' || nameLower.startsWith(beginTextLower)) &&\n      nameLower !== currentUserLoginLower\n    ) {\n      result.push(name);\n    }\n  }\n\n  return result;\n};\n\nexport default getUsersByBeginText;\n","import * as htmlEntity from 'features/messages/utils/htmlEntity';\n\ntype ASuggestions = {\n  isActive: boolean;\n  activeIndex: number;\n  start: number;\n  end: number;\n};\ntype UserSuggestions = ASuggestions & {\n  type: 'users';\n  items: string[];\n};\ntype EmoteSuggestions = ASuggestions & {\n  type: 'emotes';\n  items: htmlEntity.Emote[];\n};\nexport type SuggestionsState = UserSuggestions | EmoteSuggestions;\n\nexport const suggestionsInitialState: SuggestionsState = {\n  type: 'users',\n  isActive: false,\n  items: [],\n  activeIndex: 0,\n  start: 0,\n  end: 0,\n};\n\nexport const setSuggestionsIndexUp = (\n  state: SuggestionsState,\n): SuggestionsState => ({\n  ...state,\n  activeIndex:\n    state.activeIndex === 0 ? state.items.length - 1 : state.activeIndex - 1,\n});\n\nexport const setSuggestionsIndexDown = (\n  state: SuggestionsState,\n): SuggestionsState => ({\n  ...state,\n  activeIndex:\n    state.activeIndex === state.items.length - 1 ? 0 : state.activeIndex + 1,\n});\n\nexport const replaceSuggestionText = (\n  text: string,\n  { type, items, activeIndex, start, end }: SuggestionsState,\n) => {\n  if (items.length === 0) return text;\n\n  const currentItem = items[activeIndex];\n  const insertedText =\n    type === 'users'\n      ? `@${currentItem}`\n      : (currentItem as htmlEntity.Emote).alt;\n\n  const textBefore = text.substring(0, start);\n  const testAfter = text.substring(end) || ' ';\n\n  return `${textBefore}${insertedText}${testAfter}`;\n};\n","import { useState, useRef, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useSetState } from 'react-use';\n\nimport { SUGGESTION_TYPES } from 'utils/constants';\nimport getUsersByBeginText from 'features/chat/utils/getUsersByBeginText';\nimport {\n  suggestionsInitialState,\n  setSuggestionsIndexUp,\n  setSuggestionsIndexDown,\n  replaceSuggestionText,\n} from 'features/chat/utils/suggestions';\nimport getEmotesByText from 'features/emotes/utils/getEmotesByText';\n\nimport { userLoginSelector } from 'features/auth/authSelectors';\nimport {\n  usersSelector,\n  recentUserMessagesSelector,\n} from 'features/messages/messagesSelectors';\nimport { currentChannelSelector } from 'features/chat/chatSelectors';\nimport { emotesSelector } from 'features/emotes/emotesSelectors';\n\nconst useChatInput = (\n  sendMessage: (channel: string, message: string) => void,\n  chatInputRef: React.RefObject<HTMLTextAreaElement>,\n) => {\n  const [inputText, setInputText] = useState('');\n  const [suggestions, setSuggestions] = useSetState(suggestionsInitialState);\n  const [recentUserMessagesIndex, setRecentUserMessagesIndex] = useState(-1);\n\n  const userLogin = useSelector(userLoginSelector);\n  const emotes = useSelector(emotesSelector);\n  const users = useSelector(usersSelector);\n  const currentChannel = useSelector(currentChannelSelector);\n  const recentUserMessages = useSelector(recentUserMessagesSelector);\n\n  const handleSendMessage = useCallback(() => {\n    sendMessage(currentChannel, inputText);\n    setInputText('');\n    setRecentUserMessagesIndex(-1);\n  }, [currentChannel, sendMessage, inputText]);\n\n  const getDeps = () => ({\n    chatInputRef,\n    inputText,\n    setInputText,\n    suggestions,\n    setSuggestions,\n    recentUserMessagesIndex,\n    setRecentUserMessagesIndex,\n    emotes,\n    users,\n    recentUserMessages: [...recentUserMessages, ''],\n    handleSendMessage,\n  });\n\n  const deps = useRef({} as ReturnType<typeof getDeps>);\n\n  deps.current = getDeps();\n\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      const d = deps.current;\n      const { value, selectionStart } = e.target;\n\n      d.setInputText(value);\n\n      const spaceIndexBefore = value.lastIndexOf(' ', selectionStart - 1);\n      const spaceIndexAfter = value.indexOf(' ', selectionStart);\n\n      const start = spaceIndexBefore === -1 ? 0 : spaceIndexBefore + 1;\n      const end = spaceIndexAfter === -1 ? value.length : spaceIndexAfter;\n\n      const word = value.substring(start, end);\n\n      const usersMatch = SUGGESTION_TYPES.users.regex.exec(word);\n\n      if (usersMatch) {\n        const [, beginText] = usersMatch;\n        const items = getUsersByBeginText(\n          beginText,\n          d.users,\n          userLogin,\n          SUGGESTION_TYPES.users.limit,\n        );\n\n        d.setSuggestions({\n          type: 'users',\n          isActive: true,\n          items,\n          activeIndex: 0,\n          start,\n          end,\n        });\n\n        return;\n      }\n\n      const emotesMatch = SUGGESTION_TYPES.emotes.regex.exec(word);\n\n      if (emotesMatch && d.emotes) {\n        const [, text] = emotesMatch;\n        const items = getEmotesByText(\n          text,\n          d.emotes,\n          SUGGESTION_TYPES.emotes.limit,\n        );\n\n        d.setSuggestions({\n          type: 'emotes',\n          isActive: true,\n          items,\n          activeIndex: 0,\n          start,\n          end,\n        });\n\n        return;\n      }\n\n      if (d.suggestions.isActive) {\n        d.setSuggestions(suggestionsInitialState);\n      }\n    },\n    [userLogin],\n  );\n\n  const handleKeyUp = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {},\n    [],\n  );\n\n  const handleKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n      const d = deps.current;\n\n      if (d.suggestions.isActive) {\n        if (e.key === 'Enter' || e.key === 'Tab') {\n          e.preventDefault();\n          d.setInputText((t) => replaceSuggestionText(t, d.suggestions));\n          d.setSuggestions(suggestionsInitialState);\n\n          return;\n        }\n\n        if (e.key === 'ArrowUp') {\n          e.preventDefault();\n          d.setSuggestions(setSuggestionsIndexUp);\n          return;\n        }\n\n        if (e.key === 'ArrowDown') {\n          e.preventDefault();\n          d.setSuggestions(setSuggestionsIndexDown);\n          return;\n        }\n\n        if (e.key === 'Escape') {\n          d.setSuggestions({ isActive: false });\n          return;\n        }\n      }\n\n      if (!d.suggestions.isActive) {\n        if (e.key === 'Enter') {\n          e.preventDefault();\n          d.handleSendMessage();\n          return;\n        }\n\n        if (e.key === 'ArrowUp') {\n          const isCaretAtBegin =\n            (e.target as HTMLTextAreaElement).selectionStart === 0;\n\n          if (!isCaretAtBegin) return;\n          if (d.recentUserMessagesIndex >= d.recentUserMessages.length - 1)\n            return;\n\n          const newIndex = d.recentUserMessagesIndex + 1;\n\n          d.setInputText(d.recentUserMessages[newIndex]);\n          d.setRecentUserMessagesIndex(newIndex);\n\n          return;\n        }\n\n        if (e.key === 'ArrowDown') {\n          const isCaretAtEnd =\n            (e.target as HTMLTextAreaElement).selectionStart ===\n            (e.target as HTMLTextAreaElement).defaultValue.length;\n\n          if (!isCaretAtEnd) return;\n          if (d.recentUserMessagesIndex <= 0) return;\n\n          const newIndex = d.recentUserMessagesIndex - 1;\n\n          d.setInputText(d.recentUserMessages[newIndex]);\n          d.setRecentUserMessagesIndex(newIndex);\n\n          // eslint-disable-next-line no-useless-return\n          return;\n        }\n      }\n    },\n    [deps],\n  );\n\n  const handleSuggestionMouseEnter = useCallback(\n    (activeIndex: number) => setSuggestions({ activeIndex }),\n    [setSuggestions],\n  );\n\n  const handleSuggestionClick = useCallback(\n    (activeIndex: number) => {\n      const d = deps.current;\n\n      d.setInputText((t) =>\n        replaceSuggestionText(t, { ...d.suggestions, activeIndex }),\n      );\n\n      if (d.chatInputRef.current) {\n        d.chatInputRef.current.focus();\n      }\n\n      d.setSuggestions(suggestionsInitialState);\n    },\n    [deps],\n  );\n\n  const handleBlur = useCallback(() => {\n    setSuggestions({ isActive: false });\n  }, [setSuggestions]);\n\n  const handleNameRightClick = useCallback(\n    (name: string) => {\n      const d = deps.current;\n      d.setInputText((t) => `${t.trim()} @${name} `.trimLeft());\n\n      if (d.chatInputRef.current) {\n        d.chatInputRef.current.focus();\n      }\n    },\n    [deps],\n  );\n\n  const handleEmoteClick = useCallback(\n    (name: string) => {\n      const d = deps.current;\n\n      d.setInputText((t) => `${t.trim()} ${name} `.trimLeft());\n    },\n    [deps],\n  );\n\n  return {\n    inputText,\n    suggestions,\n    handleSendMessage,\n    handleChange,\n    handleKeyUp,\n    handleKeyDown,\n    handleBlur,\n    handleSuggestionMouseEnter,\n    handleSuggestionClick,\n    handleNameRightClick,\n    handleEmoteClick,\n  };\n};\n\nexport default useChatInput;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M8.5 10L4 5.5 5.5 4 10 8.5 14.5 4 16 5.5 11.5 10l4.5 4.5-1.5 1.5-4.5-4.5L5.5 16 4 14.5 8.5 10z\"\n});\n\nfunction SvgClose({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref);\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgClose);\nexport default __webpack_public_path__ + \"static/media/close.e62b63c9.svg\";\nexport { ForwardRef as ReactComponent };","import styled, { css } from 'styled-components';\n\nconst sizes = {\n  small: css`\n    width: 24px;\n    height: 24px;\n  `,\n  medium: css`\n    width: 30px;\n    height: 30px;\n  `,\n  // large: css``,\n};\n\nconst IconButton = styled.button.attrs({\n  type: 'button',\n})<{ $size?: 'small' | 'medium' }>`\n  margin: 0;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: none;\n  border: none;\n  outline: none;\n  color: #fff;\n  border-radius: 4px;\n  cursor: pointer;\n\n  ${(p) => sizes[p.$size || 'medium']};\n\n  &:hover,\n  &:focus {\n    background-color: rgba(255, 255, 255, 0.15);\n  }\n\n  &:active {\n    background-color: rgba(255, 255, 255, 0.2);\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n`;\n\nexport default IconButton;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { ReactComponent as CloseIconSvg } from 'icons/close.svg';\nimport IconButton from 'components/IconButton';\n\nconst ChatModalRoot = styled.div`\n  height: 100%;\n  box-shadow: rgba(0, 0, 0, 0.4) 0px 4px 8px 0px,\n    rgba(0, 0, 0, 0.4) 0px 0px 4px 0px;\n  background-color: #18181b;\n  white-space: normal;\n  color: #fff;\n  border-radius: 4px;\n`;\nconst CloseButton = styled(IconButton).attrs({ $size: 'small' })`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n`;\nconst CloseIcon = styled(CloseIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  children: React.ReactNode;\n  onClose: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n};\n\nconst ChatModal = ({ children, onClose }: Props) => (\n  <ChatModalRoot>\n    <CloseButton onClick={onClose}>\n      <CloseIcon />\n    </CloseButton>\n    {children}\n  </ChatModalRoot>\n);\n\nexport default ChatModal;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"currentColor\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M7 11a1 1 0 100-2 1 1 0 000 2zm7-1a1 1 0 11-2 0 1 1 0 012 0zm-4 4a2 2 0 002-2H8a2 2 0 002 2z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-2 0a6 6 0 11-12 0 6 6 0 0112 0z\",\n  clipRule: \"evenodd\"\n}));\n\nfunction SvgSmileyFace({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref);\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSmileyFace);\nexport default __webpack_public_path__ + \"static/media/smiley-face.7ed6fdde.svg\";\nexport { ForwardRef as ReactComponent };","import CustomScrollbar from 'react-scrollbars-custom';\nimport styled from 'styled-components';\n\nconst Scrollbar = styled(CustomScrollbar).attrs({\n  disableTracksWidthCompensation: true,\n})`\n  overflow-y: auto;\n\n  .ScrollbarsCustom-Content {\n    padding: 0 !important;\n  }\n\n  .ScrollbarsCustom-TrackY {\n    background: none !important;\n  }\n\n  .ScrollbarsCustom-ThumbY {\n    margin-left: auto;\n    margin-right: auto;\n    width: 6px !important;\n  }\n`;\n\nexport default Scrollbar;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  fillRule: \"evenodd\",\n  d: \"M13.192 14.606a7 7 0 111.414-1.414l3.101 3.1-1.414 1.415-3.1-3.1zM14 9A5 5 0 114 9a5 5 0 0110 0z\",\n  clipRule: \"evenodd\"\n});\n\nfunction SvgSearch({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref);\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSearch);\nexport default __webpack_public_path__ + \"static/media/search.46b92e63.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport type { RootState } from 'app/rootReducer';\nimport Scrollbar from 'components/Scrollbar';\nimport { emoteCategoriesSelector } from 'features/emotes/emotesSelectors';\nimport type { EmoteCategory } from 'features/emotes/utils/createEmoteCategories';\nimport { ReactComponent as SearchIconSvg } from 'icons/search.svg';\n\nconst EmotePickerRoot = styled.div`\n  padding-top: 30px;\n  padding-bottom: 16px;\n  height: 100%;\n`;\nconst Categories = styled.div`\n  height: calc(100% - 30px);\n`;\nconst Category = styled.div`\n  padding-top: 10px;\n  padding-right: 16px;\n  padding-left: 16px;\n\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding-bottom: 10px;\n  font-size: 12px;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst CategoryItems = styled.div``;\nconst Emote = styled.img`\n  padding: 2px;\n  width: 32px;\n  height: 32px;\n  object-fit: contain;\n\n  &:hover {\n    background-color: rgba(119, 44, 232, 0.2);\n    cursor: pointer;\n  }\n`;\nconst SearchBlock = styled.div`\n  position: relative;\n  padding: 0 16px;\n  color: #adadb8;\n`;\nconst SearchInput = styled.input`\n  padding-left: 30px;\n  padding-right: 10px;\n  width: 100%;\n  height: 30px;\n  color: #efeff1;\n  font-family: inherit;\n  line-height: 1.5;\n  background-clip: padding-box;\n  background-color: rgba(255, 255, 255, 0.15);\n  border: 2px solid rgba(255, 255, 255, 0.15);\n  outline: 0;\n  border-radius: 4px;\n  appearance: none;\n  transition: box-shadow 0.1s ease-in, border 0.1s ease-in,\n    background-color 0.1s ease-in;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n`;\nconst SearchIcon = styled(SearchIconSvg)`\n  position: absolute;\n  top: 50%;\n  left: 21px;\n  display: block;\n  width: 20px;\n  height: 20px;\n  transform: translateY(-50%);\n`;\n\ntype Props = {\n  onEmoteClick: (name: string) => void;\n};\n\nconst EmotePicker = ({ onEmoteClick }: Props) => {\n  const [search, setSearch] = useState('');\n  const searchInputRef = useRef<HTMLInputElement>(null);\n  const emoteCategories = useSelector((state: RootState) =>\n    emoteCategoriesSelector(state, search),\n  );\n\n  useEffect(() => {\n    if (searchInputRef.current) {\n      searchInputRef.current.focus();\n    }\n\n    return () => setSearch('');\n  }, []);\n\n  const renderCategory = ({ title, items }: EmoteCategory, key: number) => (\n    <Category key={key}>\n      {!!title && <CategoryHeader>{title}</CategoryHeader>}\n      <CategoryItems>\n        {items.map(({ alt, src, srcSet }) => (\n          <Emote\n            key={alt}\n            alt={alt}\n            src={src}\n            srcSet={srcSet}\n            onClick={() => onEmoteClick(alt)}\n          />\n        ))}\n      </CategoryItems>\n    </Category>\n  );\n\n  return (\n    <EmotePickerRoot>\n      <SearchBlock>\n        <SearchIcon />\n        <SearchInput\n          ref={searchInputRef}\n          placeholder=\"Search for Emotes\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n        />\n      </SearchBlock>\n      <Categories>\n        <Scrollbar>{emoteCategories.map(renderCategory)}</Scrollbar>\n      </Categories>\n    </EmotePickerRoot>\n  );\n};\n\nexport default EmotePicker;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport useOnClickOutside from 'react-cool-onclickoutside';\n\nimport ChatModal from 'components/ChatModal';\nimport IconButton from 'components/IconButton';\nimport { ReactComponent as SmileyFaceIconSvg } from 'icons/smiley-face.svg';\nimport EmotePicker from 'features/emotes/EmotePicker';\nimport type { SuggestionsState } from 'features/chat/utils/suggestions';\nimport { isEmotesLoadedSelector } from 'features/emotes/emotesSelectors';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\n\nconst ChatInputRoot = styled.div`\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n  background-color: #18181b;\n\n  & > :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nconst ChatInputInner = styled.div`\n  position: relative;\n`;\nconst Suggestions = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 100%;\n  margin-left: -5px;\n  margin-bottom: -5px;\n  margin-right: -5px;\n  margin-bottom: 0;\n  padding-top: 10px;\n  padding-bottom: 5px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border: 1px solid rgba(255, 255, 255, 0.15);\n  border-bottom: none;\n  background-color: #18181b;\n  color: #fff;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n  /* box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15), 0 0px 2px rgba(0, 0, 0, 0.1); */\n`;\nconst SuggestionItem = styled.div<{ $isActive: boolean }>`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border-radius: 2px;\n  background-color: ${(p) =>\n    p.$isActive ? 'rgba(255, 255, 255, 0.15)' : 'transparent'};\n  cursor: pointer;\n`;\nconst SuggestionImage = styled.img`\n  margin-right: 8px;\n  width: 28px;\n  height: 28px;\n  object-fit: contain;\n`;\nconst TextareaInput = styled.div`\n  position: relative;\n`;\nconst TextareaWrapper = styled.div<{ $isSuggestions: boolean }>`\n  ${(p) =>\n    p.$isSuggestions &&\n    css`\n      margin-left: -5px;\n      margin-bottom: -5px;\n      margin-right: -5px;\n      padding: 5px;\n      border: 1px solid rgba(255, 255, 255, 0.15);\n      border-top: none;\n      border-bottom-left-radius: 6px;\n      border-bottom-right-radius: 6px;\n      /* box-shadow: 0 2px 3px -1px rgba(0, 0, 0, 0.1),\n        0 2px 2px -2px rgba(0, 0, 0, 0.02); */\n\n      & > ${TextareaInput} {\n        margin-left: -1px;\n        margin-bottom: -1px;\n        margin-right: -1px;\n      }\n    `};\n`;\nconst EmotesModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 0;\n  bottom: 100%;\n  margin-bottom: 8px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nconst Textarea = styled(TextareaAutosize)<{ $showScroll: boolean }>`\n  display: block;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  padding-left: 10px;\n  padding-right: 32px;\n  width: 100%;\n  height: 38px;\n  max-height: 91px;\n  min-height: 40px;\n  overflow-x: hidden;\n  overflow-y: ${(p) => (p.$showScroll ? 'auto' : 'hidden')};\n  border: 2px solid transparent;\n  background-color: rgba(255, 255, 255, 0.15);\n  font-family: inherit;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\nconst EmotesButton = styled(IconButton)`\n  position: absolute;\n  right: 5px;\n  bottom: 5px;\n`;\nconst SmileyFaceIcon = styled(SmileyFaceIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  text: string;\n  suggestions: SuggestionsState;\n  isDisabled: boolean;\n  onEmoteClick: (name: string) => void;\n  onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onKeyUp: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur: () => void;\n  onSuggestionMouseEnter: (index: number) => void;\n  onSuggestionClick: (index: number) => void;\n};\n\nconst ChatInput = React.forwardRef<HTMLTextAreaElement, Props>(\n  (\n    {\n      text,\n      suggestions,\n      isDisabled,\n      onEmoteClick,\n      onChange,\n      onKeyUp,\n      onKeyDown,\n      onBlur,\n      onSuggestionMouseEnter,\n      onSuggestionClick,\n    },\n    textareaRef,\n  ) => {\n    const suggestionsRef = useRef<HTMLDivElement>(null);\n\n    useOnClickOutside(() => onBlur(), {\n      refs: [textareaRef as React.RefObject<HTMLElement>, suggestionsRef],\n    });\n\n    const [isShowTextareaScroll, setIsShowTextareaScroll] = useState(false);\n    const [isEmotesModalVisible, setIsEmotesModalVisible] = useState(false);\n    const isEmotesLoaded = useSelector(isEmotesLoadedSelector);\n    const handleCloseEmotesModal = () => setIsEmotesModalVisible(false);\n\n    const chatInputRef = useOnClickOutside(handleCloseEmotesModal);\n\n    const renderSuggestions = ({\n      type,\n      items,\n      activeIndex,\n    }: SuggestionsState) => {\n      const renderUser = (name: string, index: number) => (\n        <SuggestionItem\n          key={name}\n          $isActive={index === activeIndex}\n          onMouseEnter={() => onSuggestionMouseEnter(index)}\n          onClick={() => onSuggestionClick(index)}\n        >\n          {name}\n        </SuggestionItem>\n      );\n\n      const renderEmote = (\n        { src, srcSet, alt }: htmlEntity.Emote,\n        index: number,\n      ) => (\n        <SuggestionItem\n          key={alt}\n          $isActive={index === activeIndex}\n          onMouseEnter={() => onSuggestionMouseEnter(index)}\n          onClick={() => onSuggestionClick(index)}\n        >\n          <SuggestionImage src={src} srcSet={srcSet} alt={alt} />\n          {alt}\n        </SuggestionItem>\n      );\n\n      const renderItems = () =>\n        type === 'users'\n          ? (items as string[]).map(renderUser)\n          : (items as htmlEntity.Emote[]).map(renderEmote);\n\n      return (\n        <Suggestions ref={suggestionsRef}>\n          {items.length ? renderItems() : 'No matches'}\n        </Suggestions>\n      );\n    };\n\n    const renderEmotesButton = () => (\n      <EmotesButton\n        onClick={() => setIsEmotesModalVisible(!isEmotesModalVisible)}\n      >\n        <SmileyFaceIcon />\n      </EmotesButton>\n    );\n\n    const renderEmotesModal = () => (\n      <EmotesModal>\n        <ChatModal onClose={handleCloseEmotesModal}>\n          <EmotePicker onEmoteClick={onEmoteClick} />\n        </ChatModal>\n      </EmotesModal>\n    );\n\n    const handleHeightChange = (height: number) =>\n      setIsShowTextareaScroll(height >= 96);\n\n    return (\n      <ChatInputRoot ref={chatInputRef}>\n        <ChatInputInner>\n          {suggestions.isActive && renderSuggestions(suggestions)}\n          <TextareaWrapper $isSuggestions={suggestions.isActive}>\n            <TextareaInput>\n              <Textarea\n                ref={textareaRef}\n                value={text}\n                placeholder=\"Send a message\"\n                maxLength={500}\n                maxRows={4}\n                disabled={isDisabled}\n                $showScroll={isShowTextareaScroll}\n                onChange={onChange}\n                onKeyUp={onKeyUp}\n                onKeyDown={onKeyDown}\n                onHeightChange={handleHeightChange}\n              />\n              {isEmotesLoaded && renderEmotesButton()}\n            </TextareaInput>\n          </TextareaWrapper>\n          {isEmotesModalVisible && renderEmotesModal()}\n        </ChatInputInner>\n      </ChatInputRoot>\n    );\n  },\n);\n\nexport default React.memo(ChatInput);\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"currentColor\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 8a2 2 0 100 4 2 2 0 000-4z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M9 2h2a2.01 2.01 0 001.235 1.855l.53.22a2.01 2.01 0 002.185-.439l1.414 1.414a2.01 2.01 0 00-.439 2.185l.22.53A2.01 2.01 0 0018 9v2a2.01 2.01 0 00-1.855 1.235l-.22.53a2.01 2.01 0 00.44 2.185l-1.415 1.414a2.01 2.01 0 00-2.184-.439l-.531.22A2.01 2.01 0 0011 18H9a2.01 2.01 0 00-1.235-1.854l-.53-.22a2.009 2.009 0 00-2.185.438L3.636 14.95a2.009 2.009 0 00.438-2.184l-.22-.531A2.01 2.01 0 002 11V9c.809 0 1.545-.487 1.854-1.235l.22-.53a2.009 2.009 0 00-.438-2.185L5.05 3.636a2.01 2.01 0 002.185.438l.53-.22A2.01 2.01 0 009 2zm-4 8l1.464 3.536L10 15l3.535-1.464L15 10l-1.465-3.536L10 5 6.464 6.464 5 10z\",\n  clipRule: \"evenodd\"\n}));\n\nfunction SvgGears({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref);\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgGears);\nexport default __webpack_public_path__ + \"static/media/gears.f43541a0.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M13 8l-5 5v18h6v5l5-5h4l9-9V8z\"\n});\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#9147ff\",\n  d: \"M26 25l4-4V10H14v15h4v4l4-4z\"\n});\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M20 14h2v6h-2v-6zm7 0v6h-2v-6h2z\"\n});\n\nfunction SvgTwitch({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 40 40\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref, _ref2, _ref3);\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgTwitch);\nexport default __webpack_public_path__ + \"static/media/twitch.57cb43e0.svg\";\nexport { ForwardRef as ReactComponent };","import styled from 'styled-components';\n\nconst Button = styled.button.attrs({ type: 'button' })`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0 10px;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #9147ff;\n  outline: none;\n  font-size: 12px;\n  border-radius: 4px;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #772ce8;\n  }\n\n  &:active {\n    background-color: #5c16c5;\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n\n  &[disabled] {\n    background-color: rgba(255, 255, 255, 0.26);\n    color: rgba(255, 255, 255, 0.8);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst SwitchRoot = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  line-height: 20px;\n`;\nconst Label = styled.label`\n  content: '';\n  position: relative;\n  display: inline-block;\n  order: 0;\n  width: 35px;\n  height: 20px;\n  vertical-align: bottom;\n  border-radius: 10px/50%;\n  background-color: rgba(0, 0, 0, 0.3);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15), 0 0 2px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.1s ease;\n  cursor: pointer;\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    bottom: 2px;\n    display: block;\n    width: 16px;\n    border-radius: 50%;\n    background-color: #fff;\n    transition: left 0.1s ease;\n  }\n`;\nconst Input = styled.input.attrs({ type: 'checkbox' })`\n  position: absolute;\n  opacity: 0;\n\n  &:checked + ${Label} {\n    background-color: #9147ff;\n\n    &:after {\n      content: '';\n      top: 2px;\n      left: calc(100% - 18px);\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 9px;\n      left: 10px;\n      display: block;\n      height: 3px;\n      width: 7px;\n      border-bottom: 2px solid #fff;\n      border-left: 2px solid #fff;\n      transform: translate3d(-50%, -50%, 0) rotate(-45deg);\n    }\n  }\n`;\n\ntype Props = {\n  id: string;\n  label: string;\n  checked?: boolean;\n  readOnly?: boolean;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst Switch = ({ id, label, checked, readOnly, onChange }: Props) => (\n  <SwitchRoot>\n    <Input\n      id={id}\n      aria-label={label}\n      checked={checked}\n      readOnly={readOnly}\n      onChange={onChange}\n    />\n    <Label htmlFor={id} />\n  </SwitchRoot>\n);\n\nSwitch.defaultProps = {\n  checked: false,\n  readOnly: false,\n  onChange: () => {},\n};\n\nexport default Switch;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport Scrollbar from 'components/Scrollbar';\nimport Switch from 'components/Switch';\nimport { optionsSelector } from 'features/options/optionsSelectors';\nimport { isAuthSelector } from 'features/auth/authSelectors';\nimport {\n  userDisplayNameSelector,\n  userColorSelector,\n} from 'features/chat/chatSelectors';\nimport { userBadgesImagesSelector } from 'features/badges/badgesSelectors';\nimport { changeOption } from 'features/options/optionsSlice';\n\nconst OptionsRoot = styled.div`\n  padding: 16px;\n  height: 100%;\n`;\nconst Header = styled.h2`\n  margin: 0;\n  padding: 0;\n  font-size: 14px;\n  text-align: center;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst Categories = styled(Scrollbar)`\n  height: 100%;\n`;\nconst Category = styled.div`\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding: 8px 0;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst CategoryItems = styled.div``;\nconst Option = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 4px 0;\n  cursor: pointer;\n`;\nconst OptionText = styled.span``;\nconst Profile = styled.div`\n  display: flex;\n  align-items: center;\n`;\nconst UserName = styled.div`\n  font-weight: bold;\n  color: ${(p) => p.color};\n`;\nconst LogOutButton = styled(Link)`\n  margin-left: auto;\n  color: #bf94ff;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Badge = styled.img`\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst Options = () => {\n  const dispatch = useDispatch();\n  const options = useSelector(optionsSelector);\n\n  const isAuth = useSelector(isAuthSelector);\n\n  const userDisplayName = useSelector(userDisplayNameSelector);\n  const userColor = useSelector(userColorSelector);\n  const userBadgesImages = useSelector(userBadgesImagesSelector);\n\n  const renderOption = useCallback(\n    ({ id, name, title, description, value }) => (\n      <Option\n        key={id}\n        onClick={() => dispatch(changeOption({ name, value: !value }))}\n        title={description}\n      >\n        <OptionText>{title}</OptionText>\n        <Switch\n          id={id}\n          label={title}\n          checked={value}\n          onChange={() => dispatch(changeOption({ name, value }))}\n        />\n      </Option>\n    ),\n    [dispatch],\n  );\n\n  const renderProfileCategory = () => (\n    <Category>\n      <CategoryHeader>Profile</CategoryHeader>\n      <CategoryItems>\n        <Profile>\n          {userBadgesImages.map(({ alt, label, src, srcSet }, key) => (\n            <Badge\n              // eslint-disable-next-line react/no-array-index-key\n              key={key}\n              alt={alt}\n              aria-label={label}\n              src={src}\n              srcSet={srcSet}\n            />\n          ))}\n          <UserName color={userColor}>{userDisplayName}</UserName>\n          <LogOutButton to=\"/chat/logout\">Log Out</LogOutButton>\n        </Profile>\n      </CategoryItems>\n    </Category>\n  );\n\n  const renderOptionsCategory = useCallback(\n    ({ title, items }, key) => (\n      <Category key={key}>\n        {!!title && <CategoryHeader>{title}</CategoryHeader>}\n        <CategoryItems>{items.map(renderOption)}</CategoryItems>\n      </Category>\n    ),\n    [renderOption],\n  );\n\n  return (\n    <OptionsRoot>\n      <Header>Chat settings</Header>\n      <Categories>\n        {isAuth && renderProfileCategory()}\n        {options.map(renderOptionsCategory)}\n      </Categories>\n    </OptionsRoot>\n  );\n};\n\nexport default Options;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nimport useOnClickOutside from 'react-cool-onclickoutside';\nimport { ReactComponent as GearsIconSvg } from 'icons/gears.svg';\nimport { ReactComponent as TwitchIconSvg } from 'icons/twitch.svg';\nimport Button from 'components/Button';\nimport IconButton from 'components/IconButton';\nimport ChatModal from 'components/ChatModal';\nimport Options from 'features/options/Options';\nimport {\n  isAuthSelector,\n  isAuthReadySelector,\n} from 'features/auth/authSelectors';\n\nconst ChatControlsRoot = styled.div`\n  position: relative;\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n`;\nconst Controls = styled.div`\n  display: flex;\n  align-items: center;\n\n  & > :not(:last-child) {\n    margin-right: 8px;\n  }\n`;\nconst OptionsModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 10px;\n  bottom: 100%;\n  margin-bottom: 10px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nconst OptionsButton = styled(IconButton)`\n  margin-left: auto;\n`;\nconst GearsIcon = styled(GearsIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\nconst TwitchIcon = styled(TwitchIconSvg)`\n  display: block;\n  margin-right: 4px;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  isDisabled: boolean;\n  onSendMessage: () => void;\n};\n\nconst ChatControls = ({ isDisabled, onSendMessage }: Props) => {\n  const [isOptionsModalVisible, setIsOptionsModalVisible] = useState(false);\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n\n  const handleCloseOptionsModal = () => setIsOptionsModalVisible(false);\n  const optionsRef = useOnClickOutside(handleCloseOptionsModal);\n\n  const renderSignInButton = () => (\n    <Button as={Link} to=\"/chat/auth\">\n      <TwitchIcon />\n      Sign in with Twitch\n    </Button>\n  );\n\n  const renderOptionsModal = () => (\n    <OptionsModal ref={optionsRef}>\n      <ChatModal onClose={handleCloseOptionsModal}>\n        <Options />\n      </ChatModal>\n    </OptionsModal>\n  );\n\n  return (\n    <ChatControlsRoot>\n      <Controls>\n        {isAuthReady && !isAuth && renderSignInButton()}\n        <OptionsButton\n          ref={optionsRef}\n          onClick={() => setIsOptionsModalVisible((prev) => !prev)}\n        >\n          <GearsIcon />\n        </OptionsButton>\n        <Button disabled={isDisabled} onClick={onSendMessage}>\n          Chat\n        </Button>\n      </Controls>\n      {isOptionsModalVisible && renderOptionsModal()}\n    </ChatControlsRoot>\n  );\n};\n\nexport default React.memo(ChatControls);\n","/* eslint-disable no-param-reassign */\n// source: https://github.com/night/betterttv/blob/master/src/utils/colors.js\n\n/**\n * Converts an RGB color value to HSL. Conversion formula\n * adapted from https://en.wikipedia.org/wiki/HSL_color_space\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and l in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSL representation\n */\nconst rgbToHsl = (r: number, g: number, b: number) => {\n  // Convert RGB to HSL, not ideal but it's faster than HCL or full YIQ conversion\n  // based on http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = Math.min(Math.max(0, (max + min) / 2), 1);\n  const d = Math.min(Math.max(0, max - min), 1);\n\n  if (d === 0) {\n    return [d, d, l]; // achromatic\n  }\n\n  let h = 0;\n\n  // eslint-disable-next-line default-case\n  switch (max) {\n    case r:\n      h = Math.min(Math.max(0, (g - b) / d + (g < b ? 6 : 0)), 6);\n      break;\n    case g:\n      h = Math.min(Math.max(0, (b - r) / d + 2), 6);\n      break;\n    case b:\n      h = Math.min(Math.max(0, (r - g) / d + 4), 6);\n      break;\n  }\n\n  h /= 6;\n\n  let s = l > 0.5 ? d / (2 * (1 - l)) : d / (2 * l);\n\n  s = Math.min(Math.max(0, s), 1);\n\n  return [h, s, l];\n};\n\n// Convert HSL to RGB, based on http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\nconst hueToRgb = (pp: number, qq: number, t: number) => {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1 / 6) return pp + (qq - pp) * 6 * t;\n  if (t < 1 / 2) return qq;\n  if (t < 2 / 3) return pp + (qq - pp) * (2 / 3 - t) * 6;\n\n  return pp;\n};\n\n/**\n * Converts an HSL color value to RGB. Conversion formula\n * adapted from https://en.wikipedia.org/wiki/HSL_color_space\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set of integers [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  l       The lightness\n * @return  Array           The RGB representation\n */\nconst hslToRgb = (h: number, s: number, l: number) => {\n  if (s === 0) {\n    const rgb = Math.round(Math.min(Math.max(0, 255 * l), 255)); // achromatic\n\n    return [rgb, rgb, rgb];\n  }\n\n  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  const p = 2 * l - q;\n\n  return [\n    Math.round(Math.min(Math.max(0, 255 * hueToRgb(p, q, h + 1 / 3)), 255)),\n    Math.round(Math.min(Math.max(0, 255 * hueToRgb(p, q, h)), 255)),\n    Math.round(Math.min(Math.max(0, 255 * hueToRgb(p, q, h - 1 / 3)), 255)),\n  ];\n};\n\nconst calculateColorBackground = (color: string) => {\n  // Converts HEX to YIQ to judge what color background the color would look best on\n  color = color.replace(/[^0-9a-f]/gi, '');\n\n  if (color.length < 6) {\n    color = color[0] + color[0] + color[1] + color[1] + color[2] + color[2];\n  }\n\n  const r = parseInt(color.substr(0, 2), 16);\n  const g = parseInt(color.substr(2, 2), 16);\n  const b = parseInt(color.substr(4, 2), 16);\n\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n\n  return yiq >= 128 ? 'dark' : 'light';\n};\n\nconst calculateColorReplacement = (\n  color: string,\n  background: 'dark' | 'light' = 'dark',\n) => {\n  // Modified from http://www.sitepoint.com/javascript-generate-lighter-darker-color/\n  // Modified further to use HSL as an intermediate format, to avoid hue-shifting\n  // toward primaries when darkening and toward secondaries when lightening\n  const light = background === 'light';\n  const factor = light ? 0.1 : -0.1;\n\n  color = color.replace(/[^0-9a-f]/gi, '');\n\n  if (color.length < 6) {\n    color = color[0] + color[0] + color[1] + color[1] + color[2] + color[2];\n  }\n\n  const hsl = rgbToHsl(\n    parseInt(color.substr(0, 2), 16),\n    parseInt(color.substr(2, 2), 16),\n    parseInt(color.substr(4, 2), 16),\n  );\n\n  // more thoroughly lightens dark colors, with no problems at black\n  let l = light ? 1 - (1 - factor) * (1 - hsl[2]) : (1 + factor) * hsl[2];\n\n  l = Math.min(Math.max(0, l), 1);\n\n  const rgb = hslToRgb(hsl[0], hsl[1], l);\n  const r = rgb[0].toString(16).padStart(2, '0');\n  const g = rgb[1].toString(16).padStart(2, '0');\n  const b = rgb[2].toString(16).padStart(2, '0');\n\n  return `#${r}${g}${b}`;\n};\n\nconst colorCache = new Map();\n\n// eslint-disable-next-line import/prefer-default-export\nexport const calculateColor = (color: string, darkenedMode = true): string => {\n  const cacheKey = `${color}:${darkenedMode}`;\n\n  if (colorCache.has(cacheKey)) return colorCache.get(cacheKey);\n\n  const colorRegex = /^#[0-9a-f]+$/i;\n\n  if (!colorRegex.test(color)) return color;\n\n  let bgColor: 'dark' | 'light';\n\n  for (let i = 20; i >= 0; i -= 1) {\n    bgColor = calculateColorBackground(color);\n\n    if (bgColor === 'light' && !darkenedMode) break;\n    if (bgColor === 'dark' && darkenedMode) break;\n\n    color = calculateColorReplacement(color, bgColor);\n  }\n\n  colorCache.set(cacheKey, color);\n\n  if (colorCache.size > 1000) {\n    colorCache.delete(colorCache.entries().next().value[0]);\n  }\n\n  return color;\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\n\nimport { TWITCH_EMOTES_CDN } from 'utils/constants';\nimport type { MessageCardInfo } from 'features/messages/messagesSlice';\nimport { messageCardSelector } from 'features/messageCards/messageCardsSelectors';\n\nconst MessageCardRoot = styled.a.attrs({\n  target: '_blank',\n  rel: 'noreferrer noopener',\n})<{ $clickable?: boolean }>`\n  display: flex;\n  flex-wrap: nowrap;\n  padding: 5px;\n  border-radius: 4px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.9), 0 0 2px rgba(0, 0, 0, 0.9);\n  background-color: #18181b;\n  text-decoration: none;\n\n  ${(p) =>\n    p.$clickable &&\n    css`\n      &:hover {\n        background-color: #3a3a3d;\n      }\n\n      &:active {\n        background-color: #464649;\n      }\n    `}\n`;\nconst Preview = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 45px;\n  width: 80px;\n  background-color: #26262c;\n  overflow: hidden;\n`;\nconst Image = styled.img`\n  max-height: 100%;\n`;\nconst PreviewLoading = styled.div`\n  height: 45px;\n  width: 80px;\n  background-color: #46464b;\n`;\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding-left: 10px;\n  overflow: hidden;\n`;\nconst textStyles = css`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin: 0;\n  font-size: 12px;\n  line-height: 1.5;\n`;\nconst Title = styled.p`\n  ${textStyles};\n  font-weight: bold;\n  color: #efeff1;\n`;\nconst Description = styled.p`\n  ${textStyles};\n  color: #adadb8;\n`;\nconst textLoadingStyle = css`\n  margin-top: 3px;\n  margin-bottom: 4px;\n\n  height: 12px;\n  background-color: #232326;\n  border-radius: 2px;\n`;\nconst TitleLoading = styled.div`\n  ${textLoadingStyle};\n  width: 180px;\n`;\nconst DescriptionLoading = styled.div`\n  ${textLoadingStyle};\n  width: 120px;\n`;\n\nconst emoteId = '58765';\nconst errorImageSrc = `${TWITCH_EMOTES_CDN}/${emoteId}/1.0`;\nconst errorImageSrcSet = `${TWITCH_EMOTES_CDN}/${emoteId}/1.0 1x, ${TWITCH_EMOTES_CDN}/${emoteId}/2.0 2x, ${TWITCH_EMOTES_CDN}/${emoteId}/3.0 4x`;\n\nconst errorTitle = 'Something went wrong';\nconst errorDescription = {\n  'twitch-clip': \"We couldn't find that Clip\",\n  'twitch-video': \"We couldn't find that Video\",\n  'youtube-video': \"We couldn't find that Video\",\n};\n\nconst renderLoading = () => (\n  <MessageCardRoot>\n    <PreviewLoading />\n    <Content>\n      <TitleLoading />\n      <DescriptionLoading />\n    </Content>\n  </MessageCardRoot>\n);\n\nconst renderError = (type: MessageCardInfo['type']) => (\n  <MessageCardRoot>\n    <Preview>\n      <Image src={errorImageSrc} srcSet={errorImageSrcSet} alt=\"\" />\n    </Preview>\n    <Content>\n      <Title>{errorTitle}</Title>\n      <Description>{errorDescription[type]}</Description>\n    </Content>\n  </MessageCardRoot>\n);\n\ntype Props = MessageCardInfo;\n\nconst MessageCard = (cardInfo: Props) => {\n  const card = useSelector(messageCardSelector(cardInfo));\n\n  if (!card || card.status === 'loading') {\n    return renderLoading();\n  }\n\n  if (card.status === 'error') {\n    return renderError(cardInfo.type);\n  }\n\n  const { id, src, srcSet, title, description } = card;\n\n  const url =\n    cardInfo.type === 'twitch-clip'\n      ? `https://clips.twitch.tv/${id}`\n      : cardInfo.url;\n\n  return (\n    <MessageCardRoot href={url} $clickable>\n      <Preview>\n        <Image src={src} srcSet={srcSet} alt={title} />\n      </Preview>\n      <Content>\n        <Title>{title}</Title>\n        <Description>{description}</Description>\n      </Content>\n    </MessageCardRoot>\n  );\n};\n\nexport default MessageCard;\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { format } from 'date-fns/fp';\nimport { useSelector } from 'react-redux';\n\nimport { calculateColor } from 'utils/colors';\nimport MessageCard from 'features/messageCards/MessageCard';\nimport type {\n  Message as MessageType,\n  MessageEntity,\n} from 'features/messages/messagesSlice';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport { userLoginSelector } from 'features/auth/authSelectors';\nimport {\n  isShowTimestampsSelector,\n  isTimeFormat24HoursSelector,\n} from 'features/options/optionsSelectors';\n\ntype MessageRootProps = {\n  $isAction: boolean;\n  $isHistory: boolean;\n  $isDeleted: boolean;\n  $isHighlighted: boolean;\n  $isEven: boolean;\n  $color: string;\n};\n\nconst getChatMessageBg = (p: MessageRootProps) => {\n  if (p.$isHighlighted) return 'rgba(255, 0, 0, 0.3)';\n  if (p.$isEven) return '#1f1925';\n  return 'transparent';\n};\n\nconst MessageRoot = styled.div<MessageRootProps>`\n  padding: 5px 20px;\n  color: ${(p) => (p.$isAction ? p.$color : '#fff')};\n  opacity: ${(p) => (p.$isHistory || p.$isDeleted ? '0.5' : '1')};\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${getChatMessageBg};\n`;\nconst Name = styled.span<{ $color: string }>`\n  font-weight: bold;\n  color: ${(p) => p.$color};\n  cursor: pointer;\n`;\nconst Emoji = styled.img`\n  display: inline-block;\n  margin-top: -5px;\n  margin-bottom: -4px;\n  width: 20px;\n  height: auto;\n  vertical-align: middle;\n`;\nconst Emote = styled.img`\n  display: inline-block;\n  margin: -5px 0;\n  vertical-align: middle;\n`;\n// https://github.com/night/BetterTTV/blob/master/src/modules/emotes/style.css\n// prettier-ignore\nconst EmoteWrapper = styled.span`\n  display: inline-block;\n\n  /* Prevent stacking of IceCold, SoSnowy */\n  &[data-emote-id='5849c9a4f52be01a7ee5f79d'] + &[data-emote-id='5849c9a4f52be01a7ee5f79d'],\n  &[data-emote-id='567b5b520e984428652809b6'] + &[data-emote-id='567b5b520e984428652809b6'] {\n    display: none;\n  }\n\n  /* IceCold */\n  &        + &[data-emote-id='5849c9a4f52be01a7ee5f79d'],\n  ${Emoji} + &[data-emote-id='5849c9a4f52be01a7ee5f79d'] {\n    margin-left: -33px;\n  }\n\n  /* SoSnowy */\n  &        + &[data-emote-id='567b5b520e984428652809b6'],\n  ${Emoji} + &[data-emote-id='567b5b520e984428652809b6'] {\n    margin-left: -32px;\n  }\n\n  /* SantaHat */\n  &        + &[data-emote-id='58487cc6f52be01a7ee5f205'],\n  ${Emoji} + &[data-emote-id='58487cc6f52be01a7ee5f205'] {\n    margin-left: -34px;\n    margin-top: -18px;\n  }\n\n  /* TopHat, CandyCane, ReinDeer */\n  &        + &[data-emote-id='5849c9c8f52be01a7ee5f79e'],\n  ${Emoji} + &[data-emote-id='5849c9c8f52be01a7ee5f79e'],\n  &        + &[data-emote-id='567b5c080e984428652809ba'],\n  ${Emoji} + &[data-emote-id='567b5c080e984428652809ba'],\n  &        + &[data-emote-id='567b5dc00e984428652809bd'],\n  ${Emoji} + &[data-emote-id='567b5dc00e984428652809bd'] {\n    margin-left: -31px;\n    margin-top: -18px;\n  }\n\n  /* cvHazmat, cvMask */\n  &        + &[data-emote-id='5e76d338d6581c3724c0f0b2'],\n  ${Emoji} + &[data-emote-id='5e76d338d6581c3724c0f0b2'],\n  &        + &[data-emote-id='5e76d399d6581c3724c0f0b8'],\n  ${Emoji} + &[data-emote-id='5e76d399d6581c3724c0f0b8'] {\n    margin-left: -34px;\n  }\n  &        + &[data-emote-id='5e76d338d6581c3724c0f0b2'] ${Emote},\n  ${Emoji} + &[data-emote-id='5e76d338d6581c3724c0f0b2'] ${Emote},\n  &        + &[data-emote-id='5e76d399d6581c3724c0f0b8'] ${Emote},\n  ${Emoji} + &[data-emote-id='5e76d399d6581c3724c0f0b8'] ${Emote} {\n    height: 34px;\n    width: 34px;\n  }\n`;\nconst Mention = styled.span<{ $isActive: boolean; $isOwnMessage: boolean }>`\n  ${(p) =>\n    (p.$isActive || p.$isOwnMessage) &&\n    css`\n      padding: 2px 4px;\n    `};\n  ${(p) =>\n    p.$isOwnMessage &&\n    css`\n      background-color: #40404a;\n      color: #fff;\n    `};\n  ${(p) =>\n    p.$isActive &&\n    css`\n      background-color: #fafafa;\n      color: #18181b;\n    `};\n`;\nconst Link = styled.a`\n  color: #bf94ff;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Timestamp = styled.span`\n  margin-right: 5px;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst Badge = styled.img`\n  margin-bottom: 2px;\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst renderMessageArray = (messageLogin: string, userLogin: string | null) => (\n  item: MessageEntity,\n  key: number,\n) => {\n  if (typeof item !== 'object') return item;\n\n  if (\n    item.type === 'twitch-emote' ||\n    item.type === 'bttv-emote' ||\n    item.type === 'ffz-emote'\n  ) {\n    return (\n      <EmoteWrapper key={key} data-emote-id={item.id}>\n        <Emote\n          src={item.src}\n          srcSet={item.srcSet}\n          alt={item.alt}\n          title={item.alt}\n        />\n      </EmoteWrapper>\n    );\n  }\n\n  if (item.type === 'emoji') {\n    return (\n      <EmoteWrapper key={key}>\n        <Emoji src={item.src} alt={item.alt} title={item.alt} />\n      </EmoteWrapper>\n    );\n  }\n\n  if (item.type === 'mention') {\n    return (\n      <Mention\n        key={key}\n        $isActive={item.target === userLogin}\n        $isOwnMessage={messageLogin === userLogin}\n      >\n        {item.text}\n      </Mention>\n    );\n  }\n\n  if (item.type === 'link') {\n    return (\n      <Link\n        key={key}\n        href={item.href}\n        rel=\"noreferrer noopener\"\n        target=\"_blank\"\n      >\n        {item.text}\n      </Link>\n    );\n  }\n\n  return null;\n};\n\nconst renderBadges = (badges: htmlEntity.Badge[]) =>\n  badges.map(({ alt, label, src, srcSet }, key: number) => (\n    // eslint-disable-next-line react/no-array-index-key\n    <Badge key={key} alt={alt} aria-label={label} src={src} srcSet={srcSet} />\n  ));\n\ntype Props = {\n  message: MessageType;\n  isEven: boolean;\n  onNameRightClick: (name: string) => void;\n};\n\nconst MESSAGE_DELETED_LABEL = '<message deleted>';\n\nconst Message = ({\n  message: {\n    entities,\n    user: { login, color, displayName, badges },\n    timestamp,\n    card,\n    isHistory,\n    isAction,\n    isDeleted,\n    isHighlighted,\n  },\n  isEven,\n  // onNameClick,\n  onNameRightClick,\n}: Props) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const userLogin = useSelector(userLoginSelector);\n  const isShowTimestamps = useSelector(isShowTimestampsSelector);\n  const isTimeFormat24Hours = useSelector(isTimeFormat24HoursSelector);\n\n  const handleNameRightClick = (\n    e: React.MouseEvent<HTMLSpanElement, MouseEvent>,\n  ) => {\n    onNameRightClick(displayName);\n    e.preventDefault();\n  };\n\n  const timeFormat = isTimeFormat24Hours ? 'H:mm' : 'h:mm';\n  const newColor = color ? calculateColor(color) : '';\n\n  return (\n    <MessageRoot\n      $isHistory={isHistory}\n      $isAction={isAction}\n      $isEven={isEven}\n      $isHighlighted={isHighlighted}\n      $isDeleted={isDeleted}\n      $color={newColor}\n    >\n      {isShowTimestamps && (\n        <Timestamp>{format(timeFormat, new Date(timestamp))}</Timestamp>\n      )}\n      {badges.length > 0 && renderBadges(badges)}\n      <Name $color={newColor} onContextMenu={handleNameRightClick}>\n        {displayName}\n      </Name>\n      {isAction ? ' ' : ': '}\n      {isDeleted && !isVisible ? (\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n        <Link onClick={() => setIsVisible(true)}>{MESSAGE_DELETED_LABEL}</Link>\n      ) : (\n        entities.map(renderMessageArray(login, userLogin))\n      )}\n      {card && <MessageCard type={card.type} id={card.id} url={card.url} />}\n    </MessageRoot>\n  );\n};\n\nexport default React.memo(Message);\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport type { Notice as NoticeType } from 'features/messages/messagesSlice';\n\nconst NoticeRoot = styled.div<{ $isEven: boolean }>`\n  padding: 5px 20px;\n  color: rgba(255, 255, 255, 0.6);\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${(p) => (p.$isEven ? '#1f1925' : 'transparent')};\n`;\n\ntype Props = {\n  message: NoticeType;\n  isEven: boolean;\n};\n\nconst Notice = ({ message: { message }, isEven }: Props) => (\n  <NoticeRoot $isEven={isEven}>{message}</NoticeRoot>\n);\n\nexport default Notice;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport type { UserNotice as UserNoticeType } from 'features/messages/messagesSlice';\n\nconst UserNoticeRoot = styled.div`\n  padding: 5px 20px 5px 16px;\n  line-height: 20px;\n  word-wrap: break-word;\n  border-left: 4px solid #9147ff;\n  color: #fff;\n`;\n\ntype Props = {\n  message: UserNoticeType;\n};\n\nconst UserNotice = ({ message: { systemMessage } }: Props) => (\n  <UserNoticeRoot>{systemMessage}</UserNoticeRoot>\n);\n\nexport default UserNotice;\n","import React from 'react';\n\nimport assertNever from 'utils/assertNever';\nimport type { ChatMessage as ChatMessageType } from 'features/messages/messagesSlice';\nimport Message from 'features/messages/Message';\nimport Notice from 'features/messages/Notice';\nimport UserNotice from 'features/messages/UserNotice';\n\ntype Props = {\n  message: ChatMessageType;\n  isEven: boolean;\n  // onNameClick: (name: string) => void;\n  onNameRightClick: (name: string) => void;\n};\n\nconst ChatMessage = ({\n  message,\n  isEven,\n  // onNameClick,\n  onNameRightClick,\n}: Props) => {\n  if (message.type === 'message') {\n    return (\n      <Message\n        message={message}\n        isEven={isEven}\n        // onNameClick={onNameClick}\n        onNameRightClick={onNameRightClick}\n      />\n    );\n  }\n\n  if (message.type === 'notice') {\n    return <Notice message={message} isEven={isEven} />;\n  }\n\n  if (message.type === 'user-notice') {\n    return <UserNotice message={message} />;\n  }\n\n  return assertNever(message);\n};\n\nexport default React.memo(ChatMessage);\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport type ScrollbarType from 'react-scrollbars-custom';\nimport type { ScrollState } from 'react-scrollbars-custom/dist/types/types';\n\nimport Scrollbar from 'components/Scrollbar';\nimport ChatMessage from 'features/messages/ChatMessage';\nimport {\n  messagesSelector,\n  isEvenSelector,\n} from 'features/messages/messagesSelectors';\nimport { isSplitChatSelector } from 'features/options/optionsSelectors';\n\nconst MORE_MESSAGES_OFFSET = 100;\n\nconst MessagesRoot = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\nconst StyledScrollbar = styled(Scrollbar)`\n  .ScrollbarsCustom-Content {\n    padding-bottom: 10px !important;\n  }\n`;\nconst MoreMessagesButton = styled.button<{ $isVisible: boolean }>`\n  position: absolute;\n  left: 50%;\n  bottom: 10px;\n  display: ${(p) => (p.$isVisible ? 'block' : 'none')};\n  padding: 5px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  transform: translateX(-50%);\n`;\n\ntype Props = {\n  onNameRightClick: (name: string) => void;\n};\n\nconst Messages = ({ onNameRightClick }: Props) => {\n  const [\n    isMoreMessagesButtonVisible,\n    setIsMoreMessagesButtonVisible,\n  ] = useState(false);\n\n  const messages = useSelector(messagesSelector);\n\n  const isEven = useSelector(isEvenSelector);\n  const isSplitChat = useSelector(isSplitChatSelector);\n\n  const handleScrollUpdate = ({\n    clientHeight,\n    contentScrollHeight,\n    scrollTop,\n  }: ScrollState) => {\n    const maxScrollTop = contentScrollHeight - clientHeight;\n    const isVisible = scrollTop + MORE_MESSAGES_OFFSET < maxScrollTop;\n\n    setIsMoreMessagesButtonVisible(isVisible);\n  };\n\n  const scrollbarRef = useRef<ScrollbarType>(null);\n\n  const handleScrollToBottom = () => {\n    if (scrollbarRef.current) {\n      scrollbarRef.current.scrollToBottom();\n    }\n  };\n\n  useEffect(() => {\n    if (!isMoreMessagesButtonVisible) {\n      handleScrollToBottom();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages]);\n\n  const getIsEven = (key: number) => {\n    if (!isSplitChat) return false;\n    return isEven ? key % 2 === 1 : key % 2 === 0;\n  };\n\n  return (\n    <MessagesRoot>\n      <StyledScrollbar onUpdate={handleScrollUpdate} ref={scrollbarRef}>\n        {messages.map((message, key) => (\n          <ChatMessage\n            key={message.id}\n            message={message}\n            isEven={getIsEven(key)}\n            onNameRightClick={onNameRightClick}\n          />\n        ))}\n      </StyledScrollbar>\n      <MoreMessagesButton\n        onClick={handleScrollToBottom}\n        $isVisible={isMoreMessagesButtonVisible}\n      >\n        More messages below\n      </MoreMessagesButton>\n    </MessagesRoot>\n  );\n};\n\nexport default Messages;\n","import React, { useState, useRef, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport Button from 'components/Button';\n\nconst JoinChannelRoot = styled.div`\n  padding: 10px;\n  flex-grow: 1;\n  width: 320px;\n`;\nconst Title = styled.h2`\n  margin-top: 0;\n  margin-bottom: 10px;\n  padding: 0;\n  color: #fff;\n`;\nconst Controls = styled.div`\n  display: flex;\n\n  & > :not(:last-child) {\n    margin-right: 10px;\n  }\n`;\nconst Input = styled.input`\n  display: block;\n  padding: 4px 10px;\n  width: 100%;\n  border: 2px solid transparent;\n  background-color: rgba(255, 255, 255, 0.15);\n  font-family: inherit;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\nconst JoinButton = styled(Button)`\n  flex-shrink: none;\n`;\n\nconst JoinChannel = () => {\n  const history = useHistory();\n  const [value, setValue] = useState('');\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const handleChangeChannel = () => {\n    history.push({\n      pathname: '/chat/',\n      hash: value,\n    });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      handleChangeChannel();\n    }\n  };\n\n  return (\n    <JoinChannelRoot>\n      <Title>Channel to join: </Title>\n      <Controls>\n        <Input\n          ref={inputRef}\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          onKeyPress={handleKeyPress}\n        />\n        <JoinButton onClick={handleChangeChannel} disabled={!value}>\n          Join\n        </JoinButton>\n      </Controls>\n    </JoinChannelRoot>\n  );\n};\n\nexport default JoinChannel;\n","import React, { useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { isAuthSelector } from 'features/auth/authSelectors';\nimport {\n  currentChannelSelector,\n  isConnectedSelector,\n} from 'features/chat/chatSelectors';\nimport { isFixedWidthSelector } from 'features/options/optionsSelectors';\nimport useInitializeAuth from 'features/auth/useInitializeAuth';\nimport useFetchChatData from 'features/chat/hooks/useFetchChatData';\nimport useCurrentChannel from 'features/chat/hooks/useCurrentChannel';\nimport useTwitchClient from 'features/chat/hooks/useTwitchClient';\nimport useChatInput from 'features/chat/hooks/useChatInput';\n\nimport ChatInput from 'features/chat/ChatInput';\nimport ChatControls from 'features/chat/ChatControls';\nimport Messages from 'features/messages/Messages';\nimport JoinChannel from 'features/chat/JoinChannel';\n\nconst ChatRoot = styled.div`\n  height: 100vh;\n  font-size: 12px;\n  background-color: #0e0e10;\n`;\nconst ChatWrapper = styled.div<{ $isFixedWidth: boolean }>`\n  display: flex;\n  flex-direction: column;\n  width: ${(p) => (p.$isFixedWidth ? '340px' : 'auto')};\n  height: 100%;\n  background-color: #18181b;\n`;\n\nconst Chat = () => {\n  const { sendMessage } = useTwitchClient();\n\n  useInitializeAuth();\n  useCurrentChannel();\n  useFetchChatData();\n\n  const currentChannel = useSelector(currentChannelSelector);\n  const isAuth = useSelector(isAuthSelector);\n  const isConnected = useSelector(isConnectedSelector);\n  const isFixedWidth = useSelector(isFixedWidthSelector);\n  const chatInputRef = useRef<HTMLTextAreaElement>(null);\n  const chatInput = useChatInput(sendMessage, chatInputRef);\n\n  const isDisabled = !isAuth || !isConnected;\n\n  return (\n    <ChatRoot>\n      <ChatWrapper $isFixedWidth={isFixedWidth}>\n        {currentChannel ? (\n          <Messages onNameRightClick={chatInput.handleNameRightClick} />\n        ) : (\n          <JoinChannel />\n        )}\n        <ChatInput\n          ref={chatInputRef}\n          text={chatInput.inputText}\n          suggestions={chatInput.suggestions}\n          isDisabled={isDisabled}\n          onEmoteClick={chatInput.handleEmoteClick}\n          onChange={chatInput.handleChange}\n          onKeyUp={chatInput.handleKeyUp}\n          onKeyDown={chatInput.handleKeyDown}\n          onBlur={chatInput.handleBlur}\n          onSuggestionMouseEnter={chatInput.handleSuggestionMouseEnter}\n          onSuggestionClick={chatInput.handleSuggestionClick}\n        />\n        <ChatControls\n          isDisabled={isDisabled}\n          onSendMessage={chatInput.handleSendMessage}\n        />\n      </ChatWrapper>\n    </ChatRoot>\n  );\n};\n\nexport default Chat;\n","import { getAuthUrl } from 'features/auth/authUtils';\n\nconst Auth = () => {\n  window.location.href = getAuthUrl();\n\n  return null;\n};\n\nexport default Auth;\n","import { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport {\n  LS_ACCESS_TOKEN,\n  LS_ID_TOKEN,\n  LS_USER,\n  LS_LAST_CHANNEL,\n} from 'utils/constants';\nimport { invalidateAuth } from 'features/auth/authSlice';\n\nconst Logout = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  localStorage.removeItem(LS_ACCESS_TOKEN);\n  localStorage.removeItem(LS_ID_TOKEN);\n  localStorage.removeItem(LS_USER);\n\n  dispatch(invalidateAuth());\n\n  history.push({\n    pathname: '/chat/',\n    hash: localStorage.getItem(LS_LAST_CHANNEL) || '',\n  });\n\n  return null;\n};\n\nexport default Logout;\n","import { useHistory } from 'react-router-dom';\n\nimport { LS_ACCESS_TOKEN, LS_ID_TOKEN, LS_LAST_CHANNEL } from 'utils/constants';\n\nconst AuthCallback = () => {\n  const history = useHistory();\n\n  if (!window.location.hash) return null;\n\n  const params = new URLSearchParams(window.location.hash.slice(1));\n\n  const accessToken = params.get('access_token');\n  const idToken = params.get('id_token');\n\n  if (!accessToken || !idToken) return null;\n\n  localStorage.setItem(LS_ACCESS_TOKEN, accessToken);\n  localStorage.setItem(LS_ID_TOKEN, idToken);\n\n  history.push({\n    pathname: '/chat/',\n    hash: localStorage.getItem(LS_LAST_CHANNEL) || '',\n  });\n\n  return null;\n};\n\nexport default AuthCallback;\n","import { css } from 'styled-components';\n\nexport default css`\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    margin: 0;\n    font-family: Roobert, Helvetica Neue, Helvetica, Arial, sans-serif;\n  }\n`;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { createGlobalStyle } from 'styled-components';\n\nimport common from 'styles/common';\nimport colors from 'styles/colors';\nimport vars from 'styles/vars';\n\nexport default createGlobalStyle`\n  :root {\n    ${colors};\n    ${vars};\n  }\n  ${common};\n`;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  RouteComponentProps,\n} from 'react-router-dom';\n\nimport { isAuthRedirect } from 'features/auth/authUtils';\nimport Chat from 'features/chat/Chat';\nimport Auth from 'features/auth/Auth';\nimport Logout from 'features/auth/Logout';\nimport AuthCallback from 'features/auth/AuthCallback';\nimport GlobalStyles from 'styles';\n\nconst getHomeComponent = ({ location }: RouteComponentProps) =>\n  isAuthRedirect(location.hash) ? <AuthCallback /> : <Chat />;\n\nconst App: React.FC = () => (\n  <>\n    <Router>\n      <Switch>\n        <Route exact path=\"/chat/\" render={getHomeComponent} />\n        <Route exact path=\"/chat/auth\" component={Auth} />\n        <Route exact path=\"/chat/logout\" component={Logout} />\n      </Switch>\n    </Router>\n    <GlobalStyles />\n  </>\n);\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nconst registerValidSW = (swUrl: string, config?: Config) => {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n};\n\nconst checkValidServiceWorker = (swUrl: string, config?: Config) => {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n};\n\nexport const register = (config?: Config) => {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n};\n\nexport const unregister = () => {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n};\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport auth from 'features/auth/authSlice';\nimport chat from 'features/chat/chatSlice';\nimport messages from 'features/messages/messagesSlice';\nimport messageCards from 'features/messageCards/messageCardsSlice';\nimport emotes from 'features/emotes/emotesSlice';\nimport badges from 'features/badges/badgesSlice';\nimport blockedUsers from 'features/blockedUsers/blockedUsersSlice';\nimport options from 'features/options/optionsSlice';\n\nconst rootReducer = combineReducers({\n  auth,\n  chat,\n  messages,\n  messageCards,\n  emotes,\n  badges,\n  blockedUsers,\n  options,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore, Action } from '@reduxjs/toolkit';\nimport type { ThunkAction } from 'redux-thunk';\n\nimport rootReducer, { RootState } from 'app/rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    // eslint-disable-next-line global-require, @typescript-eslint/no-var-requires\n    const newRootReducer = require('./rootReducer').default;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport ReactGA from 'react-ga';\n\nimport * as serviceWorker from 'serviceWorker';\nimport { isAuthRedirect } from 'features/auth/authUtils';\nimport store from 'app/store';\n\nif (process.env.NODE_ENV === 'production') {\n  ReactGA.initialize('UA-139550930-3');\n\n  if (!isAuthRedirect(window.location.hash)) {\n    const page =\n      window.location.pathname + window.location.search + window.location.hash;\n    ReactGA.pageview(page);\n  }\n}\n\nconst render = () => {\n  // eslint-disable-next-line global-require, @typescript-eslint/no-var-requires\n  const App = require('./app/App').default;\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n};\n\nrender();\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./app/App', render);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","const assertNever = (value: never): never => value;\n\nexport default assertNever;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport {\n  parseTwitchClip,\n  parseTwitchVideo,\n  parseYoutubeVideo,\n} from 'features/chat/utils/parseApiResponse';\n\ntype MessageCardLoading = {\n  status: 'loading';\n};\ntype MessageCardSuccess = {\n  status: 'success';\n  id: string;\n  src: string;\n  srcSet: string;\n  title: string;\n  description: string;\n};\ntype MessageCardError = {\n  status: 'error';\n};\nexport type MessageCardData =\n  | MessageCardLoading\n  | MessageCardSuccess\n  | MessageCardError;\n\ntype MessageCardsState = {\n  twitchClips: Record<string, MessageCardData>;\n  twitchVideos: Record<string, MessageCardData>;\n  youtubeVideos: Record<string, MessageCardData>;\n};\n\nconst initialState: MessageCardsState = {\n  twitchClips: {},\n  twitchVideos: {},\n  youtubeVideos: {},\n};\n\ntype FetchMessageCardParams = {\n  id: string;\n  url: string;\n};\n\nexport const fetchTwitchClip = createAsyncThunk(\n  'clips/fetchTwitchClip',\n  ({ id }: FetchMessageCardParams) => api.fetchTwitchClip(id),\n);\n\nexport const fetchTwitchVideo = createAsyncThunk(\n  'clips/fetchTwitchVideo',\n  ({ id }: FetchMessageCardParams) => api.fetchTwitchVideo(id),\n);\n\nexport const fetchYoutubeVideo = createAsyncThunk(\n  'clips/fetchYoutubeVideo',\n  ({ id }: FetchMessageCardParams) => api.fetchYoutubeVideo(id),\n);\n\n// TODO: refact this code. DRY!\n\nconst messageCards = createSlice({\n  name: 'messageCards',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // twitch clip\n    builder.addCase(fetchTwitchClip.pending, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchClips[id] = { status: 'loading' };\n    });\n\n    builder.addCase(\n      fetchTwitchClip.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { id } = arg;\n        const card = parseTwitchClip(payload);\n\n        if (!card) {\n          state.twitchClips[id] = { status: 'error' };\n\n          return;\n        }\n\n        state.twitchClips[id] = {\n          status: 'success',\n          ...card,\n        };\n      },\n    );\n\n    builder.addCase(fetchTwitchClip.rejected, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchClips[id] = { status: 'error' };\n    });\n\n    // twitch video\n    builder.addCase(fetchTwitchVideo.pending, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchVideos[id] = { status: 'loading' };\n    });\n\n    builder.addCase(\n      fetchTwitchVideo.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { id } = arg;\n        const card = parseTwitchVideo(payload);\n\n        if (!card) {\n          state.twitchVideos[id] = { status: 'error' };\n\n          return;\n        }\n\n        state.twitchVideos[id] = {\n          status: 'success',\n          ...card,\n        };\n      },\n    );\n\n    builder.addCase(fetchTwitchVideo.rejected, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchVideos[id] = { status: 'error' };\n    });\n\n    // youtube-video\n    builder.addCase(fetchYoutubeVideo.pending, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.youtubeVideos[id] = { status: 'loading' };\n    });\n\n    builder.addCase(\n      fetchYoutubeVideo.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { id } = arg;\n        const card = parseYoutubeVideo(payload);\n\n        if (!card) {\n          state.youtubeVideos[id] = { status: 'error' };\n\n          return;\n        }\n\n        state.youtubeVideos[id] = {\n          status: 'success',\n          ...card,\n        };\n      },\n    );\n\n    builder.addCase(fetchYoutubeVideo.rejected, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.youtubeVideos[id] = { status: 'error' };\n    });\n  },\n});\n\nexport default messageCards.reducer;\n","export const TWITCH_API_AUTH_BASE = 'https://id.twitch.tv/oauth2/authorize';\n\nexport const TWITCH_API_CLIENT_ID = process.env.REACT_APP_TWITCH_API_CLIENT_ID;\nexport const TWITCH_API_REDIRECT_URI =\n  process.env.REACT_APP_TWITCH_API_REDIRECT_URI;\n\nexport const CHANNEL_MESSAGES_LIMIT = 500;\nexport const STORE_USERS_LIMIT = 500;\nexport const RECENT_USER_MESSAGES_LIMIT = 100;\n\nexport const API_REQUESTS_TIMEOUT = 10000;\n\nexport const TWITCH_EMOTES_CDN = '//static-cdn.jtvnw.net/emoticons/v1';\nexport const BTTV_EMOTES_CDN = '//cdn.betterttv.net/emote';\n\n// local storage keys\nexport const LS_ACCESS_TOKEN = 'accessToken';\nexport const LS_ID_TOKEN = 'idToken';\nexport const LS_LAST_CHANNEL = 'lastChannel';\nexport const LS_USER = 'user';\nexport const LS_EMOTES_USAGE_STATISTIC = 'emotesUsageStatistic';\nexport const LS_OPTIONS = 'options';\n\nexport const SUGGESTION_TYPES = {\n  users: {\n    name: 'users',\n    limit: 5,\n    regex: /^@([\\w\\d_]*)$/,\n  },\n  emotes: {\n    name: 'emotes',\n    limit: 10,\n    regex: /^:([\\w\\d_]{2,})$/,\n  },\n};\n\nexport const NOTICE_MESSAGE_TAGS = [\n  'msg_banned',\n  'msg_bad_characters',\n  'msg_channel_blocked',\n  'msg_channel_suspended',\n  'msg_duplicate',\n  'msg_emoteonly',\n  'msg_facebook',\n  'msg_followersonly',\n  'msg_followersonly_followed',\n  'msg_followersonly_zero',\n  'msg_r9k',\n  'msg_ratelimit',\n  'msg_rejected',\n  'msg_rejected_mandatory',\n  'msg_room_not_found',\n  'msg_slowmode',\n  'msg_subsonly',\n  'msg_suspended',\n  'msg_timedout',\n  'msg_verified_email',\n];\n"],"sourceRoot":""}