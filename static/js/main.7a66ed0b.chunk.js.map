{"version":3,"sources":["utils/api.js","utils/constants.js","reducers/auth.js","reducers/messages.js","reducers/index.js","Components/ChatInput.jsx","utils/formatMessage.js","Components/ChatMessage.jsx","Components/Chat.jsx","Components/Home.jsx","utils/getAuthUrl.js","Components/Auth.jsx","Components/AuthCallback.jsx","styles/common.js","styles/colors.js","styles/vars.js","styles/index.js","App.jsx","index.jsx"],"names":["fetchUser","id","url","fetch","headers","Authorization","localStorage","accessToken","then","response","json","setIsAuth","createAction","fetchUserRequest","fetchUserSuccess","fetchUserFailure","reducer","handleActions","state","payload","isAuth","user","undefined","isLoading","error","login","displayName","createActions","ADD_MESSAGE","message","messages","ADD_MESSAGES","addMessage","addMessages","combineActions","items","combineReducers","auth","ChatInputRoot","styled","form","Controls","div","SendButton","button","Textarea","textarea","ChatInput","isDisabled","onSubmit","textareaRef","useRef","useState","text","setText","handleKeyUp","useCallback","e","key","useEffect","textareaNode","current","addEventListener","removeEventListener","preventDefault","name","placeholder","ref","maxLength","disabled","onChange","target","value","to","type","defaultProps","formatEmotes","emotes","splitText","split","Object","entries","forEach","i","mote","map","Number","moteStart","moteEnd","length","empty","Array","slice","concat","splice","join","ChatMessageRoot","p","isHistory","Name","span","color","Text","ChatMessage","dangerouslySetInnerHTML","__html","formatMessage","ChatRoot","ChatWrapper","MessagesWrapper","Messages","Scrollbar","attrs","disableTracksWidthCompensation","MoreMessagesButton","visible","defaultOptions","options","clientId","process","connection","secure","reconnect","channels","parseEmotes","reduce","acc","emote","emoteId","emoteIndexes","client","Chat","setMessages","isConnected","setIsConnected","useSelector","username","isMoreMessagesButtonVisible","setIsMoreMessagesButtonVisible","messagesRef","handleScrollToBottom","scrollToBottom","a","recentMessagesResponse","recentMessages","normalizedRecentMessages","rawMessage","tmiParser","msg","filter","command","params","tags","fetchData","disconnect","authOptions","identity","password","getOptions","Client","connect","on","channel","m","onUpdate","clientHeight","contentScrollHeight","scrollTop","onClick","data","say","Home","dispatch","useDispatch","rawUser","getItem","JSON","parse","authParams","client_id","redirect_uri","response_type","scope","claims","stringify","id_token","email_verified","picture","preferred_username","getAuthUrl","search","Auth","window","location","href","AuthCallback","history","useHistory","hash","URLSearchParams","get","idToken","setItem","jwt","decode","sub","apiFetchUser","display_name","push","css","createGlobalStyle","colors","vars","common","App","store","exact","path","component","createStore","rootReducer","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","noop","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a66ed0b.chunk.js","sourcesContent":["import { TWITCH_API_BASE } from './constants';\n\nexport const getAuthorizationHeader = () => ({\n  Authorization: `Bearer ${localStorage.accessToken}`,\n});\n\nexport const apiRequest = (url) =>\n  fetch(url, {\n    headers: getAuthorizationHeader(),\n  }).then((response) => response.json());\n\n/*\n{\n  \"data\": [{\n    \"id\": \"44322889\",\n    \"login\": \"dallas\",\n    \"display_name\": \"dallas\",\n    \"type\": \"staff\",\n    \"broadcaster_type\": \"\",\n    \"description\": \"Just a gamer playing games and chatting. :)\",\n    \"profile_image_url\": \"https://static-cdn.jtvnw.net/jtv_user_pictures/dallas-profile_image-1a2c906ee2c35f12-300x300.png\",\n    \"offline_image_url\": \"https://static-cdn.jtvnw.net/jtv_user_pictures/dallas-channel_offline_image-1a2c906ee2c35f12-1920x1080.png\",\n    \"view_count\": 191836881,\n    \"email\": \"login@provider.com\"\n  }]\n}\n*/\nexport const fetchUser = (id) =>\n  apiRequest(`${TWITCH_API_BASE}/users?id=${id}`);\n","export const TWITCH_API_AUTH_BASE = 'https://id.twitch.tv/oauth2/authorize';\nexport const TWITCH_API_BASE = 'https://api.twitch.tv/helix';\n\nexport const TWITCH_API_CLIENT_ID = process.env.REACT_APP_TWITCH_API_CLIENT_ID;\nexport const TWITCH_API_REDIRECT_URI =\n  process.env.REACT_APP_TWITCH_API_REDIRECT_URI;\n\nexport const MAIN_CHANNEL_NAME = 'nasvay_s';\n","import { createAction, handleActions } from 'redux-actions';\n\nimport { fetchUser as apiFetchUser } from '../utils/api';\n\nconst defaultState = {\n  isAuth: false,\n  isLoading: false,\n  user: {\n    id: null,\n    login: null,\n    displayName: null,\n  },\n};\n\nexport const setIsAuth = createAction('SET_IS_AUTH');\nconst fetchUserRequest = createAction('FETCH_USER_REQUEST');\nconst fetchUserSuccess = createAction('FETCH_USER_SUCCESS');\nconst fetchUserFailure = createAction('FETCH_USER_FAILURE');\n\nexport const fetchUser = (dispatch) => async (id) => {\n  dispatch(fetchUserRequest());\n\n  const response = await apiFetchUser(id);\n  const { login, display_name: displayName } = response.data[0];\n  const user = { id, login, displayName };\n  localStorage.setItem('user', JSON.stringify(user));\n\n  dispatch(fetchUserSuccess(user));\n};\n\nconst handleSetIsAuth = (state, { payload: { isAuth, user } }) => ({\n  ...state,\n  isAuth: isAuth === undefined ? state.isAuth : isAuth,\n  user: { ...state.user, ...user },\n});\n\nconst handleFetchUserRequest = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst handleFetchUserSuccess = (state, { payload }) => ({\n  ...state,\n  isAuth: true,\n  isLoading: false,\n  user: payload,\n});\nconst handleFetchUserFailure = (state, { payload }) => ({\n  ...state,\n  isAuth: false,\n  isLoading: false,\n  error: payload,\n});\n\nconst reducer = handleActions(\n  {\n    [setIsAuth]: handleSetIsAuth,\n    [fetchUserRequest]: handleFetchUserRequest,\n    [fetchUserSuccess]: handleFetchUserSuccess,\n    [fetchUserFailure]: handleFetchUserFailure,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\n\nconst defaultState = {\n  items: [],\n};\n\nexport const { addMessage, addMessages } = createActions({\n  ADD_MESSAGE: (message) => ({ messages: [message] }),\n  ADD_MESSAGES: (messages) => ({ messages }),\n});\n\nconst reducer = handleActions(\n  {\n    [combineActions(addMessage, addMessages)]: (\n      state,\n      { payload: { messages } },\n    ) => ({ ...state, items: [...state.items, ...messages] }),\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport auth from './auth';\nimport messages from './messages';\n\nexport default combineReducers({\n  auth,\n  messages,\n});\n","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst ChatInputRoot = styled.form`\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n  background-color: #000;\n\n  & > :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n\n  & > :not(:last-child) {\n    margin-right: 20px;\n  }\n\n  a {\n    color: #bf94ff;\n    text-decoration: none;\n\n    &:focus,\n    &:hover {\n      color: #a970ff;\n      text-decoration: underline;\n    }\n\n    &:visited {\n      color: #a970ff;\n    }\n  }\n`;\nconst SendButton = styled.button`\n  padding: 0 10px;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #9147ff;\n  outline: none;\n  font-size: 12px;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #772ce8;\n  }\n\n  &:active {\n    background-color: #5c16c5;\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n\n  &[disabled] {\n    background-color: rgba(255, 255, 255, 0.26);\n    color: rgba(255, 255, 255, 0.8);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\nconst Textarea = styled.textarea`\n  display: block;\n  padding: 10px;\n  width: 100%;\n  height: 38px;\n  max-height: 91px;\n  min-height: 40px;\n  overflow: hidden;\n  border: 2px solid transparent;\n  background-color: #262626;\n  font-family: inherit;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\n\nconst ChatInput = ({ isAuth, isDisabled, onSubmit }) => {\n  const textareaRef = useRef(null);\n  const [text, setText] = useState('');\n\n  const handleChange = (e) => setText(e.target.value);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(text);\n    setText('');\n  };\n\n  const handleKeyUp = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        onSubmit(text);\n        setText('');\n      }\n    },\n    [onSubmit, setText, text],\n  );\n\n  useEffect(() => {\n    const textareaNode = textareaRef.current;\n\n    textareaNode.addEventListener('keyup', handleKeyUp, false);\n\n    return () => textareaNode.removeEventListener('keyup', handleKeyUp, false);\n  }, [handleKeyUp]);\n\n  return (\n    <ChatInputRoot onSubmit={handleSubmit}>\n      <Textarea\n        name=\"message\"\n        placeholder=\"Send a message\"\n        ref={textareaRef}\n        maxLength={500}\n        disabled={isDisabled}\n        onChange={handleChange}\n        value={text}\n      />\n      <Controls>\n        {!isAuth && <Link to=\"/auth\">Sign in with Twitch</Link>}\n        <SendButton disabled={isDisabled} type=\"submit\">\n          Chat\n        </SendButton>\n      </Controls>\n    </ChatInputRoot>\n  );\n};\n\nChatInput.defaultProps = {\n  isDisabled: false,\n};\n\nChatInput.propTypes = {\n  isAuth: pt.bool.isRequired,\n  isDisabled: pt.bool,\n  onSubmit: pt.func.isRequired,\n};\n\nexport default ChatInput;\n","// import urlRegex from 'url-regex';\n\n// const formatLinks = (text) => {\n//   let arr;\n//   const regexp = urlRegex({ strict: false });\n\n//   while ((arr = regexp.exec(text)) !== null) {\n//     return text.replace(\n//       arr[0],\n//       `<a href=\"${arr[0]}\" target=\"_blank\" rel=\"noopener noreferrer\">${\n//         arr[0]\n//       }</a>`,\n//     );\n//   }\n\n//   return text;\n// };\n\nconst formatEmotes = (text = '', emotes) => {\n  let splitText = text.split('');\n\n  Object.entries(emotes || {}).forEach(([i, e]) => {\n    e.forEach((mote) => {\n      if (typeof mote !== 'string') return;\n\n      const [moteStart, moteEnd] = mote.split('-').map(Number);\n\n      const length = moteEnd - moteStart;\n      const empty = [...Array(length + 1)].map(() => '');\n\n      splitText = splitText\n        .slice(0, moteStart)\n        .concat(empty)\n        .concat(splitText.slice(moteEnd + 1, splitText.length));\n\n      splitText.splice(\n        moteStart,\n        1,\n        `<img class=\"chat-image\" src=\"https://static-cdn.jtvnw.net/emoticons/v1/${i}/1.0\" srcset=\"https://static-cdn.jtvnw.net/emoticons/v1/${i}/1.0 1x,https://static-cdn.jtvnw.net/emoticons/v1/${i}/2.0 2x,https://static-cdn.jtvnw.net/emoticons/v1/${i}/3.0 4x\">`,\n      );\n    });\n  });\n\n  return splitText.join('');\n};\n\nexport default formatEmotes;\n","import React from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport formatMessage from '../utils/formatMessage';\n\nconst ChatMessageRoot = styled.div`\n  padding: 5px 20px;\n  color: #fff;\n  opacity: ${(p) => (p.isHistory ? '0.5' : '1')};\n  line-height: 20px;\n  word-wrap: break-word;\n\n  &:nth-child(even) {\n    background-color: #1f1925;\n  }\n\n  .chat-image {\n    display: inline-block;\n    margin: -5px 0;\n    vertical-align: middle;\n  }\n\n  a {\n    color: #bf94ff;\n    text-decoration: none;\n\n    &:focus,\n    &:hover {\n      color: #a970ff;\n      text-decoration: underline;\n    }\n\n    &:visited {\n      color: #a970ff;\n    }\n  }\n`;\nconst Name = styled.span`\n  font-weight: bold;\n  color: ${(p) => p.color};\n`;\nconst Text = styled.span``;\n\nconst ChatMessage = ({ name, color, text, emotes, isHistory }) => (\n  <ChatMessageRoot isHistory={isHistory}>\n    <Name color={color}>{name}</Name>:{' '}\n    <Text dangerouslySetInnerHTML={{ __html: formatMessage(text, emotes) }} />\n  </ChatMessageRoot>\n);\n\nChatMessage.defaultProps = {\n  emotes: {},\n  isHistory: false,\n};\n\nChatMessage.propTypes = {\n  name: pt.string.isRequired,\n  color: pt.string.isRequired,\n  text: pt.string.isRequired,\n  emotes: pt.oneOfType([pt.bool, pt.shape({})]),\n  isHistory: pt.bool,\n};\n\nexport default ChatMessage;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { Client } from 'tmi.js';\nimport tmiParser from 'tmi.js/lib/parser';\nimport Scrollbar from 'react-scrollbars-custom';\n\nimport { MAIN_CHANNEL_NAME, TWITCH_API_CLIENT_ID } from '../utils/constants';\nimport ChatInput from './ChatInput';\nimport ChatMessage from './ChatMessage';\n\nconst MORE_MESSAGES_OFFSET = 100;\n\nconst ChatRoot = styled.div`\n  height: 100vh;\n  background-color: #222;\n  font-size: 12px;\n`;\nconst ChatWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 340px;\n  height: 100%;\n  background-color: #000;\n`;\nconst MessagesWrapper = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\nconst Messages = styled(Scrollbar).attrs({\n  disableTracksWidthCompensation: true,\n})`\n  overflow-y: auto;\n\n  .ScrollbarsCustom-TrackY {\n    background: none !important;\n  }\n\n  .ScrollbarsCustom-ThumbY {\n    margin-left: auto;\n    margin-right: auto;\n    width: 6px !important;\n  }\n\n  .ScrollbarsCustom-Content {\n    padding-bottom: 10px !important;\n  }\n`;\nconst MoreMessagesButton = styled.button`\n  position: absolute;\n  right: 0;\n  bottom: 10px;\n  display: ${(p) => (p.visible ? 'block' : 'none')};\n  padding: 5px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  transform: translateX(-50%);\n`;\n\nconst defaultOptions = {\n  options: {\n    clientId: TWITCH_API_CLIENT_ID,\n  },\n  connection: {\n    secure: true,\n    reconnect: true,\n  },\n  channels: [MAIN_CHANNEL_NAME],\n};\n\nconst parseEmotes = (emotes) => {\n  if (typeof emotes !== 'string') return emotes;\n\n  return emotes.split('/').reduce((acc, emote) => {\n    const [emoteId, emoteIndexes] = emote.split(':');\n\n    return {\n      ...acc,\n      [emoteId]: emoteIndexes.split(','),\n    };\n  }, {});\n};\n\nlet client = null;\n\nconst Chat = () => {\n  const [messages, setMessages] = useState([]);\n  const [isConnected, setIsConnected] = useState(false);\n  const isAuth = useSelector((state) => state.auth.isAuth);\n  const username = useSelector((state) => state.auth.user.login);\n  const [\n    isMoreMessagesButtonVisible,\n    setIsMoreMessagesButtonVisible,\n  ] = useState(false);\n  const messagesRef = useRef(null);\n\n  const handleScrollToBottom = () => {\n    if (messagesRef.current && messagesRef.current.scrollToBottom) {\n      messagesRef.current.scrollToBottom();\n    }\n  };\n\n  useEffect(handleScrollToBottom, [messages]);\n\n  const handleScrollUpdate = ({\n    clientHeight,\n    contentScrollHeight,\n    scrollTop,\n  }) => {\n    const maxScrollTop = contentScrollHeight - clientHeight;\n    const isVisible = scrollTop + MORE_MESSAGES_OFFSET < maxScrollTop;\n\n    setIsMoreMessagesButtonVisible(isVisible);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const recentMessagesResponse = await fetch(\n        `https://recent-messages.robotty.de/api/v2/recent-messages/${MAIN_CHANNEL_NAME}?clearchatToNotice=true`,\n      );\n      const recentMessages = await recentMessagesResponse.json();\n      const normalizedRecentMessages = recentMessages.messages\n        .map((rawMessage) => tmiParser.msg(rawMessage))\n        .filter(({ command }) => command === 'PRIVMSG')\n        .map(\n          ({\n            params: [, text],\n            tags: { 'display-name': name, color, emotes },\n          }) => ({\n            name,\n            color,\n            text,\n            emotes: parseEmotes(emotes),\n            isHistory: true,\n          }),\n        );\n\n      setMessages(normalizedRecentMessages);\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    const getOptions = () => {\n      const authOptions = isAuth\n        ? {\n            identity: {\n              username,\n              password: `oauth:${localStorage.accessToken}`,\n            },\n          }\n        : {};\n\n      return {\n        ...defaultOptions,\n        ...authOptions,\n      };\n    };\n\n    if (client) {\n      client.disconnect();\n    }\n\n    if (isAuth) {\n      const options = getOptions();\n      client = new Client(options);\n\n      client.connect();\n\n      client.on('connected', () => setIsConnected(true));\n      client.on('disconnected', () => setIsConnected(false));\n\n      client.on(\n        'message',\n        (channel, { color, 'display-name': name, emotes }, text) => {\n          const message = {\n            name,\n            color,\n            emotes: parseEmotes(emotes),\n            text,\n          };\n          setMessages((m) => [...m, message]);\n        },\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [username]);\n\n  const handleSubmit = (data) => {\n    client.say(MAIN_CHANNEL_NAME, data);\n  };\n\n  return (\n    <ChatRoot>\n      <ChatWrapper>\n        <MessagesWrapper>\n          <Messages onUpdate={handleScrollUpdate} ref={messagesRef}>\n            {messages.map(({ name, color, text, emotes, isHistory }, key) => (\n              <ChatMessage\n                // eslint-disable-next-line react/no-array-index-key\n                key={key}\n                name={name}\n                color={color}\n                text={text}\n                emotes={emotes}\n                isHistory={isHistory}\n              />\n            ))}\n          </Messages>\n          <MoreMessagesButton\n            onClick={handleScrollToBottom}\n            visible={isMoreMessagesButtonVisible}\n          >\n            More messages below\n          </MoreMessagesButton>\n        </MessagesWrapper>\n        <ChatInput\n          onSubmit={handleSubmit}\n          isDisabled={!isAuth || !isConnected}\n          isAuth={isAuth}\n        />\n      </ChatWrapper>\n    </ChatRoot>\n  );\n};\n\nexport default Chat;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { setIsAuth } from '../reducers/auth';\nimport Chat from './Chat';\n\nconst Home = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const rawUser = localStorage.getItem('user');\n\n    if (rawUser) {\n      const user = JSON.parse(rawUser);\n\n      dispatch(setIsAuth({ isAuth: true, user }));\n    }\n\n    // try to connect to the chat. if there is an error, set isAuth to false and connect without login\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return <Chat />;\n};\n\nexport default Home;\n","import {\n  TWITCH_API_AUTH_BASE,\n  TWITCH_API_CLIENT_ID,\n  TWITCH_API_REDIRECT_URI,\n} from './constants';\n\nconst authParams = {\n  client_id: TWITCH_API_CLIENT_ID,\n  redirect_uri: TWITCH_API_REDIRECT_URI,\n  response_type: 'token+id_token',\n  scope: [\n    'openid',\n    'chat:edit',\n    'chat:read',\n    'user_blocks_read',\n    'user_blocks_edit',\n  ].join('+'),\n  claims: JSON.stringify({\n    id_token: { email_verified: null, picture: null, preferred_username: null },\n  }),\n  // state: uid(),\n};\n\n// const getAuthUrl = () => {\n//   const search = new URLSearchParams();\n//   Object.entries(authParams).forEach(([key, value]) => search.set(key, value));\n\n//   return `${TWITCH_API_AUTH_BASE}?${search.toString()}`;\n// };\n\nconst getAuthUrl = () => {\n  const search = Object.entries(authParams)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n\n  return `${TWITCH_API_AUTH_BASE}?${search}`;\n};\n\nexport default getAuthUrl;\n","import getAuthUrl from '../utils/getAuthUrl';\n\nconst Auth = () => {\n  window.location.href = getAuthUrl();\n\n  return null;\n};\n\nexport default Auth;\n","import { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport jwt from 'jsonwebtoken';\n\nimport { fetchUser } from '../reducers/auth';\n\nconst AuthCallback = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  if (!window.location.hash) return null;\n\n  const params = new URLSearchParams(window.location.hash.slice(1));\n\n  const accessToken = params.get('access_token');\n  const idToken = params.get('id_token');\n\n  if (!accessToken || !idToken) return null;\n\n  localStorage.setItem('accessToken', accessToken);\n  localStorage.setItem('idToken', idToken);\n\n  const { sub: id } = jwt.decode(idToken);\n\n  fetchUser(dispatch)(id);\n\n  history.push('/');\n\n  return null;\n};\n\nexport default AuthCallback;\n","import { css } from 'styled-components';\n\nexport default css`\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    margin: 0;\n    font-family: Roobert, Helvetica Neue, Helvetica, Arial, sans-serif;\n  }\n`;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { createGlobalStyle } from 'styled-components';\n\nimport common from './common';\nimport colors from './colors';\nimport vars from './vars';\n\nexport default createGlobalStyle`\n  :root {\n    ${colors};\n    ${vars};\n  }\n  ${common};\n`;\n","import React from 'react';\nimport pt from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Home from './Components/Home';\nimport Auth from './Components/Auth';\nimport AuthCallback from './Components/AuthCallback';\nimport GlobalStyles from './styles';\n\nconst App = ({ store }) => (\n  <>\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/chat/\" component={Home} />\n          <Route exact path=\"/chat/auth\" component={Auth} />\n          <Route exact path=\"/chat/auth/callback\" component={AuthCallback} />\n        </Switch>\n      </Router>\n    </Provider>\n    <GlobalStyles />\n  </>\n);\n\nApp.propTypes = {\n  store: pt.shape({}).isRequired,\n};\n\nexport default App;\n","/* eslint-disable no-underscore-dangle */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './reducers';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n  rootReducer,\n  {},\n  compose(\n    applyMiddleware(thunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__\n      ? window.__REDUX_DEVTOOLS_EXTENSION__()\n      : (noop) => noop,\n  ),\n);\n\nReactDOM.render(<App store={store} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}