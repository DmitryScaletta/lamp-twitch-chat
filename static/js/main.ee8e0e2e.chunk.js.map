{"version":3,"sources":["features/emotes/utils/getEmotesByText.ts","features/emotes/utils/emotesUsageStatistic.ts","features/messageCards/messageCardsSelectors.ts","features/blockedUsers/blockedUsersSlice.ts","features/chat/chatSelectors.ts","utils/normalizeHref.ts","features/messages/utils/htmlEntity.ts","features/auth/authSelectors.ts","utils/fetchRequest.ts","api/twitch.ts","api/bttv.ts","api/ffz.ts","api/recentMessages.ts","api/youtube.ts","features/emotes/utils/findEmote.ts","features/emotes/utils/createEmoteCategories.ts","features/emotes/emotesSelectors.ts","features/options/optionsSelectors.ts","features/chat/utils/parseApiResponse.ts","features/chat/chatSlice.ts","features/badges/badgesSelectors.ts","features/auth/useInitializeAuth.ts","features/messages/messagesSelectors.ts","features/chat/hooks/useFetchChatData.ts","features/chat/hooks/useCurrentChannel.ts","features/messages/utils/replaceEmojis.ts","features/chat/hooks/useTwitchClient.ts","features/chat/utils/getUsersByBeginText.ts","features/chat/utils/suggestions.ts","features/chat/hooks/useChatInput.ts","icons/close.svg","components/IconButton.tsx","components/ChatModal.tsx","icons/smiley-face.svg","components/Scrollbar.tsx","icons/search.svg","features/emotes/EmotePicker.tsx","features/chat/ChatInput.tsx","icons/gears.svg","icons/twitch.svg","components/Button.tsx","components/Switch.tsx","features/options/Options.tsx","features/chat/ChatControls.tsx","utils/colors.ts","features/messageCards/MessageCard.tsx","features/messages/Message.tsx","features/messages/Notice.tsx","features/messages/UserNotice.tsx","features/messages/ChatMessage.tsx","features/messages/Messages.tsx","features/chat/JoinChannel.tsx","features/chat/Chat.tsx","features/auth/Auth.tsx","features/auth/Logout.tsx","features/auth/AuthCallback.tsx","styles/common.js","styles/colors.js","styles/vars.js","styles/index.js","app/App.tsx","serviceWorker.ts","app/rootReducer.ts","app/store.ts","index.tsx","features/auth/authSlice.ts","features/messages/utils/parseMessageEntities.ts","features/messages/utils/checkIsHighlighted.ts","features/messageCards/utils/getMessageCardFromEntities.ts","assets/ts-tink.ogg","features/messages/utils/normalizeMessages.ts","features/messages/utils/sliceMessagesByLimit.ts","features/messages/utils/sliceItemsByLimit.ts","features/messages/messagesSlice.ts","features/auth/authUtils.ts","utils/constants.ts","features/emotes/emotesSlice.ts","utils/assertNever.ts","features/messageCards/messageCardsSlice.ts","features/blockedUsers/blockedUsersSelectors.ts","features/badges/badgesSlice.ts","features/options/optionsUtils.ts","features/options/optionsSlice.ts"],"names":["getEmotesByText","text","emotes","limit","result","begins","contains","textLower","toLowerCase","findEmote","bttv","byText","bttvChannel","ffz","ffzChannel","twitch","twitchUser","twitchGlobal","bttvGlobal","ffzGlobal","emoji","readEmotesUsageStatistic","statistic","localStorage","getItem","LS_EMOTES_USAGE_STATISTIC","JSON","parse","e","getUsageStatisticFromEntities","R","v","items","type","id","lastUpdatedAt","Date","now","uses","length","mergeFn","key","left","right","writeEmotesUsageStatistic","entries","history","newHistory","setItem","stringify","normalizeHistory","getEmotesFromUsageStatistic","item","emoteEntity","byId","push","messageCardSelector","card","state","messageCards","twitchClips","twitchVideos","youtubeVideos","assertNever","fetchBlockedUsers","createAsyncThunk","api","blockedUsers","createSlice","name","initialState","status","error","reducers","extraReducers","builder","addCase","pending","fulfilled","payload","parseBlockedUsers","rejected","currentChannelSelector","chat","currentChannel","isConnectedSelector","isConnected","currentChannelIdSelector","params","byChannels","room","roomId","userColorSelector","user","color","userDisplayNameSelector","displayName","userBadgesSelector","badges","isStartsWithProtocolRegex","normalizeHref","href","test","regexEmotesMap","getFfzSrcSet","dpi","url","createTwitchEmote","code","String","alt","src","TWITCH_EMOTES_CDN","srcSet","createBttvEmote","BTTV_EMOTES_CDN","createFfzEmote","urls","createEmoji","short","unified","createMention","target","createLink","createBadges","globalBadges","channelBadges","version","badge","versions","title","description","image_url_1x","imageUrl1x","image_url_2x","imageUrl2x","image_url_4x","imageUrl4x","label","createBadge","Boolean","isAuthReadySelector","auth","isAuthSelector","userLoginSelector","userLogin","userIdSelector","userId","fetchRequest","async","timeout","restOptions","options","fetchTimeout","API_REQUESTS_TIMEOUT","controller","AbortController","signal","setTimeout","abort","response","fetch","ok","Error","statusText","json","apiRequestHelix","headers","process","Authorization","LS_ACCESS_TOKEN","apiRequestKraken","Accept","fetchUser","fetchTwitchEmotes","fetchGlobalBadges","language","fetchChannelBadges","channelId","fetchTwitchClip","fetchTwitchVideo","fetchBttvGlobalEmotes","fetchBttvChannelEmotes","fetchFfzGlobalEmotes","fetchFfzChannelEmotes","fetchRecentMessages","channel","fetchYoutubeVideo","emojisList","Object","values","emojisMap","findTwitchEmoteByIdInSets","sets","set","emote","htmlEntity","emotesMap","555555557","555555559","555555561","555555562","555555568","555555576","555555579","555555583","555555584","555555588","555555590","555555594","555555598","555555600","findTwitchEmoteByNameInSets","includes","byName","index","indexOf","findById","findByName","byChar","char","keywords","keyword","emojiEntity","getTwitchUserEmoteCategories","getMainEmoteCategories","createSelector","map","filter","createEmoteCategories","mainEmoteCategories","frequentlyUsed","isTwitchEmotesLoadedSelector","isBttvGlobalEmotesLoadedSelector","global","isBttvChannelEmotesLoadedSelector","isFfzGlobalEmotesLoadedSelector","isFfzChannelEmotesLoadedSelector","isEmotesLoadedSelector","twitchEmotesSelector","twitchGlobalEmotesSelector","twitchUserEmotesSelector","emotesSelector","isEmotesLoaded","emoteCategoriesSelector","search","optionsSelector","value","showTimestamps","timeFormat24Hours","splitChat","fixedWidth","highlightNotifications","showTwitchCards","showYoutubeCards","isShowTimestampsSelector","isSplitChatSelector","isFixedWidthSelector","isHighlightNotificationsSelector","isShowTwitchCardsSelector","isShowYoutubeCardsSelector","isTimeFormat24HoursSelector","parseTwitchEmotes","parseBttvGlobalEmotes","data","parseBttvChannelEmotes","channelEmotes","sharedEmotes","parseFfzGlobalEmotes","default_sets","defaultSets","parseFfzChannelEmotes","parseBadges","parseTwitchClip","thumbnail_url","thumbnailUrl","creator_name","creatorName","x1","replace","parseTwitchVideo","user_name","userName","published_at","publishedAt","date","format","thumbnailReplace","parseYoutubeVideo","snippet","channelTitle","thumbnails","default","medium","x2","high","x4","updateIsConnected","updateCurrentChannel","updateGlobalUserParams","tags","updateUserParams","updateRoomParams","actions","isGlobalBadgesLoadedSelector","isChannelBadgesLoadedSelector","globalBadgesSelector","channelBadgesSelector","userBadgesImagesSelector","useInitializeAuth","dispatch","useDispatch","isAuthReady","useSelector","useEffect","idToken","readUserFromLocatStorage","login","isAuth","initializeAuth","jwtData","jwt","decode","sub","messagesSelector","messages","usersSelector","users","recentUserMessagesSelector","recentUserMessages","isHistoryLoadedSelector","isHistoryAddedSelector","isAdded","isEvenSelector","isEven","useFetchChatData","currentChannelId","isTwitchEmotesLoaded","isBttvGlobalEmotesLoaded","isBttvChannelEmotesLoaded","isFfzGlobalEmotesLoaded","isFfzChannelEmotesLoaded","isGlobalBadgesLoaded","isChannelBadgesLoaded","isHistoryLoaded","isBlockedUsersLoaded","isBlockedUsersLoadedSelector","isHistoryAdded","isReadyToAddHistory","addRecentMessages","useCurrentChannel","useHistory","hash","location","slice","LS_LAST_CHANNEL","document","lastChannel","pathname","replaceEmojis","split","word","join","useTwitchClient","prevChannel","usePrevious","clientRef","useRef","registerEvents","useCallback","client","current","on","message","receiveMessage","invalidateAuth","targetUserId","clearChat","part","twitchIrc","create","connect","sendMessage","trim","normalizedMessage","handleUserState","ownMessage","removeListeners","handleNotice","NOTICE_MESSAGE_TAGS","msgId","off","say","getUsersByBeginText","beginText","currentUserLogin","beginTextLower","currentUserLoginLower","nameLower","startsWith","suggestionsInitialState","isActive","activeIndex","start","end","setSuggestionsIndexUp","setSuggestionsIndexDown","replaceSuggestionText","currentItem","insertedText","substring","useChatInput","chatInputRef","inputText","setInputText","useState","suggestions","setSuggestions","useSetState","recentUserMessagesIndex","setRecentUserMessagesIndex","handleSendMessage","deps","handleChange","d","selectionStart","spaceIndexBefore","lastIndexOf","spaceIndexAfter","usersMatch","SUGGESTION_TYPES","regex","exec","emotesMatch","handleKeyUp","handleKeyDown","preventDefault","t","newIndex","defaultValue","handleSuggestionMouseEnter","handleSuggestionClick","focus","handleBlur","handleNameRightClick","trimLeft","handleEmoteClick","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","this","_ref","fill","SvgClose","titleId","props","svgRef","xmlns","viewBox","ref","ForwardRef","sizes","small","css","IconButton","styled","button","attrs","p","$size","ChatModalRoot","div","CloseButton","CloseIcon","CloseIconSvg","ChatModal","children","onClose","onClick","fillRule","clipRule","SvgSmileyFace","Scrollbar","CustomScrollbar","disableTracksWidthCompensation","SvgSearch","EmotePickerRoot","Categories","Category","CategoryHeader","CategoryItems","Emote","img","SearchBlock","SearchInput","input","SearchIcon","SearchIconSvg","EmotePicker","onEmoteClick","setSearch","searchInputRef","emoteCategories","placeholder","onChange","ChatInputRoot","ChatInputInner","Suggestions","SuggestionItem","$isActive","SuggestionImage","TextareaInput","TextareaWrapper","$isSuggestions","EmotesModal","Textarea","TextareaAutosize","$showScroll","EmotesButton","SmileyFaceIcon","SmileyFaceIconSvg","ChatInput","React","forwardRef","isDisabled","onKeyUp","onKeyDown","onBlur","onSuggestionMouseEnter","onSuggestionClick","textareaRef","suggestionsRef","useOnClickOutside","refs","isShowTextareaScroll","setIsShowTextareaScroll","isEmotesModalVisible","setIsEmotesModalVisible","handleCloseEmotesModal","renderUser","onMouseEnter","renderEmote","renderSuggestions","maxLength","maxRows","disabled","onHeightChange","height","memo","SvgGears","_ref2","_ref3","SvgTwitch","Button","SwitchRoot","Label","Input","Switch","checked","readOnly","aria-label","htmlFor","defaultProps","OptionsRoot","Header","h2","Option","OptionText","span","Profile","UserName","LogOutButton","Link","Badge","Options","userDisplayName","userColor","userBadgesImages","renderOption","changeOption","renderOptionsCategory","to","ChatControlsRoot","Controls","OptionsModal","OptionsButton","GearsIcon","GearsIconSvg","TwitchIcon","TwitchIconSvg","ChatControls","onSendMessage","isOptionsModalVisible","setIsOptionsModalVisible","handleCloseOptionsModal","optionsRef","as","prev","hueToRgb","pp","qq","calculateColorBackground","parseInt","substr","calculateColorReplacement","background","light","factor","hsl","r","g","b","max","Math","min","l","h","s","rgbToHsl","rgb","round","q","hslToRgb","toString","padStart","colorCache","Map","MessageCardRoot","a","rel","$clickable","Preview","Image","PreviewLoading","Content","textStyles","Title","Description","textLoadingStyle","TitleLoading","DescriptionLoading","errorImageSrc","errorImageSrcSet","errorDescription","MessageCard","cardInfo","MessageRoot","$isAction","$color","$isHistory","$isDeleted","$isHighlighted","$isEven","Name","Emoji","EmoteWrapper","Mention","$isOwnMessage","Timestamp","renderMessageArray","messageLogin","data-emote-id","renderBadges","Message","entities","timestamp","isHistory","isAction","isDeleted","isHighlighted","onNameRightClick","isVisible","setIsVisible","isShowTimestamps","timeFormat","newColor","darkenedMode","cacheKey","has","get","bgColor","size","delete","next","calculateColor","onContextMenu","NoticeRoot","Notice","UserNoticeRoot","UserNotice","systemMessage","ChatMessage","MessagesRoot","StyledScrollbar","MoreMessagesButton","$isVisible","Messages","isMoreMessagesButtonVisible","setIsMoreMessagesButtonVisible","isSplitChat","scrollbarRef","handleScrollToBottom","scrollToBottom","getIsEven","onUpdate","clientHeight","contentScrollHeight","scrollTop","JoinChannelRoot","JoinButton","JoinChannel","setValue","inputRef","handleChangeChannel","onKeyPress","ChatRoot","ChatWrapper","$isFixedWidth","Chat","isFixedWidth","chatInput","Auth","window","getAuthUrl","Logout","removeItem","LS_ID_TOKEN","LS_USER","AuthCallback","URLSearchParams","accessToken","createGlobalStyle","colors","vars","common","getHomeComponent","isAuthRedirect","App","exact","path","render","component","isLocalhost","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","console","log","onSuccess","catch","rootReducer","combineReducers","store","configureStore","reducer","ReactGA","initialize","page","pageview","require","ReactDOM","getElementById","URL","origin","addEventListener","contentType","ready","unregister","reload","checkValidServiceWorker","writeUserToLocatStorage","MENTION_REGEX","LINK_REGEX","urlRegex","strict","parseMessageEntities","embeddedEmotes","isOwnMessage","words","checkEmbeddedEmotes","keys","normalizedEmbeddedEmotes","reduce","acc","normalizeEmbeddedEmotes","offset","forEach","arr","isLast","entity","parseTwitch","twitchEmote","mentionMatch","tail","linkMatch","findEntity","Array","isArray","entityItem","string","count","getCodePointsCount","checkIsHighlighted","messageUser","messageText","RegExp","twitchClipRegex","twitchVideoRegex","youtubeVideoRegex","getMessageCardFromEntities","parseYoutube","m","tink","Howl","tinkSfx","normalizeHistoryMessages","rawMessages","blockedUsersSelector","rawMessage","tekko","command","prefix","parsedTags","tmiSentTs","normalizeHistoryMessage","sliceMessagesByLimit","addedItemsCount","diff","isSliced","sliceItemsByLimit","messagesSlice","receiveMessagesAction","newItems","newIsEven","CHANNEL_MESSAGES_LIMIT","newUsers","STORE_USERS_LIMIT","splice","unshift","newRecentUserMessages","RECENT_USER_MESSAGES_LIMIT","meta","arg","normalizePayload","isHighlightNotifications","isShowTwitchCards","isShowYoutubeCards","play","normalizeMessage","nanoid","noticeType","normalizeNotice","systemMsg","normalizeUserNotice","normalizeOwnMessage","getState","slicedRawHistory","authParams","client_id","TWITCH_API_CLIENT_ID","redirect_uri","TWITCH_API_REDIRECT_URI","response_type","scope","claims","id_token","email_verified","picture","preferred_username","TWITCH_API_AUTH_BASE","LS_OPTIONS","readOptionsFromLocalStorage","blacklistKeywords","highlightKeywords","prepare"],"mappings":"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","file":"static/js/main.ee8e0e2e.chunk.js","sourcesContent":["/* eslint-disable no-restricted-syntax */\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport findEmote from 'features/emotes/utils/findEmote';\n\nexport type EmotesByText = {\n  begins: htmlEntity.Emote[];\n  contains: htmlEntity.Emote[];\n};\n\nconst getEmotesByText = (\n  text: string,\n  emotes: StateEmotes,\n  limit = -1,\n): htmlEntity.Emote[] => {\n  if (!emotes) return [];\n\n  const result: EmotesByText = {\n    begins: [],\n    contains: [],\n  };\n  const textLower = text.toLowerCase();\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const isOver =\n    findEmote.bttv.byText(result, emotes.bttvChannel, textLower, limit) ||\n    findEmote.ffz.byText(result, emotes.ffzChannel, textLower, limit) ||\n    findEmote.twitch.byText(result, emotes.twitchUser, textLower, limit) ||\n    findEmote.twitch.byText(result, emotes.twitchGlobal, textLower, limit) ||\n    findEmote.bttv.byText(result, emotes.bttvGlobal, textLower, limit) ||\n    findEmote.ffz.byText(result, emotes.ffzGlobal, textLower, limit) ||\n    findEmote.emoji.byText(result, textLower, limit);\n\n  return [...result.begins, ...result.contains];\n};\n\nexport default getEmotesByText;\n","import * as R from 'ramda';\n\nimport { LS_EMOTES_USAGE_STATISTIC } from 'utils/constants';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport findEmote from 'features/emotes/utils/findEmote';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport type { MessageEntity } from 'features/messages/messagesSlice';\n\ntype Type = 'twitch-emote' | 'bttv-emote' | 'ffz-emote';\n\ntype AUsageItem = {\n  lastUpdatedAt: number;\n  uses: number;\n};\n\ntype UsageItemTwitch = AUsageItem & {\n  type: 'twitch-emote';\n  id: string;\n};\n\ntype UsageItemBttv = AUsageItem & {\n  type: 'bttv-emote';\n  id: string;\n};\n\ntype UsageItemFfz = AUsageItem & {\n  type: 'ffz-emote';\n  id: number;\n};\n\ntype UsageItem = UsageItemTwitch | UsageItemBttv | UsageItemFfz;\n\ntype EmotesUsageStatistic = Record<Type, Record<string, UsageItem>>;\n\nexport const readEmotesUsageStatistic = (): Partial<EmotesUsageStatistic> => {\n  try {\n    const statistic = localStorage.getItem(LS_EMOTES_USAGE_STATISTIC);\n\n    return JSON.parse(statistic as string) || {};\n  } catch (e) {\n    return {};\n  }\n};\n\nexport const getUsageStatisticFromEntities = R.pipe<\n  MessageEntity[],\n  any,\n  any,\n  any\n>(\n  R.filter((v: any) =>\n    R.includes(R.prop('type', v), ['twitch-emote', 'bttv-emote', 'ffz-emote']),\n  ),\n  R.groupBy<any>(R.prop('type')),\n  R.map(\n    R.pipe<any, any, any>(\n      R.groupBy<any>(R.prop('id')),\n      R.map((items: any) => ({\n        type: items[0].type,\n        id: items[0].id,\n        lastUpdatedAt: Date.now(),\n        uses: items.length,\n      })),\n    ),\n  ),\n);\n\nconst mergeFn = (key: string, left: any, right: any) =>\n  key === 'uses' ? left + right : right;\n\nexport const writeEmotesUsageStatistic = (entries: MessageEntity[]) => {\n  const statistic = getUsageStatisticFromEntities(entries) as Partial<\n    EmotesUsageStatistic\n  >;\n\n  if (R.isEmpty(statistic)) return;\n\n  const history = readEmotesUsageStatistic();\n\n  const newHistory = R.mergeDeepWithKey(mergeFn, history, statistic);\n\n  localStorage.setItem(LS_EMOTES_USAGE_STATISTIC, JSON.stringify(newHistory));\n};\n\nconst normalizeHistory = R.pipe<any, any, any, any, UsageItem[]>(\n  R.values,\n  R.map(R.values),\n  R.flatten,\n  R.sortWith([R.descend(R.prop('uses')), R.descend(R.prop('lastUpdatedAt'))]),\n);\n\nexport const getEmotesFromUsageStatistic = (\n  emotes: StateEmotes,\n  limit = 27,\n) => {\n  if (!emotes) return [];\n\n  const result: htmlEntity.Emote[] = [];\n  const history = R.pipe(readEmotesUsageStatistic, normalizeHistory)();\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const item of history) {\n    if (result.length === limit) return result;\n\n    let emoteEntity = null;\n\n    if (item.type === 'twitch-emote') {\n      emoteEntity = findEmote.twitch.byId(item.id, emotes);\n    }\n\n    if (item.type === 'bttv-emote') {\n      emoteEntity = findEmote.bttv.byId(item.id, emotes);\n    }\n\n    if (item.type === 'ffz-emote') {\n      emoteEntity = findEmote.ffz.byId(item.id, emotes);\n    }\n\n    if (emoteEntity) {\n      result.push(emoteEntity);\n    }\n  }\n\n  return result;\n};\n","import type { RootState } from 'app/rootReducer';\nimport assertNever from 'utils/assertNever';\nimport type { MessageCardInfo } from 'features/messages/messagesSlice';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const messageCardSelector = (\n  card: Omit<MessageCardInfo, 'url'> | null,\n) => (state: RootState) => {\n  if (!card) return null;\n\n  if (card.type === 'twitch-clip') {\n    return state.messageCards.twitchClips[card.id];\n  }\n\n  if (card.type === 'twitch-video') {\n    return state.messageCards.twitchVideos[card.id];\n  }\n\n  if (card.type === 'youtube-video') {\n    return state.messageCards.youtubeVideos[card.id];\n  }\n\n  return assertNever(card.type);\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchResult } from 'utils/types';\nimport { parseBlockedUsers } from 'features/chat/utils/parseApiResponse';\n\ntype BlockedUsersState = FetchResult<string[]>;\n\nconst initialState: BlockedUsersState = {\n  status: 'idle',\n  error: {},\n  items: [],\n};\n\nexport const fetchBlockedUsers = createAsyncThunk(\n  'chat/fetchBlockedUsers',\n  api.fetchBlockedUsers,\n);\n\nconst blockedUsers = createSlice({\n  name: 'blockedUsers',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchBlockedUsers.pending, (state) => {\n      state.status = 'loading';\n      state.error = {};\n    });\n\n    builder.addCase(fetchBlockedUsers.fulfilled, (state, { payload }) => {\n      state.status = 'success';\n      state.items = parseBlockedUsers(payload);\n    });\n\n    builder.addCase(fetchBlockedUsers.rejected, (state, { error }) => {\n      state.status = 'error';\n      state.error = error;\n    });\n  },\n});\n\nexport default blockedUsers.reducer;\n","import type { RootState } from 'app/rootReducer';\n\nexport const currentChannelSelector = (state: RootState) =>\n  state.chat.currentChannel;\n\nexport const isConnectedSelector = (state: RootState) => state.chat.isConnected;\n\nexport const currentChannelIdSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.room?.roomId ||\n  '';\n\nexport const userColorSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user?.color ||\n  '';\n\nexport const userDisplayNameSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user\n    ?.displayName || '';\n\nexport const userBadgesSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user?.badges ||\n  {};\n","// https://regex101.com/r/cpaNXh/1\nconst isStartsWithProtocolRegex = /^(?:(?:[a-z]+:)?\\/\\/)/;\n\nconst normalizeHref = (href: string) =>\n  isStartsWithProtocolRegex.test(href) ? href : `//${href}`;\n\nexport default normalizeHref;\n","import * as R from 'ramda';\nimport type twitchIrc from '@honeykingdom/twitch-simple-irc';\n\nimport * as api from 'api';\nimport normalizeHref from 'utils/normalizeHref';\nimport { TWITCH_EMOTES_CDN, BTTV_EMOTES_CDN } from 'utils/constants';\n\nexport type TwitchEmote = {\n  type: 'twitch-emote';\n  id: string;\n  alt: string;\n  src: string;\n  srcSet: string;\n};\nexport type BttvEmote = {\n  type: 'bttv-emote';\n  id: string;\n  alt: string;\n  src: string;\n  srcSet: string;\n};\nexport type FfzEmote = {\n  type: 'ffz-emote';\n  id: number;\n  alt: string;\n  src: string;\n  srcSet: string;\n};\nexport type Emoji = {\n  type: 'emoji';\n  alt: string;\n  src: string;\n  srcSet?: string;\n};\nexport type Mention = {\n  type: 'mention';\n  text: string;\n  target: string;\n};\nexport type Link = {\n  type: 'link';\n  text: string;\n  href: string;\n};\nexport type Badge = {\n  alt: string;\n  label: string;\n  src: string;\n  srcSet: string;\n};\n\nexport type Emote = TwitchEmote | BttvEmote | FfzEmote | Emoji;\n\n// prettier-ignore\nexport const regexEmotesMap: Record<string, string> = {\n  '[oO](_|\\\\.)[oO]': 'O_o',\n  '\\\\&gt\\\\;\\\\(':     '>(',\n  '\\\\&lt\\\\;3':       '<3',\n  '\\\\:-?(o|O)':      ':O',\n  '\\\\:-?(p|P)':      ':P',\n  '\\\\:-?[\\\\\\\\/]':    ':/',\n  '\\\\:-?[z|Z|\\\\|]':  ':Z',\n  '\\\\:-?\\\\(':        ':(',\n  '\\\\:-?\\\\)':        ':)',\n  '\\\\:-?D':          ':D',\n  '\\\\;-?(p|P)':      ';P',\n  '\\\\;-?\\\\)':        ';)',\n  'R-?\\\\)':          'R)',\n  'B-?\\\\)':          'B)',\n};\n\nexport const getFfzSrcSet = R.pipe<any, [string, string][], string[], string>(\n  R.toPairs,\n  R.map(([dpi, url]) => `${url} ${dpi}x`),\n  R.join(', '),\n);\n\ntype CreateTwitchEmoteParams = api.TwitchEmote | { id: string; code: string };\n\nexport const createTwitchEmote = ({\n  id,\n  code,\n}: CreateTwitchEmoteParams): TwitchEmote => ({\n  type: 'twitch-emote',\n  id: String(id),\n  alt: regexEmotesMap[code] || code,\n  src: `${TWITCH_EMOTES_CDN}/${id}/1.0`,\n  srcSet: `${TWITCH_EMOTES_CDN}/${id}/1.0 1x, ${TWITCH_EMOTES_CDN}/${id}/2.0 2x, ${TWITCH_EMOTES_CDN}/${id}/3.0 4x`,\n});\n\nexport const createBttvEmote = ({\n  id,\n  code,\n}: api.BttvGlobalEmote | api.BttvChannelEmote): BttvEmote => ({\n  type: 'bttv-emote',\n  id,\n  alt: code,\n  src: `${BTTV_EMOTES_CDN}/${id}/1x`,\n  srcSet: `${BTTV_EMOTES_CDN}/${id}/2x 2x, ${BTTV_EMOTES_CDN}/${id}/3x 4x`,\n});\n\nexport const createFfzEmote = ({ id, name, urls }: api.FfzEmote): FfzEmote => ({\n  type: 'ffz-emote',\n  id,\n  alt: name,\n  src: urls[1],\n  srcSet: getFfzSrcSet(urls),\n});\n\nexport const createEmoji = ({\n  short,\n  unified,\n}: {\n  short: string;\n  unified: string;\n}): Emoji => ({\n  type: 'emoji',\n  alt: `:${short}:`,\n  src: `//twemoji.maxcdn.com/v/latest/72x72/${unified}.png`,\n});\n\nexport const createMention = (text: string, target: string): Mention => ({\n  type: 'mention',\n  text,\n  target,\n});\n\nexport const createLink = (href: string): Link => ({\n  type: 'link',\n  text: href,\n  href: normalizeHref(href),\n});\n\nexport const createBadge = ({\n  title,\n  description,\n  image_url_1x: imageUrl1x,\n  image_url_2x: imageUrl2x,\n  image_url_4x: imageUrl4x,\n}: api.TwitchBadgeVersion): Badge => ({\n  alt: title,\n  label: description,\n  src: imageUrl1x,\n  srcSet: `${imageUrl1x} 1x, ${imageUrl2x} 2x, ${imageUrl4x} 4x`,\n});\n\nexport const createBadges = (\n  badges: twitchIrc.Badges,\n  globalBadges: Record<string, api.TwitchBadge>,\n  channelBadges: Record<string, api.TwitchBadge>,\n): Badge[] => {\n  const mapBadges = ([name, version]: [string, string]): Badge | false => {\n    const badge =\n      channelBadges[name]?.versions[version] ||\n      globalBadges[name]?.versions[version];\n\n    return badge ? createBadge(badge) : false;\n  };\n\n  return R.pipe<any, [string, string][], any[], any[]>(\n    R.toPairs,\n    R.map(mapBadges),\n    R.filter(Boolean),\n  )(badges);\n};\n","import type { RootState } from 'app/rootReducer';\n\nexport const isAuthReadySelector = (state: RootState) =>\n  state.auth.status !== 'idle' && state.auth.status !== 'loading';\n\nexport const isAuthSelector = (state: RootState) =>\n  state.auth.status === 'success';\n\nexport const userLoginSelector = (state: RootState) => state.auth.userLogin;\n\nexport const userIdSelector = (state: RootState) => state.auth.userId;\n","import { API_REQUESTS_TIMEOUT } from 'utils/constants';\n\nexport interface FetchRequestOptions extends RequestInit {\n  timeout?: number;\n}\n\nconst fetchRequest = async (\n  url: string,\n  { timeout, ...restOptions }: FetchRequestOptions = {},\n) => {\n  let options = { ...restOptions };\n  const fetchTimeout = timeout || API_REQUESTS_TIMEOUT;\n\n  if (fetchTimeout) {\n    const controller = new AbortController();\n\n    options = { ...options, signal: controller.signal };\n\n    setTimeout(() => controller.abort(), fetchTimeout);\n  }\n\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  const body = await response.json();\n\n  return body;\n};\n\nexport default fetchRequest;\n","import { LS_ACCESS_TOKEN } from 'utils/constants';\nimport fetchRequest from 'utils/fetchRequest';\nimport type { FetchRequestOptions } from 'utils/fetchRequest';\n\nconst TWITCH_API_HELIX = 'https://api.twitch.tv/helix';\nconst TWITCH_API_KRAKEN = 'https://api.twitch.tv/kraken';\n\nconst getHelixHeaders = () => ({\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `Bearer ${localStorage.getItem(LS_ACCESS_TOKEN)}`,\n});\n\nconst getKrakenHeaders = () => ({\n  Accept: 'application/vnd.twitchtv.v5+json',\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `OAuth ${localStorage.getItem(LS_ACCESS_TOKEN)}`,\n});\n\nconst apiRequestHelix = (url: string, options?: FetchRequestOptions) =>\n  fetchRequest(`${TWITCH_API_HELIX}${url}`, {\n    ...options,\n    headers: getHelixHeaders(),\n  } as FetchRequestOptions);\n\nconst apiRequestKraken = (url: string, options?: FetchRequestOptions) =>\n  fetchRequest(`${TWITCH_API_KRAKEN}${url}`, {\n    ...options,\n    headers: getKrakenHeaders(),\n  } as FetchRequestOptions);\n\nexport interface TwitchUser {\n  id: string;\n  login: string;\n  display_name: string;\n  type: string;\n  broadcaster_type: string;\n  description: string;\n  profile_image_url: string;\n  offline_image_url: string;\n  view_count: number;\n}\n\nexport interface TwitchUsersResponse {\n  data: TwitchUser[];\n}\n\nexport interface TwitchEmote {\n  id: number;\n  code: string;\n}\n\nexport interface TwitchEmotesResponse {\n  emoticon_sets: Record<string, TwitchEmote[]>;\n}\n\nexport interface TwitchBadgeVersion {\n  image_url_1x: string;\n  image_url_2x: string;\n  image_url_4x: string;\n  description: string;\n  title: string;\n  click_action: string;\n  click_url: string;\n  last_updated: null;\n}\n\nexport interface TwitchBadge {\n  versions: Record<string, TwitchBadgeVersion>;\n}\n\nexport interface TwitchBadgesResponse {\n  badge_sets: Record<string, TwitchBadge>;\n}\n\nexport interface TwitchBlockedUser {\n  display_name: string;\n  _id: string;\n  name: string;\n  type: string;\n  bio: string | null;\n  created_at: string;\n  updated_at: string;\n  logo: string;\n}\n\nexport interface TwitchBlockedUsersResponse {\n  _total: number;\n  blocks: {\n    user: TwitchBlockedUser;\n  }[];\n}\n\ninterface TwitchClipData {\n  id: string;\n  url: string;\n  embed_url: string;\n  broadcaster_id: string;\n  broadcaster_name: string;\n  creator_id: string;\n  creator_name: string;\n  video_id: string;\n  game_id: string;\n  language: string;\n  title: string;\n  view_count: number;\n  created_at: string;\n  thumbnail_url: string;\n}\n\nexport interface TwitchClipResponse {\n  data: TwitchClipData[];\n  pagination: Record<string, unknown>;\n}\n\ninterface TwitchVideoData {\n  id: string;\n  user_id: string;\n  user_name: string;\n  title: string;\n  description: string;\n  created_at: string;\n  published_at: string;\n  url: string;\n  thumbnail_url: string;\n  viewable: 'public' | 'private';\n  view_count: number;\n  language: string;\n  type: 'upload' | 'archive' | 'highlight';\n  duration: string;\n}\n\nexport interface TwitchVideoResponse {\n  data: TwitchVideoData[];\n  pagination: Record<string, unknown>;\n}\n\nexport const fetchUser = (userId: string): Promise<TwitchUsersResponse> =>\n  apiRequestHelix(`/users?id=${userId}`);\n\nexport const fetchTwitchEmotes = (\n  userId: string,\n): Promise<TwitchEmotesResponse> => apiRequestKraken(`/users/${userId}/emotes`);\n\nexport const fetchGlobalBadges = (\n  language = 'en',\n): Promise<TwitchBadgesResponse> =>\n  fetchRequest(\n    `https://badges.twitch.tv/v1/badges/global/display?language=${language}`,\n  );\n\nexport const fetchChannelBadges = (\n  channelId: string,\n  language = 'en',\n): Promise<TwitchBadgesResponse> =>\n  fetchRequest(\n    `https://badges.twitch.tv/v1/badges/channels/${channelId}/display?language=${language}`,\n  );\n\nexport const fetchBlockedUsers = (\n  userId: string,\n): Promise<TwitchBlockedUsersResponse> =>\n  apiRequestKraken(`/users/${userId}/blocks`);\n\nexport const fetchTwitchClip = (id: string): Promise<TwitchClipResponse> =>\n  apiRequestHelix(`/clips?id=${id}`);\n\nexport const fetchTwitchVideo = (id: string): Promise<TwitchVideoResponse> =>\n  apiRequestHelix(`/videos?id=${id}`);\n","import fetchRequest from 'utils/fetchRequest';\n\nexport interface BttvEmote {\n  id: string;\n  code: string;\n  imageType: 'png' | 'gif';\n}\n\nexport interface BttvGlobalEmote extends BttvEmote {\n  userId: string;\n}\n\nexport interface BttvChannelEmote extends BttvEmote {\n  user: {\n    id: string;\n    name: string;\n    displayName: string;\n    providerId: string;\n  };\n}\n\nexport type BttvGlobalEmotesResponse = BttvGlobalEmote[];\n\nexport interface BttvChannelEmotesResponse {\n  id: string;\n  bots: string[];\n  channelEmotes: BttvChannelEmote[];\n  sharedEmotes: BttvChannelEmote[];\n}\n\nexport const fetchBttvGlobalEmotes = (): Promise<BttvGlobalEmotesResponse> =>\n  fetchRequest('https://api.betterttv.net/3/cached/emotes/global');\n\nexport const fetchBttvChannelEmotes = (\n  channelId: string,\n): Promise<BttvChannelEmotesResponse> =>\n  fetchRequest(`https://api.betterttv.net/3/cached/users/twitch/${channelId}`);\n","import fetchRequest from 'utils/fetchRequest';\n\nexport interface FfzEmote {\n  css: null;\n  height: number;\n  hidden: boolean;\n  id: number;\n  margins: null;\n  modifier: boolean;\n  name: string;\n  offset: null;\n  owner: {\n    _id: number;\n    display_name: string;\n    name: string;\n  };\n  public: boolean;\n  urls: {\n    '1': string;\n    '2'?: string;\n    '4'?: string;\n  };\n  width: number;\n}\n\ninterface FfzEmoteSet {\n  _type: number;\n  css: null;\n  description: null;\n  emoticons: FfzEmote[];\n  icon: null;\n  id: number;\n  title: string;\n}\n\nexport interface FfzGlobalEmotesResponse {\n  default_sets: number[];\n  sets: Record<string, FfzEmoteSet>;\n  users: Record<string, string[]>;\n}\n\nexport interface FfzChannelEmotesResponse {\n  room: {\n    _id: number;\n    css: null;\n    display_name: string;\n    id: string;\n    is_group: boolean;\n    mod_urls: null;\n    moderator_badge: null;\n    set: number;\n    twitch_id: number;\n    user_badges: Record<string, unknown>;\n  };\n  sets: Record<string, FfzEmoteSet>;\n}\n\nexport const fetchFfzGlobalEmotes = (): Promise<FfzGlobalEmotesResponse> =>\n  fetchRequest('https://api.frankerfacez.com/v1/set/global');\n\nexport const fetchFfzChannelEmotes = (\n  channelId: string,\n): Promise<FfzChannelEmotesResponse> =>\n  fetchRequest(`https://api.frankerfacez.com/v1/room/id/${channelId}`);\n","import fetchRequest from 'utils/fetchRequest';\n\nexport interface RecentMessagesResponse {\n  messages: string[];\n  error: null;\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport const fetchRecentMessages = (\n  channel: string,\n): Promise<RecentMessagesResponse> => {\n  if (channel === 'nasvay_s') {\n    return fetchRequest(\n      `https://honeykingdom.herokuapp.com/api/v1/recent-messages/${channel}`,\n    );\n  }\n\n  return fetchRequest(\n    `https://recent-messages.robotty.de/api/v2/recent-messages/${channel}?clearchatToNotice=true`,\n  );\n};\n","import fetchRequest from 'utils/fetchRequest';\n\nconst YOUTUBE_API_BASE = 'https://www.googleapis.com/youtube/v3';\n\ninterface YoutubeThumbnail {\n  url: string;\n  width: number;\n  height: number;\n}\n\ninterface YoutubeVideoItem {\n  kind: string;\n  etag: string;\n  id: string;\n  snippet: {\n    publishedAt: string;\n    channelId: string;\n    title: string;\n    description: string;\n    thumbnails: {\n      default: YoutubeThumbnail;\n      medium: YoutubeThumbnail;\n      high: YoutubeThumbnail;\n      standard: YoutubeThumbnail;\n      maxres: YoutubeThumbnail;\n    };\n    channelTitle: string;\n    tags: string[];\n    categoryId: string;\n    liveBroadcastContent: string;\n    defaultLanguage: string;\n    localized: {\n      title: string;\n      description: string;\n    };\n    defaultAudioLanguage: string;\n  };\n}\n\nexport interface YoutubeVideoResponse {\n  kind: string;\n  etag: string;\n  items: YoutubeVideoItem[];\n  pageInfo: {\n    totalResults: number;\n    resultsPerPage: number;\n  };\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport const fetchYoutubeVideo = (id: string): Promise<YoutubeVideoResponse> =>\n  fetchRequest(\n    `${YOUTUBE_API_BASE}/videos?part=snippet&id=${id}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`,\n  );\n","import * as R from 'ramda';\n\nimport * as api from 'api';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport type { EmotesByText } from 'features/emotes/utils/getEmotesByText';\nimport emojisMap from 'features/emotes/emojisMap.json';\n\nconst emojisList = Object.values(emojisMap);\n\n// by id\n\nconst findTwitchEmoteByIdInSets = (\n  id: number | string,\n  sets: Record<string, api.TwitchEmote[]>,\n) => {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const set of Object.values(sets)) {\n    // eslint-disable-next-line eqeqeq\n    const result = R.find((emote) => emote.id == id, set);\n\n    if (result) return htmlEntity.createTwitchEmote(result);\n  }\n\n  return null;\n};\n\nconst findTwitchEmoteById = (\n  id: number | string,\n  { twitchGlobal, twitchUser }: NonNullable<StateEmotes>,\n) =>\n  findTwitchEmoteByIdInSets(id, twitchGlobal) ||\n  findTwitchEmoteByIdInSets(id, twitchUser);\n\nconst findBttvEmoteById = (\n  id: string,\n  { bttvGlobal, bttvChannel }: NonNullable<StateEmotes>,\n) => {\n  const findById = R.find<api.BttvGlobalEmote | api.BttvChannelEmote>(\n    R.propEq('id', id),\n  );\n  const result = findById(bttvGlobal) || findById(bttvChannel);\n\n  return result ? htmlEntity.createBttvEmote(result) : null;\n};\n\nconst findFfzEmoteById = (\n  id: number,\n  { ffzGlobal, ffzChannel }: NonNullable<StateEmotes>,\n) => {\n  const findById = R.find<api.FfzEmote>(R.propEq('id', id));\n  const result = findById(ffzGlobal) || findById(ffzChannel);\n\n  return result ? htmlEntity.createFfzEmote(result) : null;\n};\n\nconst findEmojiByChar = (char: string) => {\n  const result = R.find(R.propEq('char', char), emojisList);\n\n  return result ? htmlEntity.createEmoji(result) : null;\n};\n\n// by name\n\nconst emotesMap: Record<string, string[]> = {\n  555555557: [':-)', ':)'],\n  555555559: [':-(', ':('],\n  555555561: [':-D', ':D'],\n  555555562: ['>('],\n  555555568: [':-z', ':-Z', ':-|', ':z', ':Z', ':|'],\n  555555576: ['o_o', 'O_o', 'O_O', 'o_O', 'o.o', 'O.o', 'O.O', 'o.O'],\n  555555579: ['B-)', 'B)'],\n  555555583: [':-o', ':-O', ':o', ':O'],\n  555555584: ['<3'],\n  555555588: [':-\\\\', ':-/', ':\\\\', ':/'],\n  555555590: [';-\\\\', ';\\\\'],\n  555555594: [':-p', ':-P', ':p', ':P'],\n  555555598: [';-p', ';-P', ';p', ';P'],\n  555555600: ['R-)', 'R)'],\n};\n\nconst findTwitchEmoteByNameInSets = (\n  name: string,\n  sets: Record<string, api.TwitchEmote[]>,\n) => {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const set of Object.values(sets)) {\n    const result = R.find(\n      ({ id, code }) =>\n        emotesMap[id] ? emotesMap[id].includes(name) : name === code,\n      set,\n    );\n\n    if (result) return htmlEntity.createTwitchEmote(result);\n  }\n\n  return null;\n};\n\nconst findTwitchEmoteByName = (\n  name: string,\n  { twitchGlobal, twitchUser }: NonNullable<StateEmotes>,\n) =>\n  findTwitchEmoteByNameInSets(name, twitchGlobal) ||\n  findTwitchEmoteByNameInSets(name, twitchUser);\n\nconst findBttvEmoteByName = (\n  name: string,\n  { bttvGlobal, bttvChannel }: NonNullable<StateEmotes>,\n) => {\n  const findByName = R.find<api.BttvGlobalEmote | api.BttvChannelEmote>(\n    R.propEq('code', name),\n  );\n  const result = findByName(bttvGlobal) || findByName(bttvChannel);\n\n  return result ? htmlEntity.createBttvEmote(result) : null;\n};\n\nconst findFfzEmoteByName = (\n  name: string,\n  { ffzGlobal, ffzChannel }: NonNullable<StateEmotes>,\n) => {\n  const findByName = R.find<api.FfzEmote>(R.propEq('name', name));\n  const result = findByName(ffzGlobal) || findByName(ffzChannel);\n\n  return result ? htmlEntity.createFfzEmote(result) : null;\n};\n\n// by text\n\n/* eslint-disable no-restricted-syntax */\nconst findTwitchEmotesByText = (\n  result: EmotesByText,\n  sets: Record<string, api.TwitchEmote[]>,\n  text: string,\n  limit: number,\n) => {\n  for (const items of Object.values(sets)) {\n    for (const emote of items) {\n      if (result.begins.length + result.contains.length === limit) return true;\n\n      const index = emote.code.toLowerCase().indexOf(text);\n\n      if (index !== -1) {\n        const type = index === 0 ? 'begins' : 'contains';\n\n        result[type].push(htmlEntity.createTwitchEmote(emote));\n      }\n    }\n  }\n\n  return false;\n};\n\nconst findBttvEmotesByText = (\n  result: EmotesByText,\n  bttv: api.BttvGlobalEmote[] | api.BttvChannelEmote[],\n  text: string,\n  limit: number,\n) => {\n  for (const emote of bttv) {\n    if (result.begins.length + result.contains.length === limit) return true;\n\n    const index = emote.code.toLowerCase().indexOf(text);\n\n    if (index !== -1) {\n      const type = index === 0 ? 'begins' : 'contains';\n\n      result[type].push(htmlEntity.createBttvEmote(emote));\n    }\n  }\n\n  return false;\n};\n\nconst findFfzEmotesByText = (\n  result: EmotesByText,\n  ffz: api.FfzEmote[],\n  text: string,\n  limit: number,\n) => {\n  for (const emote of ffz) {\n    if (result.begins.length + result.contains.length === limit) return true;\n\n    const index = emote.name.toLowerCase().indexOf(text);\n\n    if (index !== -1) {\n      const type = index === 0 ? 'begins' : 'contains';\n\n      result[type].push(htmlEntity.createFfzEmote(emote));\n    }\n  }\n\n  return false;\n};\n\nconst findEmojisByText = (\n  result: EmotesByText,\n  text: string,\n  limit: number,\n) => {\n  for (const emoji of emojisList) {\n    if (result.begins.length + result.contains.length === limit) return true;\n\n    const { short, keywords } = emoji;\n\n    let index = short.toLowerCase().indexOf(text);\n\n    if (index !== -1) {\n      const type = index === 0 ? 'begins' : 'contains';\n      const emojiEntity = htmlEntity.createEmoji(emoji);\n\n      result[type].push(emojiEntity);\n\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    for (const keyword of keywords) {\n      index = keyword.toLowerCase().indexOf(text);\n\n      if (index !== -1) {\n        const emojiEntity = htmlEntity.createEmoji(emoji);\n\n        result.contains.push(emojiEntity);\n\n        break;\n      }\n    }\n  }\n\n  return false;\n};\n/* eslint-enable no-restricted-syntax */\n\nconst findEmote = {\n  twitch: {\n    byId: findTwitchEmoteById,\n    byName: findTwitchEmoteByName,\n    byText: findTwitchEmotesByText,\n  },\n  bttv: {\n    byId: findBttvEmoteById,\n    byName: findBttvEmoteByName,\n    byText: findBttvEmotesByText,\n  },\n  ffz: {\n    byId: findFfzEmoteById,\n    byName: findFfzEmoteByName,\n    byText: findFfzEmotesByText,\n  },\n  emoji: {\n    byChar: findEmojiByChar,\n    byText: findEmojisByText,\n  },\n};\n\nexport default findEmote;\n","import * as R from 'ramda';\nimport { createSelector } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport getEmotesByText from 'features/emotes/utils/getEmotesByText';\nimport { getEmotesFromUsageStatistic } from 'features/emotes/utils/emotesUsageStatistic';\n\nexport type EmoteCategory = {\n  title?: string;\n  items: htmlEntity.Emote[];\n};\n\nconst getTwitchUserEmoteCategories = R.pipe<\n  Record<string, api.TwitchEmote[]>,\n  api.TwitchEmote[][],\n  EmoteCategory[]\n>(\n  R.values,\n  R.map((items) => ({ items: R.map(htmlEntity.createTwitchEmote, items) })),\n);\n\nconst createMainEmoteCategories = (emotes: StateEmotes) => {\n  if (!emotes) return [];\n\n  const {\n    twitchGlobal,\n    twitchUser,\n    bttvGlobal,\n    bttvChannel,\n    ffzGlobal,\n    ffzChannel,\n  } = emotes;\n\n  return [\n    {\n      title: 'BetterTTV Channel Emotes',\n      items: bttvChannel.map(htmlEntity.createBttvEmote),\n    },\n    {\n      title: 'FrankerFaceZ Channel Emotes',\n      items: ffzChannel.map(htmlEntity.createFfzEmote),\n    },\n    ...getTwitchUserEmoteCategories(twitchUser),\n    {\n      title: 'Twitch',\n      items: R.map(\n        htmlEntity.createTwitchEmote,\n        R.propOr([], '0', twitchGlobal),\n      ),\n    },\n    {\n      title: 'BetterTTV',\n      items: bttvGlobal.map(htmlEntity.createBttvEmote),\n    },\n    {\n      title: 'FrankerFaceZ',\n      items: ffzGlobal.map(htmlEntity.createFfzEmote),\n    },\n  ].filter(R.path(['items', 'length'])) as EmoteCategory[];\n};\n\nconst getMainEmoteCategories = createSelector(\n  (emotes: StateEmotes) => emotes,\n  createMainEmoteCategories,\n);\n\nconst createEmoteCategories = (emotes: StateEmotes, text: string) => {\n  if (!emotes) return [];\n\n  if (text) {\n    const items = getEmotesByText(text, emotes);\n    const title = `${items.length ? '' : 'No '}Search Results for \"${text}\"`;\n\n    return [{ title, items }];\n  }\n\n  const mainEmoteCategories = getMainEmoteCategories(emotes);\n  const frequentlyUsed = getEmotesFromUsageStatistic(emotes);\n\n  if (!frequentlyUsed.length) {\n    return mainEmoteCategories;\n  }\n\n  const frequentlyUsedCategory = {\n    title: 'Frequently Used',\n    items: frequentlyUsed,\n  };\n\n  return [frequentlyUsedCategory, ...mainEmoteCategories] as EmoteCategory[];\n};\n\nexport default createEmoteCategories;\n","import * as R from 'ramda';\nimport { createSelector } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { RootState } from 'app/rootReducer';\nimport { currentChannelSelector } from 'features/chat/chatSelectors';\nimport createEmoteCategories from 'features/emotes/utils/createEmoteCategories';\n\nexport type StateEmotes = {\n  twitchGlobal: Record<string, api.TwitchEmote[]>;\n  twitchUser: Record<string, api.TwitchEmote[]>;\n  bttvGlobal: api.BttvGlobalEmote[];\n  bttvChannel: api.BttvChannelEmote[];\n  ffzGlobal: api.FfzEmote[];\n  ffzChannel: api.FfzEmote[];\n} | null;\n\n// emotes isLoaded\nexport const isTwitchEmotesLoadedSelector = (state: RootState) =>\n  state.emotes.twitch.status === 'success' ||\n  state.emotes.twitch.status === 'error';\n\nexport const isBttvGlobalEmotesLoadedSelector = (state: RootState) =>\n  state.emotes.bttv.global.status === 'success' ||\n  state.emotes.bttv.global.status === 'error';\n\nexport const isBttvChannelEmotesLoadedSelector = (state: RootState) => {\n  const currentChannel = currentChannelSelector(state);\n\n  return (\n    state.emotes.bttv.byChannels[currentChannel]?.status === 'success' ||\n    state.emotes.bttv.byChannels[currentChannel]?.status === 'error' ||\n    false\n  );\n};\n\nexport const isBttvEmotesLoadedSelector = (state: RootState) =>\n  isBttvGlobalEmotesLoadedSelector(state) &&\n  isBttvChannelEmotesLoadedSelector(state);\n\nexport const isFfzGlobalEmotesLoadedSelector = (state: RootState) =>\n  state.emotes.ffz.global.status === 'success' ||\n  state.emotes.ffz.global.status === 'error';\n\nexport const isFfzChannelEmotesLoadedSelector = (state: RootState) => {\n  const currentChannel = currentChannelSelector(state);\n\n  return (\n    state.emotes.ffz.byChannels[currentChannel]?.status === 'success' ||\n    state.emotes.ffz.byChannels[currentChannel]?.status === 'error' ||\n    false\n  );\n};\n\nexport const isFfzEmotesLoadedSelector = (state: RootState) =>\n  isFfzGlobalEmotesLoadedSelector(state) &&\n  isFfzChannelEmotesLoadedSelector(state);\n\nexport const isEmotesLoadedSelector = (state: RootState) =>\n  isTwitchEmotesLoadedSelector(state) &&\n  isBttvGlobalEmotesLoadedSelector(state) &&\n  isBttvChannelEmotesLoadedSelector(state) &&\n  isFfzGlobalEmotesLoadedSelector(state) &&\n  isFfzChannelEmotesLoadedSelector(state);\n\n// emotes\nconst twitchEmotesSelector = (state: RootState) => state.emotes.twitch.items;\nconst twitchGlobalEmotesSelector = createSelector(\n  twitchEmotesSelector,\n  R.pick(['0']),\n);\nconst twitchUserEmotesSelector = createSelector(\n  twitchEmotesSelector,\n  R.omit(['0']),\n);\n\nconst bttvGlobalEmotesSelector = (state: RootState) =>\n  state.emotes.bttv.global.items;\nconst bttvChannelEmotesSelector = (state: RootState) =>\n  state.emotes.bttv.byChannels[currentChannelSelector(state)]?.items || [];\n\nconst ffzGlobalEmotesSelector = (state: RootState) =>\n  state.emotes.ffz.global.items;\nconst ffzChannelEmotesSelector = (state: RootState) =>\n  state.emotes.ffz.byChannels[currentChannelSelector(state)]?.items || [];\n\nexport const emotesSelector = createSelector(\n  isEmotesLoadedSelector,\n  twitchGlobalEmotesSelector,\n  twitchUserEmotesSelector,\n  bttvGlobalEmotesSelector,\n  bttvChannelEmotesSelector,\n  ffzGlobalEmotesSelector,\n  ffzChannelEmotesSelector,\n  (\n    isEmotesLoaded,\n    twitchGlobal,\n    twitchUser,\n    bttvGlobal,\n    bttvChannel,\n    ffzGlobal,\n    ffzChannel,\n  ) => {\n    if (!isEmotesLoaded) return null;\n\n    return {\n      twitchGlobal,\n      twitchUser,\n      bttvGlobal,\n      bttvChannel,\n      ffzGlobal,\n      ffzChannel,\n    } as StateEmotes;\n  },\n);\n\nexport const emoteCategoriesSelector = (state: RootState, search: string) => {\n  const emotes = emotesSelector(state);\n\n  return createEmoteCategories(emotes, search);\n};\n","import type { RootState } from 'app/rootReducer';\n\ntype OptionItem = {\n  type: 'switch' | 'input';\n  id: string;\n  name: string;\n  title: string;\n  description: string;\n  value: boolean | string;\n};\n\ntype OptionCategories = {\n  title: string;\n  items: OptionItem[];\n};\n\nexport const optionsSelector = (state: RootState): OptionCategories[] => [\n  {\n    title: 'My preferences',\n    items: [\n      {\n        type: 'switch',\n        id: 'show-timestamps',\n        name: 'showTimestamps',\n        title: 'Show Timestamps',\n        description: '',\n        value: state.options.showTimestamps,\n      },\n      {\n        type: 'switch',\n        id: 'time-format-24-hours',\n        name: 'timeFormat24Hours',\n        title: 'Time Format: 24 Hours',\n        description: '',\n        value: state.options.timeFormat24Hours,\n      },\n      {\n        type: 'switch',\n        id: 'split-chat',\n        name: 'splitChat',\n        title: 'Split Chat',\n        description: '',\n        value: state.options.splitChat,\n      },\n      {\n        type: 'switch',\n        id: 'fixed-width',\n        name: 'fixedWidth',\n        title: 'Fixed Width',\n        description: '',\n        value: state.options.fixedWidth,\n      },\n      {\n        type: 'switch',\n        id: 'highlight-notifications',\n        name: 'highlightNotifications',\n        title: 'Play a sound on highlights',\n        description: 'Plays a sound for messages directed at you',\n        value: state.options.highlightNotifications,\n      },\n      {\n        type: 'switch',\n        id: 'show-twitch-cards',\n        name: 'showTwitchCards',\n        title: 'Show Twitch clips and vods in the chat',\n        description: 'Show previews for Twitch clips and vods in the chat',\n        value: state.options.showTwitchCards,\n      },\n      {\n        type: 'switch',\n        id: 'show-youtube-cards',\n        name: 'showYoutubeCards',\n        title: 'Show Youtube videos in the chat',\n        description: 'Show previews for Youtube videos in the chat',\n        value: state.options.showYoutubeCards,\n      },\n      // {\n      //   type: 'input',\n      //   id: 'blacklist-keywords',\n      //   name: 'blacklistKeywords',\n      //   title: 'Set Blacklist Keywords',\n      //   description: '',\n      //   value: state.options.blacklistKeywords,\n      // },\n      // {\n      //   type: 'input',\n      //   id: 'highlight-keywords',\n      //   name: 'highlightKeywords',\n      //   title: 'Set Highlight Keywords',\n      //   description: '',\n      //   value: state.options.highlightKeywords,\n      // },\n    ],\n  },\n];\n\nexport const isShowTimestampsSelector = (state: RootState) =>\n  state.options.showTimestamps;\n\nexport const isSplitChatSelector = (state: RootState) =>\n  state.options.splitChat;\n\nexport const isFixedWidthSelector = (state: RootState) =>\n  state.options.fixedWidth;\n\nexport const isHighlightNotificationsSelector = (state: RootState) =>\n  state.options.highlightNotifications;\n\nexport const isShowTwitchCardsSelector = (state: RootState) =>\n  state.options.showTwitchCards;\n\nexport const isShowYoutubeCardsSelector = (state: RootState) =>\n  state.options.showYoutubeCards;\n\nexport const isTimeFormat24HoursSelector = (state: RootState) =>\n  state.options.timeFormat24Hours;\n","import * as R from 'ramda';\nimport { format } from 'date-fns/fp';\n\nimport * as api from 'api';\n\nexport const parseTwitchEmotes = R.prop('emoticon_sets');\n\nexport const parseBttvGlobalEmotes = (\n  data: api.BttvGlobalEmotesResponse,\n): api.BttvGlobalEmote[] => data;\n\nexport const parseBttvChannelEmotes = (\n  data: api.BttvChannelEmotesResponse,\n): api.BttvChannelEmote[] => [...data.channelEmotes, ...data.sharedEmotes];\n\nexport const parseFfzGlobalEmotes = ({\n  default_sets: defaultSets,\n  sets,\n}: api.FfzGlobalEmotesResponse): api.FfzEmote[] =>\n  R.pipe<any, any, any, any, api.FfzEmote[]>(\n    R.pick((defaultSets as unknown) as string[]),\n    R.values,\n    R.map(R.propOr([], 'emoticons')),\n    R.flatten,\n  )(sets);\n\nexport const parseFfzChannelEmotes: (\n  data: api.FfzChannelEmotesResponse,\n) => api.FfzEmote[] = R.pipe(\n  R.pathOr({}, ['sets']),\n  R.values,\n  R.map(R.pathOr([], ['emoticons'])),\n  R.flatten,\n);\n\nexport const parseBlockedUsers = R.pipe<\n  api.TwitchBlockedUsersResponse,\n  Record<string, unknown>[],\n  string[]\n>(R.prop('blocks'), R.map<any, any>(R.path(['user', 'name'])));\n\nexport const parseBadges = R.prop('badge_sets');\n\n// TODO: if message card was loaded, the second message with different timing doesn't work\n\nexport const parseTwitchClip = ({ data }: api.TwitchClipResponse) => {\n  if (data.length === 0) return null;\n\n  const {\n    id,\n    thumbnail_url: thumbnailUrl,\n    title,\n    creator_name: creatorName,\n  } = data[0];\n\n  const x1 = thumbnailUrl.replace('480x272', '86x45');\n  const x2 = thumbnailUrl.replace('480x272', '260x147');\n\n  return {\n    id,\n    src: x1,\n    srcSet: `${x1} 1x, ${x2} 2x`,\n    title,\n    description: `Clipped by ${creatorName}`,\n  };\n};\n\nexport const parseTwitchVideo = ({ data }: api.TwitchVideoResponse) => {\n  if (data.length === 0) return null;\n\n  const {\n    id,\n    thumbnail_url: thumbnailUrl,\n    title,\n    user_name: userName,\n    published_at: publishedAt,\n  } = data[0];\n\n  const date = format('PP', new Date(publishedAt));\n\n  const thumbnailReplace = '%{width}x%{height}';\n\n  const x1 = thumbnailUrl.replace(thumbnailReplace, '80x45');\n  const x2 = thumbnailUrl.replace(thumbnailReplace, '160x90');\n  const x4 = thumbnailUrl.replace(thumbnailReplace, '320x180');\n\n  return {\n    id,\n    src: x1,\n    srcSet: `${x1} 1x, ${x2} 2x, ${x4} 4x`,\n    title,\n    description: `${date} · ${userName}`,\n  };\n};\n\nexport const parseYoutubeVideo = ({ items }: api.YoutubeVideoResponse) => {\n  if (items.length === 0) return null;\n\n  const {\n    id,\n    snippet: {\n      title,\n      publishedAt,\n      channelTitle,\n      thumbnails: {\n        default: { url: x1 },\n        medium: { url: x2 },\n        high: { url: x4 },\n      },\n    },\n  } = items[0];\n\n  const date = format('PP', new Date(publishedAt));\n\n  return {\n    id,\n    src: x1,\n    srcSet: `${x1} 1x, ${x2} 2x, ${x4} 4x`,\n    title,\n    description: `${date} · ${channelTitle}`,\n  };\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\nimport type twitchIrc from '@honeykingdom/twitch-simple-irc';\n\ntype Params = {\n  room: twitchIrc.RoomStateTags | null;\n  user: twitchIrc.UserStateTags | null;\n};\n\ntype ChatState = {\n  isConnected: boolean;\n  currentChannel: string;\n  params: {\n    global: twitchIrc.GlobalUserStateTags | null;\n    byChannels: Record<string, Params>;\n  };\n};\n\nconst initialState: ChatState = {\n  isConnected: false,\n  currentChannel: '',\n  params: {\n    global: null,\n    byChannels: {},\n  },\n};\n\nconst chat = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    updateIsConnected: (state, { payload }: PayloadAction<boolean>) => {\n      state.isConnected = payload;\n    },\n\n    updateCurrentChannel: (state, { payload }: PayloadAction<string>) => {\n      state.currentChannel = payload;\n    },\n\n    updateGlobalUserParams: (\n      state,\n      { payload }: PayloadAction<twitchIrc.GlobalUserStateEvent>,\n    ) => {\n      state.params.global = payload.tags;\n    },\n\n    updateUserParams: (\n      state,\n      { payload }: PayloadAction<twitchIrc.UserStateEvent>,\n    ) => {\n      const { channel, tags } = payload;\n\n      if (!state.params.byChannels[channel]) {\n        state.params.byChannels[channel] = {\n          room: null,\n          user: null,\n        };\n      }\n\n      state.params.byChannels[channel].user = tags;\n    },\n\n    updateRoomParams: (\n      state,\n      { payload }: PayloadAction<twitchIrc.RoomStateEvent>,\n    ) => {\n      const { channel, tags } = payload;\n\n      if (!state.params.byChannels[channel]) {\n        state.params.byChannels[channel] = {\n          room: null,\n          user: null,\n        };\n      }\n\n      // TODO: merge tags\n      state.params.byChannels[channel].room = tags;\n    },\n  },\n});\n\nexport const {\n  updateIsConnected,\n  updateCurrentChannel,\n\n  // params\n  updateGlobalUserParams,\n  updateUserParams,\n  updateRoomParams,\n} = chat.actions;\n\nexport default chat.reducer;\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport type { RootState } from 'app/rootReducer';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport {\n  currentChannelSelector,\n  userBadgesSelector,\n} from 'features/chat/chatSelectors';\n\nexport const isGlobalBadgesLoadedSelector = (state: RootState) =>\n  state.badges.global.status === 'success' ||\n  state.badges.global.status === 'error';\n\nexport const isChannelBadgesLoadedSelector = (state: RootState) =>\n  state.badges.byChannels[currentChannelSelector(state)]?.status ===\n    'success' ||\n  state.badges.byChannels[currentChannelSelector(state)]?.status === 'error';\n\nexport const isBadgesLoadedSelector = (state: RootState) =>\n  isGlobalBadgesLoadedSelector(state) && isChannelBadgesLoadedSelector(state);\n\nexport const globalBadgesSelector = (state: RootState) =>\n  state.badges.global.items;\n\nexport const channelBadgesSelector = (state: RootState) =>\n  state.badges.byChannels[currentChannelSelector(state)]?.items || {};\n\nexport const userBadgesImagesSelector = createSelector(\n  userBadgesSelector,\n  globalBadgesSelector,\n  channelBadgesSelector,\n  htmlEntity.createBadges,\n);\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport jwt from 'jsonwebtoken';\n\nimport { initializeAuth, fetchUser } from 'features/auth/authSlice';\nimport { isAuthReadySelector } from 'features/auth/authSelectors';\nimport { readUserFromLocatStorage } from 'features/auth/authUtils';\n\nconst useInitializeAuth = () => {\n  const dispatch = useDispatch();\n  const isAuthReady = useSelector(isAuthReadySelector);\n\n  useEffect(() => {\n    if (isAuthReady) return;\n\n    const { idToken } = localStorage;\n    const user = readUserFromLocatStorage();\n\n    if (!idToken) {\n      dispatch(initializeAuth({ isAuth: false }));\n      return;\n    }\n\n    if (user) {\n      const { id, login } = user;\n      const params = { isAuth: true, userId: id, userLogin: login };\n\n      dispatch(initializeAuth(params));\n    } else {\n      const jwtData = jwt.decode(idToken);\n\n      if (jwtData) {\n        dispatch(fetchUser(jwtData.sub));\n      } else {\n        dispatch(initializeAuth({ isAuth: false }));\n      }\n    }\n  }, [dispatch, isAuthReady]);\n};\n\nexport default useInitializeAuth;\n","import type { RootState } from 'app/rootReducer';\nimport { currentChannelSelector } from 'features/chat/chatSelectors';\n\nexport const messagesSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.items || [];\n\nexport const usersSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.users || [];\n\nexport const recentUserMessagesSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.recentUserMessages || [];\n\nexport const isHistoryLoadedSelector = (state: RootState) => {\n  const currentChannel = currentChannelSelector(state);\n\n  return (\n    state.messages[currentChannel]?.history.status === 'success' ||\n    state.messages[currentChannel]?.history.status === 'error' ||\n    false\n  );\n};\n\nexport const isHistoryAddedSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.history.isAdded || false;\n\nexport const isEvenSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.isEven || false;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  currentChannelSelector,\n  currentChannelIdSelector,\n} from 'features/chat/chatSelectors';\nimport {\n  isHistoryAddedSelector,\n  isHistoryLoadedSelector,\n} from 'features/messages/messagesSelectors';\nimport {\n  isTwitchEmotesLoadedSelector,\n  isBttvGlobalEmotesLoadedSelector,\n  isBttvChannelEmotesLoadedSelector,\n  isFfzGlobalEmotesLoadedSelector,\n  isFfzChannelEmotesLoadedSelector,\n} from 'features/emotes/emotesSelectors';\nimport {\n  isGlobalBadgesLoadedSelector,\n  isChannelBadgesLoadedSelector,\n} from 'features/badges/badgesSelectors';\nimport { isBlockedUsersLoadedSelector } from 'features/blockedUsers/blockedUsersSelectors';\nimport {\n  isAuthReadySelector,\n  isAuthSelector,\n  userIdSelector,\n} from 'features/auth/authSelectors';\nimport {\n  addRecentMessages,\n  fetchRecentMessages,\n} from 'features/messages/messagesSlice';\nimport {\n  fetchTwitchEmotes,\n  fetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes,\n  fetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes,\n} from 'features/emotes/emotesSlice';\nimport {\n  fetchChannelBadges,\n  fetchGlobalBadges,\n} from 'features/badges/badgesSlice';\nimport { fetchBlockedUsers } from 'features/blockedUsers/blockedUsersSlice';\n\nconst useFetchChatData = () => {\n  const dispatch = useDispatch();\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n  const userId = useSelector(userIdSelector);\n  const currentChannel = useSelector(currentChannelSelector);\n  const currentChannelId = useSelector(currentChannelIdSelector);\n\n  const isTwitchEmotesLoaded = useSelector(isTwitchEmotesLoadedSelector);\n  const isBttvGlobalEmotesLoaded = useSelector(\n    isBttvGlobalEmotesLoadedSelector,\n  );\n  const isBttvChannelEmotesLoaded = useSelector(\n    isBttvChannelEmotesLoadedSelector,\n  );\n  const isFfzGlobalEmotesLoaded = useSelector(isFfzGlobalEmotesLoadedSelector);\n  const isFfzChannelEmotesLoaded = useSelector(\n    isFfzChannelEmotesLoadedSelector,\n  );\n  const isGlobalBadgesLoaded = useSelector(isGlobalBadgesLoadedSelector);\n  const isChannelBadgesLoaded = useSelector(isChannelBadgesLoadedSelector);\n  const isHistoryLoaded = useSelector(isHistoryLoadedSelector);\n  const isBlockedUsersLoaded = useSelector(isBlockedUsersLoadedSelector);\n  const isHistoryAdded = useSelector(isHistoryAddedSelector);\n\n  const isAllEmotesLoaded =\n    (isAuth ? isTwitchEmotesLoaded : true) &&\n    isBttvGlobalEmotesLoaded &&\n    isBttvChannelEmotesLoaded &&\n    isFfzGlobalEmotesLoaded &&\n    isFfzChannelEmotesLoaded;\n\n  const isReadyToAddHistory =\n    isAuthReady &&\n    currentChannel &&\n    !isHistoryAdded &&\n    isAllEmotesLoaded &&\n    (isAuth ? isBlockedUsersLoaded : true) &&\n    isGlobalBadgesLoaded &&\n    isChannelBadgesLoaded &&\n    isHistoryLoaded;\n\n  useEffect(() => {\n    dispatch(fetchBttvGlobalEmotes());\n    dispatch(fetchFfzGlobalEmotes());\n    dispatch(fetchGlobalBadges());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (isReadyToAddHistory) {\n      dispatch(addRecentMessages(currentChannel));\n    }\n  }, [dispatch, currentChannel, isReadyToAddHistory]);\n\n  useEffect(() => {\n    if (!isHistoryAdded && currentChannel) {\n      dispatch(fetchRecentMessages(currentChannel));\n    }\n  }, [dispatch, currentChannel, isHistoryAdded]);\n\n  useEffect(() => {\n    if (isAuthReady && isAuth && userId) {\n      dispatch(fetchTwitchEmotes(userId));\n      dispatch(fetchBlockedUsers(userId));\n    }\n  }, [dispatch, isAuthReady, isAuth, userId]);\n\n  // TODO: check if emotes and badges is already in the store\n\n  useEffect(() => {\n    if (currentChannel && currentChannelId) {\n      const params = {\n        channel: currentChannel,\n        channelId: currentChannelId,\n      };\n\n      dispatch(fetchBttvChannelEmotes(params));\n      dispatch(fetchFfzChannelEmotes(params));\n      dispatch(fetchChannelBadges(params));\n    }\n  }, [dispatch, currentChannel, currentChannelId]);\n};\n\nexport default useFetchChatData;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { LS_LAST_CHANNEL } from 'utils/constants';\nimport { updateCurrentChannel } from 'features/chat/chatSlice';\n\n// TODO: remove lastChannel if can't connect to the channel\n\nconst useCurrentChannel = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { hash } = history.location;\n\n  useEffect(() => {\n    if (hash && hash.length > 1) {\n      const channel = hash.slice(1);\n\n      dispatch(updateCurrentChannel(channel));\n\n      localStorage.setItem(LS_LAST_CHANNEL, channel);\n\n      document.title = channel\n        ? `#${channel} - ${process.env.REACT_APP_NAME} `\n        : (process.env.REACT_APP_NAME as string);\n\n      return;\n    }\n\n    const lastChannel = localStorage.getItem(LS_LAST_CHANNEL);\n\n    if (lastChannel) {\n      history.push({ pathname: '/chat/', hash: lastChannel });\n\n      dispatch(updateCurrentChannel(lastChannel));\n    } else {\n      dispatch(updateCurrentChannel(''));\n    }\n  }, [dispatch, history, hash]);\n};\n\nexport default useCurrentChannel;\n","import emojisMap from 'features/emotes/emojisMap.json';\n\nconst replaceEmojis = (text: string) =>\n  text\n    .split(' ')\n    .map((word: string) => {\n      if (word[0] !== ':' || word[word.length - 1] !== ':') {\n        return word;\n      }\n\n      const name = word.slice(1, -1);\n      const emoji = emojisMap[name];\n\n      return emoji && emoji.char ? emoji.char : word;\n    })\n    .join(' ');\n\nexport default replaceEmojis;\n","import { useEffect, useRef, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as twitchIrc from '@honeykingdom/twitch-simple-irc';\nimport { usePrevious } from 'react-use';\n\nimport { NOTICE_MESSAGE_TAGS, LS_ACCESS_TOKEN } from 'utils/constants';\nimport {\n  updateIsConnected,\n  updateGlobalUserParams,\n  updateUserParams,\n  updateRoomParams,\n} from 'features/chat/chatSlice';\nimport { receiveMessage, clearChat } from 'features/messages/messagesSlice';\nimport { invalidateAuth } from 'features/auth/authSlice';\nimport {\n  currentChannelSelector,\n  isConnectedSelector,\n} from 'features/chat/chatSelectors';\nimport {\n  isAuthSelector,\n  isAuthReadySelector,\n  userLoginSelector,\n} from 'features/auth/authSelectors';\nimport replaceEmojis from 'features/messages/utils/replaceEmojis';\n\nconst useTwitchClient = () => {\n  const dispatch = useDispatch();\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n  const userLogin = useSelector(userLoginSelector);\n  const isConnected = useSelector(isConnectedSelector);\n  const currentChannel = useSelector(currentChannelSelector);\n  const prevChannel = usePrevious(currentChannel);\n  const clientRef = useRef<twitchIrc.Client | null>(null);\n\n  const registerEvents = useCallback(\n    (client: typeof clientRef) => {\n      if (!client.current) return;\n\n      const handleRegister = () => dispatch(updateIsConnected(true));\n\n      const handleDisconnect = () => dispatch(updateIsConnected(false));\n\n      const handleGlobalUserState = (data: twitchIrc.GlobalUserStateEvent) =>\n        dispatch(updateGlobalUserParams(data));\n\n      const handleUserState = (data: twitchIrc.UserStateEvent) =>\n        dispatch(updateUserParams(data));\n\n      const handleRoomState = (data: twitchIrc.RoomStateEvent) =>\n        dispatch(updateRoomParams(data));\n\n      const handleMessage = (message: twitchIrc.MessageEvent) => {\n        dispatch(receiveMessage({ type: 'message', message }));\n      };\n\n      const handleNotice = (message: twitchIrc.NoticeEvent) => {\n        if (\n          client.current &&\n          message.message === 'Login authentication failed'\n        ) {\n          dispatch(invalidateAuth());\n          // eslint-disable-next-line no-param-reassign\n          client.current = null;\n          return;\n        }\n\n        dispatch(receiveMessage({ type: 'notice', message }));\n      };\n\n      const handleUserNotice = (message: twitchIrc.UserNoticeEvent) =>\n        dispatch(receiveMessage({ type: 'user-notice', message }));\n\n      const handleClearChat = (data: twitchIrc.ClearChatEvent) => {\n        if (!data.tags.targetUserId) return;\n        dispatch(clearChat(data));\n      };\n\n      client.current.on('register', handleRegister);\n      client.current.on('disconnect', handleDisconnect);\n      client.current.on('globaluserstate', handleGlobalUserState);\n      client.current.on('userstate', handleUserState);\n      client.current.on('roomstate', handleRoomState);\n      client.current.on('message', handleMessage);\n      client.current.on('notice', handleNotice);\n      client.current.on('usernotice', handleUserNotice);\n      client.current.on('clearchat', handleClearChat);\n    },\n    [dispatch],\n  );\n\n  useEffect(\n    () => () => {\n      if (clientRef.current) {\n        clientRef.current = null;\n      }\n    },\n    [clientRef],\n  );\n\n  useEffect(() => {\n    if (!currentChannel || !isAuthReady) return;\n\n    if (!clientRef.current) {\n      const options = isAuth\n        ? {\n            name: userLogin as string,\n            auth: localStorage.getItem(LS_ACCESS_TOKEN) as string,\n          }\n        : null;\n\n      (async () => {\n        clientRef.current = twitchIrc.Client.create(options);\n\n        registerEvents(clientRef);\n\n        await clientRef.current.connect();\n\n        clientRef.current.join(currentChannel);\n      })();\n\n      return;\n    }\n\n    if (prevChannel && prevChannel !== currentChannel) {\n      clientRef.current.part(prevChannel);\n      clientRef.current.join(currentChannel);\n    }\n  }, [\n    dispatch,\n    registerEvents,\n    isAuth,\n    isAuthReady,\n    isConnected,\n    userLogin,\n    currentChannel,\n    prevChannel,\n  ]);\n\n  const sendMessage = useCallback(\n    (channel: string, message: string) => {\n      if (!clientRef.current || !message.trim()) return;\n\n      const normalizedMessage = replaceEmojis(message.trim());\n\n      clientRef.current.say(channel, normalizedMessage);\n\n      function handleUserState(data: twitchIrc.UserStateEvent) {\n        if (data.channel === channel) {\n          const ownMessage = {\n            message: normalizedMessage,\n            channel,\n            tags: data.tags,\n          };\n\n          dispatch(\n            receiveMessage({ type: 'own-message', message: ownMessage }),\n          );\n\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          removeListeners();\n        }\n      }\n\n      function handleNotice(data: twitchIrc.NoticeEvent) {\n        if (\n          data.channel === channel &&\n          NOTICE_MESSAGE_TAGS.includes(data.tags.msgId)\n        ) {\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          removeListeners();\n        }\n      }\n\n      function removeListeners() {\n        if (!clientRef.current) return;\n\n        clientRef.current.off('notice', handleNotice);\n        clientRef.current.off('userstate', handleUserState);\n      }\n\n      clientRef.current.on('notice', handleNotice);\n      clientRef.current.on('userstate', handleUserState);\n\n      setTimeout(() => removeListeners(), 10000);\n    },\n    [clientRef, dispatch],\n  );\n\n  return { sendMessage };\n};\n\nexport default useTwitchClient;\n","const getUsersByBeginText = (\n  beginText: string,\n  users: string[],\n  currentUserLogin: string | null,\n  limit = 5,\n) => {\n  const result = [];\n  const beginTextLower = beginText.toLowerCase();\n  const currentUserLoginLower = (currentUserLogin || '').toLowerCase();\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const name of users) {\n    if (result.length === limit) return result;\n\n    const nameLower = name.toLowerCase();\n\n    if (\n      (beginTextLower === '' || nameLower.startsWith(beginTextLower)) &&\n      nameLower !== currentUserLoginLower\n    ) {\n      result.push(name);\n    }\n  }\n\n  return result;\n};\n\nexport default getUsersByBeginText;\n","import * as htmlEntity from 'features/messages/utils/htmlEntity';\n\ntype ASuggestions = {\n  isActive: boolean;\n  activeIndex: number;\n  start: number;\n  end: number;\n};\ntype UserSuggestions = ASuggestions & {\n  type: 'users';\n  items: string[];\n};\ntype EmoteSuggestions = ASuggestions & {\n  type: 'emotes';\n  items: htmlEntity.Emote[];\n};\nexport type SuggestionsState = UserSuggestions | EmoteSuggestions;\n\nexport const suggestionsInitialState: SuggestionsState = {\n  type: 'users',\n  isActive: false,\n  items: [],\n  activeIndex: 0,\n  start: 0,\n  end: 0,\n};\n\nexport const setSuggestionsIndexUp = (\n  state: SuggestionsState,\n): SuggestionsState => ({\n  ...state,\n  activeIndex:\n    state.activeIndex === 0 ? state.items.length - 1 : state.activeIndex - 1,\n});\n\nexport const setSuggestionsIndexDown = (\n  state: SuggestionsState,\n): SuggestionsState => ({\n  ...state,\n  activeIndex:\n    state.activeIndex === state.items.length - 1 ? 0 : state.activeIndex + 1,\n});\n\nexport const replaceSuggestionText = (\n  text: string,\n  { type, items, activeIndex, start, end }: SuggestionsState,\n) => {\n  if (items.length === 0) return text;\n\n  const currentItem = items[activeIndex];\n  const insertedText =\n    type === 'users'\n      ? `@${currentItem}`\n      : (currentItem as htmlEntity.Emote).alt;\n\n  const textBefore = text.substring(0, start);\n  const testAfter = text.substring(end) || ' ';\n\n  return `${textBefore}${insertedText}${testAfter}`;\n};\n","import { useState, useRef, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useSetState } from 'react-use';\n\nimport { SUGGESTION_TYPES } from 'utils/constants';\nimport getUsersByBeginText from 'features/chat/utils/getUsersByBeginText';\nimport {\n  suggestionsInitialState,\n  setSuggestionsIndexUp,\n  setSuggestionsIndexDown,\n  replaceSuggestionText,\n} from 'features/chat/utils/suggestions';\nimport getEmotesByText from 'features/emotes/utils/getEmotesByText';\n\nimport { userLoginSelector } from 'features/auth/authSelectors';\nimport {\n  usersSelector,\n  recentUserMessagesSelector,\n} from 'features/messages/messagesSelectors';\nimport { currentChannelSelector } from 'features/chat/chatSelectors';\nimport { emotesSelector } from 'features/emotes/emotesSelectors';\n\nconst useChatInput = (\n  sendMessage: (channel: string, message: string) => void,\n  chatInputRef: React.RefObject<HTMLTextAreaElement>,\n) => {\n  const [inputText, setInputText] = useState('');\n  const [suggestions, setSuggestions] = useSetState(suggestionsInitialState);\n  const [recentUserMessagesIndex, setRecentUserMessagesIndex] = useState(-1);\n\n  const userLogin = useSelector(userLoginSelector);\n  const emotes = useSelector(emotesSelector);\n  const users = useSelector(usersSelector);\n  const currentChannel = useSelector(currentChannelSelector);\n  const recentUserMessages = useSelector(recentUserMessagesSelector);\n\n  const handleSendMessage = useCallback(() => {\n    sendMessage(currentChannel, inputText);\n    setInputText('');\n    setRecentUserMessagesIndex(-1);\n  }, [currentChannel, sendMessage, inputText]);\n\n  const getDeps = () => ({\n    chatInputRef,\n    inputText,\n    setInputText,\n    suggestions,\n    setSuggestions,\n    recentUserMessagesIndex,\n    setRecentUserMessagesIndex,\n    emotes,\n    users,\n    recentUserMessages: [...recentUserMessages, ''],\n    handleSendMessage,\n  });\n\n  const deps = useRef({} as ReturnType<typeof getDeps>);\n\n  deps.current = getDeps();\n\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      const d = deps.current;\n      const { value, selectionStart } = e.target;\n\n      d.setInputText(value);\n\n      const spaceIndexBefore = value.lastIndexOf(' ', selectionStart - 1);\n      const spaceIndexAfter = value.indexOf(' ', selectionStart);\n\n      const start = spaceIndexBefore === -1 ? 0 : spaceIndexBefore + 1;\n      const end = spaceIndexAfter === -1 ? value.length : spaceIndexAfter;\n\n      const word = value.substring(start, end);\n\n      const usersMatch = SUGGESTION_TYPES.users.regex.exec(word);\n\n      if (usersMatch) {\n        const [, beginText] = usersMatch;\n        const items = getUsersByBeginText(\n          beginText,\n          d.users,\n          userLogin,\n          SUGGESTION_TYPES.users.limit,\n        );\n\n        d.setSuggestions({\n          type: 'users',\n          isActive: true,\n          items,\n          activeIndex: 0,\n          start,\n          end,\n        });\n\n        return;\n      }\n\n      const emotesMatch = SUGGESTION_TYPES.emotes.regex.exec(word);\n\n      if (emotesMatch && d.emotes) {\n        const [, text] = emotesMatch;\n        const items = getEmotesByText(\n          text,\n          d.emotes,\n          SUGGESTION_TYPES.emotes.limit,\n        );\n\n        d.setSuggestions({\n          type: 'emotes',\n          isActive: true,\n          items,\n          activeIndex: 0,\n          start,\n          end,\n        });\n\n        return;\n      }\n\n      if (d.suggestions.isActive) {\n        d.setSuggestions(suggestionsInitialState);\n      }\n    },\n    [userLogin],\n  );\n\n  const handleKeyUp = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {},\n    [],\n  );\n\n  const handleKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n      const d = deps.current;\n\n      if (d.suggestions.isActive) {\n        if (e.key === 'Enter' || e.key === 'Tab') {\n          e.preventDefault();\n          d.setInputText((t) => replaceSuggestionText(t, d.suggestions));\n          d.setSuggestions(suggestionsInitialState);\n\n          return;\n        }\n\n        if (e.key === 'ArrowUp') {\n          e.preventDefault();\n          d.setSuggestions(setSuggestionsIndexUp);\n          return;\n        }\n\n        if (e.key === 'ArrowDown') {\n          e.preventDefault();\n          d.setSuggestions(setSuggestionsIndexDown);\n          return;\n        }\n\n        if (e.key === 'Escape') {\n          d.setSuggestions({ isActive: false });\n          return;\n        }\n      }\n\n      if (!d.suggestions.isActive) {\n        if (e.key === 'Enter') {\n          e.preventDefault();\n          d.handleSendMessage();\n          return;\n        }\n\n        if (e.key === 'ArrowUp') {\n          const isCaretAtBegin =\n            (e.target as HTMLTextAreaElement).selectionStart === 0;\n\n          if (!isCaretAtBegin) return;\n          if (d.recentUserMessagesIndex >= d.recentUserMessages.length - 1)\n            return;\n\n          const newIndex = d.recentUserMessagesIndex + 1;\n\n          d.setInputText(d.recentUserMessages[newIndex]);\n          d.setRecentUserMessagesIndex(newIndex);\n\n          return;\n        }\n\n        if (e.key === 'ArrowDown') {\n          const isCaretAtEnd =\n            (e.target as HTMLTextAreaElement).selectionStart ===\n            (e.target as HTMLTextAreaElement).defaultValue.length;\n\n          if (!isCaretAtEnd) return;\n          if (d.recentUserMessagesIndex <= 0) return;\n\n          const newIndex = d.recentUserMessagesIndex - 1;\n\n          d.setInputText(d.recentUserMessages[newIndex]);\n          d.setRecentUserMessagesIndex(newIndex);\n\n          // eslint-disable-next-line no-useless-return\n          return;\n        }\n      }\n    },\n    [deps],\n  );\n\n  const handleSuggestionMouseEnter = useCallback(\n    (activeIndex: number) => setSuggestions({ activeIndex }),\n    [setSuggestions],\n  );\n\n  const handleSuggestionClick = useCallback(\n    (activeIndex: number) => {\n      const d = deps.current;\n\n      d.setInputText((t) =>\n        replaceSuggestionText(t, { ...d.suggestions, activeIndex }),\n      );\n\n      if (d.chatInputRef.current) {\n        d.chatInputRef.current.focus();\n      }\n\n      d.setSuggestions(suggestionsInitialState);\n    },\n    [deps],\n  );\n\n  const handleBlur = useCallback(() => {\n    setSuggestions({ isActive: false });\n  }, [setSuggestions]);\n\n  const handleNameRightClick = useCallback(\n    (name: string) => {\n      const d = deps.current;\n      d.setInputText((t) => `${t.trim()} @${name} `.trimLeft());\n\n      if (d.chatInputRef.current) {\n        d.chatInputRef.current.focus();\n      }\n    },\n    [deps],\n  );\n\n  const handleEmoteClick = useCallback(\n    (name: string) => {\n      const d = deps.current;\n\n      d.setInputText((t) => `${t.trim()} ${name} `.trimLeft());\n    },\n    [deps],\n  );\n\n  return {\n    inputText,\n    suggestions,\n    handleSendMessage,\n    handleChange,\n    handleKeyUp,\n    handleKeyDown,\n    handleBlur,\n    handleSuggestionMouseEnter,\n    handleSuggestionClick,\n    handleNameRightClick,\n    handleEmoteClick,\n  };\n};\n\nexport default useChatInput;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M8.5 10L4 5.5 5.5 4 10 8.5 14.5 4 16 5.5 11.5 10l4.5 4.5-1.5 1.5-4.5-4.5L5.5 16 4 14.5 8.5 10z\"\n});\n\nfunction SvgClose({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref);\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgClose);\nexport default __webpack_public_path__ + \"static/media/close.e62b63c9.svg\";\nexport { ForwardRef as ReactComponent };","import styled, { css } from 'styled-components';\n\nconst sizes = {\n  small: css`\n    width: 24px;\n    height: 24px;\n  `,\n  medium: css`\n    width: 30px;\n    height: 30px;\n  `,\n  // large: css``,\n};\n\nconst IconButton = styled.button.attrs({\n  type: 'button',\n})<{ $size?: 'small' | 'medium' }>`\n  margin: 0;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: none;\n  border: none;\n  outline: none;\n  color: #fff;\n  border-radius: 4px;\n  cursor: pointer;\n\n  ${(p) => sizes[p.$size || 'medium']};\n\n  &:hover,\n  &:focus {\n    background-color: rgba(255, 255, 255, 0.15);\n  }\n\n  &:active {\n    background-color: rgba(255, 255, 255, 0.2);\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n`;\n\nexport default IconButton;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { ReactComponent as CloseIconSvg } from 'icons/close.svg';\nimport IconButton from 'components/IconButton';\n\nconst ChatModalRoot = styled.div`\n  height: 100%;\n  box-shadow: rgba(0, 0, 0, 0.4) 0px 4px 8px 0px,\n    rgba(0, 0, 0, 0.4) 0px 0px 4px 0px;\n  background-color: #18181b;\n  white-space: normal;\n  color: #fff;\n  border-radius: 4px;\n`;\nconst CloseButton = styled(IconButton).attrs({ $size: 'small' })`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n`;\nconst CloseIcon = styled(CloseIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  children: React.ReactNode;\n  onClose: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n};\n\nconst ChatModal = ({ children, onClose }: Props) => (\n  <ChatModalRoot>\n    <CloseButton onClick={onClose}>\n      <CloseIcon />\n    </CloseButton>\n    {children}\n  </ChatModalRoot>\n);\n\nexport default ChatModal;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"currentColor\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M7 11a1 1 0 100-2 1 1 0 000 2zm7-1a1 1 0 11-2 0 1 1 0 012 0zm-4 4a2 2 0 002-2H8a2 2 0 002 2z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-2 0a6 6 0 11-12 0 6 6 0 0112 0z\",\n  clipRule: \"evenodd\"\n}));\n\nfunction SvgSmileyFace({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref);\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSmileyFace);\nexport default __webpack_public_path__ + \"static/media/smiley-face.7ed6fdde.svg\";\nexport { ForwardRef as ReactComponent };","import CustomScrollbar from 'react-scrollbars-custom';\nimport styled from 'styled-components';\n\nconst Scrollbar = styled(CustomScrollbar).attrs({\n  disableTracksWidthCompensation: true,\n})`\n  overflow-y: auto;\n\n  .ScrollbarsCustom-Content {\n    padding: 0 !important;\n  }\n\n  .ScrollbarsCustom-TrackY {\n    background: none !important;\n  }\n\n  .ScrollbarsCustom-ThumbY {\n    margin-left: auto;\n    margin-right: auto;\n    width: 6px !important;\n  }\n`;\n\nexport default Scrollbar;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  fillRule: \"evenodd\",\n  d: \"M13.192 14.606a7 7 0 111.414-1.414l3.101 3.1-1.414 1.415-3.1-3.1zM14 9A5 5 0 114 9a5 5 0 0110 0z\",\n  clipRule: \"evenodd\"\n});\n\nfunction SvgSearch({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref);\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSearch);\nexport default __webpack_public_path__ + \"static/media/search.46b92e63.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport type { RootState } from 'app/rootReducer';\nimport Scrollbar from 'components/Scrollbar';\nimport { emoteCategoriesSelector } from 'features/emotes/emotesSelectors';\nimport type { EmoteCategory } from 'features/emotes/utils/createEmoteCategories';\nimport { ReactComponent as SearchIconSvg } from 'icons/search.svg';\n\nconst EmotePickerRoot = styled.div`\n  padding-top: 30px;\n  padding-bottom: 16px;\n  height: 100%;\n`;\nconst Categories = styled.div`\n  height: calc(100% - 30px);\n`;\nconst Category = styled.div`\n  padding-top: 10px;\n  padding-right: 16px;\n  padding-left: 16px;\n\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding-bottom: 10px;\n  font-size: 12px;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst CategoryItems = styled.div``;\nconst Emote = styled.img`\n  padding: 2px;\n  width: 32px;\n  height: 32px;\n  object-fit: contain;\n\n  &:hover {\n    background-color: rgba(119, 44, 232, 0.2);\n    cursor: pointer;\n  }\n`;\nconst SearchBlock = styled.div`\n  position: relative;\n  padding: 0 16px;\n  color: #adadb8;\n`;\nconst SearchInput = styled.input`\n  padding-left: 30px;\n  padding-right: 10px;\n  width: 100%;\n  height: 30px;\n  color: #efeff1;\n  font-family: inherit;\n  line-height: 1.5;\n  background-clip: padding-box;\n  background-color: rgba(255, 255, 255, 0.15);\n  border: 2px solid rgba(255, 255, 255, 0.15);\n  outline: 0;\n  border-radius: 4px;\n  appearance: none;\n  transition: box-shadow 0.1s ease-in, border 0.1s ease-in,\n    background-color 0.1s ease-in;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n`;\nconst SearchIcon = styled(SearchIconSvg)`\n  position: absolute;\n  top: 50%;\n  left: 21px;\n  display: block;\n  width: 20px;\n  height: 20px;\n  transform: translateY(-50%);\n`;\n\ntype Props = {\n  onEmoteClick: (name: string) => void;\n};\n\nconst EmotePicker = ({ onEmoteClick }: Props) => {\n  const [search, setSearch] = useState('');\n  const searchInputRef = useRef<HTMLInputElement>(null);\n  const emoteCategories = useSelector((state: RootState) =>\n    emoteCategoriesSelector(state, search),\n  );\n\n  useEffect(() => {\n    if (searchInputRef.current) {\n      searchInputRef.current.focus();\n    }\n\n    return () => setSearch('');\n  }, []);\n\n  const renderCategory = ({ title, items }: EmoteCategory, key: number) => (\n    <Category key={key}>\n      {!!title && <CategoryHeader>{title}</CategoryHeader>}\n      <CategoryItems>\n        {items.map(({ alt, src, srcSet }) => (\n          <Emote\n            key={alt}\n            alt={alt}\n            src={src}\n            srcSet={srcSet}\n            onClick={() => onEmoteClick(alt)}\n          />\n        ))}\n      </CategoryItems>\n    </Category>\n  );\n\n  return (\n    <EmotePickerRoot>\n      <SearchBlock>\n        <SearchIcon />\n        <SearchInput\n          ref={searchInputRef}\n          placeholder=\"Search for Emotes\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n        />\n      </SearchBlock>\n      <Categories>\n        <Scrollbar>{emoteCategories.map(renderCategory)}</Scrollbar>\n      </Categories>\n    </EmotePickerRoot>\n  );\n};\n\nexport default EmotePicker;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport useOnClickOutside from 'react-cool-onclickoutside';\n\nimport ChatModal from 'components/ChatModal';\nimport IconButton from 'components/IconButton';\nimport { ReactComponent as SmileyFaceIconSvg } from 'icons/smiley-face.svg';\nimport EmotePicker from 'features/emotes/EmotePicker';\nimport type { SuggestionsState } from 'features/chat/utils/suggestions';\nimport { isEmotesLoadedSelector } from 'features/emotes/emotesSelectors';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\n\nconst ChatInputRoot = styled.div`\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n  background-color: #18181b;\n\n  & > :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nconst ChatInputInner = styled.div`\n  position: relative;\n`;\nconst Suggestions = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 100%;\n  margin-left: -5px;\n  margin-bottom: -5px;\n  margin-right: -5px;\n  margin-bottom: 0;\n  padding-top: 10px;\n  padding-bottom: 5px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border: 1px solid rgba(255, 255, 255, 0.15);\n  border-bottom: none;\n  background-color: #18181b;\n  color: #fff;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n  /* box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15), 0 0px 2px rgba(0, 0, 0, 0.1); */\n`;\nconst SuggestionItem = styled.div<{ $isActive: boolean }>`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border-radius: 2px;\n  background-color: ${(p) =>\n    p.$isActive ? 'rgba(255, 255, 255, 0.15)' : 'transparent'};\n  cursor: pointer;\n`;\nconst SuggestionImage = styled.img`\n  margin-right: 8px;\n  width: 28px;\n  height: 28px;\n  object-fit: contain;\n`;\nconst TextareaInput = styled.div`\n  position: relative;\n`;\nconst TextareaWrapper = styled.div<{ $isSuggestions: boolean }>`\n  ${(p) =>\n    p.$isSuggestions &&\n    css`\n      margin-left: -5px;\n      margin-bottom: -5px;\n      margin-right: -5px;\n      padding: 5px;\n      border: 1px solid rgba(255, 255, 255, 0.15);\n      border-top: none;\n      border-bottom-left-radius: 6px;\n      border-bottom-right-radius: 6px;\n      /* box-shadow: 0 2px 3px -1px rgba(0, 0, 0, 0.1),\n        0 2px 2px -2px rgba(0, 0, 0, 0.02); */\n\n      & > ${TextareaInput} {\n        margin-left: -1px;\n        margin-bottom: -1px;\n        margin-right: -1px;\n      }\n    `};\n`;\nconst EmotesModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 0;\n  bottom: 100%;\n  margin-bottom: 8px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nconst Textarea = styled(TextareaAutosize)<{ $showScroll: boolean }>`\n  display: block;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  padding-left: 10px;\n  padding-right: 32px;\n  width: 100%;\n  height: 38px;\n  max-height: 91px;\n  min-height: 40px;\n  overflow-x: hidden;\n  overflow-y: ${(p) => (p.$showScroll ? 'auto' : 'hidden')};\n  border: 2px solid transparent;\n  background-color: rgba(255, 255, 255, 0.15);\n  font-family: inherit;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\nconst EmotesButton = styled(IconButton)`\n  position: absolute;\n  right: 5px;\n  bottom: 5px;\n`;\nconst SmileyFaceIcon = styled(SmileyFaceIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  text: string;\n  suggestions: SuggestionsState;\n  isDisabled: boolean;\n  onEmoteClick: (name: string) => void;\n  onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onKeyUp: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur: () => void;\n  onSuggestionMouseEnter: (index: number) => void;\n  onSuggestionClick: (index: number) => void;\n};\n\nconst ChatInput = React.forwardRef<HTMLTextAreaElement, Props>(\n  (\n    {\n      text,\n      suggestions,\n      isDisabled,\n      onEmoteClick,\n      onChange,\n      onKeyUp,\n      onKeyDown,\n      onBlur,\n      onSuggestionMouseEnter,\n      onSuggestionClick,\n    },\n    textareaRef,\n  ) => {\n    const suggestionsRef = useRef<HTMLDivElement>(null);\n\n    useOnClickOutside(() => onBlur(), {\n      refs: [textareaRef as React.RefObject<HTMLElement>, suggestionsRef],\n    });\n\n    const [isShowTextareaScroll, setIsShowTextareaScroll] = useState(false);\n    const [isEmotesModalVisible, setIsEmotesModalVisible] = useState(false);\n    const isEmotesLoaded = useSelector(isEmotesLoadedSelector);\n    const handleCloseEmotesModal = () => setIsEmotesModalVisible(false);\n\n    const chatInputRef = useOnClickOutside(handleCloseEmotesModal);\n\n    const renderSuggestions = ({\n      type,\n      items,\n      activeIndex,\n    }: SuggestionsState) => {\n      const renderUser = (name: string, index: number) => (\n        <SuggestionItem\n          key={name}\n          $isActive={index === activeIndex}\n          onMouseEnter={() => onSuggestionMouseEnter(index)}\n          onClick={() => onSuggestionClick(index)}\n        >\n          {name}\n        </SuggestionItem>\n      );\n\n      const renderEmote = (\n        { src, srcSet, alt }: htmlEntity.Emote,\n        index: number,\n      ) => (\n        <SuggestionItem\n          key={alt}\n          $isActive={index === activeIndex}\n          onMouseEnter={() => onSuggestionMouseEnter(index)}\n          onClick={() => onSuggestionClick(index)}\n        >\n          <SuggestionImage src={src} srcSet={srcSet} alt={alt} />\n          {alt}\n        </SuggestionItem>\n      );\n\n      const renderItems = () =>\n        type === 'users'\n          ? (items as string[]).map(renderUser)\n          : (items as htmlEntity.Emote[]).map(renderEmote);\n\n      return (\n        <Suggestions ref={suggestionsRef}>\n          {items.length ? renderItems() : 'No matches'}\n        </Suggestions>\n      );\n    };\n\n    const renderEmotesButton = () => (\n      <EmotesButton\n        onClick={() => setIsEmotesModalVisible(!isEmotesModalVisible)}\n      >\n        <SmileyFaceIcon />\n      </EmotesButton>\n    );\n\n    const renderEmotesModal = () => (\n      <EmotesModal>\n        <ChatModal onClose={handleCloseEmotesModal}>\n          <EmotePicker onEmoteClick={onEmoteClick} />\n        </ChatModal>\n      </EmotesModal>\n    );\n\n    const handleHeightChange = (height: number) =>\n      setIsShowTextareaScroll(height >= 96);\n\n    return (\n      <ChatInputRoot ref={chatInputRef}>\n        <ChatInputInner>\n          {suggestions.isActive && renderSuggestions(suggestions)}\n          <TextareaWrapper $isSuggestions={suggestions.isActive}>\n            <TextareaInput>\n              <Textarea\n                ref={textareaRef}\n                value={text}\n                placeholder=\"Send a message\"\n                maxLength={500}\n                maxRows={4}\n                disabled={isDisabled}\n                $showScroll={isShowTextareaScroll}\n                onChange={onChange}\n                onKeyUp={onKeyUp}\n                onKeyDown={onKeyDown}\n                onHeightChange={handleHeightChange}\n              />\n              {isEmotesLoaded && renderEmotesButton()}\n            </TextareaInput>\n          </TextareaWrapper>\n          {isEmotesModalVisible && renderEmotesModal()}\n        </ChatInputInner>\n      </ChatInputRoot>\n    );\n  },\n);\n\nexport default React.memo(ChatInput);\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"currentColor\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 8a2 2 0 100 4 2 2 0 000-4z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M9 2h2a2.01 2.01 0 001.235 1.855l.53.22a2.01 2.01 0 002.185-.439l1.414 1.414a2.01 2.01 0 00-.439 2.185l.22.53A2.01 2.01 0 0018 9v2a2.01 2.01 0 00-1.855 1.235l-.22.53a2.01 2.01 0 00.44 2.185l-1.415 1.414a2.01 2.01 0 00-2.184-.439l-.531.22A2.01 2.01 0 0011 18H9a2.01 2.01 0 00-1.235-1.854l-.53-.22a2.009 2.009 0 00-2.185.438L3.636 14.95a2.009 2.009 0 00.438-2.184l-.22-.531A2.01 2.01 0 002 11V9c.809 0 1.545-.487 1.854-1.235l.22-.53a2.009 2.009 0 00-.438-2.185L5.05 3.636a2.01 2.01 0 002.185.438l.53-.22A2.01 2.01 0 009 2zm-4 8l1.464 3.536L10 15l3.535-1.464L15 10l-1.465-3.536L10 5 6.464 6.464 5 10z\",\n  clipRule: \"evenodd\"\n}));\n\nfunction SvgGears({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref);\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgGears);\nexport default __webpack_public_path__ + \"static/media/gears.f43541a0.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M13 8l-5 5v18h6v5l5-5h4l9-9V8z\"\n});\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#9147ff\",\n  d: \"M26 25l4-4V10H14v15h4v4l4-4z\"\n});\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M20 14h2v6h-2v-6zm7 0v6h-2v-6h2z\"\n});\n\nfunction SvgTwitch({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 40 40\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref, _ref2, _ref3);\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgTwitch);\nexport default __webpack_public_path__ + \"static/media/twitch.57cb43e0.svg\";\nexport { ForwardRef as ReactComponent };","import styled from 'styled-components';\n\nconst Button = styled.button.attrs({ type: 'button' })`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0 10px;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #9147ff;\n  outline: none;\n  font-size: 12px;\n  border-radius: 4px;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #772ce8;\n  }\n\n  &:active {\n    background-color: #5c16c5;\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n\n  &[disabled] {\n    background-color: rgba(255, 255, 255, 0.26);\n    color: rgba(255, 255, 255, 0.8);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst SwitchRoot = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  line-height: 20px;\n`;\nconst Label = styled.label`\n  content: '';\n  position: relative;\n  display: inline-block;\n  order: 0;\n  width: 35px;\n  height: 20px;\n  vertical-align: bottom;\n  border-radius: 10px/50%;\n  background-color: rgba(0, 0, 0, 0.3);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15), 0 0 2px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.1s ease;\n  cursor: pointer;\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    bottom: 2px;\n    display: block;\n    width: 16px;\n    border-radius: 50%;\n    background-color: #fff;\n    transition: left 0.1s ease;\n  }\n`;\nconst Input = styled.input.attrs({ type: 'checkbox' })`\n  position: absolute;\n  opacity: 0;\n\n  &:checked + ${Label} {\n    background-color: #9147ff;\n\n    &:after {\n      content: '';\n      top: 2px;\n      left: calc(100% - 18px);\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 9px;\n      left: 10px;\n      display: block;\n      height: 3px;\n      width: 7px;\n      border-bottom: 2px solid #fff;\n      border-left: 2px solid #fff;\n      transform: translate3d(-50%, -50%, 0) rotate(-45deg);\n    }\n  }\n`;\n\ntype Props = {\n  id: string;\n  label: string;\n  checked?: boolean;\n  readOnly?: boolean;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst Switch = ({ id, label, checked, readOnly, onChange }: Props) => (\n  <SwitchRoot>\n    <Input\n      id={id}\n      aria-label={label}\n      checked={checked}\n      readOnly={readOnly}\n      onChange={onChange}\n    />\n    <Label htmlFor={id} />\n  </SwitchRoot>\n);\n\nSwitch.defaultProps = {\n  checked: false,\n  readOnly: false,\n  onChange: () => {},\n};\n\nexport default Switch;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport Scrollbar from 'components/Scrollbar';\nimport Switch from 'components/Switch';\nimport { optionsSelector } from 'features/options/optionsSelectors';\nimport { isAuthSelector } from 'features/auth/authSelectors';\nimport {\n  userDisplayNameSelector,\n  userColorSelector,\n} from 'features/chat/chatSelectors';\nimport { userBadgesImagesSelector } from 'features/badges/badgesSelectors';\nimport { changeOption } from 'features/options/optionsSlice';\n\nconst OptionsRoot = styled.div`\n  padding: 16px;\n  height: 100%;\n`;\nconst Header = styled.h2`\n  margin: 0;\n  padding: 0;\n  font-size: 14px;\n  text-align: center;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst Categories = styled(Scrollbar)`\n  height: 100%;\n`;\nconst Category = styled.div`\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding: 8px 0;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst CategoryItems = styled.div``;\nconst Option = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 4px 0;\n  cursor: pointer;\n`;\nconst OptionText = styled.span``;\nconst Profile = styled.div`\n  display: flex;\n  align-items: center;\n`;\nconst UserName = styled.div`\n  font-weight: bold;\n  color: ${(p) => p.color};\n`;\nconst LogOutButton = styled(Link)`\n  margin-left: auto;\n  color: #bf94ff;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Badge = styled.img`\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst Options = () => {\n  const dispatch = useDispatch();\n  const options = useSelector(optionsSelector);\n\n  const isAuth = useSelector(isAuthSelector);\n\n  const userDisplayName = useSelector(userDisplayNameSelector);\n  const userColor = useSelector(userColorSelector);\n  const userBadgesImages = useSelector(userBadgesImagesSelector);\n\n  const renderOption = useCallback(\n    ({ id, name, title, description, value }) => (\n      <Option\n        key={id}\n        onClick={() => dispatch(changeOption({ name, value: !value }))}\n        title={description}\n      >\n        <OptionText>{title}</OptionText>\n        <Switch\n          id={id}\n          label={title}\n          checked={value}\n          onChange={() => dispatch(changeOption({ name, value }))}\n        />\n      </Option>\n    ),\n    [dispatch],\n  );\n\n  const renderProfileCategory = () => (\n    <Category>\n      <CategoryHeader>Profile</CategoryHeader>\n      <CategoryItems>\n        <Profile>\n          {userBadgesImages.map(({ alt, label, src, srcSet }, key) => (\n            <Badge\n              // eslint-disable-next-line react/no-array-index-key\n              key={key}\n              alt={alt}\n              aria-label={label}\n              src={src}\n              srcSet={srcSet}\n            />\n          ))}\n          <UserName color={userColor}>{userDisplayName}</UserName>\n          <LogOutButton to=\"/chat/logout\">Log Out</LogOutButton>\n        </Profile>\n      </CategoryItems>\n    </Category>\n  );\n\n  const renderOptionsCategory = useCallback(\n    ({ title, items }, key) => (\n      <Category key={key}>\n        {!!title && <CategoryHeader>{title}</CategoryHeader>}\n        <CategoryItems>{items.map(renderOption)}</CategoryItems>\n      </Category>\n    ),\n    [renderOption],\n  );\n\n  return (\n    <OptionsRoot>\n      <Header>Chat settings</Header>\n      <Categories>\n        {isAuth && renderProfileCategory()}\n        {options.map(renderOptionsCategory)}\n      </Categories>\n    </OptionsRoot>\n  );\n};\n\nexport default Options;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nimport useOnClickOutside from 'react-cool-onclickoutside';\nimport { ReactComponent as GearsIconSvg } from 'icons/gears.svg';\nimport { ReactComponent as TwitchIconSvg } from 'icons/twitch.svg';\nimport Button from 'components/Button';\nimport IconButton from 'components/IconButton';\nimport ChatModal from 'components/ChatModal';\nimport Options from 'features/options/Options';\nimport {\n  isAuthSelector,\n  isAuthReadySelector,\n} from 'features/auth/authSelectors';\n\nconst ChatControlsRoot = styled.div`\n  position: relative;\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n`;\nconst Controls = styled.div`\n  display: flex;\n  align-items: center;\n\n  & > :not(:last-child) {\n    margin-right: 8px;\n  }\n`;\nconst OptionsModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 10px;\n  bottom: 100%;\n  margin-bottom: 10px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nconst OptionsButton = styled(IconButton)`\n  margin-left: auto;\n`;\nconst GearsIcon = styled(GearsIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\nconst TwitchIcon = styled(TwitchIconSvg)`\n  display: block;\n  margin-right: 4px;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  isDisabled: boolean;\n  onSendMessage: () => void;\n};\n\nconst ChatControls = ({ isDisabled, onSendMessage }: Props) => {\n  const [isOptionsModalVisible, setIsOptionsModalVisible] = useState(false);\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n\n  const handleCloseOptionsModal = () => setIsOptionsModalVisible(false);\n  const optionsRef = useOnClickOutside(handleCloseOptionsModal);\n\n  const renderSignInButton = () => (\n    <Button as={Link} to=\"/chat/auth\">\n      <TwitchIcon />\n      Sign in with Twitch\n    </Button>\n  );\n\n  const renderOptionsModal = () => (\n    <OptionsModal ref={optionsRef}>\n      <ChatModal onClose={handleCloseOptionsModal}>\n        <Options />\n      </ChatModal>\n    </OptionsModal>\n  );\n\n  return (\n    <ChatControlsRoot>\n      <Controls>\n        {isAuthReady && !isAuth && renderSignInButton()}\n        <OptionsButton\n          ref={optionsRef}\n          onClick={() => setIsOptionsModalVisible((prev) => !prev)}\n        >\n          <GearsIcon />\n        </OptionsButton>\n        <Button disabled={isDisabled} onClick={onSendMessage}>\n          Chat\n        </Button>\n      </Controls>\n      {isOptionsModalVisible && renderOptionsModal()}\n    </ChatControlsRoot>\n  );\n};\n\nexport default React.memo(ChatControls);\n","/* eslint-disable no-param-reassign */\n// source: https://github.com/night/betterttv/blob/master/src/utils/colors.js\n\n/**\n * Converts an RGB color value to HSL. Conversion formula\n * adapted from https://en.wikipedia.org/wiki/HSL_color_space\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and l in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSL representation\n */\nconst rgbToHsl = (r: number, g: number, b: number) => {\n  // Convert RGB to HSL, not ideal but it's faster than HCL or full YIQ conversion\n  // based on http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = Math.min(Math.max(0, (max + min) / 2), 1);\n  const d = Math.min(Math.max(0, max - min), 1);\n\n  if (d === 0) {\n    return [d, d, l]; // achromatic\n  }\n\n  let h = 0;\n\n  // eslint-disable-next-line default-case\n  switch (max) {\n    case r:\n      h = Math.min(Math.max(0, (g - b) / d + (g < b ? 6 : 0)), 6);\n      break;\n    case g:\n      h = Math.min(Math.max(0, (b - r) / d + 2), 6);\n      break;\n    case b:\n      h = Math.min(Math.max(0, (r - g) / d + 4), 6);\n      break;\n  }\n\n  h /= 6;\n\n  let s = l > 0.5 ? d / (2 * (1 - l)) : d / (2 * l);\n\n  s = Math.min(Math.max(0, s), 1);\n\n  return [h, s, l];\n};\n\n// Convert HSL to RGB, based on http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\nconst hueToRgb = (pp: number, qq: number, t: number) => {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1 / 6) return pp + (qq - pp) * 6 * t;\n  if (t < 1 / 2) return qq;\n  if (t < 2 / 3) return pp + (qq - pp) * (2 / 3 - t) * 6;\n\n  return pp;\n};\n\n/**\n * Converts an HSL color value to RGB. Conversion formula\n * adapted from https://en.wikipedia.org/wiki/HSL_color_space\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set of integers [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  l       The lightness\n * @return  Array           The RGB representation\n */\nconst hslToRgb = (h: number, s: number, l: number) => {\n  if (s === 0) {\n    const rgb = Math.round(Math.min(Math.max(0, 255 * l), 255)); // achromatic\n\n    return [rgb, rgb, rgb];\n  }\n\n  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  const p = 2 * l - q;\n\n  return [\n    Math.round(Math.min(Math.max(0, 255 * hueToRgb(p, q, h + 1 / 3)), 255)),\n    Math.round(Math.min(Math.max(0, 255 * hueToRgb(p, q, h)), 255)),\n    Math.round(Math.min(Math.max(0, 255 * hueToRgb(p, q, h - 1 / 3)), 255)),\n  ];\n};\n\nconst calculateColorBackground = (color: string) => {\n  // Converts HEX to YIQ to judge what color background the color would look best on\n  color = color.replace(/[^0-9a-f]/gi, '');\n\n  if (color.length < 6) {\n    color = color[0] + color[0] + color[1] + color[1] + color[2] + color[2];\n  }\n\n  const r = parseInt(color.substr(0, 2), 16);\n  const g = parseInt(color.substr(2, 2), 16);\n  const b = parseInt(color.substr(4, 2), 16);\n\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n\n  return yiq >= 128 ? 'dark' : 'light';\n};\n\nconst calculateColorReplacement = (\n  color: string,\n  background: 'dark' | 'light' = 'dark',\n) => {\n  // Modified from http://www.sitepoint.com/javascript-generate-lighter-darker-color/\n  // Modified further to use HSL as an intermediate format, to avoid hue-shifting\n  // toward primaries when darkening and toward secondaries when lightening\n  const light = background === 'light';\n  const factor = light ? 0.1 : -0.1;\n\n  color = color.replace(/[^0-9a-f]/gi, '');\n\n  if (color.length < 6) {\n    color = color[0] + color[0] + color[1] + color[1] + color[2] + color[2];\n  }\n\n  const hsl = rgbToHsl(\n    parseInt(color.substr(0, 2), 16),\n    parseInt(color.substr(2, 2), 16),\n    parseInt(color.substr(4, 2), 16),\n  );\n\n  // more thoroughly lightens dark colors, with no problems at black\n  let l = light ? 1 - (1 - factor) * (1 - hsl[2]) : (1 + factor) * hsl[2];\n\n  l = Math.min(Math.max(0, l), 1);\n\n  const rgb = hslToRgb(hsl[0], hsl[1], l);\n  const r = rgb[0].toString(16).padStart(2, '0');\n  const g = rgb[1].toString(16).padStart(2, '0');\n  const b = rgb[2].toString(16).padStart(2, '0');\n\n  return `#${r}${g}${b}`;\n};\n\nconst colorCache = new Map();\n\n// eslint-disable-next-line import/prefer-default-export\nexport const calculateColor = (color: string, darkenedMode = true): string => {\n  const cacheKey = `${color}:${darkenedMode}`;\n\n  if (colorCache.has(cacheKey)) return colorCache.get(cacheKey);\n\n  const colorRegex = /^#[0-9a-f]+$/i;\n\n  if (!colorRegex.test(color)) return color;\n\n  let bgColor: 'dark' | 'light';\n\n  for (let i = 20; i >= 0; i -= 1) {\n    bgColor = calculateColorBackground(color);\n\n    if (bgColor === 'light' && !darkenedMode) break;\n    if (bgColor === 'dark' && darkenedMode) break;\n\n    color = calculateColorReplacement(color, bgColor);\n  }\n\n  colorCache.set(cacheKey, color);\n\n  if (colorCache.size > 1000) {\n    colorCache.delete(colorCache.entries().next().value[0]);\n  }\n\n  return color;\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\n\nimport { TWITCH_EMOTES_CDN } from 'utils/constants';\nimport type { MessageCardInfo } from 'features/messages/messagesSlice';\nimport { messageCardSelector } from 'features/messageCards/messageCardsSelectors';\n\nconst MessageCardRoot = styled.a.attrs({\n  target: '_blank',\n  rel: 'noreferrer noopener',\n})<{ $clickable?: boolean }>`\n  display: flex;\n  flex-wrap: nowrap;\n  padding: 5px;\n  border-radius: 4px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.9), 0 0 2px rgba(0, 0, 0, 0.9);\n  background-color: #18181b;\n  text-decoration: none;\n\n  ${(p) =>\n    p.$clickable &&\n    css`\n      &:hover {\n        background-color: #3a3a3d;\n      }\n\n      &:active {\n        background-color: #464649;\n      }\n    `}\n`;\nconst Preview = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 45px;\n  width: 80px;\n  background-color: #26262c;\n  overflow: hidden;\n`;\nconst Image = styled.img`\n  max-height: 100%;\n`;\nconst PreviewLoading = styled.div`\n  height: 45px;\n  width: 80px;\n  background-color: #46464b;\n`;\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding-left: 10px;\n  overflow: hidden;\n`;\nconst textStyles = css`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin: 0;\n  font-size: 12px;\n  line-height: 1.5;\n`;\nconst Title = styled.p`\n  ${textStyles};\n  font-weight: bold;\n  color: #efeff1;\n`;\nconst Description = styled.p`\n  ${textStyles};\n  color: #adadb8;\n`;\nconst textLoadingStyle = css`\n  margin-top: 3px;\n  margin-bottom: 4px;\n\n  height: 12px;\n  background-color: #232326;\n  border-radius: 2px;\n`;\nconst TitleLoading = styled.div`\n  ${textLoadingStyle};\n  width: 180px;\n`;\nconst DescriptionLoading = styled.div`\n  ${textLoadingStyle};\n  width: 120px;\n`;\n\nconst emoteId = '58765';\nconst errorImageSrc = `${TWITCH_EMOTES_CDN}/${emoteId}/1.0`;\nconst errorImageSrcSet = `${TWITCH_EMOTES_CDN}/${emoteId}/1.0 1x, ${TWITCH_EMOTES_CDN}/${emoteId}/2.0 2x, ${TWITCH_EMOTES_CDN}/${emoteId}/3.0 4x`;\n\nconst errorTitle = 'Something went wrong';\nconst errorDescription = {\n  'twitch-clip': \"We couldn't find that Clip\",\n  'twitch-video': \"We couldn't find that Video\",\n  'youtube-video': \"We couldn't find that Video\",\n};\n\nconst renderLoading = () => (\n  <MessageCardRoot>\n    <PreviewLoading />\n    <Content>\n      <TitleLoading />\n      <DescriptionLoading />\n    </Content>\n  </MessageCardRoot>\n);\n\nconst renderError = (type: MessageCardInfo['type']) => (\n  <MessageCardRoot>\n    <Preview>\n      <Image src={errorImageSrc} srcSet={errorImageSrcSet} alt=\"\" />\n    </Preview>\n    <Content>\n      <Title>{errorTitle}</Title>\n      <Description>{errorDescription[type]}</Description>\n    </Content>\n  </MessageCardRoot>\n);\n\ntype Props = MessageCardInfo;\n\nconst MessageCard = (cardInfo: Props) => {\n  const card = useSelector(messageCardSelector(cardInfo));\n\n  if (!card || card.status === 'loading') {\n    return renderLoading();\n  }\n\n  if (card.status === 'error') {\n    return renderError(cardInfo.type);\n  }\n\n  const { id, src, srcSet, title, description } = card;\n\n  const url =\n    cardInfo.type === 'twitch-clip'\n      ? `https://clips.twitch.tv/${id}`\n      : cardInfo.url;\n\n  return (\n    <MessageCardRoot href={url} $clickable>\n      <Preview>\n        <Image src={src} srcSet={srcSet} alt={title} />\n      </Preview>\n      <Content>\n        <Title>{title}</Title>\n        <Description>{description}</Description>\n      </Content>\n    </MessageCardRoot>\n  );\n};\n\nexport default MessageCard;\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { format } from 'date-fns/fp';\nimport { useSelector } from 'react-redux';\n\nimport { calculateColor } from 'utils/colors';\nimport MessageCard from 'features/messageCards/MessageCard';\nimport type {\n  Message as MessageType,\n  MessageEntity,\n} from 'features/messages/messagesSlice';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport { userLoginSelector } from 'features/auth/authSelectors';\nimport {\n  isShowTimestampsSelector,\n  isTimeFormat24HoursSelector,\n} from 'features/options/optionsSelectors';\n\ntype MessageRootProps = {\n  $isAction: boolean;\n  $isHistory: boolean;\n  $isDeleted: boolean;\n  $isHighlighted: boolean;\n  $isEven: boolean;\n  $color: string;\n};\n\nconst getChatMessageBg = (p: MessageRootProps) => {\n  if (p.$isHighlighted) return 'rgba(255, 0, 0, 0.3)';\n  if (p.$isEven) return '#1f1925';\n  return 'transparent';\n};\n\nconst MessageRoot = styled.div<MessageRootProps>`\n  padding: 5px 20px;\n  color: ${(p) => (p.$isAction ? p.$color : '#fff')};\n  opacity: ${(p) => (p.$isHistory || p.$isDeleted ? '0.5' : '1')};\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${getChatMessageBg};\n`;\nconst Name = styled.span<{ $color: string }>`\n  font-weight: bold;\n  color: ${(p) => p.$color};\n  cursor: pointer;\n`;\nconst Emoji = styled.img`\n  display: inline-block;\n  margin-top: -5px;\n  margin-bottom: -4px;\n  width: 20px;\n  height: auto;\n  vertical-align: middle;\n`;\nconst Emote = styled.img`\n  display: inline-block;\n  margin: -5px 0;\n  vertical-align: middle;\n`;\n// https://github.com/night/BetterTTV/blob/master/src/modules/emotes/style.css\n// prettier-ignore\nconst EmoteWrapper = styled.span`\n  display: inline-block;\n\n  /* Prevent stacking of IceCold, SoSnowy */\n  &[data-emote-id='5849c9a4f52be01a7ee5f79d'] + &[data-emote-id='5849c9a4f52be01a7ee5f79d'],\n  &[data-emote-id='567b5b520e984428652809b6'] + &[data-emote-id='567b5b520e984428652809b6'] {\n    display: none;\n  }\n\n  /* IceCold */\n  &        + &[data-emote-id='5849c9a4f52be01a7ee5f79d'],\n  ${Emoji} + &[data-emote-id='5849c9a4f52be01a7ee5f79d'] {\n    margin-left: -33px;\n  }\n\n  /* SoSnowy */\n  &        + &[data-emote-id='567b5b520e984428652809b6'],\n  ${Emoji} + &[data-emote-id='567b5b520e984428652809b6'] {\n    margin-left: -32px;\n  }\n\n  /* SantaHat */\n  &        + &[data-emote-id='58487cc6f52be01a7ee5f205'],\n  ${Emoji} + &[data-emote-id='58487cc6f52be01a7ee5f205'] {\n    margin-left: -34px;\n    margin-top: -18px;\n  }\n\n  /* TopHat, CandyCane, ReinDeer */\n  &        + &[data-emote-id='5849c9c8f52be01a7ee5f79e'],\n  ${Emoji} + &[data-emote-id='5849c9c8f52be01a7ee5f79e'],\n  &        + &[data-emote-id='567b5c080e984428652809ba'],\n  ${Emoji} + &[data-emote-id='567b5c080e984428652809ba'],\n  &        + &[data-emote-id='567b5dc00e984428652809bd'],\n  ${Emoji} + &[data-emote-id='567b5dc00e984428652809bd'] {\n    margin-left: -31px;\n    margin-top: -18px;\n  }\n\n  /* cvHazmat, cvMask */\n  &        + &[data-emote-id='5e76d338d6581c3724c0f0b2'],\n  ${Emoji} + &[data-emote-id='5e76d338d6581c3724c0f0b2'],\n  &        + &[data-emote-id='5e76d399d6581c3724c0f0b8'],\n  ${Emoji} + &[data-emote-id='5e76d399d6581c3724c0f0b8'] {\n    margin-left: -34px;\n  }\n  &        + &[data-emote-id='5e76d338d6581c3724c0f0b2'] ${Emote},\n  ${Emoji} + &[data-emote-id='5e76d338d6581c3724c0f0b2'] ${Emote},\n  &        + &[data-emote-id='5e76d399d6581c3724c0f0b8'] ${Emote},\n  ${Emoji} + &[data-emote-id='5e76d399d6581c3724c0f0b8'] ${Emote} {\n    height: 34px;\n    width: 34px;\n  }\n`;\nconst Mention = styled.span<{ $isActive: boolean; $isOwnMessage: boolean }>`\n  ${(p) =>\n    (p.$isActive || p.$isOwnMessage) &&\n    css`\n      padding: 2px 4px;\n    `};\n  ${(p) =>\n    p.$isOwnMessage &&\n    css`\n      background-color: #40404a;\n      color: #fff;\n    `};\n  ${(p) =>\n    p.$isActive &&\n    css`\n      background-color: #fafafa;\n      color: #18181b;\n    `};\n`;\nconst Link = styled.a`\n  color: #bf94ff;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Timestamp = styled.span`\n  margin-right: 5px;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst Badge = styled.img`\n  margin-bottom: 2px;\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst renderMessageArray = (messageLogin: string, userLogin: string | null) => (\n  item: MessageEntity,\n  key: number,\n) => {\n  if (typeof item !== 'object') return item;\n\n  if (\n    item.type === 'twitch-emote' ||\n    item.type === 'bttv-emote' ||\n    item.type === 'ffz-emote'\n  ) {\n    return (\n      <EmoteWrapper key={key} data-emote-id={item.id}>\n        <Emote src={item.src} srcSet={item.srcSet} alt={item.alt} />\n      </EmoteWrapper>\n    );\n  }\n\n  if (item.type === 'emoji') {\n    return (\n      <EmoteWrapper key={key}>\n        <Emoji src={item.src} alt={item.alt} />\n      </EmoteWrapper>\n    );\n  }\n\n  if (item.type === 'mention') {\n    return (\n      <Mention\n        key={key}\n        $isActive={item.target === userLogin}\n        $isOwnMessage={messageLogin === userLogin}\n      >\n        {item.text}\n      </Mention>\n    );\n  }\n\n  if (item.type === 'link') {\n    return (\n      <Link\n        key={key}\n        href={item.href}\n        rel=\"noreferrer noopener\"\n        target=\"_blank\"\n      >\n        {item.text}\n      </Link>\n    );\n  }\n\n  return null;\n};\n\nconst renderBadges = (badges: htmlEntity.Badge[]) =>\n  badges.map(({ alt, label, src, srcSet }, key: number) => (\n    // eslint-disable-next-line react/no-array-index-key\n    <Badge key={key} alt={alt} aria-label={label} src={src} srcSet={srcSet} />\n  ));\n\ntype Props = {\n  message: MessageType;\n  isEven: boolean;\n  onNameRightClick: (name: string) => void;\n};\n\nconst MESSAGE_DELETED_LABEL = '<message deleted>';\n\nconst Message = ({\n  message: {\n    entities,\n    user: { login, color, displayName, badges },\n    timestamp,\n    card,\n    isHistory,\n    isAction,\n    isDeleted,\n    isHighlighted,\n  },\n  isEven,\n  // onNameClick,\n  onNameRightClick,\n}: Props) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const userLogin = useSelector(userLoginSelector);\n  const isShowTimestamps = useSelector(isShowTimestampsSelector);\n  const isTimeFormat24Hours = useSelector(isTimeFormat24HoursSelector);\n\n  const handleNameRightClick = (\n    e: React.MouseEvent<HTMLSpanElement, MouseEvent>,\n  ) => {\n    onNameRightClick(displayName);\n    e.preventDefault();\n  };\n\n  const timeFormat = isTimeFormat24Hours ? 'H:mm' : 'h:mm';\n  const newColor = color ? calculateColor(color) : '';\n\n  return (\n    <MessageRoot\n      $isHistory={isHistory}\n      $isAction={isAction}\n      $isEven={isEven}\n      $isHighlighted={isHighlighted}\n      $isDeleted={isDeleted}\n      $color={newColor}\n    >\n      {isShowTimestamps && (\n        <Timestamp>{format(timeFormat, new Date(timestamp))}</Timestamp>\n      )}\n      {badges.length > 0 && renderBadges(badges)}\n      <Name $color={newColor} onContextMenu={handleNameRightClick}>\n        {displayName}\n      </Name>\n      {isAction ? ' ' : ': '}\n      {isDeleted && !isVisible ? (\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n        <Link onClick={() => setIsVisible(true)}>{MESSAGE_DELETED_LABEL}</Link>\n      ) : (\n        entities.map(renderMessageArray(login, userLogin))\n      )}\n      {card && <MessageCard type={card.type} id={card.id} url={card.url} />}\n    </MessageRoot>\n  );\n};\n\nexport default React.memo(Message);\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport type { Notice as NoticeType } from 'features/messages/messagesSlice';\n\nconst NoticeRoot = styled.div<{ $isEven: boolean }>`\n  padding: 5px 20px;\n  color: rgba(255, 255, 255, 0.6);\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${(p) => (p.$isEven ? '#1f1925' : 'transparent')};\n`;\n\ntype Props = {\n  message: NoticeType;\n  isEven: boolean;\n};\n\nconst Notice = ({ message: { message }, isEven }: Props) => (\n  <NoticeRoot $isEven={isEven}>{message}</NoticeRoot>\n);\n\nexport default Notice;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport type { UserNotice as UserNoticeType } from 'features/messages/messagesSlice';\n\nconst UserNoticeRoot = styled.div`\n  padding: 5px 20px 5px 16px;\n  line-height: 20px;\n  word-wrap: break-word;\n  border-left: 4px solid #9147ff;\n  color: #fff;\n`;\n\ntype Props = {\n  message: UserNoticeType;\n};\n\nconst UserNotice = ({ message: { systemMessage } }: Props) => (\n  <UserNoticeRoot>{systemMessage}</UserNoticeRoot>\n);\n\nexport default UserNotice;\n","import React from 'react';\n\nimport assertNever from 'utils/assertNever';\nimport type { ChatMessage as ChatMessageType } from 'features/messages/messagesSlice';\nimport Message from 'features/messages/Message';\nimport Notice from 'features/messages/Notice';\nimport UserNotice from 'features/messages/UserNotice';\n\ntype Props = {\n  message: ChatMessageType;\n  isEven: boolean;\n  // onNameClick: (name: string) => void;\n  onNameRightClick: (name: string) => void;\n};\n\nconst ChatMessage = ({\n  message,\n  isEven,\n  // onNameClick,\n  onNameRightClick,\n}: Props) => {\n  if (message.type === 'message') {\n    return (\n      <Message\n        message={message}\n        isEven={isEven}\n        // onNameClick={onNameClick}\n        onNameRightClick={onNameRightClick}\n      />\n    );\n  }\n\n  if (message.type === 'notice') {\n    return <Notice message={message} isEven={isEven} />;\n  }\n\n  if (message.type === 'user-notice') {\n    return <UserNotice message={message} />;\n  }\n\n  return assertNever(message);\n};\n\nexport default React.memo(ChatMessage);\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport type ScrollbarType from 'react-scrollbars-custom';\nimport type { ScrollState } from 'react-scrollbars-custom/dist/types/types';\n\nimport Scrollbar from 'components/Scrollbar';\nimport ChatMessage from 'features/messages/ChatMessage';\nimport {\n  messagesSelector,\n  isEvenSelector,\n} from 'features/messages/messagesSelectors';\nimport { isSplitChatSelector } from 'features/options/optionsSelectors';\n\nconst MORE_MESSAGES_OFFSET = 100;\n\nconst MessagesRoot = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\nconst StyledScrollbar = styled(Scrollbar)`\n  .ScrollbarsCustom-Content {\n    padding-bottom: 10px !important;\n  }\n`;\nconst MoreMessagesButton = styled.button<{ $isVisible: boolean }>`\n  position: absolute;\n  left: 50%;\n  bottom: 10px;\n  display: ${(p) => (p.$isVisible ? 'block' : 'none')};\n  padding: 5px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  transform: translateX(-50%);\n`;\n\ntype Props = {\n  onNameRightClick: (name: string) => void;\n};\n\nconst Messages = ({ onNameRightClick }: Props) => {\n  const [\n    isMoreMessagesButtonVisible,\n    setIsMoreMessagesButtonVisible,\n  ] = useState(false);\n\n  const messages = useSelector(messagesSelector);\n\n  const isEven = useSelector(isEvenSelector);\n  const isSplitChat = useSelector(isSplitChatSelector);\n\n  const handleScrollUpdate = ({\n    clientHeight,\n    contentScrollHeight,\n    scrollTop,\n  }: ScrollState) => {\n    const maxScrollTop = contentScrollHeight - clientHeight;\n    const isVisible = scrollTop + MORE_MESSAGES_OFFSET < maxScrollTop;\n\n    setIsMoreMessagesButtonVisible(isVisible);\n  };\n\n  const scrollbarRef = useRef<ScrollbarType>(null);\n\n  const handleScrollToBottom = () => {\n    if (scrollbarRef.current) {\n      scrollbarRef.current.scrollToBottom();\n    }\n  };\n\n  useEffect(() => {\n    if (!isMoreMessagesButtonVisible) {\n      handleScrollToBottom();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages]);\n\n  const getIsEven = (key: number) => {\n    if (!isSplitChat) return false;\n    return isEven ? key % 2 === 1 : key % 2 === 0;\n  };\n\n  return (\n    <MessagesRoot>\n      <StyledScrollbar onUpdate={handleScrollUpdate} ref={scrollbarRef}>\n        {messages.map((message, key) => (\n          <ChatMessage\n            key={message.id}\n            message={message}\n            isEven={getIsEven(key)}\n            onNameRightClick={onNameRightClick}\n          />\n        ))}\n      </StyledScrollbar>\n      <MoreMessagesButton\n        onClick={handleScrollToBottom}\n        $isVisible={isMoreMessagesButtonVisible}\n      >\n        More messages below\n      </MoreMessagesButton>\n    </MessagesRoot>\n  );\n};\n\nexport default Messages;\n","import React, { useState, useRef, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport Button from 'components/Button';\n\nconst JoinChannelRoot = styled.div`\n  padding: 10px;\n  flex-grow: 1;\n  width: 320px;\n`;\nconst Title = styled.h2`\n  margin-top: 0;\n  margin-bottom: 10px;\n  padding: 0;\n  color: #fff;\n`;\nconst Controls = styled.div`\n  display: flex;\n\n  & > :not(:last-child) {\n    margin-right: 10px;\n  }\n`;\nconst Input = styled.input`\n  display: block;\n  padding: 4px 10px;\n  width: 100%;\n  border: 2px solid transparent;\n  background-color: rgba(255, 255, 255, 0.15);\n  font-family: inherit;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\nconst JoinButton = styled(Button)`\n  flex-shrink: none;\n`;\n\nconst JoinChannel = () => {\n  const history = useHistory();\n  const [value, setValue] = useState('');\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const handleChangeChannel = () => {\n    history.push({\n      pathname: '/chat/',\n      hash: value,\n    });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      handleChangeChannel();\n    }\n  };\n\n  return (\n    <JoinChannelRoot>\n      <Title>Channel to join: </Title>\n      <Controls>\n        <Input\n          ref={inputRef}\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          onKeyPress={handleKeyPress}\n        />\n        <JoinButton onClick={handleChangeChannel} disabled={!value}>\n          Join\n        </JoinButton>\n      </Controls>\n    </JoinChannelRoot>\n  );\n};\n\nexport default JoinChannel;\n","import React, { useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { isAuthSelector } from 'features/auth/authSelectors';\nimport {\n  currentChannelSelector,\n  isConnectedSelector,\n} from 'features/chat/chatSelectors';\nimport { isFixedWidthSelector } from 'features/options/optionsSelectors';\nimport useInitializeAuth from 'features/auth/useInitializeAuth';\nimport useFetchChatData from 'features/chat/hooks/useFetchChatData';\nimport useCurrentChannel from 'features/chat/hooks/useCurrentChannel';\nimport useTwitchClient from 'features/chat/hooks/useTwitchClient';\nimport useChatInput from 'features/chat/hooks/useChatInput';\n\nimport ChatInput from 'features/chat/ChatInput';\nimport ChatControls from 'features/chat/ChatControls';\nimport Messages from 'features/messages/Messages';\nimport JoinChannel from 'features/chat/JoinChannel';\n\nconst ChatRoot = styled.div`\n  height: 100vh;\n  font-size: 12px;\n  background-color: #0e0e10;\n`;\nconst ChatWrapper = styled.div<{ $isFixedWidth: boolean }>`\n  display: flex;\n  flex-direction: column;\n  width: ${(p) => (p.$isFixedWidth ? '340px' : 'auto')};\n  height: 100%;\n  background-color: #18181b;\n`;\n\nconst Chat = () => {\n  const { sendMessage } = useTwitchClient();\n\n  useInitializeAuth();\n  useCurrentChannel();\n  useFetchChatData();\n\n  const currentChannel = useSelector(currentChannelSelector);\n  const isAuth = useSelector(isAuthSelector);\n  const isConnected = useSelector(isConnectedSelector);\n  const isFixedWidth = useSelector(isFixedWidthSelector);\n  const chatInputRef = useRef<HTMLTextAreaElement>(null);\n  const chatInput = useChatInput(sendMessage, chatInputRef);\n\n  const isDisabled = !isAuth || !isConnected;\n\n  return (\n    <ChatRoot>\n      <ChatWrapper $isFixedWidth={isFixedWidth}>\n        {currentChannel ? (\n          <Messages onNameRightClick={chatInput.handleNameRightClick} />\n        ) : (\n          <JoinChannel />\n        )}\n        <ChatInput\n          ref={chatInputRef}\n          text={chatInput.inputText}\n          suggestions={chatInput.suggestions}\n          isDisabled={isDisabled}\n          onEmoteClick={chatInput.handleEmoteClick}\n          onChange={chatInput.handleChange}\n          onKeyUp={chatInput.handleKeyUp}\n          onKeyDown={chatInput.handleKeyDown}\n          onBlur={chatInput.handleBlur}\n          onSuggestionMouseEnter={chatInput.handleSuggestionMouseEnter}\n          onSuggestionClick={chatInput.handleSuggestionClick}\n        />\n        <ChatControls\n          isDisabled={isDisabled}\n          onSendMessage={chatInput.handleSendMessage}\n        />\n      </ChatWrapper>\n    </ChatRoot>\n  );\n};\n\nexport default Chat;\n","import { getAuthUrl } from 'features/auth/authUtils';\n\nconst Auth = () => {\n  window.location.href = getAuthUrl();\n\n  return null;\n};\n\nexport default Auth;\n","import { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport {\n  LS_ACCESS_TOKEN,\n  LS_ID_TOKEN,\n  LS_USER,\n  LS_LAST_CHANNEL,\n} from 'utils/constants';\nimport { invalidateAuth } from 'features/auth/authSlice';\n\nconst Logout = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  localStorage.removeItem(LS_ACCESS_TOKEN);\n  localStorage.removeItem(LS_ID_TOKEN);\n  localStorage.removeItem(LS_USER);\n\n  dispatch(invalidateAuth());\n\n  history.push({\n    pathname: '/chat/',\n    hash: localStorage.getItem(LS_LAST_CHANNEL) || '',\n  });\n\n  return null;\n};\n\nexport default Logout;\n","import { useHistory } from 'react-router-dom';\n\nimport { LS_ACCESS_TOKEN, LS_ID_TOKEN, LS_LAST_CHANNEL } from 'utils/constants';\n\nconst AuthCallback = () => {\n  const history = useHistory();\n\n  if (!window.location.hash) return null;\n\n  const params = new URLSearchParams(window.location.hash.slice(1));\n\n  const accessToken = params.get('access_token');\n  const idToken = params.get('id_token');\n\n  if (!accessToken || !idToken) return null;\n\n  localStorage.setItem(LS_ACCESS_TOKEN, accessToken);\n  localStorage.setItem(LS_ID_TOKEN, idToken);\n\n  history.push({\n    pathname: '/chat/',\n    hash: localStorage.getItem(LS_LAST_CHANNEL) || '',\n  });\n\n  return null;\n};\n\nexport default AuthCallback;\n","import { css } from 'styled-components';\n\nexport default css`\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    margin: 0;\n    font-family: Roobert, Helvetica Neue, Helvetica, Arial, sans-serif;\n  }\n`;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { createGlobalStyle } from 'styled-components';\n\nimport common from 'styles/common';\nimport colors from 'styles/colors';\nimport vars from 'styles/vars';\n\nexport default createGlobalStyle`\n  :root {\n    ${colors};\n    ${vars};\n  }\n  ${common};\n`;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  RouteComponentProps,\n} from 'react-router-dom';\n\nimport { isAuthRedirect } from 'features/auth/authUtils';\nimport Chat from 'features/chat/Chat';\nimport Auth from 'features/auth/Auth';\nimport Logout from 'features/auth/Logout';\nimport AuthCallback from 'features/auth/AuthCallback';\nimport GlobalStyles from 'styles';\n\nconst getHomeComponent = ({ location }: RouteComponentProps) =>\n  isAuthRedirect(location.hash) ? <AuthCallback /> : <Chat />;\n\nconst App: React.FC = () => (\n  <>\n    <Router>\n      <Switch>\n        <Route exact path=\"/chat/\" render={getHomeComponent} />\n        <Route exact path=\"/chat/auth\" component={Auth} />\n        <Route exact path=\"/chat/logout\" component={Logout} />\n      </Switch>\n    </Router>\n    <GlobalStyles />\n  </>\n);\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nconst registerValidSW = (swUrl: string, config?: Config) => {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n};\n\nconst checkValidServiceWorker = (swUrl: string, config?: Config) => {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n};\n\nexport const register = (config?: Config) => {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n};\n\nexport const unregister = () => {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n};\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport auth from 'features/auth/authSlice';\nimport chat from 'features/chat/chatSlice';\nimport messages from 'features/messages/messagesSlice';\nimport messageCards from 'features/messageCards/messageCardsSlice';\nimport emotes from 'features/emotes/emotesSlice';\nimport badges from 'features/badges/badgesSlice';\nimport blockedUsers from 'features/blockedUsers/blockedUsersSlice';\nimport options from 'features/options/optionsSlice';\n\nconst rootReducer = combineReducers({\n  auth,\n  chat,\n  messages,\n  messageCards,\n  emotes,\n  badges,\n  blockedUsers,\n  options,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore, Action } from '@reduxjs/toolkit';\nimport type { ThunkAction } from 'redux-thunk';\n\nimport rootReducer, { RootState } from 'app/rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    // eslint-disable-next-line global-require, @typescript-eslint/no-var-requires\n    const newRootReducer = require('./rootReducer').default;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport ReactGA from 'react-ga';\n\nimport * as serviceWorker from 'serviceWorker';\nimport { isAuthRedirect } from 'features/auth/authUtils';\nimport store from 'app/store';\n\nif (process.env.NODE_ENV === 'production') {\n  ReactGA.initialize('UA-139550930-3');\n\n  if (!isAuthRedirect(window.location.hash)) {\n    const page =\n      window.location.pathname + window.location.search + window.location.hash;\n    ReactGA.pageview(page);\n  }\n}\n\nconst render = () => {\n  // eslint-disable-next-line global-require, @typescript-eslint/no-var-requires\n  const App = require('./app/App').default;\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n};\n\nrender();\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./app/App', render);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchStatus } from 'utils/types';\nimport { writeUserToLocatStorage } from 'features/auth/authUtils';\n\ntype AuthState = {\n  status: FetchStatus;\n  userId: string | null;\n  userLogin: string | null;\n};\n\ntype InitializeAuth = {\n  isAuth: boolean;\n  userId?: string;\n  userLogin?: string;\n};\n\nexport const initialState: AuthState = {\n  status: 'idle',\n  userId: null,\n  userLogin: null,\n};\n\nexport const fetchUser = createAsyncThunk(\n  'auth/fetchUser',\n  async (userId: string) => {\n    const users = await api.fetchUser(userId);\n    const { id, login } = users.data[0];\n    const user = { id, login };\n\n    writeUserToLocatStorage(user);\n\n    return user;\n  },\n);\n\nconst auth = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    initializeAuth: (state, { payload }: PayloadAction<InitializeAuth>) => {\n      state.status = payload.isAuth ? 'success' : 'error';\n\n      if (payload.userId) {\n        state.userId = payload.userId;\n      }\n\n      if (payload.userLogin) {\n        state.userLogin = payload.userLogin;\n      }\n    },\n\n    invalidateAuth: (): AuthState => initialState,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchUser.pending, (state) => {\n      state.status = 'loading';\n    });\n\n    builder.addCase(fetchUser.fulfilled, (state, { payload }) => {\n      state.status = 'success';\n      state.userId = payload.id;\n      state.userLogin = payload.login;\n    });\n\n    builder.addCase(fetchUser.rejected, (state) => {\n      state.status = 'error';\n    });\n  },\n});\n\nexport const { initializeAuth, invalidateAuth } = auth.actions;\n\nexport default auth.reducer;\n","import urlRegex from 'url-regex';\nimport type twitchIrc from '@honeykingdom/twitch-simple-irc';\n\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport type { MessageEntity } from 'features/messages/messagesSlice';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport findEmote from 'features/emotes/utils/findEmote';\n\nconst MENTION_REGEX = /^(@([\\p{Letter}\\p{Number}_]+))(.*)/u;\nconst LINK_REGEX = urlRegex({ strict: false });\n\n// https://discuss.dev.twitch.tv/t/28414/2\nconst getCodePointsCount = (string: string) => {\n  let count = 0;\n\n  // eslint-disable-next-line no-restricted-syntax, @typescript-eslint/no-unused-vars\n  for (const char of string) {\n    count += 1;\n  }\n\n  return count;\n};\n\nconst normalizeEmbeddedEmotes = (embeddedEmotes: twitchIrc.Emotes) =>\n  Object.entries(embeddedEmotes).reduce<Record<string, string>>(\n    (result, [key, items]) => ({\n      ...result,\n      ...items.reduce((acc, { start }) => ({ ...acc, [start]: key }), {}),\n    }),\n    {},\n  );\n\nconst findEntity = (\n  word: string,\n  emotes: StateEmotes,\n  parseTwitch: boolean,\n):\n  | htmlEntity.TwitchEmote\n  | htmlEntity.BttvEmote\n  | htmlEntity.FfzEmote\n  | htmlEntity.Emoji\n  | [htmlEntity.Mention, string]\n  | htmlEntity.Link\n  | null => {\n  if (!emotes) return null;\n\n  if (parseTwitch) {\n    const twitchEmote = findEmote.twitch.byName(word, emotes);\n\n    if (twitchEmote) return twitchEmote;\n  }\n\n  const emote =\n    findEmote.bttv.byName(word, emotes) ||\n    findEmote.ffz.byName(word, emotes) ||\n    findEmote.emoji.byChar(word);\n\n  if (emote) return emote;\n\n  const mentionMatch = word.match(MENTION_REGEX);\n\n  if (mentionMatch) {\n    const [, text, target, tail] = mentionMatch;\n\n    return [htmlEntity.createMention(text, target.toLowerCase()), tail];\n  }\n\n  const linkMatch = word.match(LINK_REGEX);\n\n  if (linkMatch && linkMatch[0].length === word.length) {\n    return htmlEntity.createLink(word);\n  }\n\n  return null;\n};\n\nconst parseMessageEntities = (\n  message: string,\n  emotes: StateEmotes | null,\n  embeddedEmotes: twitchIrc.Emotes | null,\n  isOwnMessage = false,\n): MessageEntity[] => {\n  const words = message.split(' ');\n\n  const checkEmbeddedEmotes =\n    !isOwnMessage && !!embeddedEmotes && Object.keys(embeddedEmotes).length > 0;\n\n  const normalizedEmbeddedEmotes = checkEmbeddedEmotes\n    ? normalizeEmbeddedEmotes(embeddedEmotes as twitchIrc.Emotes)\n    : {};\n\n  const result: MessageEntity[] = [];\n  let offset = 0;\n\n  words.forEach((word, i, arr) => {\n    const isLast = arr.length - 1 === i;\n    let entity = null;\n\n    if (checkEmbeddedEmotes) {\n      const id = normalizedEmbeddedEmotes[offset];\n\n      if (id) {\n        entity = htmlEntity.createTwitchEmote({ id, code: word });\n      }\n    }\n\n    if (!entity) {\n      entity = findEntity(word, emotes, isOwnMessage);\n    }\n\n    if (entity) {\n      if (Array.isArray(entity)) {\n        const [entityItem, tail] = entity;\n\n        result.push(entityItem);\n        result.push(isLast ? tail : `${tail} `);\n      } else {\n        result.push(entity);\n\n        if (!isLast) {\n          result.push(' ');\n        }\n      }\n    } else {\n      const isLastItemString = typeof result[result.length - 1] === 'string';\n\n      if (isLastItemString) {\n        result[result.length - 1] += isLast ? word : `${word} `;\n      } else {\n        result.push(isLast ? word : `${word} `);\n      }\n    }\n\n    offset += getCodePointsCount(word) + 1;\n  });\n\n  return result;\n};\n\nexport default parseMessageEntities;\n","const checkIsHighlighted = (\n  userLogin: string | null,\n  messageUser: string,\n  messageText: string,\n) =>\n  !!userLogin &&\n  userLogin !== messageUser &&\n  RegExp(userLogin, 'gi').test(messageText);\n\nexport default checkIsHighlighted;\n","import type {\n  MessageEntity,\n  MessageCardInfo,\n} from 'features/messages/messagesSlice';\n\n// https://regex101.com/r/jGbDV1/4\nconst twitchClipRegex = /^(?:https?:\\/\\/)?(?:clips\\.twitch\\.tv\\/|(?:www\\.|m\\.)?twitch\\.tv\\/(?:[\\d\\w]+)\\/clip\\/)([\\d\\w]+)(?:\\?.+)?$/;\n\n// https://regex101.com/r/xsgeA4/4\nconst twitchVideoRegex = /^(?:https?:\\/\\/)?(?:www\\.|m\\.)?twitch\\.tv\\/videos\\/(\\d+)(?:\\?.+)?$/;\n\n// https://regexr.com/3dj5t\nconst youtubeVideoRegex = /^((?:https?:)?\\/\\/)?((?:www|m)\\.)?(?:youtube\\.com|youtu.be)(\\/(?:[\\w-]+\\?v=|embed\\/|v\\/)?)([\\w-]+)(\\S+)?$/;\n\nconst getMessageCardFromEntities = (\n  entities: MessageEntity[],\n  [parseTwitch, parseYoutube]: [boolean, boolean] = [true, true],\n): MessageCardInfo | null => {\n  if (!parseTwitch && !parseYoutube) return null;\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const entity of entities) {\n    if (typeof entity === 'object' && entity.type === 'link') {\n      if (parseTwitch) {\n        // twitch clip\n        let m = twitchClipRegex.exec(entity.text);\n\n        if (m) {\n          return {\n            type: 'twitch-clip',\n            id: m[1],\n            url: entity.href,\n          };\n        }\n\n        // twitch video\n        m = twitchVideoRegex.exec(entity.text);\n\n        if (m) {\n          return {\n            type: 'twitch-video',\n            id: m[1],\n            url: entity.href,\n          };\n        }\n      }\n\n      if (parseYoutube) {\n        // youtube video\n        const m = youtubeVideoRegex.exec(entity.text);\n\n        if (m) {\n          return {\n            type: 'youtube-video',\n            id: m[4],\n            url: entity.href,\n          };\n        }\n      }\n    }\n  }\n\n  return null;\n};\n\nexport default getMessageCardFromEntities;\n","export default __webpack_public_path__ + \"static/media/ts-tink.6eea13b1.ogg\";","import { nanoid } from '@reduxjs/toolkit';\nimport * as twitchIrc from '@honeykingdom/twitch-simple-irc';\nimport * as tekko from 'tekko';\nimport { Howl } from 'howler';\n\nimport type * as api from 'api';\nimport type { RootState } from 'app/rootReducer';\nimport type {\n  Message,\n  Notice,\n  UserNotice,\n  OwnMessage,\n} from 'features/messages/messagesSlice';\nimport { emotesSelector } from 'features/emotes/emotesSelectors';\nimport { blockedUsersSelector } from 'features/blockedUsers/blockedUsersSelectors';\nimport {\n  globalBadgesSelector,\n  channelBadgesSelector,\n} from 'features/badges/badgesSelectors';\nimport {\n  isHighlightNotificationsSelector,\n  isShowTwitchCardsSelector,\n  isShowYoutubeCardsSelector,\n} from 'features/options/optionsSelectors';\nimport { userLoginSelector, userIdSelector } from 'features/auth/authSelectors';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport parseMessageEntities from 'features/messages/utils/parseMessageEntities';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport checkIsHighlighted from 'features/messages/utils/checkIsHighlighted';\nimport getMessageCardFromEntities from 'features/messageCards/utils/getMessageCardFromEntities';\nimport { writeEmotesUsageStatistic } from 'features/emotes/utils/emotesUsageStatistic';\n\nimport tinkSfx from 'assets/ts-tink.ogg';\n\nconst tink = new Howl({ src: [tinkSfx] });\n\nexport const normalizeMessage = (\n  { message, tags, user, channel, isAction }: twitchIrc.MessageEvent,\n  state: RootState,\n): Message | null => {\n  const blockedUsers = blockedUsersSelector(state);\n  const isBlockedUser = blockedUsers.includes(user);\n\n  if (isBlockedUser) {\n    return null;\n  }\n\n  const isHighlightNotifications = isHighlightNotificationsSelector(state);\n  const isShowTwitchCards = isShowTwitchCardsSelector(state);\n  const isShowYoutubeCards = isShowYoutubeCardsSelector(state);\n  const userLogin = userLoginSelector(state);\n  const isHighlighted = checkIsHighlighted(userLogin, user, message);\n\n  if (isHighlighted && isHighlightNotifications) {\n    tink.play();\n  }\n\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n\n  const entities = parseMessageEntities(message, emotes, tags.emotes);\n  const badges = htmlEntity.createBadges(\n    tags.badges,\n    globalBadges,\n    channelBadges,\n  );\n  const card = getMessageCardFromEntities(entities, [\n    isShowTwitchCards,\n    isShowYoutubeCards,\n  ]);\n\n  return {\n    type: 'message',\n    id: tags.id,\n    message,\n    channel,\n    entities,\n    user: {\n      id: tags.userId,\n      login: user,\n      displayName: tags.displayName,\n      color: tags.color,\n      badges,\n    },\n    timestamp: tags.tmiSentTs,\n    card,\n    isAction,\n    isHistory: false,\n    isDeleted: false,\n    isHighlighted,\n    isOwnMessage: false,\n  };\n};\n\nexport const normalizeNotice = ({\n  message,\n  channel,\n  tags: { msgId },\n}: twitchIrc.NoticeEvent): Notice => ({\n  type: 'notice',\n  id: nanoid(),\n  message,\n  channel,\n  noticeType: msgId,\n});\n\nexport const normalizeUserNotice = ({\n  message,\n  channel,\n  tags: { id, msgId, login, systemMsg },\n}: twitchIrc.UserNoticeEvent): UserNotice => ({\n  type: 'user-notice',\n  id,\n  message,\n  channel,\n  noticeType: msgId,\n  systemMessage: systemMsg,\n  user: {\n    login,\n  },\n});\n\nexport const normalizeOwnMessage = (\n  { message, channel, tags }: OwnMessage,\n  state: RootState,\n): Message => {\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n  const userLogin = userLoginSelector(state) as string;\n  const userId = userIdSelector(state) as string;\n  const isShowTwitchCards = isShowTwitchCardsSelector(state);\n  const isShowYoutubeCards = isShowYoutubeCardsSelector(state);\n\n  const isAction = message.startsWith('/me ');\n  const normalizedMessage = isAction ? message.slice(4) : message;\n\n  const entities = parseMessageEntities(normalizedMessage, emotes, null, true);\n  const badges = htmlEntity.createBadges(\n    tags.badges,\n    globalBadges,\n    channelBadges,\n  );\n  const card = getMessageCardFromEntities(entities, [\n    isShowTwitchCards,\n    isShowYoutubeCards,\n  ]);\n\n  writeEmotesUsageStatistic(entities);\n\n  return {\n    type: 'message',\n    id: nanoid(),\n    message: normalizedMessage,\n    channel,\n    entities,\n    user: {\n      id: userId,\n      login: userLogin,\n      displayName: tags.displayName,\n      color: tags.color,\n      badges,\n    },\n    timestamp: Date.now(),\n    card,\n    isAction,\n    isHistory: false,\n    isDeleted: false,\n    isHighlighted: false,\n    isOwnMessage: true,\n  };\n};\n\nexport const normalizeHistoryMessage = (\n  { tags, params: [channel, message], prefix }: tekko.Message,\n  emotes: StateEmotes,\n  globalBadges: Record<string, api.TwitchBadge>,\n  channelBadges: Record<string, api.TwitchBadge>,\n  userLogin: string | null,\n): Message => {\n  const isAction = twitchIrc.getIsAction(message);\n  const normalizedMessage = isAction\n    ? twitchIrc.normalizeActionMessage(message)\n    : message;\n  const parsedTags = (twitchIrc.parseMessageTags(\n    tags,\n  ) as unknown) as twitchIrc.MessageTags;\n\n  const messageUser = prefix ? prefix.name : '';\n  const isHighlighted = checkIsHighlighted(\n    userLogin,\n    messageUser,\n    normalizedMessage,\n  );\n\n  const entities = parseMessageEntities(\n    normalizedMessage,\n    emotes,\n    parsedTags.emotes,\n  );\n  const badges = htmlEntity.createBadges(\n    parsedTags.badges,\n    globalBadges,\n    channelBadges,\n  );\n\n  // TODO: add cards for history?\n  // const card = getMessageCardFromEntities(entities);\n\n  return {\n    type: 'message',\n    id: parsedTags.id,\n    message: normalizedMessage,\n    channel: channel.slice(1),\n    entities,\n    user: {\n      id: parsedTags.userId,\n      login: messageUser,\n      displayName: parsedTags.displayName,\n      color: parsedTags.color,\n      badges,\n    },\n    timestamp: parsedTags.tmiSentTs,\n    card: null,\n    isAction,\n    isHistory: true,\n    isDeleted: false,\n    isHighlighted,\n    isOwnMessage: false,\n  };\n};\n\nexport const normalizeHistoryMessages = (\n  rawMessages: string[],\n  state: RootState,\n): Message[] => {\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n  const blockedUsers = blockedUsersSelector(state);\n  const userLogin = userLoginSelector(state);\n\n  return rawMessages.reduce<Message[]>((acc, rawMessage) => {\n    const message = tekko.parse(rawMessage) as tekko.Message;\n\n    const { command, prefix } = message;\n\n    if (\n      command === 'PRIVMSG' &&\n      prefix &&\n      !blockedUsers.includes(prefix.name)\n    ) {\n      acc.push(\n        normalizeHistoryMessage(\n          message,\n          emotes,\n          globalBadges,\n          channelBadges,\n          userLogin,\n        ),\n      );\n    }\n\n    return acc;\n  }, []);\n};\n","type SliceMessagesParams<T> = {\n  items: T[];\n  limit: number;\n  addedItemsCount: number;\n  isEven: boolean;\n};\n\nconst sliceMessagesByLimit = <T>({\n  items,\n  limit,\n  addedItemsCount,\n  isEven,\n}: SliceMessagesParams<T>): [T[], boolean] => {\n  const diff = items.length - limit;\n  const isSliced = diff > 0;\n\n  const newItems = isSliced ? items.slice(diff) : items;\n  const newIsEven = isSliced && addedItemsCount % 2 ? !isEven : isEven;\n\n  return [newItems, newIsEven];\n};\n\nexport default sliceMessagesByLimit;\n","const sliceItemsByLimit = <T>(items: T[], limit: number) => {\n  const diff = items.length - limit;\n\n  return diff > 0 ? items.slice(diff) : items;\n};\n\nexport default sliceItemsByLimit;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\nimport type twitchIrc from '@honeykingdom/twitch-simple-irc';\n\nimport * as api from 'api';\nimport type { AppThunk } from 'app/store';\nimport type { RootState } from 'app/rootReducer';\nimport type { FetchResult } from 'utils/types';\nimport {\n  CHANNEL_MESSAGES_LIMIT,\n  STORE_USERS_LIMIT,\n  RECENT_USER_MESSAGES_LIMIT,\n} from 'utils/constants';\nimport assertNever from 'utils/assertNever';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport {\n  normalizeMessage,\n  normalizeNotice,\n  normalizeUserNotice,\n  normalizeHistoryMessages,\n  normalizeOwnMessage,\n} from 'features/messages/utils/normalizeMessages';\nimport sliceMessagesByLimit from 'features/messages/utils/sliceMessagesByLimit';\nimport sliceItemsByLimit from 'features/messages/utils/sliceItemsByLimit';\nimport {\n  fetchTwitchClip,\n  fetchTwitchVideo,\n  fetchYoutubeVideo,\n} from 'features/messageCards/messageCardsSlice';\nimport { messageCardSelector } from 'features/messageCards/messageCardsSelectors';\n\nexport type MessageEntity =\n  | htmlEntity.TwitchEmote\n  | htmlEntity.BttvEmote\n  | htmlEntity.FfzEmote\n  | htmlEntity.Emoji\n  | htmlEntity.Mention\n  | htmlEntity.Link\n  | string;\n\nexport type MessageCardInfo = {\n  type: 'twitch-clip' | 'twitch-video' | 'youtube-video';\n  id: string;\n  url: string;\n};\n\nexport type Message = {\n  type: 'message';\n  id: string;\n  message: string;\n  channel: string;\n  entities: MessageEntity[];\n  user: {\n    id: string;\n    login: string;\n    displayName: string;\n    color: string;\n    badges: htmlEntity.Badge[];\n  };\n  timestamp: number;\n  card: MessageCardInfo | null;\n  isAction: boolean;\n  isHistory: boolean;\n  isDeleted: boolean;\n  isHighlighted: boolean;\n  isOwnMessage: boolean;\n};\n\nexport type Notice = {\n  type: 'notice';\n  id: string;\n  message: string;\n  channel: string;\n  noticeType: string;\n};\n\nexport type UserNotice = {\n  type: 'user-notice';\n  id: string;\n  message: string;\n  channel: string;\n  noticeType: keyof typeof twitchIrc.UserNoticeType;\n  systemMessage: string;\n  user: {\n    login: string;\n  };\n};\n\nexport type ChatMessage = Message | Notice | UserNotice;\n\nexport type OwnMessage = {\n  message: string;\n  channel: string;\n  tags: twitchIrc.UserStateTags;\n};\n\ntype ReceiveMessage = {\n  type: 'message';\n  message: twitchIrc.MessageEvent;\n};\ntype ReceiveNotice = {\n  type: 'notice';\n  message: twitchIrc.NoticeEvent;\n};\ntype ReceiveUserNotice = {\n  type: 'user-notice';\n  message: twitchIrc.UserNoticeEvent;\n};\ntype ReceiveOwnMessage = {\n  type: 'own-message';\n  message: OwnMessage;\n};\n\ntype ReceiveMessagePayload =\n  | ReceiveMessage\n  | ReceiveNotice\n  | ReceiveUserNotice\n  | ReceiveOwnMessage;\n\ntype ReceiveMessagesActionPayload = {\n  messages: ChatMessage[];\n  channel: string;\n  type?: 'message' | 'history';\n};\n\ntype MessagesStateChannel = {\n  history: FetchResult<string[]> & {\n    isAdded: boolean;\n  };\n  isEven: boolean;\n  items: ChatMessage[];\n  users: string[];\n  recentUserMessages: string[];\n};\n\ntype MessagesState = Record<string, MessagesStateChannel>;\n\nconst initialState: MessagesState = {};\n\nexport const fetchRecentMessages = createAsyncThunk(\n  'chat/fetchRecentMessages',\n  api.fetchRecentMessages,\n);\n\n// TODO: write function than adds a user to the users array\n\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    clearChat: (\n      state,\n      { payload }: PayloadAction<twitchIrc.ClearChatEvent>,\n    ) => {\n      const {\n        channel,\n        tags: { targetUserId },\n      } = payload;\n\n      // eslint-disable-next-line no-restricted-syntax\n      for (const message of state[channel].items) {\n        if (\n          message.type === 'message' &&\n          message.user.id === targetUserId &&\n          !message.isHistory\n        ) {\n          message.isDeleted = true;\n        }\n      }\n    },\n\n    receiveMessagesAction: (\n      state,\n      { payload }: PayloadAction<ReceiveMessagesActionPayload>,\n    ) => {\n      const { messages, channel, type = 'message' } = payload;\n\n      if (messages.length === 0) return;\n\n      const items =\n        type === 'message'\n          ? [...state[channel].items, ...messages]\n          : [...messages, ...state[channel].items];\n\n      const [newItems, newIsEven] = sliceMessagesByLimit({\n        items,\n        limit: CHANNEL_MESSAGES_LIMIT,\n        addedItemsCount: messages.length,\n        isEven: state[channel].isEven,\n      });\n\n      state[channel].isEven = newIsEven;\n      state[channel].items = newItems;\n\n      // TODO: add colors for users if it's not set\n\n      // add users\n      const { users } = state[channel];\n\n      messages.forEach((message) => {\n        if (\n          message.type === 'message' &&\n          !users.includes(message.user.displayName)\n        ) {\n          users.push(message.user.displayName);\n        }\n      });\n\n      const newUsers = sliceItemsByLimit(users, STORE_USERS_LIMIT);\n\n      state[channel].users = newUsers;\n\n      if (type === 'history') {\n        state[channel].history.items = [];\n        state[channel].history.isAdded = true;\n      }\n\n      if (type === 'message') {\n        messages.forEach((message) => {\n          if (message.type !== 'message' || !message.isOwnMessage) return;\n\n          const normalizedMessage = message.message.trim();\n          const index = state[channel].recentUserMessages.indexOf(\n            normalizedMessage,\n          );\n\n          if (index > -1) {\n            state[channel].recentUserMessages.splice(1, 1);\n          }\n\n          state[channel].recentUserMessages.unshift(normalizedMessage);\n\n          const newRecentUserMessages = sliceItemsByLimit(\n            state[channel].recentUserMessages,\n            RECENT_USER_MESSAGES_LIMIT,\n          );\n\n          state[channel].recentUserMessages = newRecentUserMessages;\n        });\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchRecentMessages.pending, (state, { meta: { arg } }) => {\n      const channel = arg;\n\n      if (!state[channel]) {\n        state[channel] = {\n          history: {\n            status: 'loading',\n            error: {},\n            items: [],\n            isAdded: false,\n          },\n          isEven: false,\n          items: [],\n          users: [],\n          recentUserMessages: [],\n        };\n      } else {\n        state[channel].history.status = 'loading';\n        state[channel].history.error = {};\n      }\n    });\n\n    builder.addCase(\n      fetchRecentMessages.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const channel = arg;\n\n        state[channel].history.status = 'success';\n        state[channel].history.items = payload.messages;\n      },\n    );\n\n    builder.addCase(\n      fetchRecentMessages.rejected,\n      (state, { error, meta: { arg } }) => {\n        const channel = arg;\n\n        state[channel].history.status = 'error';\n        state[channel].history.error = error;\n      },\n    );\n  },\n});\n\nexport const { clearChat } = messagesSlice.actions;\n\nexport default messagesSlice.reducer;\n\nconst { receiveMessagesAction } = messagesSlice.actions;\n\nconst normalizePayload = (\n  payload: ReceiveMessagePayload,\n  state: RootState,\n): ChatMessage | null => {\n  if (payload.type === 'message') {\n    return normalizeMessage(payload.message, state);\n  }\n\n  if (payload.type === 'notice') {\n    return normalizeNotice(payload.message);\n  }\n\n  if (payload.type === 'user-notice') {\n    return normalizeUserNotice(payload.message);\n  }\n\n  if (payload.type === 'own-message') {\n    return normalizeOwnMessage(payload.message, state);\n  }\n\n  return assertNever(payload);\n};\n\nexport const receiveMessage = (payload: ReceiveMessagePayload): AppThunk => (\n  dispatch,\n  getState,\n) => {\n  const state = getState();\n  const message = normalizePayload(payload, state);\n\n  if (!message) return;\n\n  // fetch a message card if any\n  if (message.type === 'message' && message.card) {\n    const card = messageCardSelector(message.card)(state);\n\n    if (!card || card.status === 'error') {\n      const { id, url } = message.card;\n      const params = { id, url };\n\n      if (message.card.type === 'twitch-clip') {\n        dispatch(fetchTwitchClip(params));\n      }\n\n      if (message.card.type === 'twitch-video') {\n        dispatch(fetchTwitchVideo(params));\n      }\n\n      if (message.card.type === 'youtube-video') {\n        dispatch(fetchYoutubeVideo(params));\n      }\n    }\n  }\n\n  const params = { messages: [message], channel: message.channel };\n\n  dispatch(receiveMessagesAction(params));\n};\n\nexport const addRecentMessages = (channel: string): AppThunk => (\n  dispatch,\n  getState,\n) => {\n  const state = getState();\n\n  const slicedRawHistory = sliceItemsByLimit(\n    state.messages[channel].history.items,\n    CHANNEL_MESSAGES_LIMIT,\n  );\n\n  const messages = normalizeHistoryMessages(slicedRawHistory, state);\n\n  dispatch(receiveMessagesAction({ messages, channel, type: 'history' }));\n};\n","import {\n  TWITCH_API_AUTH_BASE,\n  TWITCH_API_CLIENT_ID,\n  TWITCH_API_REDIRECT_URI,\n  LS_USER,\n} from 'utils/constants';\n\ntype StoredUser = {\n  id: string;\n  login: string;\n};\n\nconst authParams = {\n  client_id: TWITCH_API_CLIENT_ID,\n  redirect_uri: TWITCH_API_REDIRECT_URI,\n  response_type: 'token+id_token',\n  scope: [\n    'openid',\n    'channel:moderate',\n    'chat:edit',\n    'chat:read',\n    'whispers:read',\n    'whispers:edit',\n    'user_blocks_read',\n    'user_blocks_edit',\n    'user_subscriptions',\n  ].join('+'),\n  claims: JSON.stringify({\n    id_token: { email_verified: null, picture: null, preferred_username: null },\n  }),\n  // TODO:\n  // state: uid(),\n};\n\nexport const getAuthUrl = () => {\n  const search = Object.entries(authParams)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n\n  return `${TWITCH_API_AUTH_BASE}?${search}`;\n};\n\nexport const isAuthRedirect = (hash: string) =>\n  hash.startsWith('#access_token=');\n\nexport const writeUserToLocatStorage = (user: StoredUser) => {\n  localStorage.setItem(LS_USER, JSON.stringify(user));\n};\n\nexport const readUserFromLocatStorage = (): StoredUser | null => {\n  let user;\n\n  try {\n    user = JSON.parse(localStorage.getItem(LS_USER) as string);\n  } catch (e) {\n    user = null;\n  }\n\n  if (!user || !user.id || !user.login) return null;\n\n  return user as StoredUser;\n};\n","export const TWITCH_API_AUTH_BASE = 'https://id.twitch.tv/oauth2/authorize';\n\nexport const TWITCH_API_CLIENT_ID = process.env.REACT_APP_TWITCH_API_CLIENT_ID;\nexport const TWITCH_API_REDIRECT_URI =\n  process.env.REACT_APP_TWITCH_API_REDIRECT_URI;\n\nexport const CHANNEL_MESSAGES_LIMIT = 1000;\nexport const STORE_USERS_LIMIT = 500;\nexport const RECENT_USER_MESSAGES_LIMIT = 100;\n\nexport const API_REQUESTS_TIMEOUT = 10000;\n\nexport const TWITCH_EMOTES_CDN = '//static-cdn.jtvnw.net/emoticons/v1';\nexport const BTTV_EMOTES_CDN = '//cdn.betterttv.net/emote';\n\n// local storage keys\nexport const LS_ACCESS_TOKEN = 'accessToken';\nexport const LS_ID_TOKEN = 'idToken';\nexport const LS_LAST_CHANNEL = 'lastChannel';\nexport const LS_USER = 'user';\nexport const LS_EMOTES_USAGE_STATISTIC = 'emotesUsageStatistic';\nexport const LS_OPTIONS = 'options';\n\nexport const SUGGESTION_TYPES = {\n  users: {\n    name: 'users',\n    limit: 5,\n    regex: /^@([\\w\\d_]*)$/,\n  },\n  emotes: {\n    name: 'emotes',\n    limit: 10,\n    regex: /^:([\\w\\d_]{2,})$/,\n  },\n};\n\nexport const NOTICE_MESSAGE_TAGS = [\n  'msg_banned',\n  'msg_bad_characters',\n  'msg_channel_blocked',\n  'msg_channel_suspended',\n  'msg_duplicate',\n  'msg_emoteonly',\n  'msg_facebook',\n  'msg_followersonly',\n  'msg_followersonly_followed',\n  'msg_followersonly_zero',\n  'msg_r9k',\n  'msg_ratelimit',\n  'msg_rejected',\n  'msg_rejected_mandatory',\n  'msg_room_not_found',\n  'msg_slowmode',\n  'msg_subsonly',\n  'msg_suspended',\n  'msg_timedout',\n  'msg_verified_email',\n];\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchResult } from 'utils/types';\nimport {\n  parseTwitchEmotes,\n  parseBttvGlobalEmotes,\n  parseBttvChannelEmotes,\n  parseFfzGlobalEmotes,\n  parseFfzChannelEmotes,\n} from 'features/chat/utils/parseApiResponse';\n\ntype EmotesState = {\n  twitch: FetchResult<Record<string, api.TwitchEmote[]>>;\n  bttv: {\n    global: FetchResult<api.BttvGlobalEmote[]>;\n    byChannels: Record<string, FetchResult<api.BttvChannelEmote[]>>;\n  };\n  ffz: {\n    global: FetchResult<api.FfzEmote[]>;\n    byChannels: Record<string, FetchResult<api.FfzEmote[]>>;\n  };\n};\n\nconst initialState: EmotesState = {\n  twitch: {\n    status: 'idle',\n    error: {},\n    items: {},\n  },\n  bttv: {\n    global: {\n      status: 'idle',\n      error: {},\n      items: [],\n    },\n    byChannels: {},\n  },\n  ffz: {\n    global: {\n      status: 'idle',\n      error: {},\n      items: [],\n    },\n    byChannels: {},\n  },\n};\n\nexport const fetchTwitchEmotes = createAsyncThunk(\n  'chat/fetchTwitchEmotes',\n  api.fetchTwitchEmotes,\n);\n\nexport const fetchBttvGlobalEmotes = createAsyncThunk(\n  'chat/fetchBttvGlobalEmotes',\n  api.fetchBttvGlobalEmotes,\n);\n\ntype FetchBttvChannelEmotesParams = {\n  channel: string;\n  channelId: string;\n};\n\nexport const fetchBttvChannelEmotes = createAsyncThunk(\n  'chat/fetchBttvChannelEmotes',\n  ({ channelId }: FetchBttvChannelEmotesParams) =>\n    api.fetchBttvChannelEmotes(channelId),\n);\n\nexport const fetchFfzGlobalEmotes = createAsyncThunk(\n  'chat/fetchFfzGlobalEmotes',\n  api.fetchFfzGlobalEmotes,\n);\n\ntype FetchFfzChannelEmotesParams = {\n  channel: string;\n  channelId: string;\n};\n\nexport const fetchFfzChannelEmotes = createAsyncThunk(\n  'chat/fetchFfzChannelEmotes',\n  ({ channelId }: FetchFfzChannelEmotesParams) =>\n    api.fetchFfzChannelEmotes(channelId),\n);\n\nconst emotes = createSlice({\n  name: 'emotes',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // twitch\n    builder.addCase(fetchTwitchEmotes.pending, (state) => {\n      state.twitch.status = 'loading';\n      state.twitch.error = {};\n    });\n\n    builder.addCase(fetchTwitchEmotes.fulfilled, (state, { payload }) => {\n      state.twitch.status = 'success';\n      state.twitch.items = parseTwitchEmotes(payload);\n    });\n\n    builder.addCase(fetchTwitchEmotes.rejected, (state, { error }) => {\n      state.twitch.status = 'error';\n      state.twitch.error = error;\n    });\n\n    // bttv global\n    builder.addCase(fetchBttvGlobalEmotes.pending, (state) => {\n      state.bttv.global.status = 'loading';\n      state.bttv.global.error = {};\n    });\n\n    builder.addCase(fetchBttvGlobalEmotes.fulfilled, (state, { payload }) => {\n      state.bttv.global.status = 'success';\n      state.bttv.global.items = parseBttvGlobalEmotes(payload);\n    });\n\n    builder.addCase(fetchBttvGlobalEmotes.rejected, (state, { error }) => {\n      state.bttv.global.status = 'error';\n      state.bttv.global.error = error;\n    });\n\n    // bttv channel\n    builder.addCase(\n      fetchBttvChannelEmotes.pending,\n      (state, { meta: { arg } }) => {\n        const { channel } = arg;\n\n        if (!state.bttv.byChannels[channel]) {\n          state.bttv.byChannels[channel] = {\n            status: 'loading',\n            error: {},\n            items: [],\n          };\n        } else {\n          state.bttv.byChannels[channel].status = 'loading';\n          state.bttv.byChannels[channel].error = {};\n        }\n      },\n    );\n\n    builder.addCase(\n      fetchBttvChannelEmotes.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.bttv.byChannels[channel].status = 'success';\n        state.bttv.byChannels[channel].items = parseBttvChannelEmotes(payload);\n      },\n    );\n\n    builder.addCase(\n      fetchBttvChannelEmotes.rejected,\n      (state, { error, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.bttv.byChannels[channel].status = 'error';\n        state.bttv.byChannels[channel].error = error;\n      },\n    );\n\n    // ffz global\n    builder.addCase(fetchFfzGlobalEmotes.pending, (state) => {\n      state.ffz.global.status = 'loading';\n      state.ffz.global.error = {};\n    });\n\n    builder.addCase(fetchFfzGlobalEmotes.fulfilled, (state, { payload }) => {\n      state.ffz.global.status = 'success';\n      state.ffz.global.items = parseFfzGlobalEmotes(payload);\n    });\n\n    builder.addCase(fetchFfzGlobalEmotes.rejected, (state, { error }) => {\n      state.ffz.global.status = 'error';\n      state.ffz.global.error = error;\n    });\n\n    // ffz channel\n    builder.addCase(\n      fetchFfzChannelEmotes.pending,\n      (state, { meta: { arg } }) => {\n        const { channel } = arg;\n\n        if (!state.ffz.byChannels[channel]) {\n          state.ffz.byChannels[channel] = {\n            status: 'loading',\n            error: {},\n            items: [],\n          };\n        } else {\n          state.ffz.byChannels[channel].status = 'loading';\n          state.ffz.byChannels[channel].error = {};\n        }\n      },\n    );\n\n    builder.addCase(\n      fetchFfzChannelEmotes.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.ffz.byChannels[channel].status = 'success';\n        state.ffz.byChannels[channel].items = parseFfzChannelEmotes(payload);\n      },\n    );\n\n    builder.addCase(\n      fetchFfzChannelEmotes.rejected,\n      (state, { error, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.ffz.byChannels[channel].status = 'error';\n        state.ffz.byChannels[channel].error = error;\n      },\n    );\n  },\n});\n\nexport default emotes.reducer;\n","const assertNever = (value: never): never => value;\n\nexport default assertNever;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport {\n  parseTwitchClip,\n  parseTwitchVideo,\n  parseYoutubeVideo,\n} from 'features/chat/utils/parseApiResponse';\n\ntype MessageCardLoading = {\n  status: 'loading';\n};\ntype MessageCardSuccess = {\n  status: 'success';\n  id: string;\n  src: string;\n  srcSet: string;\n  title: string;\n  description: string;\n};\ntype MessageCardError = {\n  status: 'error';\n};\nexport type MessageCardData =\n  | MessageCardLoading\n  | MessageCardSuccess\n  | MessageCardError;\n\ntype MessageCardsState = {\n  twitchClips: Record<string, MessageCardData>;\n  twitchVideos: Record<string, MessageCardData>;\n  youtubeVideos: Record<string, MessageCardData>;\n};\n\nconst initialState: MessageCardsState = {\n  twitchClips: {},\n  twitchVideos: {},\n  youtubeVideos: {},\n};\n\ntype FetchMessageCardParams = {\n  id: string;\n  url: string;\n};\n\nexport const fetchTwitchClip = createAsyncThunk(\n  'clips/fetchTwitchClip',\n  ({ id }: FetchMessageCardParams) => api.fetchTwitchClip(id),\n);\n\nexport const fetchTwitchVideo = createAsyncThunk(\n  'clips/fetchTwitchVideo',\n  ({ id }: FetchMessageCardParams) => api.fetchTwitchVideo(id),\n);\n\nexport const fetchYoutubeVideo = createAsyncThunk(\n  'clips/fetchYoutubeVideo',\n  ({ id }: FetchMessageCardParams) => api.fetchYoutubeVideo(id),\n);\n\n// TODO: refact this code. DRY!\n\nconst messageCards = createSlice({\n  name: 'messageCards',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // twitch clip\n    builder.addCase(fetchTwitchClip.pending, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchClips[id] = { status: 'loading' };\n    });\n\n    builder.addCase(\n      fetchTwitchClip.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { id } = arg;\n        const card = parseTwitchClip(payload);\n\n        if (!card) {\n          state.twitchClips[id] = { status: 'error' };\n\n          return;\n        }\n\n        state.twitchClips[id] = {\n          status: 'success',\n          ...card,\n        };\n      },\n    );\n\n    builder.addCase(fetchTwitchClip.rejected, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchClips[id] = { status: 'error' };\n    });\n\n    // twitch video\n    builder.addCase(fetchTwitchVideo.pending, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchVideos[id] = { status: 'loading' };\n    });\n\n    builder.addCase(\n      fetchTwitchVideo.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { id } = arg;\n        const card = parseTwitchVideo(payload);\n\n        if (!card) {\n          state.twitchVideos[id] = { status: 'error' };\n\n          return;\n        }\n\n        state.twitchVideos[id] = {\n          status: 'success',\n          ...card,\n        };\n      },\n    );\n\n    builder.addCase(fetchTwitchVideo.rejected, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchVideos[id] = { status: 'error' };\n    });\n\n    // youtube-video\n    builder.addCase(fetchYoutubeVideo.pending, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.youtubeVideos[id] = { status: 'loading' };\n    });\n\n    builder.addCase(\n      fetchYoutubeVideo.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { id } = arg;\n        const card = parseYoutubeVideo(payload);\n\n        if (!card) {\n          state.youtubeVideos[id] = { status: 'error' };\n\n          return;\n        }\n\n        state.youtubeVideos[id] = {\n          status: 'success',\n          ...card,\n        };\n      },\n    );\n\n    builder.addCase(fetchYoutubeVideo.rejected, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.youtubeVideos[id] = { status: 'error' };\n    });\n  },\n});\n\nexport default messageCards.reducer;\n","import type { RootState } from 'app/rootReducer';\n\nexport const isBlockedUsersLoadedSelector = (state: RootState) =>\n  state.blockedUsers.status !== 'idle' &&\n  state.blockedUsers.status !== 'loading';\n\nexport const blockedUsersSelector = (state: RootState) =>\n  state.blockedUsers.items;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchResult } from 'utils/types';\nimport { parseBadges } from 'features/chat/utils/parseApiResponse';\n\ntype Badges = Record<string, api.TwitchBadge>;\n\ntype BadgesState = {\n  global: FetchResult<Badges>;\n  byChannels: Record<string, FetchResult<Badges>>;\n};\n\nconst initialState: BadgesState = {\n  global: {\n    status: 'idle',\n    error: {},\n    items: {},\n  },\n  byChannels: {},\n};\n\nexport const fetchGlobalBadges = createAsyncThunk(\n  'chat/fetchGlobalBadges',\n  () => api.fetchGlobalBadges(),\n);\n\ntype FetchChannelBadgesParams = {\n  channel: string;\n  channelId: string;\n};\n\nexport const fetchChannelBadges = createAsyncThunk(\n  'chat/fetchChannelBadges',\n  ({ channelId }: FetchChannelBadgesParams) =>\n    api.fetchChannelBadges(channelId),\n);\n\nconst badges = createSlice({\n  name: 'badges',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // global badges\n    builder.addCase(fetchGlobalBadges.pending, (state) => {\n      state.global.status = 'loading';\n      state.global.error = {};\n    });\n\n    builder.addCase(fetchGlobalBadges.fulfilled, (state, { payload }) => {\n      state.global.status = 'success';\n      state.global.items = parseBadges(payload);\n    });\n\n    builder.addCase(fetchGlobalBadges.rejected, (state, { error }) => {\n      state.global.status = 'error';\n      state.global.error = error;\n    });\n\n    // channel badges\n    builder.addCase(fetchChannelBadges.pending, (state, { meta: { arg } }) => {\n      const { channel } = arg;\n\n      if (!state.byChannels[channel]) {\n        state.byChannels[channel] = {\n          status: 'loading',\n          error: {},\n          items: {},\n        };\n      } else {\n        state.byChannels[channel].status = 'loading';\n        state.byChannels[channel].error = {};\n      }\n    });\n\n    builder.addCase(\n      fetchChannelBadges.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.byChannels[channel].status = 'success';\n        state.byChannels[channel].items = parseBadges(payload);\n      },\n    );\n\n    builder.addCase(\n      fetchChannelBadges.rejected,\n      (state, { error, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.byChannels[channel].status = 'error';\n        state.byChannels[channel].error = error;\n      },\n    );\n  },\n});\n\nexport default badges.reducer;\n","import { LS_OPTIONS } from 'utils/constants';\n\nexport const readOptionsFromLocalStorage = (): Record<string, unknown> => {\n  try {\n    const options = localStorage.getItem(LS_OPTIONS);\n    return JSON.parse(options as string) || {};\n  } catch {\n    return {};\n  }\n};\n\nexport const writeOptionsToLocalStore = (options: Record<string, unknown>) => {\n  localStorage.setItem(\n    LS_OPTIONS,\n    JSON.stringify({\n      ...readOptionsFromLocalStorage(),\n      ...options,\n    }),\n  );\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\n\nimport {\n  writeOptionsToLocalStore,\n  readOptionsFromLocalStorage,\n} from 'features/options/optionsUtils';\n\ntype OptionsState = {\n  showTimestamps: boolean;\n  timeFormat24Hours: boolean;\n  splitChat: boolean;\n  blacklistKeywords: string;\n  highlightKeywords: string;\n  fixedWidth: boolean;\n  highlightNotifications: boolean;\n  showTwitchCards: boolean;\n  showYoutubeCards: boolean;\n};\n\ntype ChangeOption = {\n  name: keyof OptionsState;\n  value: any;\n};\n\nexport const initialState: OptionsState = {\n  showTimestamps: false,\n  timeFormat24Hours: false,\n  splitChat: true,\n  blacklistKeywords: '',\n  highlightKeywords: '',\n  fixedWidth: false,\n  highlightNotifications: true,\n  showTwitchCards: true,\n  showYoutubeCards: true,\n  ...readOptionsFromLocalStorage(),\n};\n\nconst options = createSlice({\n  name: 'options',\n  initialState,\n  reducers: {\n    changeOption: {\n      reducer: (state, { payload }: PayloadAction<ChangeOption>) => {\n        const { name, value } = payload;\n\n        (state[name] as unknown) = value;\n      },\n      prepare: (payload: ChangeOption) => {\n        const { name, value } = payload;\n\n        writeOptionsToLocalStore({ [name]: value });\n\n        return { payload };\n      },\n    },\n  },\n});\n\nexport const { changeOption } = options.actions;\n\nexport default options.reducer;\n"],"sourceRoot":""}