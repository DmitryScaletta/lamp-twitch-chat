{"version":3,"sources":["features/chat/chatSelectors.ts","features/emotes/utils/getEmotesByText.ts","features/emotes/utils/emotesUsageStatistic.ts","features/messageCards/messageCardsSelectors.ts","features/blockedUsers/blockedUsersSlice.ts","utils/normalizeHref.ts","features/messages/utils/htmlEntity.ts","features/auth/authSelectors.ts","utils/fetchRequest.ts","api/twitch.ts","api/bttv.ts","api/ffz.ts","api/recentMessages.ts","api/youtube.ts","assets/ts-tink.ogg","features/emotes/utils/findEmote.ts","features/emotes/utils/createEmoteCategories.ts","features/emotes/emotesSelectors.ts","features/chat/utils/parseApiResponse.ts","features/options/optionsSelectors.ts","features/chat/chatSlice.ts","features/badges/badgesSelectors.ts","features/auth/useInitializeAuth.ts","features/messages/messagesSelectors.ts","features/chat/hooks/useFetchChatData.ts","features/chat/hooks/useCurrentChannel.ts","features/messages/utils/replaceEmojis.ts","features/chat/hooks/useTwitchClient.ts","features/chat/utils/getUsersByBeginText.ts","features/chat/utils/suggestions.ts","features/chat/hooks/useChatInput.ts","icons/close.svg","components/IconButton.tsx","components/ChatModal.tsx","icons/smiley-face.svg","components/Scrollbar.tsx","icons/search.svg","features/emotes/EmotePicker.tsx","features/chat/ChatInput.tsx","icons/gears.svg","icons/twitch.svg","components/Button.tsx","components/Switch.tsx","features/options/Options.tsx","features/chat/ChatControls.tsx","utils/colors.ts","features/messageCards/MessageCard.tsx","features/messages/Message.tsx","features/messages/Notice.tsx","features/messages/UserNotice.tsx","features/messages/ChatMessage.tsx","features/messages/Messages.tsx","features/chat/JoinChannel.tsx","features/chat/Chat.tsx","features/auth/Auth.tsx","features/auth/Logout.tsx","features/auth/AuthCallback.tsx","styles/common.js","styles/colors.js","styles/vars.js","styles/index.js","app/App.tsx","serviceWorker.ts","app/rootReducer.ts","app/store.ts","index.tsx","features/auth/authSlice.ts","features/messages/utils/parseMessageEntities.ts","features/messages/utils/checkIsHighlighted.ts","features/messageCards/utils/getMessageCardFromEntities.ts","features/messages/utils/normalizeMessages.ts","features/messages/utils/sliceMessagesByLimit.ts","features/messages/utils/sliceItemsByLimit.ts","features/messages/messagesSlice.ts","utils/constants.ts","features/auth/authUtils.ts","features/emotes/emotesSlice.ts","utils/assertNever.ts","features/messageCards/messageCardsSlice.ts","features/blockedUsers/blockedUsersSelectors.ts","features/badges/badgesSlice.ts","features/options/optionsUtils.ts","features/options/optionsSlice.ts"],"names":["currentChannelSelector","state","chat","currentChannel","isConnectedSelector","isConnected","currentChannelIdSelector","params","byChannels","room","roomId","userColorSelector","user","color","userDisplayNameSelector","displayName","userBadgesSelector","badges","getEmotesByText","text","emotes","limit","result","begins","contains","textLower","toLowerCase","findEmote","bttv","byText","bttvChannel","ffz","ffzChannel","twitch","twitchUser","twitchGlobal","bttvGlobal","ffzGlobal","emoji","readEmotesUsageStatistic","statistic","localStorage","getItem","LS_EMOTES_USAGE_STATISTIC","JSON","parse","e","getUsageStatisticFromEntities","R","v","items","type","id","lastUpdatedAt","Date","now","uses","length","mergeFn","key","left","right","writeEmotesUsageStatistic","entries","history","newHistory","setItem","stringify","normalizeHistory","getEmotesFromUsageStatistic","item","emoteEntity","byId","push","messageCardSelector","card","messageCards","twitchClips","twitchVideos","youtubeVideos","assertNever","fetchBlockedUsers","createAsyncThunk","userId","api","blockedUsers","createSlice","name","initialState","status","error","reducers","extraReducers","builder","addCase","pending","fulfilled","payload","parseBlockedUsers","rejected","isStartsWithProtocolRegex","normalizeHref","href","test","regexEmotesMap","getFfzSrcSet","dpi","url","createTwitchEmote","code","alt","src","TWITCH_EMOTES_CDN","srcSet","createBttvEmote","BTTV_EMOTES_CDN","createFfzEmote","urls","createEmoji","short","unified","createMention","target","createLink","createBadges","globalBadges","channelBadges","version","badge","versions","title","description","image_url_1x","imageUrl1x","image_url_2x","imageUrl2x","image_url_4x","imageUrl4x","label","createBadge","Boolean","isAuthReadySelector","auth","isAuthSelector","userLoginSelector","userLogin","userIdSelector","fetchRequest","async","timeout","restOptions","options","fetchTimeout","API_REQUESTS_TIMEOUT","controller","AbortController","signal","setTimeout","abort","response","fetch","ok","Error","statusText","json","apiRequestHelix","headers","process","Authorization","LS_ACCESS_TOKEN","apiRequestKraken","Accept","fetchUser","fetchTwitchEmotes","fetchGlobalBadges","language","fetchChannelBadges","channelId","fetchTwitchClip","fetchTwitchVideo","fetchBttvGlobalEmotes","fetchBttvChannelEmotes","fetchFfzGlobalEmotes","fetchFfzChannelEmotes","fetchRecentMessages","channel","fetchYoutubeVideo","module","exports","findTwitchEmoteByIdInSets","sets","set","Object","values","htmlEntity","emotesMap","555555557","555555559","555555561","555555562","555555568","555555576","555555579","555555583","555555584","555555588","555555590","555555594","555555598","555555600","findTwitchEmoteByNameInSets","includes","byName","emote","index","indexOf","findById","findByName","byChar","char","emojisMap","keywords","keyword","emojiEntity","getTwitchUserEmoteCategories","getMainEmoteCategories","createSelector","map","filter","createEmoteCategories","mainEmoteCategories","frequentlyUsed","isTwitchEmotesLoadedSelector","isBttvGlobalEmotesLoadedSelector","global","isBttvChannelEmotesLoadedSelector","isFfzGlobalEmotesLoadedSelector","isFfzChannelEmotesLoadedSelector","isEmotesLoadedSelector","twitchEmotesSelector","twitchGlobalEmotesSelector","twitchUserEmotesSelector","emotesSelector","isEmotesLoaded","emoteCategoriesSelector","search","parseTwitchEmotes","parseBttvGlobalEmotes","data","parseBttvChannelEmotes","channelEmotes","sharedEmotes","parseFfzGlobalEmotes","default_sets","defaultSets","parseFfzChannelEmotes","parseBadges","parseTwitchClip","thumbnail_url","thumbnailUrl","creator_name","creatorName","x1","replace","parseTwitchVideo","user_name","userName","published_at","publishedAt","date","format","parseYoutubeVideo","snippet","channelTitle","thumbnails","default","medium","x2","high","x4","optionsSelector","value","showTimestamps","splitChat","fixedWidth","highlightNotifications","showTwitchCards","showYoutubeCards","isShowTimestampsSelector","isSplitChatSelector","isFixedWidthSelector","isHighlightNotificationsSelector","isShowTwitchCardsSelector","isShowYoutubeCardsSelector","updateIsConnected","updateCurrentChannel","updateGlobalUserParams","tags","updateUserParams","updateRoomParams","actions","isGlobalBadgesLoadedSelector","isChannelBadgesLoadedSelector","globalBadgesSelector","channelBadgesSelector","userBadgesImagesSelector","useInitializeAuth","dispatch","useDispatch","isAuthReady","useSelector","useEffect","idToken","readUserFromLocatStorage","login","isAuth","initializeAuth","jwtData","jwt","decode","sub","messagesSelector","messages","usersSelector","users","recentUserMessagesSelector","recentUserMessages","isHistoryLoadedSelector","isHistoryAddedSelector","isAdded","isEvenSelector","isEven","useFetchChatData","currentChannelId","isTwitchEmotesLoaded","isBttvGlobalEmotesLoaded","isBttvChannelEmotesLoaded","isFfzGlobalEmotesLoaded","isFfzChannelEmotesLoaded","isGlobalBadgesLoaded","isChannelBadgesLoaded","isHistoryLoaded","isBlockedUsersLoaded","isBlockedUsersLoadedSelector","isHistoryAdded","isReadyToAddHistory","addRecentMessages","useCurrentChannel","useHistory","hash","location","slice","LS_LAST_CHANNEL","document","lastChannel","pathname","replaceEmojis","split","word","join","useTwitchClient","prevChannel","usePrevious","clientRef","useRef","registerEvents","useCallback","client","current","on","message","recieveMessage","invalidateAuth","disconnect","targetUserId","clearChat","part","twitchIrc","connect","sendMessage","trim","normalizedMessage","handleUserState","ownMessage","removeListeners","handleNotice","NOTICE_MESSAGE_TAGS","msgId","off","say","getUsersByBeginText","beginText","beginTextLower","nameLower","startsWith","suggestionsInitialState","isActive","activeIndex","start","end","setSuggestionsIndexUp","setSuggestionsIndexDown","replaceSuggestionText","currentItem","insertedText","substring","useChatInput","chatInputRef","inputText","setInputText","useState","suggestions","setSuggestions","useSetState","recentUserMessagesIndex","setRecentUserMessagesIndex","handleSendMessage","deps","handleChange","d","selectionStart","spaceIndexBefore","lastIndexOf","spaceIndexAfter","usersMatch","SUGGESTION_TYPES","regex","exec","emotesMatch","handleKeyUp","handleKeyDown","preventDefault","t","newIndex","defaultValue","handleSuggestionMouseEnter","handleSuggestionClick","focus","handleBlur","handleNameRightClick","trimLeft","handleEmoteClick","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","this","_ref","createElement","fill","SvgClose","svgRef","props","viewBox","ref","ForwardRef","forwardRef","sizes","small","css","IconButton","styled","button","attrs","p","$size","ChatModalRoot","div","CloseButton","CloseIcon","CloseIconSvg","ChatModal","children","onClose","onClick","fillRule","clipRule","SvgSmileyFace","Scrollbar","CustomScrollbar","disableTracksWidthCompensation","SvgSearch","EmotePickerRoot","Categories","Category","CategoryHeader","CategoryItems","Emote","img","SearchBlock","SearchInput","input","SearchIcon","SearchIconSvg","EmotePicker","onEmoteClick","setSearch","searchInputRef","emoteCategories","placeholder","onChange","ChatInputRoot","ChatInputInner","Suggestions","SuggestionItem","$isActive","SuggestionImage","TextareaInput","TextareaWrapper","$isSuggestions","EmotesModal","Textarea","TextareaAutosize","$showScroll","EmotesButton","SmileyFaceIcon","SmileyFaceIconSvg","ChatInput","React","isDisabled","onKeyUp","onKeyDown","onBlur","onSuggestionMouseEnter","onSuggestionClick","textareaRef","suggestionsRef","useOnClickOutside","refs","isShowTextareaScroll","setIsShowTextareaScroll","isEmotesModalVisible","setIsEmotesModalVisible","handleCloseEmotesModal","renderUser","onMouseEnter","renderEmote","renderSuggestions","maxLength","maxRows","disabled","onHeightChange","height","memo","SvgGears","_ref2","_ref3","SvgTwitch","Button","SwitchRoot","Label","Input","Switch","checked","readOnly","aria-label","htmlFor","defaultProps","OptionsRoot","Header","h2","Option","OptionText","span","Profile","UserName","LogOutButton","Link","Badge","Options","userDisplayName","userColor","userBadgesImages","renderOption","changeOption","renderOptionsCategory","to","ChatControlsRoot","Controls","OptionsModal","OptionsButton","GearsIcon","GearsIconSvg","TwitchIcon","TwitchIconSvg","onSendMessage","isOptionsModalVisible","setIsOptionsModalVisible","handleCloseOptionsModal","optionsRef","as","prev","hueToRgb","pp","qq","calculateColorBackground","parseInt","substr","calculateColorReplacement","background","light","factor","hsl","r","g","b","max","Math","min","l","h","s","rgbToHsl","rgb","round","q","hslToRgb","toString","padStart","colorCache","Map","MessageCardRoot","a","rel","$clickable","Preview","Image","PreviewLoading","Content","textStyles","Title","Description","textLoadingStyle","TitleLoading","DescriptionLoading","errorImageSrc","errorImageSrcSet","errorDescription","MessageCard","cardInfo","MessageRoot","$isAction","$color","$isHistory","$isDeleted","$isHighlighted","$isEven","Name","Emoji","EmoteWrapper","Mention","$isOwnMessage","Timestamp","entities","timestamp","isHistory","isAction","isDeleted","isHighlighted","isShowTimestamps","onNameRightClick","isVisible","setIsVisible","newColor","darkenedMode","cacheKey","has","get","bgColor","size","delete","next","calculateColor","renderBadges","onContextMenu","messageLogin","data-emote-id","renderMessageArray","NoticeRoot","Notice","UserNoticeRoot","UserNotice","systemMessage","MessagesRoot","StyledScrollbar","MoreMessagesButton","$isVisible","Messages","isMoreMessagesButtonVisible","setIsMoreMessagesButtonVisible","isSplitChat","scrollbarRef","handleScrollToBottom","scrollToBottom","getIsEven","onUpdate","clientHeight","contentScrollHeight","scrollTop","JoinChannelRoot","JoinButton","JoinChannel","setValue","inputRef","handleChangeChannel","onKeyPress","ChatRoot","ChatWrapper","$isFixedWidth","Chat","isFixedWidth","chatInput","Auth","window","getAuthUrl","Logout","removeItem","LS_ID_TOKEN","LS_USER","AuthCallback","URLSearchParams","accessToken","createGlobalStyle","colors","vars","common","getHomeComponent","isAuthRedirect","App","exact","path","render","component","isLocalhost","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","console","log","onSuccess","catch","rootReducer","combineReducers","store","configureStore","reducer","ReactGA","initialize","page","pageview","require","ReactDOM","getElementById","URL","origin","addEventListener","contentType","ready","unregister","reload","checkValidServiceWorker","writeUserToLocatStorage","mentionRegex","linkRegex","urlRegex","strict","normalizeEmbeddedEmotes","embeddedEmotes","reduce","Number","acc","findEntity","parseTwitch","twitchEmote","mentionMatch","linkMatch","parseMessageEntities","isOwnMessage","offset","arrayOffset","spaceIndex","startIndex","endIndex","entity","keys","textBefore","Array","isArray","entityObject","difference","textAfter","checkIsHighlighted","messageUser","messageText","RegExp","twitchClipRegex","twitchVideoRegex","youtubeVideoRegex","getMessageCardFromEntities","parseYoutube","m","tink","Howl","tinkSfx","normalizeHistoryMessages","rawMessages","blockedUsersSelector","rawMessage","tekko","command","prefix","parsedTags","tmiSentTs","normalizeHistoryMessage","sliceMessagesByLimit","addedItemsCount","diff","isSliced","sliceItemsByLimit","messagesSlice","recieveMessagesAction","newItems","newIsEven","CHANNEL_MESSAGES_LIMIT","forEach","newUsers","STORE_USERS_LIMIT","splice","unshift","newRecentUserMessages","RECENT_USER_MESSAGES_LIMIT","meta","arg","normalizePayload","isHighlightNotifications","isShowTwitchCards","isShowYoutubeCards","play","normalizeMessage","nanoid","noticeType","normalizeNotice","systemMsg","normalizeUserNotice","normalizeOwnMessage","getState","slicedRawHistory","TWITCH_API_AUTH_BASE","TWITCH_API_CLIENT_ID","TWITCH_API_REDIRECT_URI","LS_OPTIONS","authParams","client_id","redirect_uri","response_type","scope","claims","id_token","email_verified","picture","preferred_username","readOptionsFromLocalStorage","blacklistKeywords","highlightKeywords","prepare"],"mappings":"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","file":"static/js/main.510f47ee.chunk.js","sourcesContent":["import type { RootState } from 'app/rootReducer';\n\nexport const currentChannelSelector = (state: RootState) =>\n  state.chat.currentChannel;\n\nexport const isConnectedSelector = (state: RootState) => state.chat.isConnected;\n\nexport const currentChannelIdSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.room?.roomId ||\n  '';\n\nexport const userColorSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user?.color ||\n  '';\n\nexport const userDisplayNameSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user\n    ?.displayName || '';\n\nexport const userBadgesSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user?.badges ||\n  {};\n","/* eslint-disable no-restricted-syntax */\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport findEmote from 'features/emotes/utils/findEmote';\n\nexport type EmotesByText = {\n  begins: htmlEntity.Emote[];\n  contains: htmlEntity.Emote[];\n};\n\nconst getEmotesByText = (\n  text: string,\n  emotes: StateEmotes,\n  limit = -1,\n): htmlEntity.Emote[] => {\n  if (!emotes) return [];\n\n  const result: EmotesByText = {\n    begins: [],\n    contains: [],\n  };\n  const textLower = text.toLowerCase();\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const isOver =\n    findEmote.bttv.byText(result, emotes.bttvChannel, textLower, limit) ||\n    findEmote.ffz.byText(result, emotes.ffzChannel, textLower, limit) ||\n    findEmote.twitch.byText(result, emotes.twitchUser, textLower, limit) ||\n    findEmote.twitch.byText(result, emotes.twitchGlobal, textLower, limit) ||\n    findEmote.bttv.byText(result, emotes.bttvGlobal, textLower, limit) ||\n    findEmote.ffz.byText(result, emotes.ffzGlobal, textLower, limit) ||\n    findEmote.emoji.byText(result, textLower, limit);\n\n  return [...result.begins, ...result.contains];\n};\n\nexport default getEmotesByText;\n","import * as R from 'ramda';\n\nimport { LS_EMOTES_USAGE_STATISTIC } from 'utils/constants';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport findEmote from 'features/emotes/utils/findEmote';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport type { MessageEntity } from 'features/messages/messagesSlice';\n\ntype Type = 'twitch-emote' | 'bttv-emote' | 'ffz-emote';\n\ntype AUsageItem = {\n  lastUpdatedAt: number;\n  uses: number;\n};\n\ntype UsageItemTwitchFfz = AUsageItem & {\n  type: 'twitch-emote' | 'ffz-emote';\n  id: number;\n};\n\ntype UsageItemBttv = AUsageItem & {\n  type: 'bttv-emote';\n  id: string;\n};\n\ntype UsageItem = UsageItemTwitchFfz | UsageItemBttv;\n\ntype EmotesUsageStatistic = Record<Type, Record<string, UsageItem>>;\n\nexport const readEmotesUsageStatistic = (): Partial<EmotesUsageStatistic> => {\n  try {\n    const statistic = localStorage.getItem(LS_EMOTES_USAGE_STATISTIC);\n\n    return JSON.parse(statistic as string) || {};\n  } catch (e) {\n    return {};\n  }\n};\n\nexport const getUsageStatisticFromEntities = R.pipe<\n  MessageEntity[],\n  any,\n  any,\n  any\n>(\n  R.filter((v: any) =>\n    R.includes(R.prop('type', v), ['twitch-emote', 'bttv-emote', 'ffz-emote']),\n  ),\n  R.groupBy<any>(R.prop('type')),\n  R.map(\n    R.pipe<any, any, any>(\n      R.groupBy<any>(R.prop('id')),\n      R.map((items: any) => ({\n        type: items[0].type,\n        id: items[0].id,\n        lastUpdatedAt: Date.now(),\n        uses: items.length,\n      })),\n    ),\n  ),\n);\n\nconst mergeFn = (key: string, left: any, right: any) =>\n  key === 'uses' ? left + right : right;\n\nexport const writeEmotesUsageStatistic = (entries: MessageEntity[]) => {\n  const statistic = getUsageStatisticFromEntities(entries) as Partial<\n    EmotesUsageStatistic\n  >;\n\n  if (R.isEmpty(statistic)) return;\n\n  const history = readEmotesUsageStatistic();\n\n  const newHistory = R.mergeDeepWithKey(mergeFn, history, statistic);\n\n  localStorage.setItem(LS_EMOTES_USAGE_STATISTIC, JSON.stringify(newHistory));\n};\n\nconst normalizeHistory = R.pipe<any, any, any, any, UsageItem[]>(\n  R.values,\n  R.map(R.values),\n  R.flatten,\n  R.sortWith([R.descend(R.prop('uses')), R.descend(R.prop('lastUpdatedAt'))]),\n);\n\nexport const getEmotesFromUsageStatistic = (\n  emotes: StateEmotes,\n  limit = 27,\n) => {\n  if (!emotes) return [];\n\n  const result: htmlEntity.Emote[] = [];\n  const history = R.pipe(readEmotesUsageStatistic, normalizeHistory)();\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const item of history) {\n    if (result.length === limit) return result;\n\n    let emoteEntity = null;\n\n    if (item.type === 'twitch-emote') {\n      emoteEntity = findEmote.twitch.byId(item.id, emotes);\n    }\n\n    if (item.type === 'bttv-emote') {\n      emoteEntity = findEmote.bttv.byId(item.id, emotes);\n    }\n\n    if (item.type === 'ffz-emote') {\n      emoteEntity = findEmote.ffz.byId(item.id, emotes);\n    }\n\n    if (emoteEntity) {\n      result.push(emoteEntity);\n    }\n  }\n\n  return result;\n};\n","import type { RootState } from 'app/rootReducer';\nimport assertNever from 'utils/assertNever';\nimport type { MessageCardInfo } from 'features/messages/messagesSlice';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const messageCardSelector = (\n  card: Omit<MessageCardInfo, 'url'> | null,\n) => (state: RootState) => {\n  if (!card) return null;\n\n  if (card.type === 'twitch-clip') {\n    return state.messageCards.twitchClips[card.id];\n  }\n\n  if (card.type === 'twitch-video') {\n    return state.messageCards.twitchVideos[card.id];\n  }\n\n  if (card.type === 'youtube-video') {\n    return state.messageCards.youtubeVideos[card.id];\n  }\n\n  return assertNever(card.type);\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchResult } from 'utils/types';\nimport { parseBlockedUsers } from 'features/chat/utils/parseApiResponse';\n\ntype BlockedUsersState = FetchResult<string[]>;\n\nconst initialState: BlockedUsersState = {\n  status: 'idle',\n  error: {},\n  items: [],\n};\n\nexport const fetchBlockedUsers = createAsyncThunk(\n  'chat/fetchBlockedUsers',\n  (userId: string) => api.fetchBlockedUsers(userId),\n);\n\nconst blockedUsers = createSlice({\n  name: 'blockedUsers',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchBlockedUsers.pending, (state) => {\n      state.status = 'loading';\n      state.error = {};\n    });\n\n    builder.addCase(fetchBlockedUsers.fulfilled, (state, { payload }) => {\n      state.status = 'success';\n      state.items = parseBlockedUsers(payload);\n    });\n\n    builder.addCase(fetchBlockedUsers.rejected, (state, { error }) => {\n      state.status = 'error';\n      state.error = error;\n    });\n  },\n});\n\nexport default blockedUsers.reducer;\n","// https://regex101.com/r/cpaNXh/1\nconst isStartsWithProtocolRegex = /^(?:(?:[a-z]+:)?\\/\\/)/;\n\nconst normalizeHref = (href: string) =>\n  isStartsWithProtocolRegex.test(href) ? href : `//${href}`;\n\nexport default normalizeHref;\n","import * as R from 'ramda';\nimport type twitchIrc from 'twitch-simple-irc';\n\nimport * as api from 'api';\nimport normalizeHref from 'utils/normalizeHref';\nimport { TWITCH_EMOTES_CDN, BTTV_EMOTES_CDN } from 'utils/constants';\n\nexport type TwitchEmote = {\n  type: 'twitch-emote';\n  id: number;\n  alt: string;\n  src: string;\n  srcSet: string;\n};\nexport type BttvEmote = {\n  type: 'bttv-emote';\n  id: string;\n  alt: string;\n  src: string;\n  srcSet: string;\n};\nexport type FfzEmote = {\n  type: 'ffz-emote';\n  id: number;\n  alt: string;\n  src: string;\n  srcSet: string;\n};\nexport type Emoji = {\n  type: 'emoji';\n  alt: string;\n  src: string;\n  srcSet?: string;\n};\nexport type Mention = {\n  type: 'mention';\n  text: string;\n  target: string;\n};\nexport type Link = {\n  type: 'link';\n  text: string;\n  href: string;\n};\nexport type Badge = {\n  alt: string;\n  label: string;\n  src: string;\n  srcSet: string;\n};\n\nexport type Emote = TwitchEmote | BttvEmote | FfzEmote | Emoji;\n\n// prettier-ignore\nexport const regexEmotesMap: Record<string, string> = {\n  '[oO](_|\\\\.)[oO]': 'O_o',\n  '\\\\&gt\\\\;\\\\(':     '>(',\n  '\\\\&lt\\\\;3':       '<3',\n  '\\\\:-?(o|O)':      ':O',\n  '\\\\:-?(p|P)':      ':P',\n  '\\\\:-?[\\\\\\\\/]':    ':/',\n  '\\\\:-?[z|Z|\\\\|]':  ':Z',\n  '\\\\:-?\\\\(':        ':(',\n  '\\\\:-?\\\\)':        ':)',\n  '\\\\:-?D':          ':D',\n  '\\\\;-?(p|P)':      ';P',\n  '\\\\;-?\\\\)':        ';)',\n  'R-?\\\\)':          'R)',\n  'B-?\\\\)':          'B)',\n};\n\nexport const getFfzSrcSet = R.pipe<any, [string, string][], string[], string>(\n  R.toPairs,\n  R.map(([dpi, url]) => `${url} ${dpi}x`),\n  R.join(', '),\n);\n\nexport const createTwitchEmote = ({\n  id,\n  code,\n}: api.TwitchEmote): TwitchEmote => ({\n  type: 'twitch-emote',\n  id,\n  alt: regexEmotesMap[code] || code,\n  src: `${TWITCH_EMOTES_CDN}/${id}/1.0`,\n  srcSet: `${TWITCH_EMOTES_CDN}/${id}/1.0 1x, ${TWITCH_EMOTES_CDN}/${id}/2.0 2x, ${TWITCH_EMOTES_CDN}/${id}/3.0 4x`,\n});\n\nexport const createBttvEmote = ({\n  id,\n  code,\n}: api.BttvGlobalEmote | api.BttvChannelEmote): BttvEmote => ({\n  type: 'bttv-emote',\n  id,\n  alt: code,\n  src: `${BTTV_EMOTES_CDN}/${id}/1x`,\n  srcSet: `${BTTV_EMOTES_CDN}/${id}/2x 2x, ${BTTV_EMOTES_CDN}/${id}/3x 4x`,\n});\n\nexport const createFfzEmote = ({ id, name, urls }: api.FfzEmote): FfzEmote => ({\n  type: 'ffz-emote',\n  id,\n  alt: name,\n  src: urls[1],\n  srcSet: getFfzSrcSet(urls),\n});\n\nexport const createEmoji = ({\n  short,\n  unified,\n}: {\n  short: string;\n  unified: string;\n}): Emoji => ({\n  type: 'emoji',\n  alt: `:${short}:`,\n  src: `//twemoji.maxcdn.com/v/latest/72x72/${unified}.png`,\n});\n\nexport const createMention = (text: string, target: string): Mention => ({\n  type: 'mention',\n  text,\n  target,\n});\n\nexport const createLink = (href: string): Link => ({\n  type: 'link',\n  text: href,\n  href: normalizeHref(href),\n});\n\nexport const createBadge = ({\n  title,\n  description,\n  image_url_1x: imageUrl1x,\n  image_url_2x: imageUrl2x,\n  image_url_4x: imageUrl4x,\n}: api.TwitchBadgeVersion): Badge => ({\n  alt: title,\n  label: description,\n  src: imageUrl1x,\n  srcSet: `${imageUrl1x} 1x, ${imageUrl2x} 2x, ${imageUrl4x} 4x`,\n});\n\nexport const createBadges = (\n  badges: twitchIrc.Badges,\n  globalBadges: Record<string, api.TwitchBadge>,\n  channelBadges: Record<string, api.TwitchBadge>,\n): Badge[] => {\n  const mapBadges = ([name, version]: [string, string]): Badge | false => {\n    const badge =\n      channelBadges[name]?.versions[version] ||\n      globalBadges[name]?.versions[version];\n\n    return badge ? createBadge(badge) : false;\n  };\n\n  return R.pipe<any, [string, string][], any[], any[]>(\n    R.toPairs,\n    R.map(mapBadges),\n    R.filter(Boolean),\n  )(badges);\n};\n","import type { RootState } from 'app/rootReducer';\n\nexport const isAuthReadySelector = (state: RootState) =>\n  state.auth.status !== 'idle' && state.auth.status !== 'loading';\n\nexport const isAuthSelector = (state: RootState) =>\n  state.auth.status === 'success';\n\nexport const userLoginSelector = (state: RootState) => state.auth.userLogin;\n\nexport const userIdSelector = (state: RootState) => state.auth.userId;\n","import { API_REQUESTS_TIMEOUT } from 'utils/constants';\n\nexport interface FetchRequestOptions extends RequestInit {\n  timeout?: number;\n}\n\nconst fetchRequest = async (\n  url: string,\n  { timeout, ...restOptions }: FetchRequestOptions = {},\n) => {\n  let options = { ...restOptions };\n  const fetchTimeout = timeout || API_REQUESTS_TIMEOUT;\n\n  if (fetchTimeout) {\n    const controller = new AbortController();\n\n    options = { ...options, signal: controller.signal };\n\n    setTimeout(() => controller.abort(), fetchTimeout);\n  }\n\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  const body = await response.json();\n\n  return body;\n};\n\nexport default fetchRequest;\n","import { LS_ACCESS_TOKEN } from 'utils/constants';\nimport fetchRequest from 'utils/fetchRequest';\nimport type { FetchRequestOptions } from 'utils/fetchRequest';\n\nconst TWITCH_API_HELIX = 'https://api.twitch.tv/helix';\nconst TWITCH_API_KRAKEN = 'https://api.twitch.tv/kraken';\n\nconst getHelixHeaders = () => ({\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `Bearer ${localStorage.getItem(LS_ACCESS_TOKEN)}`,\n});\n\nconst getKrakenHeaders = () => ({\n  Accept: 'application/vnd.twitchtv.v5+json',\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `OAuth ${localStorage.getItem(LS_ACCESS_TOKEN)}`,\n});\n\nconst apiRequestHelix = (url: string, options?: FetchRequestOptions) =>\n  fetchRequest(`${TWITCH_API_HELIX}${url}`, {\n    ...options,\n    headers: getHelixHeaders(),\n  } as FetchRequestOptions);\n\nconst apiRequestKraken = (url: string, options?: FetchRequestOptions) =>\n  fetchRequest(`${TWITCH_API_KRAKEN}${url}`, {\n    ...options,\n    headers: getKrakenHeaders(),\n  } as FetchRequestOptions);\n\nexport interface TwitchUser {\n  id: string;\n  login: string;\n  display_name: string;\n  type: string;\n  broadcaster_type: string;\n  description: string;\n  profile_image_url: string;\n  offline_image_url: string;\n  view_count: number;\n}\n\nexport interface TwitchUsersResponse {\n  data: TwitchUser[];\n}\n\nexport interface TwitchEmote {\n  id: number;\n  code: string;\n}\n\nexport interface TwitchEmotesResponse {\n  emoticon_sets: Record<string, TwitchEmote[]>;\n}\n\nexport interface TwitchBadgeVersion {\n  image_url_1x: string;\n  image_url_2x: string;\n  image_url_4x: string;\n  description: string;\n  title: string;\n  click_action: string;\n  click_url: string;\n  last_updated: null;\n}\n\nexport interface TwitchBadge {\n  versions: Record<string, TwitchBadgeVersion>;\n}\n\nexport interface TwitchBadgesResponse {\n  badge_sets: Record<string, TwitchBadge>;\n}\n\nexport interface TwitchBlockedUser {\n  display_name: string;\n  _id: string;\n  name: string;\n  type: string;\n  bio: string | null;\n  created_at: string;\n  updated_at: string;\n  logo: string;\n}\n\nexport interface TwitchBlockedUsersResponse {\n  _total: number;\n  blocks: {\n    user: TwitchBlockedUser;\n  }[];\n}\n\ninterface TwitchClipData {\n  id: string;\n  url: string;\n  embed_url: string;\n  broadcaster_id: string;\n  broadcaster_name: string;\n  creator_id: string;\n  creator_name: string;\n  video_id: string;\n  game_id: string;\n  language: string;\n  title: string;\n  view_count: number;\n  created_at: string;\n  thumbnail_url: string;\n}\n\nexport interface TwitchClipResponse {\n  data: TwitchClipData[];\n  pagination: {};\n}\n\ninterface TwitchVideoData {\n  id: string;\n  user_id: string;\n  user_name: string;\n  title: string;\n  description: string;\n  created_at: string;\n  published_at: string;\n  url: string;\n  thumbnail_url: string;\n  viewable: 'public' | 'private';\n  view_count: number;\n  language: string;\n  type: 'upload' | 'archive' | 'highlight';\n  duration: string;\n}\n\nexport interface TwitchVideoResponse {\n  data: TwitchVideoData[];\n  pagination: {};\n}\n\nexport const fetchUser = (userId: string): Promise<TwitchUsersResponse> =>\n  apiRequestHelix(`/users?id=${userId}`);\n\nexport const fetchTwitchEmotes = (\n  userId: string,\n): Promise<TwitchEmotesResponse> => apiRequestKraken(`/users/${userId}/emotes`);\n\nexport const fetchGlobalBadges = (\n  language = 'en',\n): Promise<TwitchBadgesResponse> =>\n  fetchRequest(\n    `https://badges.twitch.tv/v1/badges/global/display?language=${language}`,\n  );\n\nexport const fetchChannelBadges = (\n  channelId: string,\n  language = 'en',\n): Promise<TwitchBadgesResponse> =>\n  fetchRequest(\n    `https://badges.twitch.tv/v1/badges/channels/${channelId}/display?language=${language}`,\n  );\n\nexport const fetchBlockedUsers = (\n  userId: string,\n): Promise<TwitchBlockedUsersResponse> =>\n  apiRequestKraken(`/users/${userId}/blocks`);\n\nexport const fetchTwitchClip = (id: string): Promise<TwitchClipResponse> =>\n  apiRequestHelix(`/clips?id=${id}`);\n\nexport const fetchTwitchVideo = (id: string): Promise<TwitchVideoResponse> =>\n  apiRequestHelix(`/videos?id=${id}`);\n","import fetchRequest from 'utils/fetchRequest';\n\nexport interface BttvEmote {\n  id: string;\n  code: string;\n  imageType: 'png' | 'gif';\n}\n\nexport interface BttvGlobalEmote extends BttvEmote {\n  userId: string;\n}\n\nexport interface BttvChannelEmote extends BttvEmote {\n  user: {\n    id: string;\n    name: string;\n    displayName: string;\n    providerId: string;\n  };\n}\n\nexport type BttvGlobalEmotesResponse = BttvGlobalEmote[];\n\nexport interface BttvChannelEmotesResponse {\n  id: string;\n  bots: string[];\n  channelEmotes: BttvChannelEmote[];\n  sharedEmotes: BttvChannelEmote[];\n}\n\nexport const fetchBttvGlobalEmotes = (): Promise<BttvGlobalEmotesResponse> =>\n  fetchRequest('https://api.betterttv.net/3/cached/emotes/global');\n\nexport const fetchBttvChannelEmotes = (\n  channelId: string,\n): Promise<BttvChannelEmotesResponse> =>\n  fetchRequest(`https://api.betterttv.net/3/cached/users/twitch/${channelId}`);\n","import fetchRequest from 'utils/fetchRequest';\n\nexport interface FfzEmote {\n  css: null;\n  height: number;\n  hidden: boolean;\n  id: number;\n  margins: null;\n  modifier: boolean;\n  name: string;\n  offset: null;\n  owner: {\n    _id: number;\n    display_name: string;\n    name: string;\n  };\n  public: boolean;\n  urls: {\n    '1': string;\n    '2'?: string;\n    '4'?: string;\n  };\n  width: number;\n}\n\ninterface FfzEmoteSet {\n  _type: number;\n  css: null;\n  description: null;\n  emoticons: FfzEmote[];\n  icon: null;\n  id: number;\n  title: string;\n}\n\nexport interface FfzGlobalEmotesResponse {\n  default_sets: number[];\n  sets: Record<string, FfzEmoteSet>;\n  users: Record<string, string[]>;\n}\n\nexport interface FfzChannelEmotesResponse {\n  room: {\n    _id: number;\n    css: null;\n    display_name: string;\n    id: string;\n    is_group: boolean;\n    mod_urls: null;\n    moderator_badge: null;\n    set: number;\n    twitch_id: number;\n    user_badges: {};\n  };\n  sets: Record<string, FfzEmoteSet>;\n}\n\nexport const fetchFfzGlobalEmotes = (): Promise<FfzGlobalEmotesResponse> =>\n  fetchRequest('https://api.frankerfacez.com/v1/set/global');\n\nexport const fetchFfzChannelEmotes = (\n  channelId: string,\n): Promise<FfzChannelEmotesResponse> =>\n  fetchRequest(`https://api.frankerfacez.com/v1/room/id/${channelId}`);\n","import fetchRequest from 'utils/fetchRequest';\n\nexport interface RecentMessagesResponse {\n  messages: string[];\n  error: null;\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport const fetchRecentMessages = (\n  channel: string,\n): Promise<RecentMessagesResponse> =>\n  fetchRequest(\n    `https://recent-messages.robotty.de/api/v2/recent-messages/${channel}?clearchatToNotice=true`,\n  );\n","import fetchRequest from 'utils/fetchRequest';\n\nconst YOUTUBE_API_BASE = 'https://www.googleapis.com/youtube/v3';\n\ninterface YoutubeThumbnail {\n  url: string;\n  width: number;\n  height: number;\n}\n\ninterface YoutubeVideoItem {\n  kind: string;\n  etag: string;\n  id: string;\n  snippet: {\n    publishedAt: string;\n    channelId: string;\n    title: string;\n    description: string;\n    thumbnails: {\n      default: YoutubeThumbnail;\n      medium: YoutubeThumbnail;\n      high: YoutubeThumbnail;\n      standard: YoutubeThumbnail;\n      maxres: YoutubeThumbnail;\n    };\n    channelTitle: string;\n    tags: string[];\n    categoryId: string;\n    liveBroadcastContent: string;\n    defaultLanguage: string;\n    localized: {\n      title: string;\n      description: string;\n    };\n    defaultAudioLanguage: string;\n  };\n}\n\nexport interface YoutubeVideoResponse {\n  kind: string;\n  etag: string;\n  items: YoutubeVideoItem[];\n  pageInfo: {\n    totalResults: number;\n    resultsPerPage: number;\n  };\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport const fetchYoutubeVideo = (id: string): Promise<YoutubeVideoResponse> =>\n  fetchRequest(\n    `${YOUTUBE_API_BASE}/videos?part=snippet&id=${id}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`,\n  );\n","module.exports = __webpack_public_path__ + \"static/media/ts-tink.4251bf04.ogg\";","import * as R from 'ramda';\n\nimport * as api from 'api';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport type { EmotesByText } from 'features/emotes/utils/getEmotesByText';\nimport emojisMap from 'features/emotes/emojisMap.json';\n\n// by id\n\nconst findTwitchEmoteByIdInSets = (\n  id: number,\n  sets: Record<string, api.TwitchEmote[]>,\n) => {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const set of Object.values(sets)) {\n    const result = R.find(R.propEq('id', id), set);\n\n    if (result) return htmlEntity.createTwitchEmote(result);\n  }\n\n  return null;\n};\n\nconst findTwitchEmoteById = (\n  id: number,\n  { twitchGlobal, twitchUser }: NonNullable<StateEmotes>,\n) =>\n  findTwitchEmoteByIdInSets(id, twitchGlobal) ||\n  findTwitchEmoteByIdInSets(id, twitchUser);\n\nconst findBttvEmoteById = (\n  id: string,\n  { bttvGlobal, bttvChannel }: NonNullable<StateEmotes>,\n) => {\n  const findById = R.find<api.BttvGlobalEmote | api.BttvChannelEmote>(\n    R.propEq('id', id),\n  );\n  const result = findById(bttvGlobal) || findById(bttvChannel);\n\n  return result ? htmlEntity.createBttvEmote(result) : null;\n};\n\nconst findFfzEmoteById = (\n  id: number,\n  { ffzGlobal, ffzChannel }: NonNullable<StateEmotes>,\n) => {\n  const findById = R.find<api.FfzEmote>(R.propEq('id', id));\n  const result = findById(ffzGlobal) || findById(ffzChannel);\n\n  return result ? htmlEntity.createFfzEmote(result) : null;\n};\n\nconst findEmojiByChar = (char: string) => {\n  const result = R.find(R.propEq('char', char), Object.values(emojisMap));\n\n  return result ? htmlEntity.createEmoji(result) : null;\n};\n\n// by name\n\nconst emotesMap: Record<string, string[]> = {\n  555555557: [':-)', ':)'],\n  555555559: [':-(', ':('],\n  555555561: [':-D', ':D'],\n  555555562: ['>('],\n  555555568: [':-z', ':-Z', ':-|', ':z', ':Z', ':|'],\n  555555576: ['o_o', 'O_o', 'O_O', 'o_O', 'o.o', 'O.o', 'O.O', 'o.O'],\n  555555579: ['B-)', 'B)'],\n  555555583: [':-o', ':-O', ':o', ':O'],\n  555555584: ['<3'],\n  555555588: [':-\\\\', ':-/', ':\\\\', ':/'],\n  555555590: [';-\\\\', ';\\\\'],\n  555555594: [':-p', ':-P', ':p', ':P'],\n  555555598: [';-p', ';-P', ';p', ';P'],\n  555555600: ['R-)', 'R)'],\n};\n\nconst findTwitchEmoteByNameInSets = (\n  name: string,\n  sets: Record<string, api.TwitchEmote[]>,\n) => {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const set of Object.values(sets)) {\n    const result = R.find(\n      ({ id, code }) =>\n        emotesMap[id] ? emotesMap[id].includes(name) : name === code,\n      set,\n    );\n\n    if (result) return htmlEntity.createTwitchEmote(result);\n  }\n\n  return null;\n};\n\nconst findTwitchEmoteByName = (\n  name: string,\n  { twitchGlobal, twitchUser }: NonNullable<StateEmotes>,\n) =>\n  findTwitchEmoteByNameInSets(name, twitchGlobal) ||\n  findTwitchEmoteByNameInSets(name, twitchUser);\n\nconst findBttvEmoteByName = (\n  name: string,\n  { bttvGlobal, bttvChannel }: NonNullable<StateEmotes>,\n) => {\n  const findByName = R.find<api.BttvGlobalEmote | api.BttvChannelEmote>(\n    R.propEq('code', name),\n  );\n  const result = findByName(bttvGlobal) || findByName(bttvChannel);\n\n  return result ? htmlEntity.createBttvEmote(result) : null;\n};\n\nconst findFfzEmoteByName = (\n  name: string,\n  { ffzGlobal, ffzChannel }: NonNullable<StateEmotes>,\n) => {\n  const findByName = R.find<api.FfzEmote>(R.propEq('name', name));\n  const result = findByName(ffzGlobal) || findByName(ffzChannel);\n\n  return result ? htmlEntity.createFfzEmote(result) : null;\n};\n\n// by text\n\n/* eslint-disable no-restricted-syntax */\nconst findTwitchEmotesByText = (\n  result: EmotesByText,\n  sets: Record<string, api.TwitchEmote[]>,\n  text: string,\n  limit: number,\n) => {\n  for (const items of Object.values(sets)) {\n    for (const emote of items) {\n      if (result.begins.length + result.contains.length === limit) return true;\n\n      const index = emote.code.toLowerCase().indexOf(text);\n\n      if (index !== -1) {\n        const type = index === 0 ? 'begins' : 'contains';\n\n        result[type].push(htmlEntity.createTwitchEmote(emote));\n      }\n    }\n  }\n\n  return false;\n};\n\nconst findBttvEmotesByText = (\n  result: EmotesByText,\n  bttv: api.BttvGlobalEmote[] | api.BttvChannelEmote[],\n  text: string,\n  limit: number,\n) => {\n  for (const emote of bttv) {\n    if (result.begins.length + result.contains.length === limit) return true;\n\n    const index = emote.code.toLowerCase().indexOf(text);\n\n    if (index !== -1) {\n      const type = index === 0 ? 'begins' : 'contains';\n\n      result[type].push(htmlEntity.createBttvEmote(emote));\n    }\n  }\n\n  return false;\n};\n\nconst findFfzEmotesByText = (\n  result: EmotesByText,\n  ffz: api.FfzEmote[],\n  text: string,\n  limit: number,\n) => {\n  for (const emote of ffz) {\n    if (result.begins.length + result.contains.length === limit) return true;\n\n    const index = emote.name.toLowerCase().indexOf(text);\n\n    if (index !== -1) {\n      const type = index === 0 ? 'begins' : 'contains';\n\n      result[type].push(htmlEntity.createFfzEmote(emote));\n    }\n  }\n\n  return false;\n};\n\nconst findEmojisByText = (\n  result: EmotesByText,\n  text: string,\n  limit: number,\n) => {\n  for (const emoji of Object.values(emojisMap)) {\n    if (result.begins.length + result.contains.length === limit) return true;\n\n    const { short, keywords } = emoji;\n\n    let index = short.toLowerCase().indexOf(text);\n\n    if (index !== -1) {\n      const type = index === 0 ? 'begins' : 'contains';\n      const emojiEntity = htmlEntity.createEmoji(emoji);\n\n      result[type].push(emojiEntity);\n\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    for (const keyword of keywords) {\n      index = keyword.toLowerCase().indexOf(text);\n\n      if (index !== -1) {\n        const emojiEntity = htmlEntity.createEmoji(emoji);\n\n        result.contains.push(emojiEntity);\n\n        break;\n      }\n    }\n  }\n\n  return false;\n};\n/* eslint-enable no-restricted-syntax */\n\nconst findEmote = {\n  twitch: {\n    byId: findTwitchEmoteById,\n    byName: findTwitchEmoteByName,\n    byText: findTwitchEmotesByText,\n  },\n  bttv: {\n    byId: findBttvEmoteById,\n    byName: findBttvEmoteByName,\n    byText: findBttvEmotesByText,\n  },\n  ffz: {\n    byId: findFfzEmoteById,\n    byName: findFfzEmoteByName,\n    byText: findFfzEmotesByText,\n  },\n  emoji: {\n    byChar: findEmojiByChar,\n    byText: findEmojisByText,\n  },\n};\n\nexport default findEmote;\n","import * as R from 'ramda';\nimport { createSelector } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport getEmotesByText from 'features/emotes/utils/getEmotesByText';\nimport { getEmotesFromUsageStatistic } from 'features/emotes/utils/emotesUsageStatistic';\n\nexport type EmoteCategory = {\n  title?: string;\n  items: htmlEntity.Emote[];\n};\n\nconst getTwitchUserEmoteCategories = R.pipe<\n  Record<string, api.TwitchEmote[]>,\n  api.TwitchEmote[][],\n  EmoteCategory[]\n>(\n  R.values,\n  R.map((items) => ({ items: R.map(htmlEntity.createTwitchEmote, items) })),\n);\n\nconst createMainEmoteCategories = (emotes: StateEmotes) => {\n  if (!emotes) return [];\n\n  const {\n    twitchGlobal,\n    twitchUser,\n    bttvGlobal,\n    bttvChannel,\n    ffzGlobal,\n    ffzChannel,\n  } = emotes;\n\n  return [\n    {\n      title: 'BetterTTV Channel Emotes',\n      items: bttvChannel.map(htmlEntity.createBttvEmote),\n    },\n    {\n      title: 'FrankerFaceZ Channel Emotes',\n      items: ffzChannel.map(htmlEntity.createFfzEmote),\n    },\n    ...getTwitchUserEmoteCategories(twitchUser),\n    {\n      title: 'Twitch',\n      items: R.map(\n        htmlEntity.createTwitchEmote,\n        R.propOr([], '0', twitchGlobal),\n      ),\n    },\n    {\n      title: 'BetterTTV',\n      items: bttvGlobal.map(htmlEntity.createBttvEmote),\n    },\n    {\n      title: 'FrankerFaceZ',\n      items: ffzGlobal.map(htmlEntity.createFfzEmote),\n    },\n  ].filter(R.path(['items', 'length'])) as EmoteCategory[];\n};\n\nconst getMainEmoteCategories = createSelector(\n  (emotes: StateEmotes) => emotes,\n  createMainEmoteCategories,\n);\n\nconst createEmoteCategories = (emotes: StateEmotes, text: string) => {\n  if (!emotes) return [];\n\n  if (text) {\n    const items = getEmotesByText(text, emotes);\n    const title = `${items.length ? '' : 'No '}Search Results for \"${text}\"`;\n\n    return [{ title, items }];\n  }\n\n  const mainEmoteCategories = getMainEmoteCategories(emotes);\n  const frequentlyUsed = getEmotesFromUsageStatistic(emotes);\n\n  if (!frequentlyUsed.length) {\n    return mainEmoteCategories;\n  }\n\n  const frequentlyUsedCategory = {\n    title: 'Frequently Used',\n    items: frequentlyUsed,\n  };\n\n  return [frequentlyUsedCategory, ...mainEmoteCategories] as EmoteCategory[];\n};\n\nexport default createEmoteCategories;\n","import * as R from 'ramda';\nimport { createSelector } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { RootState } from 'app/rootReducer';\nimport { currentChannelSelector } from 'features/chat/chatSelectors';\nimport createEmoteCategories from 'features/emotes/utils/createEmoteCategories';\n\nexport type StateEmotes = {\n  twitchGlobal: Record<string, api.TwitchEmote[]>;\n  twitchUser: Record<string, api.TwitchEmote[]>;\n  bttvGlobal: api.BttvGlobalEmote[];\n  bttvChannel: api.BttvChannelEmote[];\n  ffzGlobal: api.FfzEmote[];\n  ffzChannel: api.FfzEmote[];\n} | null;\n\n// emotes isLoaded\nexport const isTwitchEmotesLoadedSelector = (state: RootState) =>\n  state.emotes.twitch.status === 'success' ||\n  state.emotes.twitch.status === 'error';\n\nexport const isBttvGlobalEmotesLoadedSelector = (state: RootState) =>\n  state.emotes.bttv.global.status === 'success' ||\n  state.emotes.bttv.global.status === 'error';\n\nexport const isBttvChannelEmotesLoadedSelector = (state: RootState) => {\n  const currentChannel = currentChannelSelector(state);\n\n  return (\n    state.emotes.bttv.byChannels[currentChannel]?.status === 'success' ||\n    state.emotes.bttv.byChannels[currentChannel]?.status === 'error' ||\n    false\n  );\n};\n\nexport const isBttvEmotesLoadedSelector = (state: RootState) =>\n  isBttvGlobalEmotesLoadedSelector(state) &&\n  isBttvChannelEmotesLoadedSelector(state);\n\nexport const isFfzGlobalEmotesLoadedSelector = (state: RootState) =>\n  state.emotes.ffz.global.status === 'success' ||\n  state.emotes.ffz.global.status === 'error';\n\nexport const isFfzChannelEmotesLoadedSelector = (state: RootState) => {\n  const currentChannel = currentChannelSelector(state);\n\n  return (\n    state.emotes.ffz.byChannels[currentChannel]?.status === 'success' ||\n    state.emotes.ffz.byChannels[currentChannel]?.status === 'error' ||\n    false\n  );\n};\n\nexport const isFfzEmotesLoadedSelector = (state: RootState) =>\n  isFfzGlobalEmotesLoadedSelector(state) &&\n  isFfzChannelEmotesLoadedSelector(state);\n\nexport const isEmotesLoadedSelector = (state: RootState) =>\n  isTwitchEmotesLoadedSelector(state) &&\n  isBttvGlobalEmotesLoadedSelector(state) &&\n  isBttvChannelEmotesLoadedSelector(state) &&\n  isFfzGlobalEmotesLoadedSelector(state) &&\n  isFfzChannelEmotesLoadedSelector(state);\n\n// emotes\nconst twitchEmotesSelector = (state: RootState) => state.emotes.twitch.items;\nconst twitchGlobalEmotesSelector = createSelector(\n  twitchEmotesSelector,\n  R.pick(['0']),\n);\nconst twitchUserEmotesSelector = createSelector(\n  twitchEmotesSelector,\n  R.omit(['0']),\n);\n\nconst bttvGlobalEmotesSelector = (state: RootState) =>\n  state.emotes.bttv.global.items;\nconst bttvChannelEmotesSelector = (state: RootState) =>\n  state.emotes.bttv.byChannels[currentChannelSelector(state)]?.items || [];\n\nconst ffzGlobalEmotesSelector = (state: RootState) =>\n  state.emotes.ffz.global.items;\nconst ffzChannelEmotesSelector = (state: RootState) =>\n  state.emotes.ffz.byChannels[currentChannelSelector(state)]?.items || [];\n\nexport const emotesSelector = createSelector(\n  isEmotesLoadedSelector,\n  twitchGlobalEmotesSelector,\n  twitchUserEmotesSelector,\n  bttvGlobalEmotesSelector,\n  bttvChannelEmotesSelector,\n  ffzGlobalEmotesSelector,\n  ffzChannelEmotesSelector,\n  (\n    isEmotesLoaded,\n    twitchGlobal,\n    twitchUser,\n    bttvGlobal,\n    bttvChannel,\n    ffzGlobal,\n    ffzChannel,\n  ) => {\n    if (!isEmotesLoaded) return null;\n\n    return {\n      twitchGlobal,\n      twitchUser,\n      bttvGlobal,\n      bttvChannel,\n      ffzGlobal,\n      ffzChannel,\n    } as StateEmotes;\n  },\n);\n\nexport const emoteCategoriesSelector = (state: RootState, search: string) => {\n  const emotes = emotesSelector(state);\n\n  return createEmoteCategories(emotes, search);\n};\n","import * as R from 'ramda';\nimport { format } from 'date-fns/fp';\n\nimport * as api from 'api';\n\nexport const parseTwitchEmotes = R.prop('emoticon_sets');\n\nexport const parseBttvGlobalEmotes = (\n  data: api.BttvGlobalEmotesResponse,\n): api.BttvGlobalEmote[] => data;\n\nexport const parseBttvChannelEmotes = (\n  data: api.BttvChannelEmotesResponse,\n): api.BttvChannelEmote[] => [...data.channelEmotes, ...data.sharedEmotes];\n\nexport const parseFfzGlobalEmotes = ({\n  default_sets: defaultSets,\n  sets,\n}: api.FfzGlobalEmotesResponse): api.FfzEmote[] =>\n  R.pipe<any, any, any, any, api.FfzEmote[]>(\n    R.pick((defaultSets as unknown) as string[]),\n    R.values,\n    R.map(R.propOr([], 'emoticons')),\n    R.flatten,\n  )(sets);\n\nexport const parseFfzChannelEmotes: (\n  data: api.FfzChannelEmotesResponse,\n) => api.FfzEmote[] = R.pipe(\n  R.pathOr({}, ['sets']),\n  R.values,\n  R.map(R.pathOr([], ['emoticons'])),\n  R.flatten,\n);\n\nexport const parseBlockedUsers = R.pipe<\n  api.TwitchBlockedUsersResponse,\n  {}[],\n  string[]\n>(R.prop('blocks'), R.map<any, any>(R.path(['user', 'name'])));\n\nexport const parseBadges = R.prop('badge_sets');\n\n// TODO: if message card was loaded, the second message with different timing doesn't work\n\nexport const parseTwitchClip = ({ data }: api.TwitchClipResponse) => {\n  if (data.length === 0) return null;\n\n  const {\n    id,\n    thumbnail_url: thumbnailUrl,\n    title,\n    creator_name: creatorName,\n  } = data[0];\n\n  const x1 = thumbnailUrl.replace('480x272', '86x45');\n  const x2 = thumbnailUrl.replace('480x272', '260x147');\n\n  return {\n    id,\n    src: x1,\n    srcSet: `${x1} 1x, ${x2} 2x`,\n    title,\n    description: `Clipped by ${creatorName}`,\n  };\n};\n\nexport const parseTwitchVideo = ({ data }: api.TwitchVideoResponse) => {\n  if (data.length === 0) return null;\n\n  const {\n    id,\n    thumbnail_url: thumbnailUrl,\n    title,\n    user_name: userName,\n    published_at: publishedAt,\n  } = data[0];\n\n  const date = format('PP', new Date(publishedAt));\n\n  const thumbnailReplace = '%{width}x%{height}';\n\n  const x1 = thumbnailUrl.replace(thumbnailReplace, '80x45');\n  const x2 = thumbnailUrl.replace(thumbnailReplace, '160x90');\n  const x4 = thumbnailUrl.replace(thumbnailReplace, '320x180');\n\n  return {\n    id,\n    src: x1,\n    srcSet: `${x1} 1x, ${x2} 2x, ${x4} 4x`,\n    title,\n    description: `${date} · ${userName}`,\n  };\n};\n\nexport const parseYoutubeVideo = ({ items }: api.YoutubeVideoResponse) => {\n  if (items.length === 0) return null;\n\n  const {\n    id,\n    snippet: {\n      title,\n      publishedAt,\n      channelTitle,\n      thumbnails: {\n        default: { url: x1 },\n        medium: { url: x2 },\n        high: { url: x4 },\n      },\n    },\n  } = items[0];\n\n  const date = format('PP', new Date(publishedAt));\n\n  return {\n    id,\n    src: x1,\n    srcSet: `${x1} 1x, ${x2} 2x, ${x4} 4x`,\n    title,\n    description: `${date} · ${channelTitle}`,\n  };\n};\n","import type { RootState } from 'app/rootReducer';\n\ntype OptionItem = {\n  type: 'switch' | 'input';\n  id: string;\n  name: string;\n  title: string;\n  description: string;\n  value: boolean | string;\n};\n\ntype OptionCategories = {\n  title: string;\n  items: OptionItem[];\n};\n\nexport const optionsSelector = (state: RootState): OptionCategories[] => [\n  {\n    title: 'My preferences',\n    items: [\n      {\n        type: 'switch',\n        id: 'show-timestamps',\n        name: 'showTimestamps',\n        title: 'Show Timestamps',\n        description: '',\n        value: state.options.showTimestamps,\n      },\n      {\n        type: 'switch',\n        id: 'split-chat',\n        name: 'splitChat',\n        title: 'Split Chat',\n        description: '',\n        value: state.options.splitChat,\n      },\n      {\n        type: 'switch',\n        id: 'fixed-width',\n        name: 'fixedWidth',\n        title: 'Fixed Width',\n        description: '',\n        value: state.options.fixedWidth,\n      },\n      {\n        type: 'switch',\n        id: 'highlight-notifications',\n        name: 'highlightNotifications',\n        title: 'Play a sound on highlights',\n        description: 'Plays a sound for messages directed at you',\n        value: state.options.highlightNotifications,\n      },\n      {\n        type: 'switch',\n        id: 'show-twitch-cards',\n        name: 'showTwitchCards',\n        title: 'Show Twitch clips and vods in the chat',\n        description: 'Show previews for Twitch clips and vods in the chat',\n        value: state.options.showTwitchCards,\n      },\n      {\n        type: 'switch',\n        id: 'show-youtube-cards',\n        name: 'showYoutubeCards',\n        title: 'Show Youtube videos in the chat',\n        description: 'Show previews for Youtube videos in the chat',\n        value: state.options.showYoutubeCards,\n      },\n      // {\n      //   type: 'input',\n      //   id: 'blacklist-keywords',\n      //   name: 'blacklistKeywords',\n      //   title: 'Set Blacklist Keywords',\n      //   description: '',\n      //   value: state.options.blacklistKeywords,\n      // },\n      // {\n      //   type: 'input',\n      //   id: 'highlight-keywords',\n      //   name: 'highlightKeywords',\n      //   title: 'Set Highlight Keywords',\n      //   description: '',\n      //   value: state.options.highlightKeywords,\n      // },\n    ],\n  },\n];\n\nexport const isShowTimestampsSelector = (state: RootState) =>\n  state.options.showTimestamps;\n\nexport const isSplitChatSelector = (state: RootState) =>\n  state.options.splitChat;\n\nexport const isFixedWidthSelector = (state: RootState) =>\n  state.options.fixedWidth;\n\nexport const isHighlightNotificationsSelector = (state: RootState) =>\n  state.options.highlightNotifications;\n\nexport const isShowTwitchCardsSelector = (state: RootState) =>\n  state.options.showTwitchCards;\n\nexport const isShowYoutubeCardsSelector = (state: RootState) =>\n  state.options.showYoutubeCards;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\nimport type twitchIrc from 'twitch-simple-irc';\n\ntype Params = {\n  room: twitchIrc.RoomStateTags | null;\n  user: twitchIrc.UserStateTags | null;\n};\n\ntype ChatState = {\n  isConnected: boolean;\n  currentChannel: string;\n  params: {\n    global: twitchIrc.GlobalUserStateTags | null;\n    byChannels: Record<string, Params>;\n  };\n};\n\nconst initialState: ChatState = {\n  isConnected: false,\n  currentChannel: '',\n  params: {\n    global: null,\n    byChannels: {},\n  },\n};\n\nconst chat = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    updateIsConnected: (state, { payload }: PayloadAction<boolean>) => {\n      state.isConnected = payload;\n    },\n\n    updateCurrentChannel: (state, { payload }: PayloadAction<string>) => {\n      state.currentChannel = payload;\n    },\n\n    updateGlobalUserParams: (\n      state,\n      { payload }: PayloadAction<twitchIrc.GlobalUserStateEvent>,\n    ) => {\n      state.params.global = payload.tags;\n    },\n\n    updateUserParams: (\n      state,\n      { payload }: PayloadAction<twitchIrc.UserStateEvent>,\n    ) => {\n      const { channel, tags } = payload;\n\n      if (!state.params.byChannels[channel]) {\n        state.params.byChannels[channel] = {\n          room: null,\n          user: null,\n        };\n      }\n\n      state.params.byChannels[channel].user = tags;\n    },\n\n    updateRoomParams: (\n      state,\n      { payload }: PayloadAction<twitchIrc.RoomStateEvent>,\n    ) => {\n      const { channel, tags } = payload;\n\n      if (!state.params.byChannels[channel]) {\n        state.params.byChannels[channel] = {\n          room: null,\n          user: null,\n        };\n      }\n\n      // TODO: merge tags\n      state.params.byChannels[channel].room = tags;\n    },\n  },\n});\n\nexport const {\n  updateIsConnected,\n  updateCurrentChannel,\n\n  // params\n  updateGlobalUserParams,\n  updateUserParams,\n  updateRoomParams,\n} = chat.actions;\n\nexport default chat.reducer;\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport type { RootState } from 'app/rootReducer';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport {\n  currentChannelSelector,\n  userBadgesSelector,\n} from 'features/chat/chatSelectors';\n\nexport const isGlobalBadgesLoadedSelector = (state: RootState) =>\n  state.badges.global.status === 'success' ||\n  state.badges.global.status === 'error';\n\nexport const isChannelBadgesLoadedSelector = (state: RootState) =>\n  state.badges.byChannels[currentChannelSelector(state)]?.status ===\n    'success' ||\n  state.badges.byChannels[currentChannelSelector(state)]?.status === 'error';\n\nexport const isBadgesLoadedSelector = (state: RootState) =>\n  isGlobalBadgesLoadedSelector(state) && isChannelBadgesLoadedSelector(state);\n\nexport const globalBadgesSelector = (state: RootState) =>\n  state.badges.global.items;\n\nexport const channelBadgesSelector = (state: RootState) =>\n  state.badges.byChannels[currentChannelSelector(state)]?.items || {};\n\nexport const userBadgesImagesSelector = createSelector(\n  userBadgesSelector,\n  globalBadgesSelector,\n  channelBadgesSelector,\n  htmlEntity.createBadges,\n);\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport jwt from 'jsonwebtoken';\n\nimport { initializeAuth, fetchUser } from 'features/auth/authSlice';\nimport { isAuthReadySelector } from 'features/auth/authSelectors';\nimport { readUserFromLocatStorage } from 'features/auth/authUtils';\n\nconst useInitializeAuth = () => {\n  const dispatch = useDispatch();\n  const isAuthReady = useSelector(isAuthReadySelector);\n\n  useEffect(() => {\n    if (isAuthReady) return;\n\n    const { idToken } = localStorage;\n    const user = readUserFromLocatStorage();\n\n    if (!idToken) {\n      dispatch(initializeAuth({ isAuth: false }));\n      return;\n    }\n\n    if (user) {\n      const { id, login } = user;\n      const params = { isAuth: true, userId: id, userLogin: login };\n\n      dispatch(initializeAuth(params));\n    } else {\n      const jwtData = jwt.decode(idToken);\n\n      if (jwtData) {\n        dispatch(fetchUser(jwtData.sub));\n      } else {\n        dispatch(initializeAuth({ isAuth: false }));\n      }\n    }\n  }, [dispatch, isAuthReady]);\n};\n\nexport default useInitializeAuth;\n","import type { RootState } from 'app/rootReducer';\nimport { currentChannelSelector } from 'features/chat/chatSelectors';\n\nexport const messagesSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.items || [];\n\nexport const usersSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.users || [];\n\nexport const recentUserMessagesSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.recentUserMessages || [];\n\nexport const isHistoryLoadedSelector = (state: RootState) => {\n  const currentChannel = currentChannelSelector(state);\n\n  return (\n    state.messages[currentChannel]?.history.status === 'success' ||\n    state.messages[currentChannel]?.history.status === 'error' ||\n    false\n  );\n};\n\nexport const isHistoryAddedSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.history.isAdded || false;\n\nexport const isEvenSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.isEven || false;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  currentChannelSelector,\n  currentChannelIdSelector,\n} from 'features/chat/chatSelectors';\nimport {\n  isHistoryAddedSelector,\n  isHistoryLoadedSelector,\n} from 'features/messages/messagesSelectors';\nimport {\n  isTwitchEmotesLoadedSelector,\n  isBttvGlobalEmotesLoadedSelector,\n  isBttvChannelEmotesLoadedSelector,\n  isFfzGlobalEmotesLoadedSelector,\n  isFfzChannelEmotesLoadedSelector,\n} from 'features/emotes/emotesSelectors';\nimport {\n  isGlobalBadgesLoadedSelector,\n  isChannelBadgesLoadedSelector,\n} from 'features/badges/badgesSelectors';\nimport { isBlockedUsersLoadedSelector } from 'features/blockedUsers/blockedUsersSelectors';\nimport {\n  isAuthReadySelector,\n  isAuthSelector,\n  userIdSelector,\n} from 'features/auth/authSelectors';\nimport {\n  addRecentMessages,\n  fetchRecentMessages,\n} from 'features/messages/messagesSlice';\nimport {\n  fetchTwitchEmotes,\n  fetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes,\n  fetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes,\n} from 'features/emotes/emotesSlice';\nimport {\n  fetchChannelBadges,\n  fetchGlobalBadges,\n} from 'features/badges/badgesSlice';\nimport { fetchBlockedUsers } from 'features/blockedUsers/blockedUsersSlice';\n\nconst useFetchChatData = () => {\n  const dispatch = useDispatch();\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n  const userId = useSelector(userIdSelector);\n  const currentChannel = useSelector(currentChannelSelector);\n  const currentChannelId = useSelector(currentChannelIdSelector);\n\n  const isTwitchEmotesLoaded = useSelector(isTwitchEmotesLoadedSelector);\n  const isBttvGlobalEmotesLoaded = useSelector(\n    isBttvGlobalEmotesLoadedSelector,\n  );\n  const isBttvChannelEmotesLoaded = useSelector(\n    isBttvChannelEmotesLoadedSelector,\n  );\n  const isFfzGlobalEmotesLoaded = useSelector(isFfzGlobalEmotesLoadedSelector);\n  const isFfzChannelEmotesLoaded = useSelector(\n    isFfzChannelEmotesLoadedSelector,\n  );\n  const isGlobalBadgesLoaded = useSelector(isGlobalBadgesLoadedSelector);\n  const isChannelBadgesLoaded = useSelector(isChannelBadgesLoadedSelector);\n  const isHistoryLoaded = useSelector(isHistoryLoadedSelector);\n  const isBlockedUsersLoaded = useSelector(isBlockedUsersLoadedSelector);\n  const isHistoryAdded = useSelector(isHistoryAddedSelector);\n\n  const isAllEmotesLoaded =\n    (isAuth ? isTwitchEmotesLoaded : true) &&\n    isBttvGlobalEmotesLoaded &&\n    isBttvChannelEmotesLoaded &&\n    isFfzGlobalEmotesLoaded &&\n    isFfzChannelEmotesLoaded;\n\n  const isReadyToAddHistory =\n    isAuthReady &&\n    currentChannel &&\n    !isHistoryAdded &&\n    isAllEmotesLoaded &&\n    (isAuth ? isBlockedUsersLoaded : true) &&\n    isGlobalBadgesLoaded &&\n    isChannelBadgesLoaded &&\n    isHistoryLoaded;\n\n  useEffect(() => {\n    dispatch(fetchBttvGlobalEmotes());\n    dispatch(fetchFfzGlobalEmotes());\n    dispatch(fetchGlobalBadges());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (isReadyToAddHistory) {\n      dispatch(addRecentMessages(currentChannel));\n    }\n  }, [dispatch, currentChannel, isReadyToAddHistory]);\n\n  useEffect(() => {\n    if (!isHistoryAdded && currentChannel) {\n      dispatch(fetchRecentMessages(currentChannel));\n    }\n  }, [dispatch, currentChannel, isHistoryAdded]);\n\n  useEffect(() => {\n    if (isAuthReady && isAuth && userId) {\n      dispatch(fetchTwitchEmotes(userId));\n      dispatch(fetchBlockedUsers(userId));\n    }\n  }, [dispatch, isAuthReady, isAuth, userId]);\n\n  // TODO: check if emotes and badges is already in the store\n\n  useEffect(() => {\n    if (currentChannel && currentChannelId) {\n      const params = {\n        channel: currentChannel,\n        channelId: currentChannelId,\n      };\n\n      dispatch(fetchBttvChannelEmotes(params));\n      dispatch(fetchFfzChannelEmotes(params));\n      dispatch(fetchChannelBadges(params));\n    }\n  }, [dispatch, currentChannel, currentChannelId]);\n};\n\nexport default useFetchChatData;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { LS_LAST_CHANNEL } from 'utils/constants';\nimport { updateCurrentChannel } from 'features/chat/chatSlice';\n\n// TODO: remove lastChannel if can't connect to the channel\n\nconst useCurrentChannel = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { hash } = history.location;\n\n  useEffect(() => {\n    if (hash && hash.length > 1) {\n      const channel = hash.slice(1);\n\n      dispatch(updateCurrentChannel(channel));\n\n      localStorage.setItem(LS_LAST_CHANNEL, channel);\n\n      document.title = channel\n        ? `#${channel} - ${process.env.REACT_APP_NAME} `\n        : (process.env.REACT_APP_NAME as string);\n\n      return;\n    }\n\n    const lastChannel = localStorage.getItem(LS_LAST_CHANNEL);\n\n    if (lastChannel) {\n      history.push({ pathname: '/chat/', hash: lastChannel });\n\n      dispatch(updateCurrentChannel(lastChannel));\n    } else {\n      dispatch(updateCurrentChannel(''));\n    }\n  }, [dispatch, history, hash]);\n};\n\nexport default useCurrentChannel;\n","import emojisMap from 'features/emotes/emojisMap.json';\n\nconst replaceEmojis = (text: string) =>\n  text\n    .split(' ')\n    .map((word: string) => {\n      if (word[0] !== ':' || word[word.length - 1] !== ':') {\n        return word;\n      }\n\n      const name = word.slice(1, -1);\n      const emoji = emojisMap[name];\n\n      return emoji && emoji.char ? emoji.char : word;\n    })\n    .join(' ');\n\nexport default replaceEmojis;\n","import { useEffect, useRef, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as twitchIrc from 'twitch-simple-irc';\nimport { usePrevious } from 'react-use';\n\nimport { NOTICE_MESSAGE_TAGS, LS_ACCESS_TOKEN } from 'utils/constants';\nimport {\n  updateIsConnected,\n  updateGlobalUserParams,\n  updateUserParams,\n  updateRoomParams,\n} from 'features/chat/chatSlice';\nimport { recieveMessage, clearChat } from 'features/messages/messagesSlice';\nimport { invalidateAuth } from 'features/auth/authSlice';\nimport {\n  currentChannelSelector,\n  isConnectedSelector,\n} from 'features/chat/chatSelectors';\nimport {\n  isAuthSelector,\n  isAuthReadySelector,\n  userLoginSelector,\n} from 'features/auth/authSelectors';\nimport replaceEmojis from 'features/messages/utils/replaceEmojis';\n\nconst useTwitchClient = () => {\n  const dispatch = useDispatch();\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n  const userLogin = useSelector(userLoginSelector);\n  const isConnected = useSelector(isConnectedSelector);\n  const currentChannel = useSelector(currentChannelSelector);\n  const prevChannel = usePrevious(currentChannel);\n  const clientRef = useRef<twitchIrc.Client | null>(null);\n\n  const registerEvents = useCallback(\n    (client: typeof clientRef) => {\n      if (!client.current) return;\n\n      const handleRegister = () => dispatch(updateIsConnected(true));\n\n      const handleDisconnect = () => dispatch(updateIsConnected(false));\n\n      const handleGlobalUserState = (data: twitchIrc.GlobalUserStateEvent) =>\n        dispatch(updateGlobalUserParams(data));\n\n      const handleUserState = (data: twitchIrc.UserStateEvent) =>\n        dispatch(updateUserParams(data));\n\n      const handleRoomState = (data: twitchIrc.RoomStateEvent) =>\n        dispatch(updateRoomParams(data));\n\n      const handleMessage = (message: twitchIrc.MessageEvent) => {\n        dispatch(recieveMessage({ type: 'message', message }));\n      };\n\n      const handleNotice = (message: twitchIrc.NoticeEvent) => {\n        if (\n          client.current &&\n          message.message === 'Login authentication failed'\n        ) {\n          dispatch(invalidateAuth());\n          client.current.disconnect();\n          // eslint-disable-next-line no-param-reassign\n          client.current = null;\n          return;\n        }\n\n        dispatch(recieveMessage({ type: 'notice', message }));\n      };\n\n      const handleUserNotice = (message: twitchIrc.UserNoticeEvent) =>\n        dispatch(recieveMessage({ type: 'user-notice', message }));\n\n      const handleClearChat = (data: twitchIrc.ClearChatEvent) => {\n        if (!data.tags.targetUserId) return;\n        dispatch(clearChat(data));\n      };\n\n      client.current.on('register', handleRegister);\n      client.current.on('disconnect', handleDisconnect);\n      client.current.on('globaluserstate', handleGlobalUserState);\n      client.current.on('userstate', handleUserState);\n      client.current.on('roomstate', handleRoomState);\n      client.current.on('message', handleMessage);\n      client.current.on('notice', handleNotice);\n      client.current.on('usernotice', handleUserNotice);\n      client.current.on('clearchat', handleClearChat);\n    },\n    [dispatch],\n  );\n\n  useEffect(() => {\n    return () => {\n      if (clientRef.current) {\n        clientRef.current.disconnect();\n        clientRef.current = null;\n      }\n    };\n  }, [clientRef]);\n\n  useEffect(() => {\n    if (!currentChannel || !isAuthReady) return;\n\n    if (!clientRef.current) {\n      const options = isAuth\n        ? {\n            name: userLogin as string,\n            auth: localStorage.getItem(LS_ACCESS_TOKEN) as string,\n          }\n        : null;\n\n      (async () => {\n        clientRef.current = new twitchIrc.Client(options);\n\n        registerEvents(clientRef);\n\n        await clientRef.current.connect();\n\n        clientRef.current.join(currentChannel);\n      })();\n\n      return;\n    }\n\n    if (prevChannel && prevChannel !== currentChannel) {\n      clientRef.current.part(prevChannel);\n      clientRef.current.join(currentChannel);\n    }\n  }, [\n    dispatch,\n    registerEvents,\n    isAuth,\n    isAuthReady,\n    isConnected,\n    userLogin,\n    currentChannel,\n    prevChannel,\n  ]);\n\n  const sendMessage = useCallback(\n    (channel: string, message: string) => {\n      if (!clientRef.current || !message.trim()) return;\n\n      const normalizedMessage = replaceEmojis(message.trim());\n\n      clientRef.current.say(channel, normalizedMessage);\n\n      function handleUserState(data: twitchIrc.UserStateEvent) {\n        if (data.channel === channel) {\n          const ownMessage = {\n            message: normalizedMessage,\n            channel,\n            tags: data.tags,\n          };\n\n          dispatch(\n            recieveMessage({ type: 'own-message', message: ownMessage }),\n          );\n\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          removeListeners();\n        }\n      }\n\n      function handleNotice(data: twitchIrc.NoticeEvent) {\n        if (\n          data.channel === channel &&\n          NOTICE_MESSAGE_TAGS.includes(data.tags.msgId)\n        ) {\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          removeListeners();\n        }\n      }\n\n      function removeListeners() {\n        if (!clientRef.current) return;\n\n        clientRef.current.off('notice', handleNotice);\n        clientRef.current.off('userstate', handleUserState);\n      }\n\n      clientRef.current.on('notice', handleNotice);\n      clientRef.current.on('userstate', handleUserState);\n\n      setTimeout(() => removeListeners(), 10000);\n    },\n    [clientRef, dispatch],\n  );\n\n  return { sendMessage };\n};\n\nexport default useTwitchClient;\n","const getUsersByBeginText = (beginText: string, users: string[], limit = 5) => {\n  const result = [];\n  const beginTextLower = beginText.toLowerCase();\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const name of users) {\n    if (result.length === limit) return result;\n\n    const nameLower = name.toLowerCase();\n\n    if (beginTextLower === '' || nameLower.startsWith(beginTextLower)) {\n      result.push(name);\n    }\n  }\n\n  return result;\n};\n\nexport default getUsersByBeginText;\n","import * as htmlEntity from 'features/messages/utils/htmlEntity';\n\ntype ASuggestions = {\n  isActive: boolean;\n  activeIndex: number;\n  start: number;\n  end: number;\n};\ntype UserSuggestions = ASuggestions & {\n  type: 'users';\n  items: string[];\n};\ntype EmoteSuggestions = ASuggestions & {\n  type: 'emotes';\n  items: htmlEntity.Emote[];\n};\nexport type SuggestionsState = UserSuggestions | EmoteSuggestions;\n\nexport const suggestionsInitialState: SuggestionsState = {\n  type: 'users',\n  isActive: false,\n  items: [],\n  activeIndex: 0,\n  start: 0,\n  end: 0,\n};\n\nexport const setSuggestionsIndexUp = (\n  state: SuggestionsState,\n): SuggestionsState => ({\n  ...state,\n  activeIndex:\n    state.activeIndex === 0 ? state.items.length - 1 : state.activeIndex - 1,\n});\n\nexport const setSuggestionsIndexDown = (\n  state: SuggestionsState,\n): SuggestionsState => ({\n  ...state,\n  activeIndex:\n    state.activeIndex === state.items.length - 1 ? 0 : state.activeIndex + 1,\n});\n\nexport const replaceSuggestionText = (\n  text: string,\n  { type, items, activeIndex, start, end }: SuggestionsState,\n) => {\n  if (items.length === 0) return text;\n\n  const currentItem = items[activeIndex];\n  const insertedText =\n    type === 'users'\n      ? `@${currentItem}`\n      : (currentItem as htmlEntity.Emote).alt;\n\n  const textBefore = text.substring(0, start);\n  const testAfter = text.substring(end) || ' ';\n\n  return `${textBefore}${insertedText}${testAfter}`;\n};\n","import { useState, useRef, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useSetState } from 'react-use';\n\nimport { SUGGESTION_TYPES } from 'utils/constants';\nimport getUsersByBeginText from 'features/chat/utils/getUsersByBeginText';\nimport {\n  suggestionsInitialState,\n  setSuggestionsIndexUp,\n  setSuggestionsIndexDown,\n  replaceSuggestionText,\n} from 'features/chat/utils/suggestions';\nimport getEmotesByText from 'features/emotes/utils/getEmotesByText';\n\nimport {\n  usersSelector,\n  recentUserMessagesSelector,\n} from 'features/messages/messagesSelectors';\nimport { currentChannelSelector } from 'features/chat/chatSelectors';\nimport { emotesSelector } from 'features/emotes/emotesSelectors';\n\nconst useChatInput = (\n  sendMessage: (channel: string, message: string) => void,\n  chatInputRef: React.RefObject<HTMLTextAreaElement>,\n) => {\n  const [inputText, setInputText] = useState('');\n  const [suggestions, setSuggestions] = useSetState(suggestionsInitialState);\n  const [recentUserMessagesIndex, setRecentUserMessagesIndex] = useState(-1);\n\n  const emotes = useSelector(emotesSelector);\n  const users = useSelector(usersSelector);\n  const currentChannel = useSelector(currentChannelSelector);\n  const recentUserMessages = useSelector(recentUserMessagesSelector);\n\n  const handleSendMessage = useCallback(() => {\n    sendMessage(currentChannel, inputText);\n    setInputText('');\n    setRecentUserMessagesIndex(-1);\n  }, [currentChannel, sendMessage, inputText]);\n\n  const getDeps = () => ({\n    chatInputRef,\n    inputText,\n    setInputText,\n    suggestions,\n    setSuggestions,\n    recentUserMessagesIndex,\n    setRecentUserMessagesIndex,\n    emotes,\n    users,\n    recentUserMessages: [...recentUserMessages, ''],\n    handleSendMessage,\n  });\n\n  const deps = useRef({} as ReturnType<typeof getDeps>);\n\n  deps.current = getDeps();\n\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      const d = deps.current;\n      const { value, selectionStart } = e.target;\n\n      d.setInputText(value);\n\n      const spaceIndexBefore = value.lastIndexOf(' ', selectionStart - 1);\n      const spaceIndexAfter = value.indexOf(' ', selectionStart);\n\n      const start = spaceIndexBefore === -1 ? 0 : spaceIndexBefore + 1;\n      const end = spaceIndexAfter === -1 ? value.length : spaceIndexAfter;\n\n      const word = value.substring(start, end);\n\n      const usersMatch = SUGGESTION_TYPES.users.regex.exec(word);\n\n      if (usersMatch) {\n        const [, beginText] = usersMatch;\n        const items = getUsersByBeginText(\n          beginText,\n          d.users,\n          SUGGESTION_TYPES.users.limit,\n        );\n\n        d.setSuggestions({\n          type: 'users',\n          isActive: true,\n          items,\n          activeIndex: 0,\n          start,\n          end,\n        });\n\n        return;\n      }\n\n      const emotesMatch = SUGGESTION_TYPES.emotes.regex.exec(word);\n\n      if (emotesMatch && d.emotes) {\n        const [, text] = emotesMatch;\n        const items = getEmotesByText(\n          text,\n          d.emotes,\n          SUGGESTION_TYPES.emotes.limit,\n        );\n\n        d.setSuggestions({\n          type: 'emotes',\n          isActive: true,\n          items,\n          activeIndex: 0,\n          start,\n          end,\n        });\n\n        return;\n      }\n\n      if (d.suggestions.isActive) {\n        d.setSuggestions(suggestionsInitialState);\n      }\n    },\n    [deps],\n  );\n\n  const handleKeyUp = useCallback(\n    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {},\n    [],\n  );\n\n  const handleKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n      const d = deps.current;\n\n      if (d.suggestions.isActive) {\n        if (e.key === 'Enter' || e.key === 'Tab') {\n          e.preventDefault();\n          d.setInputText((t) => replaceSuggestionText(t, d.suggestions));\n          d.setSuggestions(suggestionsInitialState);\n\n          return;\n        }\n\n        if (e.key === 'ArrowUp') {\n          e.preventDefault();\n          d.setSuggestions(setSuggestionsIndexUp);\n          return;\n        }\n\n        if (e.key === 'ArrowDown') {\n          e.preventDefault();\n          d.setSuggestions(setSuggestionsIndexDown);\n          return;\n        }\n\n        if (e.key === 'Escape') {\n          d.setSuggestions({ isActive: false });\n          return;\n        }\n      }\n\n      if (!d.suggestions.isActive) {\n        if (e.key === 'Enter') {\n          e.preventDefault();\n          d.handleSendMessage();\n          return;\n        }\n\n        if (e.key === 'ArrowUp') {\n          const isCaretAtBegin =\n            (e.target as HTMLTextAreaElement).selectionStart === 0;\n\n          if (!isCaretAtBegin) return;\n          if (d.recentUserMessagesIndex >= d.recentUserMessages.length - 1)\n            return;\n\n          const newIndex = d.recentUserMessagesIndex + 1;\n\n          d.setInputText(d.recentUserMessages[newIndex]);\n          d.setRecentUserMessagesIndex(newIndex);\n\n          return;\n        }\n\n        if (e.key === 'ArrowDown') {\n          const isCaretAtEnd =\n            (e.target as HTMLTextAreaElement).selectionStart ===\n            (e.target as HTMLTextAreaElement).defaultValue.length;\n\n          if (!isCaretAtEnd) return;\n          if (d.recentUserMessagesIndex <= 0) return;\n\n          const newIndex = d.recentUserMessagesIndex - 1;\n\n          d.setInputText(d.recentUserMessages[newIndex]);\n          d.setRecentUserMessagesIndex(newIndex);\n\n          // eslint-disable-next-line no-useless-return\n          return;\n        }\n      }\n    },\n    [deps],\n  );\n\n  const handleSuggestionMouseEnter = useCallback(\n    (activeIndex: number) => setSuggestions({ activeIndex }),\n    [setSuggestions],\n  );\n\n  const handleSuggestionClick = useCallback(\n    (activeIndex: number) => {\n      const d = deps.current;\n\n      d.setInputText((t) =>\n        replaceSuggestionText(t, { ...d.suggestions, activeIndex }),\n      );\n\n      if (d.chatInputRef.current) {\n        d.chatInputRef.current.focus();\n      }\n\n      d.setSuggestions(suggestionsInitialState);\n    },\n    [deps],\n  );\n\n  const handleBlur = useCallback(() => {\n    setSuggestions({ isActive: false });\n  }, [setSuggestions]);\n\n  const handleNameRightClick = useCallback(\n    (name: string) => {\n      const d = deps.current;\n      d.setInputText((t) => `${t.trim()} @${name} `.trimLeft());\n\n      if (d.chatInputRef.current) {\n        d.chatInputRef.current.focus();\n      }\n    },\n    [deps],\n  );\n\n  const handleEmoteClick = useCallback(\n    (name: string) => {\n      const d = deps.current;\n\n      d.setInputText((t) => `${t.trim()} ${name} `.trimLeft());\n    },\n    [deps],\n  );\n\n  return {\n    inputText,\n    suggestions,\n    handleSendMessage,\n    handleChange,\n    handleKeyUp,\n    handleKeyDown,\n    handleBlur,\n    handleSuggestionMouseEnter,\n    handleSuggestionClick,\n    handleNameRightClick,\n    handleEmoteClick,\n  };\n};\n\nexport default useChatInput;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M8.5 10L4 5.5 5.5 4 10 8.5 14.5 4 16 5.5 11.5 10l4.5 4.5-1.5 1.5-4.5-4.5L5.5 16 4 14.5 8.5 10z\"\n});\n\nconst SvgClose = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 20 20\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref);\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgClose, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/close.992b249e.svg\";\nexport { ForwardRef as ReactComponent };","import styled, { css } from 'styled-components';\n\nconst sizes = {\n  small: css`\n    width: 24px;\n    height: 24px;\n  `,\n  medium: css`\n    width: 30px;\n    height: 30px;\n  `,\n  // large: css``,\n};\n\nconst IconButton = styled.button.attrs({\n  type: 'button',\n})<{ $size?: 'small' | 'medium' }>`\n  margin: 0;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: none;\n  border: none;\n  outline: none;\n  color: #fff;\n  border-radius: 4px;\n  cursor: pointer;\n\n  ${(p) => sizes[p.$size || 'medium']};\n\n  &:hover,\n  &:focus {\n    background-color: rgba(255, 255, 255, 0.15);\n  }\n\n  &:active {\n    background-color: rgba(255, 255, 255, 0.2);\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n`;\n\nexport default IconButton;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { ReactComponent as CloseIconSvg } from 'icons/close.svg';\nimport IconButton from 'components/IconButton';\n\nconst ChatModalRoot = styled.div`\n  height: 100%;\n  box-shadow: rgba(0, 0, 0, 0.4) 0px 4px 8px 0px,\n    rgba(0, 0, 0, 0.4) 0px 0px 4px 0px;\n  background-color: #18181b;\n  white-space: normal;\n  color: #fff;\n  border-radius: 4px;\n`;\nconst CloseButton = styled(IconButton).attrs({ $size: 'small' })`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n`;\nconst CloseIcon = styled(CloseIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  children: React.ReactNode;\n  onClose: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n};\n\nconst ChatModal = ({ children, onClose }: Props) => (\n  <ChatModalRoot>\n    <CloseButton onClick={onClose}>\n      <CloseIcon />\n    </CloseButton>\n    {children}\n  </ChatModalRoot>\n);\n\nexport default ChatModal;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"currentColor\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M7 11a1 1 0 100-2 1 1 0 000 2zm7-1a1 1 0 11-2 0 1 1 0 012 0zm-4 4a2 2 0 002-2H8a2 2 0 002 2z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-2 0a6 6 0 11-12 0 6 6 0 0112 0z\",\n  clipRule: \"evenodd\"\n}));\n\nconst SvgSmileyFace = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 20 20\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref);\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgSmileyFace, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/smiley-face.1cc055ed.svg\";\nexport { ForwardRef as ReactComponent };","import CustomScrollbar from 'react-scrollbars-custom';\nimport styled from 'styled-components';\n\nconst Scrollbar = styled(CustomScrollbar).attrs({\n  disableTracksWidthCompensation: true,\n})`\n  overflow-y: auto;\n\n  .ScrollbarsCustom-Content {\n    padding: 0 !important;\n  }\n\n  .ScrollbarsCustom-TrackY {\n    background: none !important;\n  }\n\n  .ScrollbarsCustom-ThumbY {\n    margin-left: auto;\n    margin-right: auto;\n    width: 6px !important;\n  }\n`;\n\nexport default Scrollbar;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  fillRule: \"evenodd\",\n  d: \"M13.192 14.606a7 7 0 111.414-1.414l3.101 3.1-1.414 1.415-3.1-3.1zM14 9A5 5 0 114 9a5 5 0 0110 0z\",\n  clipRule: \"evenodd\"\n});\n\nconst SvgSearch = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 20 20\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref);\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgSearch, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/search.a2f0945f.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport type { RootState } from 'app/rootReducer';\nimport Scrollbar from 'components/Scrollbar';\nimport { emoteCategoriesSelector } from 'features/emotes/emotesSelectors';\nimport type { EmoteCategory } from 'features/emotes/utils/createEmoteCategories';\nimport { ReactComponent as SearchIconSvg } from 'icons/search.svg';\n\nconst EmotePickerRoot = styled.div`\n  padding-top: 30px;\n  padding-bottom: 16px;\n  height: 100%;\n`;\nconst Categories = styled.div`\n  height: calc(100% - 30px);\n`;\nconst Category = styled.div`\n  padding-top: 10px;\n  padding-right: 16px;\n  padding-left: 16px;\n\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding-bottom: 10px;\n  font-size: 12px;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst CategoryItems = styled.div``;\nconst Emote = styled.img`\n  padding: 2px;\n  width: 32px;\n  height: 32px;\n  object-fit: contain;\n\n  &:hover {\n    background-color: rgba(119, 44, 232, 0.2);\n    cursor: pointer;\n  }\n`;\nconst SearchBlock = styled.div`\n  position: relative;\n  padding: 0 16px;\n  color: #adadb8;\n`;\nconst SearchInput = styled.input`\n  padding-left: 30px;\n  padding-right: 10px;\n  width: 100%;\n  height: 30px;\n  color: #efeff1;\n  font-family: inherit;\n  line-height: 1.5;\n  background-clip: padding-box;\n  background-color: rgba(255, 255, 255, 0.15);\n  border: 2px solid rgba(255, 255, 255, 0.15);\n  outline: 0;\n  border-radius: 4px;\n  appearance: none;\n  transition: box-shadow 0.1s ease-in, border 0.1s ease-in,\n    background-color 0.1s ease-in;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n`;\nconst SearchIcon = styled(SearchIconSvg)`\n  position: absolute;\n  top: 50%;\n  left: 21px;\n  display: block;\n  width: 20px;\n  height: 20px;\n  transform: translateY(-50%);\n`;\n\ntype Props = {\n  onEmoteClick: (name: string) => void;\n};\n\nconst EmotePicker = ({ onEmoteClick }: Props) => {\n  const [search, setSearch] = useState('');\n  const searchInputRef = useRef<HTMLInputElement>(null);\n  const emoteCategories = useSelector((state: RootState) =>\n    emoteCategoriesSelector(state, search),\n  );\n\n  useEffect(() => {\n    if (searchInputRef.current) {\n      searchInputRef.current.focus();\n    }\n\n    return () => setSearch('');\n  }, []);\n\n  const renderCategory = ({ title, items }: EmoteCategory, key: number) => (\n    <Category key={key}>\n      {!!title && <CategoryHeader>{title}</CategoryHeader>}\n      <CategoryItems>\n        {items.map(({ alt, src, srcSet }) => (\n          <Emote\n            key={alt}\n            alt={alt}\n            src={src}\n            srcSet={srcSet}\n            onClick={() => onEmoteClick(alt)}\n          />\n        ))}\n      </CategoryItems>\n    </Category>\n  );\n\n  return (\n    <EmotePickerRoot>\n      <SearchBlock>\n        <SearchIcon />\n        <SearchInput\n          ref={searchInputRef}\n          placeholder=\"Search for Emotes\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n        />\n      </SearchBlock>\n      <Categories>\n        <Scrollbar>{emoteCategories.map(renderCategory)}</Scrollbar>\n      </Categories>\n    </EmotePickerRoot>\n  );\n};\n\nexport default EmotePicker;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport useOnClickOutside from 'react-cool-onclickoutside';\n\nimport ChatModal from 'components/ChatModal';\nimport IconButton from 'components/IconButton';\nimport { ReactComponent as SmileyFaceIconSvg } from 'icons/smiley-face.svg';\nimport EmotePicker from 'features/emotes/EmotePicker';\nimport type { SuggestionsState } from 'features/chat/utils/suggestions';\nimport { isEmotesLoadedSelector } from 'features/emotes/emotesSelectors';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\n\nconst ChatInputRoot = styled.div`\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n  background-color: #18181b;\n\n  & > :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nconst ChatInputInner = styled.div`\n  position: relative;\n`;\nconst Suggestions = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 100%;\n  margin-left: -5px;\n  margin-bottom: -5px;\n  margin-right: -5px;\n  margin-bottom: 0;\n  padding-top: 10px;\n  padding-bottom: 5px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border: 1px solid rgba(255, 255, 255, 0.15);\n  border-bottom: none;\n  background-color: #18181b;\n  color: #fff;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n  /* box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15), 0 0px 2px rgba(0, 0, 0, 0.1); */\n`;\nconst SuggestionItem = styled.div<{ $isActive: boolean }>`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border-radius: 2px;\n  background-color: ${(p) =>\n    p.$isActive ? 'rgba(255, 255, 255, 0.15)' : 'transparent'};\n  cursor: pointer;\n`;\nconst SuggestionImage = styled.img`\n  margin-right: 8px;\n  width: 28px;\n  height: 28px;\n  object-fit: contain;\n`;\nconst TextareaInput = styled.div`\n  position: relative;\n`;\nconst TextareaWrapper = styled.div<{ $isSuggestions: boolean }>`\n  ${(p) =>\n    p.$isSuggestions &&\n    css`\n      margin-left: -5px;\n      margin-bottom: -5px;\n      margin-right: -5px;\n      padding: 5px;\n      border: 1px solid rgba(255, 255, 255, 0.15);\n      border-top: none;\n      border-bottom-left-radius: 6px;\n      border-bottom-right-radius: 6px;\n      /* box-shadow: 0 2px 3px -1px rgba(0, 0, 0, 0.1),\n        0 2px 2px -2px rgba(0, 0, 0, 0.02); */\n\n      & > ${TextareaInput} {\n        margin-left: -1px;\n        margin-bottom: -1px;\n        margin-right: -1px;\n      }\n    `};\n`;\nconst EmotesModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 0;\n  bottom: 100%;\n  margin-bottom: 8px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nconst Textarea = styled(TextareaAutosize)<{ $showScroll: boolean }>`\n  display: block;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  padding-left: 10px;\n  padding-right: 32px;\n  width: 100%;\n  height: 38px;\n  max-height: 91px;\n  min-height: 40px;\n  overflow-x: hidden;\n  overflow-y: ${(p) => (p.$showScroll ? 'auto' : 'hidden')};\n  border: 2px solid transparent;\n  background-color: rgba(255, 255, 255, 0.15);\n  font-family: inherit;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\nconst EmotesButton = styled(IconButton)`\n  position: absolute;\n  right: 5px;\n  bottom: 5px;\n`;\nconst SmileyFaceIcon = styled(SmileyFaceIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  text: string;\n  suggestions: SuggestionsState;\n  isDisabled: boolean;\n  onEmoteClick: (name: string) => void;\n  onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onKeyUp: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur: () => void;\n  onSuggestionMouseEnter: (index: number) => void;\n  onSuggestionClick: (index: number) => void;\n};\n\nconst ChatInput = React.forwardRef<HTMLTextAreaElement, Props>(\n  (\n    {\n      text,\n      suggestions,\n      isDisabled,\n      onEmoteClick,\n      onChange,\n      onKeyUp,\n      onKeyDown,\n      onBlur,\n      onSuggestionMouseEnter,\n      onSuggestionClick,\n    },\n    textareaRef,\n  ) => {\n    const suggestionsRef = useRef<HTMLDivElement>(null);\n\n    useOnClickOutside(() => onBlur(), {\n      refs: [textareaRef as React.RefObject<HTMLElement>, suggestionsRef],\n    });\n\n    const [isShowTextareaScroll, setIsShowTextareaScroll] = useState(false);\n    const [isEmotesModalVisible, setIsEmotesModalVisible] = useState(false);\n    const isEmotesLoaded = useSelector(isEmotesLoadedSelector);\n    const handleCloseEmotesModal = () => setIsEmotesModalVisible(false);\n\n    const chatInputRef = useOnClickOutside(handleCloseEmotesModal);\n\n    const renderSuggestions = ({\n      type,\n      items,\n      activeIndex,\n    }: SuggestionsState) => {\n      const renderUser = (name: string, index: number) => (\n        <SuggestionItem\n          key={name}\n          $isActive={index === activeIndex}\n          onMouseEnter={() => onSuggestionMouseEnter(index)}\n          onClick={() => onSuggestionClick(index)}\n        >\n          {name}\n        </SuggestionItem>\n      );\n\n      const renderEmote = (\n        { src, srcSet, alt }: htmlEntity.Emote,\n        index: number,\n      ) => (\n        <SuggestionItem\n          key={alt}\n          $isActive={index === activeIndex}\n          onMouseEnter={() => onSuggestionMouseEnter(index)}\n          onClick={() => onSuggestionClick(index)}\n        >\n          <SuggestionImage src={src} srcSet={srcSet} alt={alt} />\n          {alt}\n        </SuggestionItem>\n      );\n\n      const renderItems = () =>\n        type === 'users'\n          ? (items as string[]).map(renderUser)\n          : (items as htmlEntity.Emote[]).map(renderEmote);\n\n      return (\n        <Suggestions ref={suggestionsRef}>\n          {items.length ? renderItems() : 'No matches'}\n        </Suggestions>\n      );\n    };\n\n    const renderEmotesButton = () => (\n      <EmotesButton\n        onClick={() => setIsEmotesModalVisible(!isEmotesModalVisible)}\n      >\n        <SmileyFaceIcon />\n      </EmotesButton>\n    );\n\n    const renderEmotesModal = () => (\n      <EmotesModal>\n        <ChatModal onClose={handleCloseEmotesModal}>\n          <EmotePicker onEmoteClick={onEmoteClick} />\n        </ChatModal>\n      </EmotesModal>\n    );\n\n    const handleHeightChange = (height: number) =>\n      setIsShowTextareaScroll(height >= 96);\n\n    return (\n      <ChatInputRoot ref={chatInputRef}>\n        <ChatInputInner>\n          {suggestions.isActive && renderSuggestions(suggestions)}\n          <TextareaWrapper $isSuggestions={suggestions.isActive}>\n            <TextareaInput>\n              <Textarea\n                ref={textareaRef}\n                value={text}\n                placeholder=\"Send a message\"\n                maxLength={500}\n                maxRows={4}\n                disabled={isDisabled}\n                $showScroll={isShowTextareaScroll}\n                onChange={onChange}\n                onKeyUp={onKeyUp}\n                onKeyDown={onKeyDown}\n                onHeightChange={handleHeightChange}\n              />\n              {isEmotesLoaded && renderEmotesButton()}\n            </TextareaInput>\n          </TextareaWrapper>\n          {isEmotesModalVisible && renderEmotesModal()}\n        </ChatInputInner>\n      </ChatInputRoot>\n    );\n  },\n);\n\nexport default React.memo(ChatInput);\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"currentColor\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 8a2 2 0 100 4 2 2 0 000-4z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M9 2h2a2.01 2.01 0 001.235 1.855l.53.22a2.01 2.01 0 002.185-.439l1.414 1.414a2.01 2.01 0 00-.439 2.185l.22.53A2.01 2.01 0 0018 9v2a2.01 2.01 0 00-1.855 1.235l-.22.53a2.01 2.01 0 00.44 2.185l-1.415 1.414a2.01 2.01 0 00-2.184-.439l-.531.22A2.01 2.01 0 0011 18H9a2.01 2.01 0 00-1.235-1.854l-.53-.22a2.009 2.009 0 00-2.185.438L3.636 14.95a2.009 2.009 0 00.438-2.184l-.22-.531A2.01 2.01 0 002 11V9c.809 0 1.545-.487 1.854-1.235l.22-.53a2.009 2.009 0 00-.438-2.185L5.05 3.636a2.01 2.01 0 002.185.438l.53-.22A2.01 2.01 0 009 2zm-4 8l1.464 3.536L10 15l3.535-1.464L15 10l-1.465-3.536L10 5 6.464 6.464 5 10z\",\n  clipRule: \"evenodd\"\n}));\n\nconst SvgGears = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 20 20\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref);\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgGears, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/gears.5f76af43.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M13 8l-5 5v18h6v5l5-5h4l9-9V8z\"\n});\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#9147ff\",\n  d: \"M26 25l4-4V10H14v15h4v4l4-4z\"\n});\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M20 14h2v6h-2v-6zm7 0v6h-2v-6h2z\"\n});\n\nconst SvgTwitch = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 40 40\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref, _ref2, _ref3);\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgTwitch, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/twitch.75e6e194.svg\";\nexport { ForwardRef as ReactComponent };","import styled from 'styled-components';\n\nconst Button = styled.button.attrs({ type: 'button' })`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0 10px;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #9147ff;\n  outline: none;\n  font-size: 12px;\n  border-radius: 4px;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #772ce8;\n  }\n\n  &:active {\n    background-color: #5c16c5;\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n\n  &[disabled] {\n    background-color: rgba(255, 255, 255, 0.26);\n    color: rgba(255, 255, 255, 0.8);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst SwitchRoot = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  line-height: 20px;\n`;\nconst Label = styled.label`\n  content: '';\n  position: relative;\n  display: inline-block;\n  order: 0;\n  width: 35px;\n  height: 20px;\n  vertical-align: bottom;\n  border-radius: 10px/50%;\n  background-color: rgba(0, 0, 0, 0.3);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15), 0 0 2px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.1s ease;\n  cursor: pointer;\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    bottom: 2px;\n    display: block;\n    width: 16px;\n    border-radius: 50%;\n    background-color: #fff;\n    transition: left 0.1s ease;\n  }\n`;\nconst Input = styled.input.attrs({ type: 'checkbox' })`\n  position: absolute;\n  opacity: 0;\n\n  &:checked + ${Label} {\n    background-color: #9147ff;\n\n    &:after {\n      content: '';\n      top: 2px;\n      left: calc(100% - 18px);\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 9px;\n      left: 10px;\n      display: block;\n      height: 3px;\n      width: 7px;\n      border-bottom: 2px solid #fff;\n      border-left: 2px solid #fff;\n      transform: translate3d(-50%, -50%, 0) rotate(-45deg);\n    }\n  }\n`;\n\ntype Props = {\n  id: string;\n  label: string;\n  checked?: boolean;\n  readOnly?: boolean;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst Switch = ({ id, label, checked, readOnly, onChange }: Props) => (\n  <SwitchRoot>\n    <Input\n      id={id}\n      aria-label={label}\n      checked={checked}\n      readOnly={readOnly}\n      onChange={onChange}\n    />\n    <Label htmlFor={id} />\n  </SwitchRoot>\n);\n\nSwitch.defaultProps = {\n  checked: false,\n  readOnly: false,\n  onChange: () => {},\n};\n\nexport default Switch;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport Scrollbar from 'components/Scrollbar';\nimport Switch from 'components/Switch';\nimport { optionsSelector } from 'features/options/optionsSelectors';\nimport { isAuthSelector } from 'features/auth/authSelectors';\nimport {\n  userDisplayNameSelector,\n  userColorSelector,\n} from 'features/chat/chatSelectors';\nimport { userBadgesImagesSelector } from 'features/badges/badgesSelectors';\nimport { changeOption } from 'features/options/optionsSlice';\n\nconst OptionsRoot = styled.div`\n  padding: 16px;\n  height: 100%;\n`;\nconst Header = styled.h2`\n  margin: 0;\n  padding: 0;\n  font-size: 14px;\n  text-align: center;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst Categories = styled(Scrollbar)`\n  height: 100%;\n`;\nconst Category = styled.div`\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding: 8px 0;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst CategoryItems = styled.div``;\nconst Option = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 4px 0;\n  cursor: pointer;\n`;\nconst OptionText = styled.span``;\nconst Profile = styled.div`\n  display: flex;\n  align-items: center;\n`;\nconst UserName = styled.div`\n  font-weight: bold;\n  color: ${(p) => p.color};\n`;\nconst LogOutButton = styled(Link)`\n  margin-left: auto;\n  color: #bf94ff;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Badge = styled.img`\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst Options = () => {\n  const dispatch = useDispatch();\n  const options = useSelector(optionsSelector);\n\n  const isAuth = useSelector(isAuthSelector);\n\n  const userDisplayName = useSelector(userDisplayNameSelector);\n  const userColor = useSelector(userColorSelector);\n  const userBadgesImages = useSelector(userBadgesImagesSelector);\n\n  const renderOption = useCallback(\n    ({ id, name, title, description, value }) => (\n      <Option\n        key={id}\n        onClick={() => dispatch(changeOption({ name, value: !value }))}\n        title={description}\n      >\n        <OptionText>{title}</OptionText>\n        <Switch\n          id={id}\n          label={title}\n          checked={value}\n          onChange={() => dispatch(changeOption({ name, value }))}\n        />\n      </Option>\n    ),\n    [dispatch],\n  );\n\n  const renderProfileCategory = () => {\n    return (\n      <Category>\n        <CategoryHeader>Profile</CategoryHeader>\n        <CategoryItems>\n          <Profile>\n            {userBadgesImages.map(({ alt, label, src, srcSet }, key) => (\n              <Badge\n                // eslint-disable-next-line react/no-array-index-key\n                key={key}\n                alt={alt}\n                aria-label={label}\n                src={src}\n                srcSet={srcSet}\n              />\n            ))}\n            <UserName color={userColor}>{userDisplayName}</UserName>\n            <LogOutButton to=\"/chat/logout\">Log Out</LogOutButton>\n          </Profile>\n        </CategoryItems>\n      </Category>\n    );\n  };\n\n  const renderOptionsCategory = useCallback(\n    ({ title, items }, key) => (\n      <Category key={key}>\n        {!!title && <CategoryHeader>{title}</CategoryHeader>}\n        <CategoryItems>{items.map(renderOption)}</CategoryItems>\n      </Category>\n    ),\n    [renderOption],\n  );\n\n  return (\n    <OptionsRoot>\n      <Header>Chat settings</Header>\n      <Categories>\n        {isAuth && renderProfileCategory()}\n        {options.map(renderOptionsCategory)}\n      </Categories>\n    </OptionsRoot>\n  );\n};\n\nexport default Options;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nimport useOnClickOutside from 'react-cool-onclickoutside';\nimport { ReactComponent as GearsIconSvg } from 'icons/gears.svg';\nimport { ReactComponent as TwitchIconSvg } from 'icons/twitch.svg';\nimport Button from 'components/Button';\nimport IconButton from 'components/IconButton';\nimport ChatModal from 'components/ChatModal';\nimport Options from 'features/options/Options';\nimport {\n  isAuthSelector,\n  isAuthReadySelector,\n} from 'features/auth/authSelectors';\n\nconst ChatControlsRoot = styled.div`\n  position: relative;\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n`;\nconst Controls = styled.div`\n  display: flex;\n  align-items: center;\n\n  & > :not(:last-child) {\n    margin-right: 8px;\n  }\n`;\nconst OptionsModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 10px;\n  bottom: 100%;\n  margin-bottom: 10px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nconst OptionsButton = styled(IconButton)`\n  margin-left: auto;\n`;\nconst GearsIcon = styled(GearsIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\nconst TwitchIcon = styled(TwitchIconSvg)`\n  display: block;\n  margin-right: 4px;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  isDisabled: boolean;\n  onSendMessage: () => void;\n};\n\nconst ChatControls = ({ isDisabled, onSendMessage }: Props) => {\n  const [isOptionsModalVisible, setIsOptionsModalVisible] = useState(false);\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n\n  const handleCloseOptionsModal = () => setIsOptionsModalVisible(false);\n  const optionsRef = useOnClickOutside(handleCloseOptionsModal);\n\n  const renderSignInButton = () => (\n    <Button as={Link} to=\"/chat/auth\">\n      <TwitchIcon />\n      Sign in with Twitch\n    </Button>\n  );\n\n  const renderOptionsModal = () => (\n    <OptionsModal ref={optionsRef}>\n      <ChatModal onClose={handleCloseOptionsModal}>\n        <Options />\n      </ChatModal>\n    </OptionsModal>\n  );\n\n  return (\n    <ChatControlsRoot>\n      <Controls>\n        {isAuthReady && !isAuth && renderSignInButton()}\n        <OptionsButton\n          ref={optionsRef}\n          onClick={() => setIsOptionsModalVisible((prev) => !prev)}\n        >\n          <GearsIcon />\n        </OptionsButton>\n        <Button disabled={isDisabled} onClick={onSendMessage}>\n          Chat\n        </Button>\n      </Controls>\n      {isOptionsModalVisible && renderOptionsModal()}\n    </ChatControlsRoot>\n  );\n};\n\nexport default React.memo(ChatControls);\n","/* eslint-disable no-param-reassign */\n// source: https://github.com/night/betterttv/blob/master/src/utils/colors.js\n\n/**\n * Converts an RGB color value to HSL. Conversion formula\n * adapted from https://en.wikipedia.org/wiki/HSL_color_space\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and l in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSL representation\n */\nconst rgbToHsl = (r: number, g: number, b: number) => {\n  // Convert RGB to HSL, not ideal but it's faster than HCL or full YIQ conversion\n  // based on http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = Math.min(Math.max(0, (max + min) / 2), 1);\n  const d = Math.min(Math.max(0, max - min), 1);\n\n  if (d === 0) {\n    return [d, d, l]; // achromatic\n  }\n\n  let h = 0;\n\n  // eslint-disable-next-line default-case\n  switch (max) {\n    case r:\n      h = Math.min(Math.max(0, (g - b) / d + (g < b ? 6 : 0)), 6);\n      break;\n    case g:\n      h = Math.min(Math.max(0, (b - r) / d + 2), 6);\n      break;\n    case b:\n      h = Math.min(Math.max(0, (r - g) / d + 4), 6);\n      break;\n  }\n\n  h /= 6;\n\n  let s = l > 0.5 ? d / (2 * (1 - l)) : d / (2 * l);\n\n  s = Math.min(Math.max(0, s), 1);\n\n  return [h, s, l];\n};\n\n// Convert HSL to RGB, based on http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\nconst hueToRgb = (pp: number, qq: number, t: number) => {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1 / 6) return pp + (qq - pp) * 6 * t;\n  if (t < 1 / 2) return qq;\n  if (t < 2 / 3) return pp + (qq - pp) * (2 / 3 - t) * 6;\n\n  return pp;\n};\n\n/**\n * Converts an HSL color value to RGB. Conversion formula\n * adapted from https://en.wikipedia.org/wiki/HSL_color_space\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set of integers [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  l       The lightness\n * @return  Array           The RGB representation\n */\nconst hslToRgb = (h: number, s: number, l: number) => {\n  if (s === 0) {\n    const rgb = Math.round(Math.min(Math.max(0, 255 * l), 255)); // achromatic\n\n    return [rgb, rgb, rgb];\n  }\n\n  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  const p = 2 * l - q;\n\n  return [\n    Math.round(Math.min(Math.max(0, 255 * hueToRgb(p, q, h + 1 / 3)), 255)),\n    Math.round(Math.min(Math.max(0, 255 * hueToRgb(p, q, h)), 255)),\n    Math.round(Math.min(Math.max(0, 255 * hueToRgb(p, q, h - 1 / 3)), 255)),\n  ];\n};\n\nconst calculateColorBackground = (color: string) => {\n  // Converts HEX to YIQ to judge what color background the color would look best on\n  color = color.replace(/[^0-9a-f]/gi, '');\n\n  if (color.length < 6) {\n    color = color[0] + color[0] + color[1] + color[1] + color[2] + color[2];\n  }\n\n  const r = parseInt(color.substr(0, 2), 16);\n  const g = parseInt(color.substr(2, 2), 16);\n  const b = parseInt(color.substr(4, 2), 16);\n\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n\n  return yiq >= 128 ? 'dark' : 'light';\n};\n\nconst calculateColorReplacement = (\n  color: string,\n  background: 'dark' | 'light' = 'dark',\n) => {\n  // Modified from http://www.sitepoint.com/javascript-generate-lighter-darker-color/\n  // Modified further to use HSL as an intermediate format, to avoid hue-shifting\n  // toward primaries when darkening and toward secondaries when lightening\n  const light = background === 'light';\n  const factor = light ? 0.1 : -0.1;\n\n  color = color.replace(/[^0-9a-f]/gi, '');\n\n  if (color.length < 6) {\n    color = color[0] + color[0] + color[1] + color[1] + color[2] + color[2];\n  }\n\n  const hsl = rgbToHsl(\n    parseInt(color.substr(0, 2), 16),\n    parseInt(color.substr(2, 2), 16),\n    parseInt(color.substr(4, 2), 16),\n  );\n\n  // more thoroughly lightens dark colors, with no problems at black\n  let l = light ? 1 - (1 - factor) * (1 - hsl[2]) : (1 + factor) * hsl[2];\n\n  l = Math.min(Math.max(0, l), 1);\n\n  const rgb = hslToRgb(hsl[0], hsl[1], l);\n  const r = rgb[0].toString(16).padStart(2, '0');\n  const g = rgb[1].toString(16).padStart(2, '0');\n  const b = rgb[2].toString(16).padStart(2, '0');\n\n  return `#${r}${g}${b}`;\n};\n\nconst colorCache = new Map();\n\n// eslint-disable-next-line import/prefer-default-export\nexport const calculateColor = (color: string, darkenedMode = true): string => {\n  const cacheKey = `${color}:${darkenedMode}`;\n\n  if (colorCache.has(cacheKey)) return colorCache.get(cacheKey);\n\n  const colorRegex = /^#[0-9a-f]+$/i;\n\n  if (!colorRegex.test(color)) return color;\n\n  let bgColor: 'dark' | 'light';\n\n  for (let i = 20; i >= 0; i -= 1) {\n    bgColor = calculateColorBackground(color);\n\n    if (bgColor === 'light' && !darkenedMode) break;\n    if (bgColor === 'dark' && darkenedMode) break;\n\n    color = calculateColorReplacement(color, bgColor);\n  }\n\n  colorCache.set(cacheKey, color);\n\n  if (colorCache.size > 1000) {\n    colorCache.delete(colorCache.entries().next().value[0]);\n  }\n\n  return color;\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\n\nimport { TWITCH_EMOTES_CDN } from 'utils/constants';\nimport type { MessageCardInfo } from 'features/messages/messagesSlice';\nimport { messageCardSelector } from 'features/messageCards/messageCardsSelectors';\n\nconst MessageCardRoot = styled.a.attrs({\n  target: '_blank',\n  rel: 'noreferrer noopener',\n})<{ $clickable?: boolean }>`\n  display: flex;\n  flex-wrap: nowrap;\n  padding: 5px;\n  border-radius: 4px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.9), 0 0 2px rgba(0, 0, 0, 0.9);\n  background-color: #18181b;\n  text-decoration: none;\n\n  ${(p) =>\n    p.$clickable &&\n    css`\n      &:hover {\n        background-color: #3a3a3d;\n      }\n\n      &:active {\n        background-color: #464649;\n      }\n    `}\n`;\nconst Preview = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 45px;\n  width: 80px;\n  background-color: #26262c;\n  overflow: hidden;\n`;\nconst Image = styled.img`\n  max-height: 100%;\n`;\nconst PreviewLoading = styled.div`\n  height: 45px;\n  width: 80px;\n  background-color: #46464b;\n`;\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding-left: 10px;\n  overflow: hidden;\n`;\nconst textStyles = css`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin: 0;\n  font-size: 12px;\n  line-height: 1.5;\n`;\nconst Title = styled.p`\n  ${textStyles};\n  font-weight: bold;\n  color: #efeff1;\n`;\nconst Description = styled.p`\n  ${textStyles};\n  color: #adadb8;\n`;\nconst textLoadingStyle = css`\n  margin-top: 3px;\n  margin-bottom: 4px;\n\n  height: 12px;\n  background-color: #232326;\n  border-radius: 2px;\n`;\nconst TitleLoading = styled.div`\n  ${textLoadingStyle};\n  width: 180px;\n`;\nconst DescriptionLoading = styled.div`\n  ${textLoadingStyle};\n  width: 120px;\n`;\n\nconst emoteId = '58765';\nconst errorImageSrc = `${TWITCH_EMOTES_CDN}/${emoteId}/1.0`;\nconst errorImageSrcSet = `${TWITCH_EMOTES_CDN}/${emoteId}/1.0 1x, ${TWITCH_EMOTES_CDN}/${emoteId}/2.0 2x, ${TWITCH_EMOTES_CDN}/${emoteId}/3.0 4x`;\n\nconst errorTitle = 'Something went wrong';\nconst errorDescription = {\n  'twitch-clip': \"We couldn't find that Clip\",\n  'twitch-video': \"We couldn't find that Video\",\n  'youtube-video': \"We couldn't find that Video\",\n};\n\nconst renderLoading = () => (\n  <MessageCardRoot>\n    <PreviewLoading />\n    <Content>\n      <TitleLoading />\n      <DescriptionLoading />\n    </Content>\n  </MessageCardRoot>\n);\n\nconst renderError = (type: MessageCardInfo['type']) => (\n  <MessageCardRoot>\n    <Preview>\n      <Image src={errorImageSrc} srcSet={errorImageSrcSet} alt=\"\" />\n    </Preview>\n    <Content>\n      <Title>{errorTitle}</Title>\n      <Description>{errorDescription[type]}</Description>\n    </Content>\n  </MessageCardRoot>\n);\n\ntype Props = MessageCardInfo;\n\nconst MessageCard = (cardInfo: Props) => {\n  const card = useSelector(messageCardSelector(cardInfo));\n\n  if (!card || card.status === 'loading') {\n    return renderLoading();\n  }\n\n  if (card.status === 'error') {\n    return renderError(cardInfo.type);\n  }\n\n  const { id, src, srcSet, title, description } = card;\n\n  const url =\n    cardInfo.type === 'twitch-clip'\n      ? `https://clips.twitch.tv/${id}`\n      : cardInfo.url;\n\n  return (\n    <MessageCardRoot href={url} $clickable>\n      <Preview>\n        <Image src={src} srcSet={srcSet} alt={title} />\n      </Preview>\n      <Content>\n        <Title>{title}</Title>\n        <Description>{description}</Description>\n      </Content>\n    </MessageCardRoot>\n  );\n};\n\nexport default MessageCard;\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { format } from 'date-fns/fp';\n\nimport { calculateColor } from 'utils/colors';\nimport MessageCard from 'features/messageCards/MessageCard';\nimport type {\n  Message as MessageType,\n  MessageEntity,\n} from 'features/messages/messagesSlice';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\n\ntype MessageRootProps = {\n  $isAction: boolean;\n  $isHistory: boolean;\n  $isDeleted: boolean;\n  $isHighlighted: boolean;\n  $isEven: boolean;\n  $color: string;\n};\n\nconst getChatMessageBg = (p: MessageRootProps) => {\n  if (p.$isHighlighted) return 'rgba(255, 0, 0, 0.3)';\n  if (p.$isEven) return '#1f1925';\n  return 'transparent';\n};\n\nconst MessageRoot = styled.div<MessageRootProps>`\n  padding: 5px 20px;\n  color: ${(p) => (p.$isAction ? p.$color : '#fff')};\n  opacity: ${(p) => (p.$isHistory || p.$isDeleted ? '0.5' : '1')};\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${getChatMessageBg};\n`;\nconst Name = styled.span<{ $color: string }>`\n  font-weight: bold;\n  color: ${(p) => p.$color};\n  cursor: pointer;\n`;\nconst Emoji = styled.img`\n  display: inline-block;\n  margin-top: -5px;\n  margin-bottom: -4px;\n  width: 20px;\n  height: auto;\n  vertical-align: middle;\n`;\nconst Emote = styled.img`\n  display: inline-block;\n  margin: -5px 0;\n  vertical-align: middle;\n`;\n// https://github.com/night/BetterTTV/blob/master/src/modules/emotes/style.css\n// prettier-ignore\nconst EmoteWrapper = styled.span`\n  display: inline-block;\n\n  /* Prevent stacking of IceCold, SoSnowy */\n  &[data-emote-id='5849c9a4f52be01a7ee5f79d'] + &[data-emote-id='5849c9a4f52be01a7ee5f79d'],\n  &[data-emote-id='567b5b520e984428652809b6'] + &[data-emote-id='567b5b520e984428652809b6'] {\n    display: none;\n  }\n\n  /* IceCold */\n  &        + &[data-emote-id='5849c9a4f52be01a7ee5f79d'],\n  ${Emoji} + &[data-emote-id='5849c9a4f52be01a7ee5f79d'] {\n    margin-left: -33px;\n  }\n\n  /* SoSnowy */\n  &        + &[data-emote-id='567b5b520e984428652809b6'],\n  ${Emoji} + &[data-emote-id='567b5b520e984428652809b6'] {\n    margin-left: -32px;\n  }\n\n  /* SantaHat */\n  &        + &[data-emote-id='58487cc6f52be01a7ee5f205'],\n  ${Emoji} + &[data-emote-id='58487cc6f52be01a7ee5f205'] {\n    margin-left: -34px;\n    margin-top: -18px;\n  }\n\n  /* TopHat, CandyCane, ReinDeer */\n  &        + &[data-emote-id='5849c9c8f52be01a7ee5f79e'],\n  ${Emoji} + &[data-emote-id='5849c9c8f52be01a7ee5f79e'],\n  &        + &[data-emote-id='567b5c080e984428652809ba'],\n  ${Emoji} + &[data-emote-id='567b5c080e984428652809ba'],\n  &        + &[data-emote-id='567b5dc00e984428652809bd'],\n  ${Emoji} + &[data-emote-id='567b5dc00e984428652809bd'] {\n    margin-left: -31px;\n    margin-top: -18px;\n  }\n\n  /* cvHazmat, cvMask */\n  &        + &[data-emote-id='5e76d338d6581c3724c0f0b2'],\n  ${Emoji} + &[data-emote-id='5e76d338d6581c3724c0f0b2'],\n  &        + &[data-emote-id='5e76d399d6581c3724c0f0b8'],\n  ${Emoji} + &[data-emote-id='5e76d399d6581c3724c0f0b8'] {\n    margin-left: -34px;\n  }\n  &        + &[data-emote-id='5e76d338d6581c3724c0f0b2'] ${Emote},\n  ${Emoji} + &[data-emote-id='5e76d338d6581c3724c0f0b2'] ${Emote},\n  &        + &[data-emote-id='5e76d399d6581c3724c0f0b8'] ${Emote},\n  ${Emoji} + &[data-emote-id='5e76d399d6581c3724c0f0b8'] ${Emote} {\n    height: 34px;\n    width: 34px;\n  }\n`;\nconst Mention = styled.span<{ $isActive: boolean; $isOwnMessage: boolean }>`\n  ${(p) =>\n    (p.$isActive || p.$isOwnMessage) &&\n    css`\n      padding: 2px 4px;\n    `};\n  ${(p) =>\n    p.$isOwnMessage &&\n    css`\n      background-color: #40404a;\n      color: #fff;\n    `};\n  ${(p) =>\n    p.$isActive &&\n    css`\n      background-color: #fafafa;\n      color: #18181b;\n    `};\n`;\nconst Link = styled.a`\n  color: #bf94ff;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Timestamp = styled.span`\n  margin-right: 5px;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst Badge = styled.img`\n  margin-bottom: 2px;\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst renderMessageArray = (messageLogin: string, userLogin: string | null) => (\n  item: MessageEntity,\n  key: number,\n) => {\n  if (typeof item !== 'object') return item;\n\n  if (\n    item.type === 'twitch-emote' ||\n    item.type === 'bttv-emote' ||\n    item.type === 'ffz-emote'\n  ) {\n    return (\n      <EmoteWrapper key={key} data-emote-id={item.id}>\n        <Emote src={item.src} srcSet={item.srcSet} alt={item.alt} />\n      </EmoteWrapper>\n    );\n  }\n\n  if (item.type === 'emoji') {\n    return (\n      <EmoteWrapper key={key}>\n        <Emoji src={item.src} alt={item.alt} />\n      </EmoteWrapper>\n    );\n  }\n\n  if (item.type === 'mention') {\n    return (\n      <Mention\n        key={key}\n        $isActive={item.target === userLogin}\n        $isOwnMessage={messageLogin === userLogin}\n      >\n        {item.text}\n      </Mention>\n    );\n  }\n\n  if (item.type === 'link') {\n    return (\n      <Link\n        key={key}\n        href={item.href}\n        rel=\"noreferrer noopener\"\n        target=\"_blank\"\n      >\n        {item.text}\n      </Link>\n    );\n  }\n\n  return null;\n};\n\nconst renderBadges = (badges: htmlEntity.Badge[]) =>\n  badges.map(({ alt, label, src, srcSet }, key: number) => (\n    // eslint-disable-next-line react/no-array-index-key\n    <Badge key={key} alt={alt} aria-label={label} src={src} srcSet={srcSet} />\n  ));\n\ntype Props = {\n  message: MessageType;\n  userLogin: string | null;\n  isEven: boolean;\n  isShowTimestamps: boolean;\n  onNameRightClick: (name: string) => void;\n};\n\nconst MESSAGE_DELETED_LABEL = '<message deleted>';\n\nconst Message = ({\n  message: {\n    entities,\n    user: { login, color, displayName, badges },\n    timestamp,\n    card,\n    isHistory,\n    isAction,\n    isDeleted,\n    isHighlighted,\n  },\n  userLogin,\n  isEven,\n  isShowTimestamps,\n  // onNameClick,\n  onNameRightClick,\n}: Props) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const handleNameRightClick = (\n    e: React.MouseEvent<HTMLSpanElement, MouseEvent>,\n  ) => {\n    onNameRightClick(displayName);\n    e.preventDefault();\n  };\n\n  const newColor = color ? calculateColor(color) : '';\n\n  return (\n    <MessageRoot\n      $isHistory={isHistory}\n      $isAction={isAction}\n      $isEven={isEven}\n      $isHighlighted={isHighlighted}\n      $isDeleted={isDeleted}\n      $color={newColor}\n    >\n      {isShowTimestamps && (\n        <Timestamp>{format('h:mm', new Date(timestamp))}</Timestamp>\n      )}\n      {badges.length > 0 && renderBadges(badges)}\n      <Name $color={newColor} onContextMenu={handleNameRightClick}>\n        {displayName}\n      </Name>\n      {isAction ? ' ' : ': '}\n      {isDeleted && !isVisible ? (\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n        <Link onClick={() => setIsVisible(true)}>{MESSAGE_DELETED_LABEL}</Link>\n      ) : (\n        entities.map(renderMessageArray(login, userLogin))\n      )}\n      {card && <MessageCard type={card.type} id={card.id} url={card.url} />}\n    </MessageRoot>\n  );\n};\n\nexport default React.memo(Message);\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport type { Notice as NoticeType } from 'features/messages/messagesSlice';\n\nconst NoticeRoot = styled.div<{ $isEven: boolean }>`\n  padding: 5px 20px;\n  color: rgba(255, 255, 255, 0.6);\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${(p) => (p.$isEven ? '#1f1925' : 'transparent')};\n`;\n\ntype Props = {\n  message: NoticeType;\n  isEven: boolean;\n};\n\nconst Notice = ({ message: { message }, isEven }: Props) => (\n  <NoticeRoot $isEven={isEven}>{message}</NoticeRoot>\n);\n\nexport default Notice;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport type { UserNotice as UserNoticeType } from 'features/messages/messagesSlice';\n\nconst UserNoticeRoot = styled.div`\n  padding: 5px 20px 5px 16px;\n  line-height: 20px;\n  word-wrap: break-word;\n  border-left: 4px solid #9147ff;\n  color: #fff;\n`;\n\ntype Props = {\n  message: UserNoticeType;\n};\n\nconst UserNotice = ({ message: { systemMessage } }: Props) => (\n  <UserNoticeRoot>{systemMessage}</UserNoticeRoot>\n);\n\nexport default UserNotice;\n","import React from 'react';\n\nimport assertNever from 'utils/assertNever';\nimport type { ChatMessage as ChatMessageType } from 'features/messages/messagesSlice';\nimport Message from 'features/messages/Message';\nimport Notice from 'features/messages/Notice';\nimport UserNotice from 'features/messages/UserNotice';\n\ntype Props = {\n  message: ChatMessageType;\n  userLogin: string | null;\n  isEven: boolean;\n  isShowTimestamps: boolean;\n  // onNameClick: (name: string) => void;\n  onNameRightClick: (name: string) => void;\n};\n\nconst ChatMessage = ({\n  message,\n  userLogin,\n  isEven,\n  isShowTimestamps,\n  // onNameClick,\n  onNameRightClick,\n}: Props) => {\n  if (message.type === 'message') {\n    return (\n      <Message\n        message={message}\n        userLogin={userLogin}\n        isEven={isEven}\n        isShowTimestamps={isShowTimestamps}\n        // onNameClick={onNameClick}\n        onNameRightClick={onNameRightClick}\n      />\n    );\n  }\n\n  if (message.type === 'notice') {\n    return <Notice message={message} isEven={isEven} />;\n  }\n\n  if (message.type === 'user-notice') {\n    return <UserNotice message={message} />;\n  }\n\n  return assertNever(message);\n};\n\nexport default React.memo(ChatMessage);\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport type ScrollbarType from 'react-scrollbars-custom';\nimport type { ScrollState } from 'react-scrollbars-custom/dist/types/types';\n\nimport Scrollbar from 'components/Scrollbar';\nimport ChatMessage from 'features/messages/ChatMessage';\nimport {\n  messagesSelector,\n  isEvenSelector,\n} from 'features/messages/messagesSelectors';\nimport {\n  isShowTimestampsSelector,\n  isSplitChatSelector,\n} from 'features/options/optionsSelectors';\nimport { userLoginSelector } from 'features/auth/authSelectors';\n\nconst MORE_MESSAGES_OFFSET = 100;\n\nconst MessagesRoot = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\nconst StyledScrollbar = styled(Scrollbar)`\n  .ScrollbarsCustom-Content {\n    padding-bottom: 10px !important;\n  }\n`;\nconst MoreMessagesButton = styled.button<{ $isVisible: boolean }>`\n  position: absolute;\n  left: 50%;\n  bottom: 10px;\n  display: ${(p) => (p.$isVisible ? 'block' : 'none')};\n  padding: 5px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  transform: translateX(-50%);\n`;\n\ntype Props = {\n  onNameRightClick: (name: string) => void;\n};\n\nconst Messages = ({ onNameRightClick }: Props) => {\n  const [\n    isMoreMessagesButtonVisible,\n    setIsMoreMessagesButtonVisible,\n  ] = useState(false);\n\n  const messages = useSelector(messagesSelector);\n  const userLogin = useSelector(userLoginSelector);\n\n  const isEven = useSelector(isEvenSelector);\n  const isShowTimestamps = useSelector(isShowTimestampsSelector);\n  const isSplitChat = useSelector(isSplitChatSelector);\n\n  const handleScrollUpdate = ({\n    clientHeight,\n    contentScrollHeight,\n    scrollTop,\n  }: ScrollState) => {\n    const maxScrollTop = contentScrollHeight - clientHeight;\n    const isVisible = scrollTop + MORE_MESSAGES_OFFSET < maxScrollTop;\n\n    setIsMoreMessagesButtonVisible(isVisible);\n  };\n\n  const scrollbarRef = useRef<ScrollbarType>(null);\n\n  const handleScrollToBottom = () => {\n    if (scrollbarRef.current) {\n      scrollbarRef.current.scrollToBottom();\n    }\n  };\n\n  useEffect(() => {\n    if (!isMoreMessagesButtonVisible) {\n      handleScrollToBottom();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages]);\n\n  const getIsEven = (key: number) => {\n    if (!isSplitChat) return false;\n    return isEven ? key % 2 === 1 : key % 2 === 0;\n  };\n\n  return (\n    <MessagesRoot>\n      <StyledScrollbar onUpdate={handleScrollUpdate} ref={scrollbarRef}>\n        {messages.map((message, key) => (\n          <ChatMessage\n            key={message.id}\n            message={message}\n            userLogin={userLogin}\n            isEven={getIsEven(key)}\n            isShowTimestamps={isShowTimestamps}\n            onNameRightClick={onNameRightClick}\n          />\n        ))}\n      </StyledScrollbar>\n      <MoreMessagesButton\n        onClick={handleScrollToBottom}\n        $isVisible={isMoreMessagesButtonVisible}\n      >\n        More messages below\n      </MoreMessagesButton>\n    </MessagesRoot>\n  );\n};\n\nexport default Messages;\n","import React, { useState, useRef, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport Button from 'components/Button';\n\nconst JoinChannelRoot = styled.div`\n  padding: 10px;\n  flex-grow: 1;\n  width: 320px;\n`;\nconst Title = styled.h2`\n  margin-top: 0;\n  margin-bottom: 10px;\n  padding: 0;\n  color: #fff;\n`;\nconst Controls = styled.div`\n  display: flex;\n\n  & > :not(:last-child) {\n    margin-right: 10px;\n  }\n`;\nconst Input = styled.input`\n  display: block;\n  padding: 4px 10px;\n  width: 100%;\n  border: 2px solid transparent;\n  background-color: rgba(255, 255, 255, 0.15);\n  font-family: inherit;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\nconst JoinButton = styled(Button)`\n  flex-shrink: none;\n`;\n\nconst JoinChannel = () => {\n  const history = useHistory();\n  const [value, setValue] = useState('');\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const handleChangeChannel = () => {\n    history.push({\n      pathname: '/chat/',\n      hash: value,\n    });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      handleChangeChannel();\n    }\n  };\n\n  return (\n    <JoinChannelRoot>\n      <Title>Channel to join: </Title>\n      <Controls>\n        <Input\n          ref={inputRef}\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          onKeyPress={handleKeyPress}\n        />\n        <JoinButton onClick={handleChangeChannel} disabled={!value}>\n          Join\n        </JoinButton>\n      </Controls>\n    </JoinChannelRoot>\n  );\n};\n\nexport default JoinChannel;\n","import React, { useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { isAuthSelector } from 'features/auth/authSelectors';\nimport {\n  currentChannelSelector,\n  isConnectedSelector,\n} from 'features/chat/chatSelectors';\nimport { isFixedWidthSelector } from 'features/options/optionsSelectors';\nimport useInitializeAuth from 'features/auth/useInitializeAuth';\nimport useFetchChatData from 'features/chat/hooks/useFetchChatData';\nimport useCurrentChannel from 'features/chat/hooks/useCurrentChannel';\nimport useTwitchClient from 'features/chat/hooks/useTwitchClient';\nimport useChatInput from 'features/chat/hooks/useChatInput';\n\nimport ChatInput from 'features/chat/ChatInput';\nimport ChatControls from 'features/chat/ChatControls';\nimport Messages from 'features/messages/Messages';\nimport JoinChannel from 'features/chat/JoinChannel';\n\nconst ChatRoot = styled.div`\n  height: 100vh;\n  font-size: 12px;\n  background-color: #0e0e10;\n`;\nconst ChatWrapper = styled.div<{ $isFixedWidth: boolean }>`\n  display: flex;\n  flex-direction: column;\n  width: ${(p) => (p.$isFixedWidth ? '340px' : 'auto')};\n  height: 100%;\n  background-color: #18181b;\n`;\n\nconst Chat = () => {\n  const { sendMessage } = useTwitchClient();\n\n  useInitializeAuth();\n  useCurrentChannel();\n  useFetchChatData();\n\n  const currentChannel = useSelector(currentChannelSelector);\n  const isAuth = useSelector(isAuthSelector);\n  const isConnected = useSelector(isConnectedSelector);\n  const isFixedWidth = useSelector(isFixedWidthSelector);\n  const chatInputRef = useRef<HTMLTextAreaElement>(null);\n  const chatInput = useChatInput(sendMessage, chatInputRef);\n\n  const isDisabled = !isAuth || !isConnected;\n\n  return (\n    <ChatRoot>\n      <ChatWrapper $isFixedWidth={isFixedWidth}>\n        {currentChannel ? (\n          <Messages onNameRightClick={chatInput.handleNameRightClick} />\n        ) : (\n          <JoinChannel />\n        )}\n        <ChatInput\n          ref={chatInputRef}\n          text={chatInput.inputText}\n          suggestions={chatInput.suggestions}\n          isDisabled={isDisabled}\n          onEmoteClick={chatInput.handleEmoteClick}\n          onChange={chatInput.handleChange}\n          onKeyUp={chatInput.handleKeyUp}\n          onKeyDown={chatInput.handleKeyDown}\n          onBlur={chatInput.handleBlur}\n          onSuggestionMouseEnter={chatInput.handleSuggestionMouseEnter}\n          onSuggestionClick={chatInput.handleSuggestionClick}\n        />\n        <ChatControls\n          isDisabled={isDisabled}\n          onSendMessage={chatInput.handleSendMessage}\n        />\n      </ChatWrapper>\n    </ChatRoot>\n  );\n};\n\nexport default Chat;\n","import { getAuthUrl } from 'features/auth/authUtils';\n\nconst Auth = () => {\n  window.location.href = getAuthUrl();\n\n  return null;\n};\n\nexport default Auth;\n","import { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport {\n  LS_ACCESS_TOKEN,\n  LS_ID_TOKEN,\n  LS_USER,\n  LS_LAST_CHANNEL,\n} from 'utils/constants';\nimport { invalidateAuth } from 'features/auth/authSlice';\n\nconst Logout = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  localStorage.removeItem(LS_ACCESS_TOKEN);\n  localStorage.removeItem(LS_ID_TOKEN);\n  localStorage.removeItem(LS_USER);\n\n  dispatch(invalidateAuth());\n\n  history.push({\n    pathname: '/chat/',\n    hash: localStorage.getItem(LS_LAST_CHANNEL) || '',\n  });\n\n  return null;\n};\n\nexport default Logout;\n","import { useHistory } from 'react-router-dom';\n\nimport { LS_ACCESS_TOKEN, LS_ID_TOKEN, LS_LAST_CHANNEL } from 'utils/constants';\n\nconst AuthCallback = () => {\n  const history = useHistory();\n\n  if (!window.location.hash) return null;\n\n  const params = new URLSearchParams(window.location.hash.slice(1));\n\n  const accessToken = params.get('access_token');\n  const idToken = params.get('id_token');\n\n  if (!accessToken || !idToken) return null;\n\n  localStorage.setItem(LS_ACCESS_TOKEN, accessToken);\n  localStorage.setItem(LS_ID_TOKEN, idToken);\n\n  history.push({\n    pathname: '/chat/',\n    hash: localStorage.getItem(LS_LAST_CHANNEL) || '',\n  });\n\n  return null;\n};\n\nexport default AuthCallback;\n","import { css } from 'styled-components';\n\nexport default css`\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    margin: 0;\n    font-family: Roobert, Helvetica Neue, Helvetica, Arial, sans-serif;\n  }\n`;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { createGlobalStyle } from 'styled-components';\n\nimport common from 'styles/common';\nimport colors from 'styles/colors';\nimport vars from 'styles/vars';\n\nexport default createGlobalStyle`\n  :root {\n    ${colors};\n    ${vars};\n  }\n  ${common};\n`;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  RouteComponentProps,\n} from 'react-router-dom';\n\nimport { isAuthRedirect } from 'features/auth/authUtils';\nimport Chat from 'features/chat/Chat';\nimport Auth from 'features/auth/Auth';\nimport Logout from 'features/auth/Logout';\nimport AuthCallback from 'features/auth/AuthCallback';\nimport GlobalStyles from 'styles';\n\nconst getHomeComponent = ({ location }: RouteComponentProps) =>\n  isAuthRedirect(location.hash) ? <AuthCallback /> : <Chat />;\n\nconst App: React.FC = () => (\n  <>\n    <Router>\n      <Switch>\n        <Route exact path=\"/chat/\" render={getHomeComponent} />\n        <Route exact path=\"/chat/auth\" component={Auth} />\n        <Route exact path=\"/chat/logout\" component={Logout} />\n      </Switch>\n    </Router>\n    <GlobalStyles />\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nconst registerValidSW = (swUrl: string, config?: Config) => {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n};\n\nconst checkValidServiceWorker = (swUrl: string, config?: Config) => {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n};\n\nexport const register = (config?: Config) => {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n};\n\nexport const unregister = () => {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n};\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport auth from 'features/auth/authSlice';\nimport chat from 'features/chat/chatSlice';\nimport messages from 'features/messages/messagesSlice';\nimport messageCards from 'features/messageCards/messageCardsSlice';\nimport emotes from 'features/emotes/emotesSlice';\nimport badges from 'features/badges/badgesSlice';\nimport blockedUsers from 'features/blockedUsers/blockedUsersSlice';\nimport options from 'features/options/optionsSlice';\n\nconst rootReducer = combineReducers({\n  auth,\n  chat,\n  messages,\n  messageCards,\n  emotes,\n  badges,\n  blockedUsers,\n  options,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore, Action } from '@reduxjs/toolkit';\nimport type { ThunkAction } from 'redux-thunk';\n\nimport rootReducer, { RootState } from 'app/rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    // eslint-disable-next-line global-require, @typescript-eslint/no-var-requires\n    const newRootReducer = require('./rootReducer').default;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport ReactGA from 'react-ga';\n\nimport * as serviceWorker from 'serviceWorker';\nimport { isAuthRedirect } from 'features/auth/authUtils';\nimport store from 'app/store';\n\nif (process.env.NODE_ENV === 'production') {\n  ReactGA.initialize('UA-139550930-3');\n\n  if (!isAuthRedirect(window.location.hash)) {\n    const page =\n      window.location.pathname + window.location.search + window.location.hash;\n    ReactGA.pageview(page);\n  }\n}\n\nconst render = () => {\n  // eslint-disable-next-line global-require, @typescript-eslint/no-var-requires\n  const App = require('./app/App').default;\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n};\n\nrender();\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./app/App', render);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchStatus } from 'utils/types';\nimport { writeUserToLocatStorage } from 'features/auth/authUtils';\n\ntype AuthState = {\n  status: FetchStatus;\n  userId: string | null;\n  userLogin: string | null;\n};\n\ntype InitializeAuth = {\n  isAuth: boolean;\n  userId?: string;\n  userLogin?: string;\n};\n\nexport const initialState: AuthState = {\n  status: 'idle',\n  userId: null,\n  userLogin: null,\n};\n\nexport const fetchUser = createAsyncThunk(\n  'auth/fetchUser',\n  async (userId: string) => {\n    const users = await api.fetchUser(userId);\n    const { id, login } = users.data[0];\n    const user = { id, login };\n\n    writeUserToLocatStorage(user);\n\n    return user;\n  },\n);\n\nconst auth = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    initializeAuth: (state, { payload }: PayloadAction<InitializeAuth>) => {\n      state.status = payload.isAuth ? 'success' : 'error';\n\n      if (payload.userId) {\n        state.userId = payload.userId;\n      }\n\n      if (payload.userLogin) {\n        state.userLogin = payload.userLogin;\n      }\n    },\n\n    invalidateAuth: (): AuthState => initialState,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchUser.pending, (state) => {\n      state.status = 'loading';\n    });\n\n    builder.addCase(fetchUser.fulfilled, (state, { payload }) => {\n      state.status = 'success';\n      state.userId = payload.id;\n      state.userLogin = payload.login;\n    });\n\n    builder.addCase(fetchUser.rejected, (state) => {\n      state.status = 'error';\n    });\n  },\n});\n\nexport const { initializeAuth, invalidateAuth } = auth.actions;\n\nexport default auth.reducer;\n","import urlRegex from 'url-regex';\nimport type twitchIrc from 'twitch-simple-irc';\n\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport type { MessageEntity } from 'features/messages/messagesSlice';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport findEmote from 'features/emotes/utils/findEmote';\n\nconst mentionRegex = /^@([\\p{Letter}\\p{Number}_]+)/u;\nconst linkRegex = urlRegex({ strict: false });\n\nconst normalizeEmbeddedEmotes = (embeddedEmotes: twitchIrc.Emotes) =>\n  Object.entries(embeddedEmotes).reduce((result, [key, items]) => {\n    const id = Number.parseInt(key, 10);\n\n    return {\n      ...result,\n      ...items.reduce((acc, { start }) => ({ ...acc, [start]: id }), {}),\n    };\n  }, {} as Record<string, number>);\n\nconst findEntity = (\n  word: string,\n  emotes: StateEmotes,\n  parseTwitch: boolean,\n):\n  | htmlEntity.TwitchEmote\n  | htmlEntity.BttvEmote\n  | htmlEntity.FfzEmote\n  | htmlEntity.Emoji\n  | [htmlEntity.Mention, number]\n  | htmlEntity.Link\n  | null => {\n  if (!emotes) return null;\n\n  if (parseTwitch) {\n    const twitchEmote = findEmote.twitch.byName(word, emotes);\n\n    if (twitchEmote) return twitchEmote;\n  }\n\n  const emote =\n    findEmote.bttv.byName(word, emotes) ||\n    findEmote.ffz.byName(word, emotes) ||\n    findEmote.emoji.byChar(word);\n\n  if (emote) return emote;\n\n  const mentionMatch = word.match(mentionRegex);\n\n  if (mentionMatch) {\n    const [text, target] = mentionMatch;\n\n    return [\n      htmlEntity.createMention(text, target.toLowerCase()),\n      word.length - text.length,\n    ] as [htmlEntity.Mention, number];\n  }\n\n  const linkMatch = word.match(linkRegex);\n\n  if (linkMatch && linkMatch[0].length === word.length) {\n    return htmlEntity.createLink(word);\n  }\n\n  return null;\n};\n\nconst parseMessageEntities = (\n  message: string,\n  emotes: StateEmotes | null,\n  embeddedEmotes: twitchIrc.Emotes | null,\n  isOwnMessage = false,\n): MessageEntity[] => {\n  // If the message was sent by the current user, there is no embedded emotes\n  // So we need to parse twitch emotes manually\n\n  const result = [];\n  let offset = 0;\n  // Before that offset all content was added to the result array\n  let arrayOffset = 0;\n\n  // Check every word. From offset to the next space index\n  do {\n    const spaceIndex = message.indexOf(' ', offset + 1);\n\n    const isStart = offset === 0;\n    const isEnd = spaceIndex === -1;\n\n    const startIndex = isStart ? offset : offset + 1;\n    const endIndex = isEnd ? message.length : spaceIndex;\n\n    const word = message.substring(startIndex, endIndex);\n\n    if (word) {\n      let entity = null;\n\n      // Check embedded twitch emotes\n      if (\n        !isOwnMessage &&\n        embeddedEmotes &&\n        Object.keys(embeddedEmotes).length > 0\n      ) {\n        const normalizedEmotes = normalizeEmbeddedEmotes(embeddedEmotes);\n        const id = normalizedEmotes[startIndex];\n\n        if (id) {\n          entity = htmlEntity.createTwitchEmote({ id, code: word });\n        }\n      }\n\n      // Check other entities\n      if (!entity) {\n        entity = findEntity(word, emotes, isOwnMessage);\n      }\n\n      if (entity) {\n        // Push all text before this entity\n        if (arrayOffset !== startIndex) {\n          const textBefore = message.substring(arrayOffset, startIndex);\n          result.push(textBefore);\n        }\n\n        // If entity it's an array it means entity may be not full word\n        // The second element is the difference between word length and entity length\n        if (Array.isArray(entity)) {\n          const [entityObject, difference] = entity;\n          result.push(entityObject);\n          arrayOffset = endIndex - difference;\n        } else {\n          result.push(entity);\n          arrayOffset = endIndex;\n        }\n      }\n    }\n\n    // If it's the last word and it wasn't added to the result add it now\n    if (spaceIndex === -1 && arrayOffset !== endIndex) {\n      const textAfter = message.substring(arrayOffset, endIndex);\n      result.push(textAfter);\n    }\n\n    offset = spaceIndex;\n  } while (offset !== -1);\n\n  return result;\n};\n\nexport default parseMessageEntities;\n","const checkIsHighlighted = (\n  userLogin: string | null,\n  messageUser: string,\n  messageText: string,\n) =>\n  !!userLogin &&\n  userLogin !== messageUser &&\n  RegExp(userLogin, 'gi').test(messageText);\n\nexport default checkIsHighlighted;\n","import type {\n  MessageEntity,\n  MessageCardInfo,\n} from 'features/messages/messagesSlice';\n\n// https://regex101.com/r/jGbDV1/4\nconst twitchClipRegex = /^(?:https?:\\/\\/)?(?:clips\\.twitch\\.tv\\/|(?:www\\.|m\\.)?twitch\\.tv\\/(?:[\\d\\w]+)\\/clip\\/)([\\d\\w]+)(?:\\?.+)?$/;\n\n// https://regex101.com/r/xsgeA4/4\nconst twitchVideoRegex = /^(?:https?:\\/\\/)?(?:www\\.|m\\.)?twitch\\.tv\\/videos\\/(\\d+)(?:\\?.+)?$/;\n\n// https://regexr.com/3dj5t\nconst youtubeVideoRegex = /^((?:https?:)?\\/\\/)?((?:www|m)\\.)?(?:youtube\\.com|youtu.be)(\\/(?:[\\w-]+\\?v=|embed\\/|v\\/)?)([\\w-]+)(\\S+)?$/;\n\nconst getMessageCardFromEntities = (\n  entities: MessageEntity[],\n  [parseTwitch, parseYoutube]: [boolean, boolean] = [true, true],\n): MessageCardInfo | null => {\n  if (!parseTwitch && !parseYoutube) return null;\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const entity of entities) {\n    if (typeof entity === 'object' && entity.type === 'link') {\n      if (parseTwitch) {\n        // twitch clip\n        let m = twitchClipRegex.exec(entity.text);\n\n        if (m) {\n          return {\n            type: 'twitch-clip',\n            id: m[1],\n            url: entity.href,\n          };\n        }\n\n        // twitch video\n        m = twitchVideoRegex.exec(entity.text);\n\n        if (m) {\n          return {\n            type: 'twitch-video',\n            id: m[1],\n            url: entity.href,\n          };\n        }\n      }\n\n      if (parseYoutube) {\n        // youtube video\n        const m = youtubeVideoRegex.exec(entity.text);\n\n        if (m) {\n          return {\n            type: 'youtube-video',\n            id: m[4],\n            url: entity.href,\n          };\n        }\n      }\n    }\n  }\n\n  return null;\n};\n\nexport default getMessageCardFromEntities;\n","import { nanoid } from '@reduxjs/toolkit';\nimport * as twitchIrc from 'twitch-simple-irc';\nimport * as tekko from 'tekko';\nimport { Howl } from 'howler';\n\nimport type * as api from 'api';\nimport type { RootState } from 'app/rootReducer';\nimport type {\n  Message,\n  Notice,\n  UserNotice,\n  OwnMessage,\n} from 'features/messages/messagesSlice';\nimport { emotesSelector } from 'features/emotes/emotesSelectors';\nimport { blockedUsersSelector } from 'features/blockedUsers/blockedUsersSelectors';\nimport {\n  globalBadgesSelector,\n  channelBadgesSelector,\n} from 'features/badges/badgesSelectors';\nimport {\n  isHighlightNotificationsSelector,\n  isShowTwitchCardsSelector,\n  isShowYoutubeCardsSelector,\n} from 'features/options/optionsSelectors';\nimport { userLoginSelector, userIdSelector } from 'features/auth/authSelectors';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport parseMessageEntities from 'features/messages/utils/parseMessageEntities';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport checkIsHighlighted from 'features/messages/utils/checkIsHighlighted';\nimport getMessageCardFromEntities from 'features/messageCards/utils/getMessageCardFromEntities';\nimport { writeEmotesUsageStatistic } from 'features/emotes/utils/emotesUsageStatistic';\n\nimport tinkSfx from 'assets/ts-tink.ogg';\n\nconst tink = new Howl({ src: [tinkSfx] });\n\nexport const normalizeMessage = (\n  { message, tags, user, channel, isAction }: twitchIrc.MessageEvent,\n  state: RootState,\n): Message | null => {\n  const blockedUsers = blockedUsersSelector(state);\n  const isBlockedUser = blockedUsers.includes(user);\n\n  if (isBlockedUser) {\n    return null;\n  }\n\n  const isHighlightNotifications = isHighlightNotificationsSelector(state);\n  const isShowTwitchCards = isShowTwitchCardsSelector(state);\n  const isShowYoutubeCards = isShowYoutubeCardsSelector(state);\n  const userLogin = userLoginSelector(state);\n  const isHighlighted = checkIsHighlighted(userLogin, user, message);\n\n  if (isHighlighted && isHighlightNotifications) {\n    tink.play();\n  }\n\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n\n  const entities = parseMessageEntities(message, emotes, tags.emotes);\n  const badges = htmlEntity.createBadges(\n    tags.badges,\n    globalBadges,\n    channelBadges,\n  );\n  const card = getMessageCardFromEntities(entities, [\n    isShowTwitchCards,\n    isShowYoutubeCards,\n  ]);\n\n  return {\n    type: 'message',\n    id: tags.id,\n    message,\n    channel,\n    entities,\n    user: {\n      id: tags.userId,\n      login: user,\n      displayName: tags.displayName,\n      color: tags.color,\n      badges,\n    },\n    timestamp: tags.tmiSentTs,\n    card,\n    isAction,\n    isHistory: false,\n    isDeleted: false,\n    isHighlighted,\n    isOwnMessage: false,\n  };\n};\n\nexport const normalizeNotice = ({\n  message,\n  channel,\n  tags: { msgId },\n}: twitchIrc.NoticeEvent): Notice => ({\n  type: 'notice',\n  id: nanoid(),\n  message,\n  channel,\n  noticeType: msgId,\n});\n\nexport const normalizeUserNotice = ({\n  message,\n  channel,\n  tags: { id, msgId, login, systemMsg },\n}: twitchIrc.UserNoticeEvent): UserNotice => ({\n  type: 'user-notice',\n  id,\n  message,\n  channel,\n  noticeType: msgId,\n  systemMessage: systemMsg,\n  user: {\n    login,\n  },\n});\n\nexport const normalizeOwnMessage = (\n  { message, channel, tags }: OwnMessage,\n  state: RootState,\n): Message => {\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n  const userLogin = userLoginSelector(state) as string;\n  const userId = userIdSelector(state) as string;\n  const isShowTwitchCards = isShowTwitchCardsSelector(state);\n  const isShowYoutubeCards = isShowYoutubeCardsSelector(state);\n\n  const isAction = message.startsWith('/me ');\n  const normalizedMessage = isAction ? message.slice(4) : message;\n\n  const entities = parseMessageEntities(normalizedMessage, emotes, null, true);\n  const badges = htmlEntity.createBadges(\n    tags.badges,\n    globalBadges,\n    channelBadges,\n  );\n  const card = getMessageCardFromEntities(entities, [\n    isShowTwitchCards,\n    isShowYoutubeCards,\n  ]);\n\n  writeEmotesUsageStatistic(entities);\n\n  return {\n    type: 'message',\n    id: nanoid(),\n    message: normalizedMessage,\n    channel,\n    entities,\n    user: {\n      id: userId,\n      login: userLogin,\n      displayName: tags.displayName,\n      color: tags.color,\n      badges,\n    },\n    timestamp: Date.now(),\n    card,\n    isAction,\n    isHistory: false,\n    isDeleted: false,\n    isHighlighted: false,\n    isOwnMessage: true,\n  };\n};\n\nexport const normalizeHistoryMessage = (\n  { tags, params: [channel, message], prefix }: tekko.Message,\n  emotes: StateEmotes,\n  globalBadges: Record<string, api.TwitchBadge>,\n  channelBadges: Record<string, api.TwitchBadge>,\n  userLogin: string | null,\n): Message => {\n  const isAction = twitchIrc.getIsAction(message);\n  const normalizedMessage = isAction\n    ? twitchIrc.normalizeActionMessage(message)\n    : message;\n  const parsedTags = (twitchIrc.parseMessageTags(\n    tags,\n  ) as unknown) as twitchIrc.MessageTags;\n\n  const messageUser = prefix ? prefix.name : '';\n  const isHighlighted = checkIsHighlighted(\n    userLogin,\n    messageUser,\n    normalizedMessage,\n  );\n\n  const entities = parseMessageEntities(\n    normalizedMessage,\n    emotes,\n    parsedTags.emotes,\n  );\n  const badges = htmlEntity.createBadges(\n    parsedTags.badges,\n    globalBadges,\n    channelBadges,\n  );\n\n  // TODO: add cards for history?\n  // const card = getMessageCardFromEntities(entities);\n\n  return {\n    type: 'message',\n    id: parsedTags.id,\n    message: normalizedMessage,\n    channel: channel.slice(1),\n    entities,\n    user: {\n      id: parsedTags.userId,\n      login: messageUser,\n      displayName: parsedTags.displayName,\n      color: parsedTags.color,\n      badges,\n    },\n    timestamp: parsedTags.tmiSentTs,\n    card: null,\n    isAction,\n    isHistory: true,\n    isDeleted: false,\n    isHighlighted,\n    isOwnMessage: false,\n  };\n};\n\nexport const normalizeHistoryMessages = (\n  rawMessages: string[],\n  state: RootState,\n): Message[] => {\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n  const blockedUsers = blockedUsersSelector(state);\n  const userLogin = userLoginSelector(state);\n\n  return rawMessages.reduce<Message[]>((acc, rawMessage) => {\n    const message = tekko.parse(rawMessage) as tekko.Message;\n\n    const { command, prefix } = message;\n\n    if (\n      command === 'PRIVMSG' &&\n      prefix &&\n      !blockedUsers.includes(prefix.name)\n    ) {\n      acc.push(\n        normalizeHistoryMessage(\n          message,\n          emotes,\n          globalBadges,\n          channelBadges,\n          userLogin,\n        ),\n      );\n    }\n\n    return acc;\n  }, []);\n};\n","type SliceMessagesParams<T> = {\n  items: T[];\n  limit: number;\n  addedItemsCount: number;\n  isEven: boolean;\n};\n\nconst sliceMessagesByLimit = <T>({\n  items,\n  limit,\n  addedItemsCount,\n  isEven,\n}: SliceMessagesParams<T>): [T[], boolean] => {\n  const diff = items.length - limit;\n  const isSliced = diff > 0;\n\n  const newItems = isSliced ? items.slice(diff) : items;\n  const newIsEven = isSliced && addedItemsCount % 2 ? !isEven : isEven;\n\n  return [newItems, newIsEven];\n};\n\nexport default sliceMessagesByLimit;\n","const sliceItemsByLimit = <T>(items: T[], limit: number) => {\n  const diff = items.length - limit;\n\n  return diff > 0 ? items.slice(diff) : items;\n};\n\nexport default sliceItemsByLimit;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\nimport type twitchIrc from 'twitch-simple-irc';\n\nimport * as api from 'api';\nimport type { AppThunk } from 'app/store';\nimport type { RootState } from 'app/rootReducer';\nimport type { FetchResult } from 'utils/types';\nimport {\n  CHANNEL_MESSAGES_LIMIT,\n  STORE_USERS_LIMIT,\n  RECENT_USER_MESSAGES_LIMIT,\n} from 'utils/constants';\nimport assertNever from 'utils/assertNever';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport {\n  normalizeMessage,\n  normalizeNotice,\n  normalizeUserNotice,\n  normalizeHistoryMessages,\n  normalizeOwnMessage,\n} from 'features/messages/utils/normalizeMessages';\nimport sliceMessagesByLimit from 'features/messages/utils/sliceMessagesByLimit';\nimport sliceItemsByLimit from 'features/messages/utils/sliceItemsByLimit';\nimport {\n  fetchTwitchClip,\n  fetchTwitchVideo,\n  fetchYoutubeVideo,\n} from 'features/messageCards/messageCardsSlice';\nimport { messageCardSelector } from 'features/messageCards/messageCardsSelectors';\n\nexport type MessageEntity =\n  | htmlEntity.TwitchEmote\n  | htmlEntity.BttvEmote\n  | htmlEntity.FfzEmote\n  | htmlEntity.Emoji\n  | htmlEntity.Mention\n  | htmlEntity.Link\n  | string;\n\nexport type MessageCardInfo = {\n  type: 'twitch-clip' | 'twitch-video' | 'youtube-video';\n  id: string;\n  url: string;\n};\n\nexport type Message = {\n  type: 'message';\n  id: string;\n  message: string;\n  channel: string;\n  entities: MessageEntity[];\n  user: {\n    id: string;\n    login: string;\n    displayName: string;\n    color: string;\n    badges: htmlEntity.Badge[];\n  };\n  timestamp: number;\n  card: MessageCardInfo | null;\n  isAction: boolean;\n  isHistory: boolean;\n  isDeleted: boolean;\n  isHighlighted: boolean;\n  isOwnMessage: boolean;\n};\n\nexport type Notice = {\n  type: 'notice';\n  id: string;\n  message: string;\n  channel: string;\n  noticeType: string;\n};\n\nexport type UserNotice = {\n  type: 'user-notice';\n  id: string;\n  message: string;\n  channel: string;\n  noticeType: keyof typeof twitchIrc.UserNoticeType;\n  systemMessage: string;\n  user: {\n    login: string;\n  };\n};\n\nexport type ChatMessage = Message | Notice | UserNotice;\n\nexport type OwnMessage = {\n  message: string;\n  channel: string;\n  tags: twitchIrc.UserStateTags;\n};\n\ntype RecieveMessage = {\n  type: 'message';\n  message: twitchIrc.MessageEvent;\n};\ntype RecieveNotice = {\n  type: 'notice';\n  message: twitchIrc.NoticeEvent;\n};\ntype RecieveUserNotice = {\n  type: 'user-notice';\n  message: twitchIrc.UserNoticeEvent;\n};\ntype RecieveOwnMessage = {\n  type: 'own-message';\n  message: OwnMessage;\n};\n\ntype RecieveMessagePayload =\n  | RecieveMessage\n  | RecieveNotice\n  | RecieveUserNotice\n  | RecieveOwnMessage;\n\ntype RecieveMessagesActionPayload = {\n  messages: ChatMessage[];\n  channel: string;\n  type?: 'message' | 'history';\n};\n\ntype MessagesStateChannel = {\n  history: FetchResult<string[]> & {\n    isAdded: boolean;\n  };\n  isEven: boolean;\n  items: ChatMessage[];\n  users: string[];\n  recentUserMessages: string[];\n};\n\ntype MessagesState = Record<string, MessagesStateChannel>;\n\nconst initialState: MessagesState = {};\n\nexport const fetchRecentMessages = createAsyncThunk(\n  'chat/fetchRecentMessages',\n  (channel: string) => api.fetchRecentMessages(channel),\n);\n\n// TODO: write function than adds a user to the users array\n\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    clearChat: (\n      state,\n      { payload }: PayloadAction<twitchIrc.ClearChatEvent>,\n    ) => {\n      const {\n        channel,\n        tags: { targetUserId },\n      } = payload;\n\n      // eslint-disable-next-line no-restricted-syntax\n      for (const message of state[channel].items) {\n        if (\n          message.type === 'message' &&\n          message.user.id === targetUserId &&\n          !message.isHistory\n        ) {\n          message.isDeleted = true;\n        }\n      }\n    },\n\n    recieveMessagesAction: (\n      state,\n      { payload }: PayloadAction<RecieveMessagesActionPayload>,\n    ) => {\n      const { messages, channel, type = 'message' } = payload;\n\n      if (messages.length === 0) return;\n\n      const items =\n        type === 'message'\n          ? [...state[channel].items, ...messages]\n          : [...messages, ...state[channel].items];\n\n      const [newItems, newIsEven] = sliceMessagesByLimit({\n        items,\n        limit: CHANNEL_MESSAGES_LIMIT,\n        addedItemsCount: messages.length,\n        isEven: state[channel].isEven,\n      });\n\n      state[channel].isEven = newIsEven;\n      state[channel].items = newItems;\n\n      // TODO: add colors for users if it's not set\n\n      // add users\n      const { users } = state[channel];\n\n      messages.forEach((message) => {\n        if (\n          message.type === 'message' &&\n          !users.includes(message.user.displayName)\n        ) {\n          users.push(message.user.displayName);\n        }\n      });\n\n      const newUsers = sliceItemsByLimit(users, STORE_USERS_LIMIT);\n\n      state[channel].users = newUsers;\n\n      if (type === 'history') {\n        state[channel].history.items = [];\n        state[channel].history.isAdded = true;\n      }\n\n      if (type === 'message') {\n        messages.forEach((message) => {\n          if (message.type !== 'message' || !message.isOwnMessage) return;\n\n          const normalizedMessage = message.message.trim();\n          const index = state[channel].recentUserMessages.indexOf(\n            normalizedMessage,\n          );\n\n          if (index > -1) {\n            state[channel].recentUserMessages.splice(1, 1);\n          }\n\n          state[channel].recentUserMessages.unshift(normalizedMessage);\n\n          const newRecentUserMessages = sliceItemsByLimit(\n            state[channel].recentUserMessages,\n            RECENT_USER_MESSAGES_LIMIT,\n          );\n\n          state[channel].recentUserMessages = newRecentUserMessages;\n        });\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchRecentMessages.pending, (state, { meta: { arg } }) => {\n      const channel = arg;\n\n      if (!state[channel]) {\n        state[channel] = {\n          history: {\n            status: 'loading',\n            error: {},\n            items: [],\n            isAdded: false,\n          },\n          isEven: false,\n          items: [],\n          users: [],\n          recentUserMessages: [],\n        };\n      } else {\n        state[channel].history.status = 'loading';\n        state[channel].history.error = {};\n      }\n    });\n\n    builder.addCase(\n      fetchRecentMessages.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const channel = arg;\n\n        state[channel].history.status = 'success';\n        state[channel].history.items = payload.messages;\n      },\n    );\n\n    builder.addCase(\n      fetchRecentMessages.rejected,\n      (state, { error, meta: { arg } }) => {\n        const channel = arg;\n\n        state[channel].history.status = 'error';\n        state[channel].history.error = error;\n      },\n    );\n  },\n});\n\nexport const { clearChat } = messagesSlice.actions;\n\nexport default messagesSlice.reducer;\n\nconst { recieveMessagesAction } = messagesSlice.actions;\n\nconst normalizePayload = (\n  payload: RecieveMessagePayload,\n  state: RootState,\n): ChatMessage | null => {\n  if (payload.type === 'message') {\n    return normalizeMessage(payload.message, state);\n  }\n\n  if (payload.type === 'notice') {\n    return normalizeNotice(payload.message);\n  }\n\n  if (payload.type === 'user-notice') {\n    return normalizeUserNotice(payload.message);\n  }\n\n  if (payload.type === 'own-message') {\n    return normalizeOwnMessage(payload.message, state);\n  }\n\n  return assertNever(payload);\n};\n\nexport const recieveMessage = (payload: RecieveMessagePayload): AppThunk => (\n  dispatch,\n  getState,\n) => {\n  const state = getState();\n  const message = normalizePayload(payload, state);\n\n  if (!message) return;\n\n  // fetch a message card if any\n  if (message.type === 'message' && message.card) {\n    const card = messageCardSelector(message.card)(state);\n\n    if (!card || card.status === 'error') {\n      const { id, url } = message.card;\n      const params = { id, url };\n\n      if (message.card.type === 'twitch-clip') {\n        dispatch(fetchTwitchClip(params));\n      }\n\n      if (message.card.type === 'twitch-video') {\n        dispatch(fetchTwitchVideo(params));\n      }\n\n      if (message.card.type === 'youtube-video') {\n        dispatch(fetchYoutubeVideo(params));\n      }\n    }\n  }\n\n  const params = { messages: [message], channel: message.channel };\n\n  dispatch(recieveMessagesAction(params));\n};\n\nexport const addRecentMessages = (channel: string): AppThunk => (\n  dispatch,\n  getState,\n) => {\n  const state = getState();\n\n  const slicedRawHistory = sliceItemsByLimit(\n    state.messages[channel].history.items,\n    CHANNEL_MESSAGES_LIMIT,\n  );\n\n  const messages = normalizeHistoryMessages(slicedRawHistory, state);\n\n  dispatch(recieveMessagesAction({ messages, channel, type: 'history' }));\n};\n","export const TWITCH_API_AUTH_BASE = 'https://id.twitch.tv/oauth2/authorize';\n\nexport const TWITCH_API_CLIENT_ID = process.env.REACT_APP_TWITCH_API_CLIENT_ID;\nexport const TWITCH_API_REDIRECT_URI =\n  process.env.REACT_APP_TWITCH_API_REDIRECT_URI;\n\nexport const CHANNEL_MESSAGES_LIMIT = 500;\nexport const STORE_USERS_LIMIT = 500;\nexport const RECENT_USER_MESSAGES_LIMIT = 100;\n\nexport const API_REQUESTS_TIMEOUT = 10000;\n\nexport const TWITCH_EMOTES_CDN = '//static-cdn.jtvnw.net/emoticons/v1';\nexport const BTTV_EMOTES_CDN = '//cdn.betterttv.net/emote';\n\n// local storage keys\nexport const LS_ACCESS_TOKEN = 'accessToken';\nexport const LS_ID_TOKEN = 'idToken';\nexport const LS_LAST_CHANNEL = 'lastChannel';\nexport const LS_USER = 'user';\nexport const LS_EMOTES_USAGE_STATISTIC = 'emotesUsageStatistic';\nexport const LS_OPTIONS = 'options';\n\nexport const SUGGESTION_TYPES = {\n  users: {\n    name: 'users',\n    limit: 5,\n    regex: /^@([\\w\\d_]*)$/,\n  },\n  emotes: {\n    name: 'emotes',\n    limit: 10,\n    regex: /^:([\\w\\d_]{2,})$/,\n  },\n};\n\nexport const NOTICE_MESSAGE_TAGS = [\n  'msg_banned',\n  'msg_bad_characters',\n  'msg_channel_blocked',\n  'msg_channel_suspended',\n  'msg_duplicate',\n  'msg_emoteonly',\n  'msg_facebook',\n  'msg_followersonly',\n  'msg_followersonly_followed',\n  'msg_followersonly_zero',\n  'msg_r9k',\n  'msg_ratelimit',\n  'msg_rejected',\n  'msg_rejected_mandatory',\n  'msg_room_not_found',\n  'msg_slowmode',\n  'msg_subsonly',\n  'msg_suspended',\n  'msg_timedout',\n  'msg_verified_email',\n];\n","import {\n  TWITCH_API_AUTH_BASE,\n  TWITCH_API_CLIENT_ID,\n  TWITCH_API_REDIRECT_URI,\n  LS_USER,\n} from 'utils/constants';\n\ntype StoredUser = {\n  id: string;\n  login: string;\n};\n\nconst authParams = {\n  client_id: TWITCH_API_CLIENT_ID,\n  redirect_uri: TWITCH_API_REDIRECT_URI,\n  response_type: 'token+id_token',\n  scope: [\n    'openid',\n    'channel:moderate',\n    'chat:edit',\n    'chat:read',\n    'whispers:read',\n    'whispers:edit',\n    'user_blocks_read',\n    'user_blocks_edit',\n    'user_subscriptions',\n  ].join('+'),\n  claims: JSON.stringify({\n    id_token: { email_verified: null, picture: null, preferred_username: null },\n  }),\n  // TODO:\n  // state: uid(),\n};\n\nexport const getAuthUrl = () => {\n  const search = Object.entries(authParams)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n\n  return `${TWITCH_API_AUTH_BASE}?${search}`;\n};\n\nexport const isAuthRedirect = (hash: string) =>\n  hash.startsWith('#access_token=');\n\nexport const writeUserToLocatStorage = (user: StoredUser) => {\n  localStorage.setItem(LS_USER, JSON.stringify(user));\n};\n\nexport const readUserFromLocatStorage = (): StoredUser | null => {\n  let user;\n\n  try {\n    user = JSON.parse(localStorage.getItem(LS_USER) as string);\n  } catch (e) {\n    user = null;\n  }\n\n  if (!user || !user.id || !user.login) return null;\n\n  return user as StoredUser;\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchResult } from 'utils/types';\nimport {\n  parseTwitchEmotes,\n  parseBttvGlobalEmotes,\n  parseBttvChannelEmotes,\n  parseFfzGlobalEmotes,\n  parseFfzChannelEmotes,\n} from 'features/chat/utils/parseApiResponse';\n\ntype EmotesState = {\n  twitch: FetchResult<Record<string, api.TwitchEmote[]>>;\n  bttv: {\n    global: FetchResult<api.BttvGlobalEmote[]>;\n    byChannels: Record<string, FetchResult<api.BttvChannelEmote[]>>;\n  };\n  ffz: {\n    global: FetchResult<api.FfzEmote[]>;\n    byChannels: Record<string, FetchResult<api.FfzEmote[]>>;\n  };\n};\n\nconst initialState: EmotesState = {\n  twitch: {\n    status: 'idle',\n    error: {},\n    items: {},\n  },\n  bttv: {\n    global: {\n      status: 'idle',\n      error: {},\n      items: [],\n    },\n    byChannels: {},\n  },\n  ffz: {\n    global: {\n      status: 'idle',\n      error: {},\n      items: [],\n    },\n    byChannels: {},\n  },\n};\n\nexport const fetchTwitchEmotes = createAsyncThunk(\n  'chat/fetchTwitchEmotes',\n  (userId: string) => api.fetchTwitchEmotes(userId),\n);\n\nexport const fetchBttvGlobalEmotes = createAsyncThunk(\n  'chat/fetchBttvGlobalEmotes',\n  () => api.fetchBttvGlobalEmotes(),\n);\n\ntype FetchBttvChannelEmotesParams = {\n  channel: string;\n  channelId: string;\n};\n\nexport const fetchBttvChannelEmotes = createAsyncThunk(\n  'chat/fetchBttvChannelEmotes',\n  ({ channelId }: FetchBttvChannelEmotesParams) =>\n    api.fetchBttvChannelEmotes(channelId),\n);\n\nexport const fetchFfzGlobalEmotes = createAsyncThunk(\n  'chat/fetchFfzGlobalEmotes',\n  () => api.fetchFfzGlobalEmotes(),\n);\n\ntype FetchFfzChannelEmotesParams = {\n  channel: string;\n  channelId: string;\n};\n\nexport const fetchFfzChannelEmotes = createAsyncThunk(\n  'chat/fetchFfzChannelEmotes',\n  ({ channelId }: FetchFfzChannelEmotesParams) =>\n    api.fetchFfzChannelEmotes(channelId),\n);\n\nconst emotes = createSlice({\n  name: 'emotes',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // twitch\n    builder.addCase(fetchTwitchEmotes.pending, (state) => {\n      state.twitch.status = 'loading';\n      state.twitch.error = {};\n    });\n\n    builder.addCase(fetchTwitchEmotes.fulfilled, (state, { payload }) => {\n      state.twitch.status = 'success';\n      state.twitch.items = parseTwitchEmotes(payload);\n    });\n\n    builder.addCase(fetchTwitchEmotes.rejected, (state, { error }) => {\n      state.twitch.status = 'error';\n      state.twitch.error = error;\n    });\n\n    // bttv global\n    builder.addCase(fetchBttvGlobalEmotes.pending, (state) => {\n      state.bttv.global.status = 'loading';\n      state.bttv.global.error = {};\n    });\n\n    builder.addCase(fetchBttvGlobalEmotes.fulfilled, (state, { payload }) => {\n      state.bttv.global.status = 'success';\n      state.bttv.global.items = parseBttvGlobalEmotes(payload);\n    });\n\n    builder.addCase(fetchBttvGlobalEmotes.rejected, (state, { error }) => {\n      state.bttv.global.status = 'error';\n      state.bttv.global.error = error;\n    });\n\n    // bttv channel\n    builder.addCase(\n      fetchBttvChannelEmotes.pending,\n      (state, { meta: { arg } }) => {\n        const { channel } = arg;\n\n        if (!state.bttv.byChannels[channel]) {\n          state.bttv.byChannels[channel] = {\n            status: 'loading',\n            error: {},\n            items: [],\n          };\n        } else {\n          state.bttv.byChannels[channel].status = 'loading';\n          state.bttv.byChannels[channel].error = {};\n        }\n      },\n    );\n\n    builder.addCase(\n      fetchBttvChannelEmotes.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.bttv.byChannels[channel].status = 'success';\n        state.bttv.byChannels[channel].items = parseBttvChannelEmotes(payload);\n      },\n    );\n\n    builder.addCase(\n      fetchBttvChannelEmotes.rejected,\n      (state, { error, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.bttv.byChannels[channel].status = 'error';\n        state.bttv.byChannels[channel].error = error;\n      },\n    );\n\n    // ffz global\n    builder.addCase(fetchFfzGlobalEmotes.pending, (state) => {\n      state.ffz.global.status = 'loading';\n      state.ffz.global.error = {};\n    });\n\n    builder.addCase(fetchFfzGlobalEmotes.fulfilled, (state, { payload }) => {\n      state.ffz.global.status = 'success';\n      state.ffz.global.items = parseFfzGlobalEmotes(payload);\n    });\n\n    builder.addCase(fetchFfzGlobalEmotes.rejected, (state, { error }) => {\n      state.ffz.global.status = 'error';\n      state.ffz.global.error = error;\n    });\n\n    // ffz channel\n    builder.addCase(\n      fetchFfzChannelEmotes.pending,\n      (state, { meta: { arg } }) => {\n        const { channel } = arg;\n\n        if (!state.ffz.byChannels[channel]) {\n          state.ffz.byChannels[channel] = {\n            status: 'loading',\n            error: {},\n            items: [],\n          };\n        } else {\n          state.ffz.byChannels[channel].status = 'loading';\n          state.ffz.byChannels[channel].error = {};\n        }\n      },\n    );\n\n    builder.addCase(\n      fetchFfzChannelEmotes.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.ffz.byChannels[channel].status = 'success';\n        state.ffz.byChannels[channel].items = parseFfzChannelEmotes(payload);\n      },\n    );\n\n    builder.addCase(\n      fetchFfzChannelEmotes.rejected,\n      (state, { error, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.ffz.byChannels[channel].status = 'error';\n        state.ffz.byChannels[channel].error = error;\n      },\n    );\n  },\n});\n\nexport default emotes.reducer;\n","const assertNever = (value: never): never => value;\n\nexport default assertNever;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport {\n  parseTwitchClip,\n  parseTwitchVideo,\n  parseYoutubeVideo,\n} from 'features/chat/utils/parseApiResponse';\n\ntype MessageCardLoading = {\n  status: 'loading';\n};\ntype MessageCardSuccess = {\n  status: 'success';\n  id: string;\n  src: string;\n  srcSet: string;\n  title: string;\n  description: string;\n};\ntype MessageCardError = {\n  status: 'error';\n};\nexport type MessageCardData =\n  | MessageCardLoading\n  | MessageCardSuccess\n  | MessageCardError;\n\ntype MessageCardsState = {\n  twitchClips: Record<string, MessageCardData>;\n  twitchVideos: Record<string, MessageCardData>;\n  youtubeVideos: Record<string, MessageCardData>;\n};\n\nconst initialState: MessageCardsState = {\n  twitchClips: {},\n  twitchVideos: {},\n  youtubeVideos: {},\n};\n\ntype FetchMessageCardParams = {\n  id: string;\n  url: string;\n};\n\nexport const fetchTwitchClip = createAsyncThunk(\n  'clips/fetchTwitchClip',\n  ({ id }: FetchMessageCardParams) => api.fetchTwitchClip(id),\n);\n\nexport const fetchTwitchVideo = createAsyncThunk(\n  'clips/fetchTwitchVideo',\n  ({ id }: FetchMessageCardParams) => api.fetchTwitchVideo(id),\n);\n\nexport const fetchYoutubeVideo = createAsyncThunk(\n  'clips/fetchYoutubeVideo',\n  ({ id }: FetchMessageCardParams) => api.fetchYoutubeVideo(id),\n);\n\n// TODO: refact this code. DRY!\n\nconst messageCards = createSlice({\n  name: 'messageCards',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // twitch clip\n    builder.addCase(fetchTwitchClip.pending, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchClips[id] = { status: 'loading' };\n    });\n\n    builder.addCase(\n      fetchTwitchClip.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { id } = arg;\n        const card = parseTwitchClip(payload);\n\n        if (!card) {\n          state.twitchClips[id] = { status: 'error' };\n\n          return;\n        }\n\n        state.twitchClips[id] = {\n          status: 'success',\n          ...card,\n        };\n      },\n    );\n\n    builder.addCase(fetchTwitchClip.rejected, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchClips[id] = { status: 'error' };\n    });\n\n    // twitch video\n    builder.addCase(fetchTwitchVideo.pending, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchVideos[id] = { status: 'loading' };\n    });\n\n    builder.addCase(\n      fetchTwitchVideo.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { id } = arg;\n        const card = parseTwitchVideo(payload);\n\n        if (!card) {\n          state.twitchVideos[id] = { status: 'error' };\n\n          return;\n        }\n\n        state.twitchVideos[id] = {\n          status: 'success',\n          ...card,\n        };\n      },\n    );\n\n    builder.addCase(fetchTwitchVideo.rejected, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchVideos[id] = { status: 'error' };\n    });\n\n    // youtube-video\n    builder.addCase(fetchYoutubeVideo.pending, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.youtubeVideos[id] = { status: 'loading' };\n    });\n\n    builder.addCase(\n      fetchYoutubeVideo.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { id } = arg;\n        const card = parseYoutubeVideo(payload);\n\n        if (!card) {\n          state.youtubeVideos[id] = { status: 'error' };\n\n          return;\n        }\n\n        state.youtubeVideos[id] = {\n          status: 'success',\n          ...card,\n        };\n      },\n    );\n\n    builder.addCase(fetchYoutubeVideo.rejected, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.youtubeVideos[id] = { status: 'error' };\n    });\n  },\n});\n\nexport default messageCards.reducer;\n","import type { RootState } from 'app/rootReducer';\n\nexport const isBlockedUsersLoadedSelector = (state: RootState) =>\n  state.blockedUsers.status !== 'idle' &&\n  state.blockedUsers.status !== 'loading';\n\nexport const blockedUsersSelector = (state: RootState) =>\n  state.blockedUsers.items;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchResult } from 'utils/types';\nimport { parseBadges } from 'features/chat/utils/parseApiResponse';\n\ntype Badges = Record<string, api.TwitchBadge>;\n\ntype BadgesState = {\n  global: FetchResult<Badges>;\n  byChannels: Record<string, FetchResult<Badges>>;\n};\n\nconst initialState: BadgesState = {\n  global: {\n    status: 'idle',\n    error: {},\n    items: {},\n  },\n  byChannels: {},\n};\n\nexport const fetchGlobalBadges = createAsyncThunk(\n  'chat/fetchGlobalBadges',\n  () => api.fetchGlobalBadges(),\n);\n\ntype FetchChannelBadgesParams = {\n  channel: string;\n  channelId: string;\n};\n\nexport const fetchChannelBadges = createAsyncThunk(\n  'chat/fetchChannelBadges',\n  ({ channelId }: FetchChannelBadgesParams) =>\n    api.fetchChannelBadges(channelId),\n);\n\nconst badges = createSlice({\n  name: 'badges',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // global badges\n    builder.addCase(fetchGlobalBadges.pending, (state) => {\n      state.global.status = 'loading';\n      state.global.error = {};\n    });\n\n    builder.addCase(fetchGlobalBadges.fulfilled, (state, { payload }) => {\n      state.global.status = 'success';\n      state.global.items = parseBadges(payload);\n    });\n\n    builder.addCase(fetchGlobalBadges.rejected, (state, { error }) => {\n      state.global.status = 'error';\n      state.global.error = error;\n    });\n\n    // channel badges\n    builder.addCase(fetchChannelBadges.pending, (state, { meta: { arg } }) => {\n      const { channel } = arg;\n\n      if (!state.byChannels[channel]) {\n        state.byChannels[channel] = {\n          status: 'loading',\n          error: {},\n          items: {},\n        };\n      } else {\n        state.byChannels[channel].status = 'loading';\n        state.byChannels[channel].error = {};\n      }\n    });\n\n    builder.addCase(\n      fetchChannelBadges.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.byChannels[channel].status = 'success';\n        state.byChannels[channel].items = parseBadges(payload);\n      },\n    );\n\n    builder.addCase(\n      fetchChannelBadges.rejected,\n      (state, { error, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.byChannels[channel].status = 'error';\n        state.byChannels[channel].error = error;\n      },\n    );\n  },\n});\n\nexport default badges.reducer;\n","import { LS_OPTIONS } from 'utils/constants';\n\nexport const readOptionsFromLocalStorage = (): object => {\n  try {\n    const options = localStorage.getItem(LS_OPTIONS);\n    return JSON.parse(options as string) || {};\n  } catch {\n    return {};\n  }\n};\n\nexport const writeOptionsToLocalStore = (options: object) => {\n  localStorage.setItem(\n    LS_OPTIONS,\n    JSON.stringify({\n      ...readOptionsFromLocalStorage(),\n      ...options,\n    }),\n  );\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\n\nimport {\n  writeOptionsToLocalStore,\n  readOptionsFromLocalStorage,\n} from 'features/options/optionsUtils';\n\ntype OptionsState = {\n  showTimestamps: boolean;\n  splitChat: boolean;\n  blacklistKeywords: string;\n  highlightKeywords: string;\n  fixedWidth: boolean;\n  highlightNotifications: boolean;\n  showTwitchCards: boolean;\n  showYoutubeCards: boolean;\n};\n\ntype ChangeOption = {\n  name: keyof OptionsState;\n  value: any;\n};\n\nexport const initialState: OptionsState = {\n  showTimestamps: false,\n  splitChat: true,\n  blacklistKeywords: '',\n  highlightKeywords: '',\n  fixedWidth: false,\n  highlightNotifications: true,\n  showTwitchCards: true,\n  showYoutubeCards: true,\n  ...readOptionsFromLocalStorage(),\n};\n\nconst options = createSlice({\n  name: 'options',\n  initialState,\n  reducers: {\n    changeOption: {\n      reducer: (state, { payload }: PayloadAction<ChangeOption>) => {\n        const { name, value } = payload;\n\n        (state[name] as unknown) = value;\n      },\n      prepare: (payload: ChangeOption) => {\n        const { name, value } = payload;\n\n        writeOptionsToLocalStore({ [name]: value });\n\n        return { payload };\n      },\n    },\n  },\n});\n\nexport const { changeOption } = options.actions;\n\nexport default options.reducer;\n"],"sourceRoot":""}