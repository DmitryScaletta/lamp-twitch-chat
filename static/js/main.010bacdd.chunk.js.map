{"version":3,"sources":["utils/api.js","reducers/auth.js","reducers/chat.js","reducers/emotes/twitch.js","reducers/emotes/bttv.js","reducers/emotes/ffz.js","reducers/emotes/index.js","reducers/emotes/selectors.js","utils/twitchChat.js","utils/formatMessage.js","reducers/messages.js","utils/constants.js","reducers/index.js","store/index.js","utils/replaceEmojis.js","components/ChatInput.jsx","components/ChatMessage.jsx","components/Chat.jsx","components/Home.jsx","utils/getAuthUrl.js","components/Auth.jsx","components/AuthCallback.jsx","styles/common.js","styles/colors.js","styles/vars.js","styles/index.js","App.jsx","index.jsx"],"names":["helixHeaders","Authorization","localStorage","accessToken","krakenHeaders","Accept","process","apiRequest","url","fetch","then","response","json","fetchUser","id","headers","fetchTwitchEmotesBySets","userId","fetchBttvChannelEmotes","channelId","fetchFfzChannelEmotes","fetchRecentMessages","channel","setIsAuth","createAction","fetchUserRequest","fetchUserSuccess","fetchUserFailure","reducer","handleActions","state","payload","isAuth","user","undefined","isLoading","error","login","displayName","createActions","setCurrentChannel","setIsConnected","updateGlobalUserState","updateUserState","updateRoomState","removeChannel","currentChannel","isConnected","tags","globalState","channels","userState","roomState","omit","fetchTwitchEmotesRequest","fetchTwitchEmotesSuccess","fetchTwitchEmotesFailure","combineActions","type","toString","isLoaded","isError","items","fetchBttvGlobalEmotesRequest","fetchBttvGlobalEmotesSuccess","fetchBttvGlobalEmotesFailure","fetchBttvChannelEmotesRequest","fetchBttvChannelEmotesSuccess","fetchBttvChannelEmotesFailure","parseBttvChannelEmotes","channelEmotes","sharedEmotes","global","fetchFfzGlobalEmotesRequest","fetchFfzGlobalEmotesSuccess","fetchFfzGlobalEmotesFailure","fetchFfzChannelEmotesRequest","fetchFfzChannelEmotesSuccess","fetchFfzChannelEmotesFailure","parseFfzGlobalEmotes","pipe","pathOr","values","map","flatten","parseFfzChannelEmotes","combineReducers","twitch","bttv","ffz","twitchEmotesSelector","createSelector","bttvChannelEmotesSelector","bttvEmotesSelector","globalBttvEmotes","channelBttvEmotes","ffzChannelEmotesSelector","ffzEmotesSelector","globalFfzEmotes","channelFfzEmotes","noopIRCCommands","booleanMessageTags","numberMessageTags","depricatedMessageTags","noticeMessageTags","parseBadges","data","split","reduce","acc","badge","name","value","normalizeTagValue","raw","emote","indexes","index","start","end","Number","parseInt","parseMessageEmotes","followersOnly","slow","includes","parseMessageTags","Object","entries","filter","key","camelCase","getIsAction","message","startsWith","endsWith","normalizeActionMessage","slice","parseUserState","params","parseRoomState","Client","options","socket","_queue","_messagesQueue","this","identity","auth","sendRaw","emit","hadError","willReconnect","rawData","trim","forEach","line","_handleMessage","parsedData","tekkoParse","command","prefix","middle","trailing","parseMessageData","eventData","msgId","shift","length","ircMessage","isAction","messageEventData","uuid","tmiSentTs","Date","getTime","parseChatMessage","handleError","err","Array","isArray","send","WebSocket","addEventListener","_onConnect","_onClose","_onError","_onData","tekkoFormat","push","commandParams","join","roomName","EventEmitter","mentionRegex","linkRegex","urlRegex","strict","normalizeEmotesFromTags","toPairs","v","getFfzSrcSet","dpi","TWITCH_EMOTES_CDN","createTwitchEmote","alt","src","srcSet","createMention","text","target","findEntity","pt","shape","oneOf","isRequired","string","href","word","parseTwitch","twitchEmote","find","propEq","findTwitchEmote","bttvEmote","findBttvEmote","createBttvEmote","ffzEmote","findFfzEmote","urls","createFfzEmote","char","emojiMatch","twemojiParser","assetType","emoji","keys","head","emojilib","mentionMatch","match","toLowerCase","linkMatch","formatMessage","embeddedEmotes","emotes","isOwnMessage","hasEmbeddedEmotes","normalizedEmbeddedEmotes","result","offset","arrayOffset","spaceIndex","indexOf","startIndex","endIndex","substring","entity","embeddedEmote","textBefore","entityObject","difference","textAfter","sliceMessages","diff","getEmotes","addMessagesRequest","addMessages","fetchRecentMessagesRequest","fetchRecentMessagesSuccess","fetchRecentMessagesFailure","normalizeRecentMessages","messages","m","parse","normalizedMessage","parsedTags","messageArray","isHistory","oldItems","history","chat","store","createStore","rootReducer","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","noop","replaceEmojis","ChatInputRoot","styled","form","Controls","div","SendButton","button","Textarea","textarea","ChatInput","isDisabled","onSubmit","textareaRef","useRef","useState","setText","handleKeyDown","useCallback","e","preventDefault","useEffect","textareaNode","current","removeEventListener","placeholder","ref","maxLength","disabled","onChange","to","defaultProps","ChatMessageRoot","p","color","Name","span","Emote","img","Emoji","Mention","Link","a","attrs","rel","renderMessageArray","badgeInfo","subscriber","number","badges","flags","mod","bool","roomId","tmiSentId","oneOfType","item","ChatMessage","ChatRoot","ChatWrapper","MessagesWrapper","Messages","Scrollbar","disableTracksWidthCompensation","MoreMessagesButton","visible","messagesSelector","Chat","onSendMessage","useSelector","isMoreMessagesButtonVisible","setIsMoreMessagesButtonVisible","messagesRef","handleScrollToBottom","scrollToBottom","onUpdate","clientHeight","contentScrollHeight","scrollTop","onClick","client","channelIdSelector","Home","dispatch","useDispatch","username","currentChannelId","rawUser","getItem","JSON","location","hash","document","title","disconnect","handleMessage","getState","newItems","rest","connect","on","apiFetchRecentMessages","emoticon_sets","fetchTwitchEmotes","apiFetchBttvChannelEmotes","apiFetchFfzChannelEmotes","console","log","say","authParams","client_id","redirect_uri","response_type","scope","claims","stringify","id_token","email_verified","picture","preferred_username","getAuthUrl","search","Auth","AuthCallback","useHistory","URLSearchParams","get","idToken","setItem","apiFetchUser","display_name","jwt","decode","sub","css","createGlobalStyle","colors","vars","common","App","exact","path","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.010bacdd.chunk.js","sourcesContent":["export const TWITCH_API_HELIX = 'https://api.twitch.tv/helix';\nexport const TWITCH_API_KRAKEN = 'https://api.twitch.tv/kraken';\n\n// TODO: throw an error if fetch completed with not 2** code\n\nconst helixHeaders = {\n  Authorization: `Bearer ${localStorage.accessToken}`,\n};\n\nconst krakenHeaders = {\n  Accept: 'application/vnd.twitchtv.v5+json',\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `OAuth ${localStorage.accessToken}`,\n};\n\nconst apiRequestHelix = (url) =>\n  fetch(`${TWITCH_API_HELIX}${url}`, {\n    headers: helixHeaders,\n  }).then((response) => response.json());\n\nconst apiRequestKraken = (url) =>\n  fetch(`${TWITCH_API_KRAKEN}${url}`, {\n    headers: krakenHeaders,\n  }).then((response) => response.json());\n\nconst apiRequest = (url) => fetch(url).then((response) => response.json());\n\nexport const fetchUser = (id) => apiRequestHelix(`/users?id=${id}`);\n\nexport const fetchTwitchEmotesBySets = (userId) =>\n  apiRequestKraken(`/users/${userId}/emotes`);\n\nexport const fetchBttvGlobalEmotes = () =>\n  apiRequest('https://api.betterttv.net/3/cached/emotes/global');\nexport const fetchBttvChannelEmotes = (channelId) =>\n  apiRequest(`https://api.betterttv.net/3/cached/users/twitch/${channelId}`);\n\nexport const fetchFfzGlobalEmotes = () =>\n  apiRequest('https://api.frankerfacez.com/v1/set/global');\nexport const fetchFfzChannelEmotes = (channelId) =>\n  apiRequest(`https://api.frankerfacez.com/v1/room/id/${channelId}`);\n\n// apiRequest(`https://api.betterttv.net/3/cached/frankerfacez/users/twitch/${channelId}`);\n\nexport const fetchRecentMessages = (channel) =>\n  apiRequest(\n    `https://recent-messages.robotty.de/api/v2/recent-messages/${channel}?clearchatToNotice=true`,\n  );\n","import { createAction, handleActions } from 'redux-actions';\n\nimport { fetchUser as apiFetchUser } from '../utils/api';\n\nconst defaultState = {\n  isAuth: false,\n  isLoading: false,\n  user: {\n    id: null,\n    login: null,\n    displayName: null,\n  },\n};\n\nexport const setIsAuth = createAction('SET_IS_AUTH');\nconst fetchUserRequest = createAction('FETCH_USER_REQUEST');\nconst fetchUserSuccess = createAction('FETCH_USER_SUCCESS');\nconst fetchUserFailure = createAction('FETCH_USER_FAILURE');\n\nexport const fetchUser = (id) => async (dispatch) => {\n  dispatch(fetchUserRequest());\n\n  const response = await apiFetchUser(id);\n  const { login, display_name: displayName } = response.data[0];\n  const user = { id, login, displayName };\n  localStorage.setItem('user', JSON.stringify(user));\n\n  dispatch(fetchUserSuccess(user));\n};\n\nconst handleSetIsAuth = (state, { payload: { isAuth, user } }) => ({\n  ...state,\n  isAuth: isAuth === undefined ? state.isAuth : isAuth,\n  user: { ...state.user, ...user },\n});\n\nconst handleFetchUserRequest = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst handleFetchUserSuccess = (state, { payload }) => ({\n  ...state,\n  isAuth: true,\n  isLoading: false,\n  user: payload,\n});\nconst handleFetchUserFailure = (state, { payload }) => ({\n  ...state,\n  isAuth: false,\n  isLoading: false,\n  error: payload,\n});\n\nconst reducer = handleActions(\n  {\n    [setIsAuth]: handleSetIsAuth,\n    [fetchUserRequest]: handleFetchUserRequest,\n    [fetchUserSuccess]: handleFetchUserSuccess,\n    [fetchUserFailure]: handleFetchUserFailure,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions } from 'redux-actions';\nimport { omit } from 'ramda';\n\nconst defaultState = {\n  currentChannel: null,\n  isConnected: false,\n  globalState: {},\n  channels: {\n    // [channel]: {\n    //   userState: {},\n    //   roomState: {},\n    // }\n  },\n};\n\nexport const {\n  setCurrentChannel,\n  setIsConnected,\n  updateGlobalUserState,\n  updateUserState,\n  updateRoomState,\n  removeChannel,\n} = createActions(\n  'SET_CURRENT_CHANNEL',\n  'SET_IS_CONNECTED',\n  'UPDATE_GLOBAL_USER_STATE',\n  'UPDATE_USER_STATE',\n  'UPDATE_ROOM_STATE',\n  'REMOVE_CHANNEL',\n);\n\nconst handleSetCurrentChannel = (state, { payload }) => ({\n  ...state,\n  currentChannel: payload,\n});\nconst handleSetIsConnected = (state, { payload }) => ({\n  ...state,\n  isConnected: payload,\n});\nconst handleUpdateGlobalUserState = (state, { payload: { tags } }) => ({\n  ...state,\n  globalState: { ...state.globalState, ...tags },\n});\nconst handleUpdateUserState = (state, { payload: { channel, tags } }) => ({\n  ...state,\n  channels: {\n    ...state.channels,\n    [channel]: { ...state.channels[channel], userState: tags },\n  },\n});\nconst handleUpdateRoomState = (state, { payload: { channel, tags } }) => ({\n  ...state,\n  channels: {\n    ...state.channels,\n    [channel]: { ...state.channels[channel], roomState: tags },\n  },\n});\nconst handleRemoveChannel = (state, { payload: channel }) => ({\n  ...state,\n  channels: omit([channel], state.channels),\n});\n\nconst reducer = handleActions(\n  {\n    [setCurrentChannel]: handleSetCurrentChannel,\n    [setIsConnected]: handleSetIsConnected,\n    [updateGlobalUserState]: handleUpdateGlobalUserState,\n    [updateUserState]: handleUpdateUserState,\n    [updateRoomState]: handleUpdateRoomState,\n    [removeChannel]: handleRemoveChannel,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\n\nimport { fetchTwitchEmotesBySets } from '../../utils/api';\n\nconst defaultState = {\n  isLoading: false,\n  isLoaded: false,\n  isError: false,\n  error: null,\n  items: {\n    // [setId]: [\n    //   {\n    //     code: \"PartyPoro\",\n    //     id: 300949540,\n    //   },\n    // ],\n  },\n};\n\nconst {\n  fetchTwitchEmotesRequest,\n  fetchTwitchEmotesSuccess,\n  fetchTwitchEmotesFailure,\n} = createActions(\n  'FETCH_TWITCH_EMOTES_REQUEST',\n  'FETCH_TWITCH_EMOTES_SUCCESS',\n  'FETCH_TWITCH_EMOTES_FAILURE',\n);\n\nexport const fetchTwitchEmotes = (userId) => async (dispatch) => {\n  dispatch(fetchTwitchEmotesRequest);\n\n  try {\n    const response = await fetchTwitchEmotesBySets(userId);\n    const data = { items: response.emoticon_sets };\n\n    dispatch(fetchTwitchEmotesSuccess(data));\n  } catch (e) {\n    dispatch(fetchTwitchEmotesFailure(e));\n  }\n};\n\nconst handleFetchTwitchEmotes = (state, { type, payload }) => {\n  if (type === fetchTwitchEmotesRequest.toString()) {\n    return {\n      ...state,\n      isLoading: true,\n      isLoaded: false,\n      isError: false,\n      error: null,\n    };\n  }\n\n  if (type === fetchTwitchEmotesSuccess.toString()) {\n    return {\n      ...state,\n      isLoading: false,\n      isLoaded: true,\n      isError: false,\n      ...payload,\n    };\n  }\n\n  if (type === fetchTwitchEmotesFailure.toString()) {\n    return {\n      ...state,\n      isLoading: false,\n      isLoaded: false,\n      isError: true,\n      error: payload,\n    };\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [combineActions(\n      fetchTwitchEmotesRequest,\n      fetchTwitchEmotesSuccess,\n      fetchTwitchEmotesFailure,\n    )]: handleFetchTwitchEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\n\nimport {\n  fetchBttvGlobalEmotes as apiFetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes as apiFetchBttvChannelEmotes,\n} from '../../utils/api';\n\nconst defaultState = {\n  global: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n    items: [],\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: [],\n    // },\n  },\n};\n\nconst {\n  fetchBttvGlobalEmotesRequest,\n  fetchBttvGlobalEmotesSuccess,\n  fetchBttvGlobalEmotesFailure,\n  fetchBttvChannelEmotesRequest,\n  fetchBttvChannelEmotesSuccess,\n  fetchBttvChannelEmotesFailure,\n} = createActions(\n  'FETCH_BTTV_GLOBAL_EMOTES_REQUEST',\n  'FETCH_BTTV_GLOBAL_EMOTES_SUCCESS',\n  'FETCH_BTTV_GLOBAL_EMOTES_FAILURE',\n  'FETCH_BTTV_CHANNEL_EMOTES_REQUEST',\n  'FETCH_BTTV_CHANNEL_EMOTES_SUCCESS',\n  'FETCH_BTTV_CHANNEL_EMOTES_FAILURE',\n);\n\nconst parseBttvChannelEmotes = ({ channelEmotes, sharedEmotes }) => [\n  ...channelEmotes,\n  ...sharedEmotes,\n];\n\nexport const fetchBttvGlobalEmotes = () => async (dispatch) => {\n  dispatch(fetchBttvGlobalEmotesRequest());\n\n  try {\n    const items = await apiFetchBttvGlobalEmotes();\n    const data = { items };\n\n    dispatch(fetchBttvGlobalEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchBttvGlobalEmotesFailure({ error }));\n  }\n};\n\nexport const fetchBttvChannelEmotes = (channelId, channel) => async (\n  dispatch,\n) => {\n  dispatch(fetchBttvChannelEmotesRequest({ channel }));\n\n  try {\n    const response = await apiFetchBttvChannelEmotes(channelId);\n    const data = {\n      channel,\n      items: parseBttvChannelEmotes(response),\n    };\n\n    dispatch(fetchBttvChannelEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchBttvChannelEmotesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchBttvGlobalEmotes = (state, { type, payload }) => {\n  if (type === fetchBttvGlobalEmotesRequest.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: true,\n        isLoaded: false,\n        isError: false,\n        error: null,\n      },\n    };\n  }\n\n  if (type === fetchBttvGlobalEmotesSuccess.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: true,\n        isError: false,\n        error: null,\n        ...payload,\n      },\n    };\n  }\n\n  if (type === fetchBttvGlobalEmotesFailure.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: false,\n        isError: true,\n        ...payload,\n      },\n    };\n  }\n\n  return state;\n};\n\nconst handleFetchBttvChannelEmotes = (state, { type, payload }) => {\n  const { channel } = payload;\n\n  if (type === fetchBttvChannelEmotesRequest.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: true,\n          isLoaded: false,\n          isError: false,\n          error: null,\n        },\n      },\n    };\n  }\n\n  if (type === fetchBttvChannelEmotesSuccess.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: true,\n          isError: false,\n          error: null,\n          items: payload.items,\n        },\n      },\n    };\n  }\n\n  if (type === fetchBttvChannelEmotesFailure.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: false,\n          isError: true,\n          error: payload.error,\n        },\n      },\n    };\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [combineActions(\n      fetchBttvGlobalEmotesRequest,\n      fetchBttvGlobalEmotesSuccess,\n      fetchBttvGlobalEmotesFailure,\n    )]: handleFetchBttvGlobalEmotes,\n\n    [combineActions(\n      fetchBttvChannelEmotesRequest,\n      fetchBttvChannelEmotesSuccess,\n      fetchBttvChannelEmotesFailure,\n    )]: handleFetchBttvChannelEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\nimport { pipe, pathOr, map, values, flatten } from 'ramda';\n\nimport {\n  fetchFfzGlobalEmotes as apiFetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes as apiFetchFfzChannelEmotes,\n} from '../../utils/api';\n\nconst defaultState = {\n  global: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n    items: [],\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: [],\n    // },\n  },\n};\n\nconst {\n  fetchFfzGlobalEmotesRequest,\n  fetchFfzGlobalEmotesSuccess,\n  fetchFfzGlobalEmotesFailure,\n  fetchFfzChannelEmotesRequest,\n  fetchFfzChannelEmotesSuccess,\n  fetchFfzChannelEmotesFailure,\n} = createActions(\n  'FETCH_FFZ_GLOBAL_EMOTES_REQUEST',\n  'FETCH_FFZ_GLOBAL_EMOTES_SUCCESS',\n  'FETCH_FFZ_GLOBAL_EMOTES_FAILURE',\n  'FETCH_FFZ_CHANNEL_EMOTES_REQUEST',\n  'FETCH_FFZ_CHANNEL_EMOTES_SUCCESS',\n  'FETCH_FFZ_CHANNEL_EMOTES_FAILURE',\n);\n\nconst parseFfzGlobalEmotes = pipe(\n  pathOr({}, ['sets']),\n  values,\n  map(pathOr([], ['emoticons'])),\n  flatten,\n);\nconst parseFfzChannelEmotes = parseFfzGlobalEmotes;\n\nexport const fetchFfzGlobalEmotes = () => async (dispatch) => {\n  dispatch(fetchFfzGlobalEmotesRequest());\n\n  try {\n    const response = await apiFetchFfzGlobalEmotes();\n    const data = { items: parseFfzGlobalEmotes(response) };\n\n    dispatch(fetchFfzGlobalEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchFfzGlobalEmotesFailure({ error }));\n  }\n};\n\nexport const fetchFfzChannelEmotes = (channelId, channel) => async (\n  dispatch,\n) => {\n  dispatch(fetchFfzChannelEmotesRequest({ channel }));\n\n  try {\n    const response = await apiFetchFfzChannelEmotes(channelId);\n    const data = {\n      channel,\n      items: parseFfzChannelEmotes(response),\n    };\n\n    dispatch(fetchFfzChannelEmotesSuccess(data));\n  } catch (error) {\n    dispatch(fetchFfzChannelEmotesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchFfzGlobalEmotes = (state, { type, payload }) => {\n  if (type === fetchFfzGlobalEmotesRequest.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: true,\n        isLoaded: false,\n        isError: false,\n        error: null,\n      },\n    };\n  }\n\n  if (type === fetchFfzGlobalEmotesSuccess.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: true,\n        isError: false,\n        error: null,\n        ...payload,\n      },\n    };\n  }\n\n  if (type === fetchFfzGlobalEmotesFailure.toString()) {\n    return {\n      ...state,\n      global: {\n        ...state.global,\n        isLoading: false,\n        isLoaded: false,\n        isError: true,\n        ...payload,\n      },\n    };\n  }\n\n  return state;\n};\n\nconst handleFetchFfzChannelEmotes = (state, { type, payload }) => {\n  const { channel } = payload;\n\n  if (type === fetchFfzChannelEmotesRequest.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: true,\n          isLoaded: false,\n          isError: false,\n          error: null,\n        },\n      },\n    };\n  }\n\n  if (type === fetchFfzChannelEmotesSuccess.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: true,\n          isError: false,\n          error: null,\n          items: payload.items,\n        },\n      },\n    };\n  }\n\n  if (type === fetchFfzChannelEmotesFailure.toString()) {\n    return {\n      ...state,\n      channels: {\n        ...state.channels,\n        [channel]: {\n          isLoading: false,\n          isLoaded: false,\n          isError: true,\n          error: payload.error,\n        },\n      },\n    };\n  }\n\n  return state;\n};\n\nconst reducer = handleActions(\n  {\n    [combineActions(\n      fetchFfzGlobalEmotesRequest,\n      fetchFfzGlobalEmotesSuccess,\n      fetchFfzGlobalEmotesFailure,\n    )]: handleFetchFfzGlobalEmotes,\n\n    [combineActions(\n      fetchFfzChannelEmotesRequest,\n      fetchFfzChannelEmotesSuccess,\n      fetchFfzChannelEmotesFailure,\n    )]: handleFetchFfzChannelEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport twitch from './twitch';\nimport bttv from './bttv';\nimport ffz from './ffz';\n\nexport default combineReducers({\n  twitch,\n  bttv,\n  ffz,\n});\n","import { createSelector } from 'reselect';\nimport { pipe, pathOr, values, flatten } from 'ramda';\n\nexport const twitchEmotesSelector = createSelector(\n  pathOr([], ['emotes', 'twitch', 'items']),\n  pipe(\n    values,\n    flatten,\n  ),\n);\n\nconst bttvChannelEmotesSelector = createSelector(\n  pathOr({}, ['emotes', 'bttv', 'channels']),\n  pathOr('', ['chat', 'currentChannel']),\n  (channels, currentChannel) => pathOr([], [currentChannel, 'items'], channels),\n);\nexport const bttvEmotesSelector = createSelector(\n  pathOr([], ['emotes', 'bttv', 'global', 'items']),\n  bttvChannelEmotesSelector,\n  (globalBttvEmotes, channelBttvEmotes) => [\n    ...globalBttvEmotes,\n    ...channelBttvEmotes,\n  ],\n);\n\nconst ffzChannelEmotesSelector = createSelector(\n  pathOr({}, ['emotes', 'ffz', 'channels']),\n  pathOr('', ['chat', 'currentChannel']),\n  (channels, currentChannel) => pathOr([], [currentChannel, 'items'], channels),\n);\nexport const ffzEmotesSelector = createSelector(\n  pathOr([], ['emotes', 'ffz', 'global', 'items']),\n  ffzChannelEmotesSelector,\n  (globalFfzEmotes, channelFfzEmotes) => [\n    ...globalFfzEmotes,\n    ...channelFfzEmotes,\n  ],\n);\n","/* eslint-disable no-underscore-dangle */\nimport { pathOr, omit } from 'ramda';\nimport { EventEmitter } from 'events';\nimport { parse as tekkoParse, format as tekkoFormat } from 'tekko';\nimport camelCase from 'camel-case';\nimport uuid from 'uuid/v4';\n\nconst chatUrl = 'wss://irc-ws.chat.twitch.tv:443';\n\nconst noopIRCCommands = [\n  'CAP',\n  '002',\n  '003',\n  '004',\n  '353',\n  '366',\n  '375',\n  '372',\n  '376',\n];\n\nconst booleanMessageTags = [\n  'mod',\n  'emote-only',\n  'r9k',\n  'rituals',\n  'subs-only',\n  'msg-param-should-share-streak',\n];\n\nconst numberMessageTags = [\n  'ban-duration',\n  'bits',\n  'msg-param-cumulative-months',\n  'msg-param-months',\n  'msg-param-promo-gift-total',\n  'msg-param-streak-months',\n  'msg-param-viewerCount',\n  'msg-param-threshold',\n];\n\nconst depricatedMessageTags = ['subscriber', 'turbo', 'user-type'];\n\nconst noticeMessageTags = [\n  'msg_banned',\n  'msg_bad_characters',\n  'msg_channel_blocked',\n  'msg_channel_suspended',\n  'msg_duplicate',\n  'msg_emoteonly',\n  'msg_facebook',\n  'msg_followersonly',\n  'msg_followersonly_followed',\n  'msg_followersonly_zero',\n  'msg_r9k',\n  'msg_ratelimit',\n  'msg_rejected',\n  'msg_rejected_mandatory',\n  'msg_room_not_found',\n  'msg_slowmode',\n  'msg_subsonly',\n  'msg_suspended',\n  'msg_timedout',\n  'msg_verified_email',\n];\n\nconst parseMessageEmotes = (raw = '') => {\n  if (!raw) return {};\n\n  return raw.split('/').reduce((acc, emote) => {\n    const [id, indexes] = emote.split(':');\n\n    return {\n      ...acc,\n      [id]: indexes.split(',').map((index) => {\n        const [start, end] = index.split('-');\n\n        return {\n          start: Number.parseInt(start, 10),\n          end: Number.parseInt(end, 10),\n        };\n      }),\n    };\n  }, {});\n};\n\nconst parseBadges = (data = '') => {\n  if (!data) return {};\n\n  return data.split(',').reduce((acc, badge) => {\n    const [name, value] = badge.split('/');\n\n    return {\n      ...acc,\n      [name]: value,\n    };\n  }, {});\n};\n\nconst normalizeTagValue = (name, value) => {\n  if (name === 'emotes') return parseMessageEmotes(value);\n  if (name === 'badges') return parseBadges(value);\n  if (name === 'badge-info') return parseBadges(value);\n\n  if (name === 'followers-only') {\n    let followersOnly = false;\n    if (value === '-1') {\n      followersOnly = false;\n    } else if (value === '0') {\n      followersOnly = true;\n    } else if (typeof value === 'string') {\n      followersOnly = parseInt(value, 10);\n    }\n    return followersOnly;\n  }\n\n  if (name === 'slow') {\n    let slow = false;\n    if (value === '0') {\n      slow = false;\n    } else if (typeof value === 'string') {\n      slow = parseInt(value, 10);\n    }\n    return slow;\n  }\n\n  if (booleanMessageTags.includes(name)) return value === '1';\n  if (numberMessageTags.includes(name)) return parseInt(value, 10);\n\n  return value;\n};\n\nexport const parseMessageTags = (data = {}) =>\n  Object.entries(data)\n    .filter(([key]) => !depricatedMessageTags.includes(key))\n    .reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [camelCase(key)]: normalizeTagValue(key, value),\n      };\n    }, {});\n\nexport const isBroadcaster = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'broadcaster');\n\nexport const isMod = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'moderator');\n\nexport const isSub = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'subscriber');\n\nexport const isVIP = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'vip');\n\nexport const monthsSubbed = (tags = {}) => {\n  const subbed = tags.subscriber;\n\n  return subbed ? parseInt(subbed, 10) : 0;\n};\n\nexport const getIsAction = (message) =>\n  message.startsWith('\\u0001ACTION ') && message.endsWith('\\u0001');\nexport const normalizeActionMessage = (message) => message.slice(8, -1);\n\nexport const parseMessageData = ({\n  raw,\n  command,\n  tags,\n  middle: params,\n  trailing: message,\n  prefix,\n}) => ({\n  raw,\n  command,\n  tags: parseMessageTags(tags),\n  params,\n  message,\n  prefix,\n});\n\nexport const parseChatMessage = ({\n  message,\n  tags,\n  params,\n  prefix: { user },\n}) => {\n  const isAction = getIsAction(message);\n\n  return {\n    message: isAction ? normalizeActionMessage(message) : message,\n    tags,\n    user,\n    channel: params[0].slice(1),\n    isAction,\n  };\n};\n\nconst parseGlobalUserState = ({ tags }) => ({ tags });\nconst parseUserState = ({ tags, params: [channel] }) => ({\n  tags,\n  channel: channel.slice(1),\n});\nconst parseRoomState = parseUserState;\n\nclass Client extends EventEmitter {\n  socket;\n\n  options;\n\n  user;\n\n  channels;\n\n  _queue;\n\n  _messagesQueue;\n\n  constructor(options = {}) {\n    super();\n    this.socket = null;\n    this.channels = {};\n    this.options = options;\n    this.user = null;\n    this._queue = [];\n    this._messagesQueue = [];\n  }\n\n  _onConnect() {\n    const { name, auth } = this.options.identity;\n    this.sendRaw([\n      'CAP REQ :twitch.tv/tags twitch.tv/commands',\n      `PASS oauth:${auth}`,\n      `NICK ${name}`,\n    ]);\n    this.emit('connected');\n  }\n\n  _onClose(hadError) {\n    // TODO\n    const willReconnect = false;\n    this.emit('disconnected', { willReconnect, hadError });\n    if (willReconnect) {\n      this.connect();\n    }\n  }\n\n  _onError(error) {\n    // TODO\n    this.emit('error', error);\n  }\n\n  _onData(rawData) {\n    const data = rawData.trim().split('\\r\\n');\n    data.forEach((line) => this._handleMessage(line));\n  }\n\n  _handleMessage(raw) {\n    const parsedData = tekkoParse(raw);\n    parsedData.raw = raw;\n    const { command } = parsedData;\n\n    if (command === 'PING') {\n      this.sendRaw('PONG :tmi.twitch.tv');\n      this.emit('ping');\n      return;\n    }\n\n    if (parsedData.prefix && parsedData.prefix.user === 'jtv') {\n      // console.log('JTV');\n      // console.log(parsedData);\n      return;\n    }\n\n    if (command === '001') {\n      const name = parsedData.params[0];\n      this.options.identity.name = name;\n      return;\n    }\n\n    // noop\n    if (noopIRCCommands.includes(command)) {\n      return;\n    }\n\n    const data = parseMessageData(parsedData);\n    const channel = pathOr('', ['params', 0], data).slice(1);\n\n    // Sends a message to a channel\n    if (command === 'PRIVMSG') {\n      const eventData = parseChatMessage(data);\n      this.emit('message', eventData);\n      return;\n    }\n\n    // Sends user-state data when a user joins a channel or sends a PRIVMSG to a channel\n    if (command === 'USERSTATE') {\n      const eventData = parseUserState(data);\n      this.channels[channel].userState = eventData.tags;\n\n      const commandType =\n        this._messagesQueue.length === 0 ? 'JOIN_CHANNEL' : 'SEND_PRIVMSG';\n\n      // Last message was sent successfully\n      if (commandType === 'SEND_PRIVMSG') {\n        const message = this._messagesQueue.shift();\n        const isAction = message.startsWith('/me ');\n        const messageEventData = {\n          message: isAction ? message.slice(4) : message,\n          tags: {\n            ...eventData.tags,\n            id: uuid(),\n            tmiSentTs: new Date().getTime(),\n            userId: this.user.userId,\n          },\n          user: this.options.identity.name,\n          channel,\n          isAction,\n        };\n\n        this.emit('own-message', messageEventData);\n      }\n\n      this.emit('userstate', eventData);\n      return;\n    }\n\n    if (command === 'JOIN') {\n      const eventData = { channel };\n      this.channels = { ...this.channels, [channel]: {} };\n      this.emit('join', eventData);\n      return;\n    }\n\n    if (command === 'PART') {\n      const eventData = { channel };\n      this.channels = omit([channel], this.channels);\n      this.emit('part', eventData);\n      return;\n    }\n\n    if (command === 'ROOMSTATE') {\n      const eventData = parseRoomState(data);\n      this.channels[channel].roomState = eventData.tags;\n      this.emit('roomstate', eventData);\n      return;\n    }\n\n    if (command === 'NOTICE') {\n      const eventData = data;\n\n      // Last message was not sent\n      if (noticeMessageTags.includes(data.tags.msgId)) {\n        this._messagesQueue.shift();\n      }\n\n      this.emit('notice', eventData);\n      return;\n    }\n\n    if (command === 'GLOBALUSERSTATE') {\n      const eventData = parseGlobalUserState(data);\n      this.user = eventData.tags;\n\n      while (this._queue.length) {\n        const ircMessage = this._queue.shift();\n        this.sendRaw(ircMessage);\n      }\n\n      this.emit('globaluserstate', eventData);\n      return;\n    }\n\n    this.emit('unhandled-command', data);\n  }\n\n  sendRaw(message) {\n    const handleError = (err) => {\n      if (err) {\n        this.emit('error', err);\n      }\n    };\n\n    if (Array.isArray(message)) {\n      message.forEach((line) => this.socket.send(`${line}\\r\\n`, handleError));\n    } else {\n      this.socket.send(`${message}\\r\\n`, handleError);\n    }\n  }\n\n  connect() {\n    this.socket = new WebSocket(chatUrl);\n    const { socket } = this;\n\n    socket.addEventListener('open', () => this._onConnect());\n    socket.addEventListener('close', (hadError) => this._onClose(hadError));\n    socket.addEventListener('error', (error) => this._onError(error));\n    socket.addEventListener('message', (data) => this._onData(data.data));\n  }\n\n  say(channel, message) {\n    // TODO: check if conected to the channel before send\n\n    if (!message) return;\n\n    const ircMessage = tekkoFormat({\n      command: 'PRIVMSG',\n      middle: [`#${channel}`],\n      trailing: message,\n    });\n    this.sendRaw(ircMessage);\n\n    this._messagesQueue.push(message);\n  }\n\n  sendCommand(channel, command, params) {\n    const commandParams = Array.isArray(params) ? params.join(' ') : params;\n    const ircMessage = tekkoFormat({\n      command: 'PRIVMSG',\n      middle: [`#${channel}`],\n      trailing: `/${command} ${commandParams}`,\n    });\n    this.sendRaw(ircMessage);\n  }\n\n  join(roomName) {\n    const ircMessage = tekkoFormat({\n      command: 'JOIN',\n      middle: [`#${roomName}`],\n    });\n\n    if (!this.user) {\n      this._queue.push(ircMessage);\n    } else {\n      this.sendRaw(ircMessage);\n    }\n  }\n\n  part(roomName) {\n    const ircMessage = tekkoFormat({\n      command: 'PART',\n      middle: [`#${roomName}`],\n    });\n\n    if (!this.user) {\n      this._queue.push(ircMessage);\n    } else {\n      this.sendRaw(ircMessage);\n    }\n  }\n}\n\nexport default Client;\n","import pt from 'prop-types';\nimport { parse as twemojiParser } from 'twemoji-parser';\nimport emojilib from 'emojilib/emojis';\nimport urlRegex from 'url-regex';\nimport {\n  pipe,\n  toPairs,\n  map,\n  flatten,\n  find,\n  propEq,\n  join,\n  filter,\n  keys,\n  head,\n} from 'ramda';\n\n// const mentionRegex = /^@([\\p{Letter}_]+)/u;\nconst mentionRegex = /^@([\\w_]+)/;\nconst linkRegex = urlRegex({ strict: false });\n\nconst normalizeEmotesFromTags = pipe(\n  toPairs,\n  map(([id, value]) => map((v) => ({ id, ...v }), value)),\n  flatten,\n);\n\nconst getFfzSrcSet = pipe(\n  toPairs,\n  map(([dpi, url]) => `${url} ${dpi}x`),\n  join(', '),\n);\n\nconst TWITCH_EMOTES_CDN = '//static-cdn.jtvnw.net/emoticons/v1';\nconst BTTV_EMOTES_CDN = '//cdn.betterttv.net/emote';\n\nexport const createTwitchEmote = (alt, id) => ({\n  type: 'twitch-emote',\n  alt,\n  src: `${TWITCH_EMOTES_CDN}/${id}/1.0`,\n  srcSet: `${TWITCH_EMOTES_CDN}/${id}/1.0 1x, ${TWITCH_EMOTES_CDN}/${id}/2.0 2x, ${TWITCH_EMOTES_CDN}/${id}/3.0 4x`,\n});\nexport const createBttvEmote = (alt, { id }) => ({\n  type: 'bttv-emote',\n  alt,\n  src: `${BTTV_EMOTES_CDN}${id}/1x`,\n  srcSet: `${BTTV_EMOTES_CDN}/${id}/2x 2x, ${BTTV_EMOTES_CDN}/${id}/3x 4x`,\n});\nexport const createFfzEmote = (alt, { urls }) => ({\n  type: 'ffz-emote',\n  alt,\n  src: urls[1],\n  srcSet: getFfzSrcSet(urls),\n});\nexport const createEmoji = (alt, src) => ({\n  type: 'emoji',\n  alt,\n  src,\n  srcSet: null,\n});\nexport const createMention = (text, target) => ({\n  type: 'mention',\n  text,\n  target,\n});\nexport const createLink = (href) => ({\n  type: 'link',\n  text: href,\n  href,\n});\n\nexport const twitchEmoteType = pt.shape({\n  type: pt.oneOf(['twitch-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const bttvEmoteType = pt.shape({\n  type: pt.oneOf(['bttv-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const ffzEmoteType = pt.shape({\n  type: pt.oneOf(['ffz-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const emojiType = pt.shape({\n  type: pt.oneOf(['emoji']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const mentionType = pt.shape({\n  type: pt.oneOf(['mention']).isRequired,\n  text: pt.string.isRequired,\n  target: pt.string.isRequired,\n});\nexport const linkType = pt.shape({\n  type: pt.oneOf(['link']).isRequired,\n  text: pt.string.isRequired,\n  href: pt.string.isRequired,\n});\n\nconst findTwitchEmote = (name, twitch) => find(propEq('code', name), twitch);\nconst findBttvEmote = (name, bttv) => find(propEq('code', name), bttv);\nconst findFfzEmote = (name, ffz) => find(propEq('name', name), ffz);\nconst findEmoji = (char) =>\n  pipe(\n    filter(propEq('char', char)),\n    keys,\n    head,\n  )(emojilib);\n\nconst findEntity = (word, { twitch, bttv, ffz }, { parseTwitch = false }) => {\n  if (parseTwitch) {\n    const twitchEmote = findTwitchEmote(word, twitch);\n    if (twitchEmote) return createTwitchEmote(word, twitchEmote.id);\n  }\n\n  const bttvEmote = findBttvEmote(word, bttv);\n  if (bttvEmote) return createBttvEmote(word, bttvEmote);\n\n  const ffzEmote = findFfzEmote(word, ffz);\n  if (ffzEmote) return createFfzEmote(word, ffzEmote);\n\n  // Don't parse two or more emotes without spaces between\n  // Don't parse emote if it's not in the emojilib package\n  const emojiMatch = twemojiParser(word, { assetType: 'png' });\n  if (\n    emojiMatch &&\n    emojiMatch.length === 1 &&\n    emojiMatch[0].text.length === word.length\n  ) {\n    const emoji = findEmoji(word);\n\n    if (emoji) {\n      const [{ url }] = emojiMatch;\n      return createEmoji(emoji, url);\n    }\n  }\n\n  // TODO: Use unicode regex if it supports\n  const mentionMatch = word.match(mentionRegex);\n  if (mentionMatch) {\n    const [text, target] = mentionMatch;\n    return [\n      createMention(text, target.toLowerCase()),\n      word.length - text.length,\n    ];\n  }\n\n  const linkMatch = word.match(linkRegex);\n  if (linkMatch && linkMatch[0].length === word.length) {\n    return createLink(word);\n  }\n\n  return null;\n};\n\nconst formatMessage = (message, embeddedEmotes, emotes) => {\n  // If the message was sent by the current user, there is no embedded emotes\n  // So we need to parse twitch emotes manually\n\n  const isOwnMessage = embeddedEmotes === undefined || embeddedEmotes === null;\n  const hasEmbeddedEmotes =\n    embeddedEmotes && Object.keys(embeddedEmotes).length > 0;\n  const normalizedEmbeddedEmotes = normalizeEmotesFromTags(embeddedEmotes);\n\n  const result = [];\n  let offset = 0;\n  // Before that offset all content was added to the result array\n  let arrayOffset = 0;\n\n  // Check every word. From offset to the next space index\n  do {\n    const spaceIndex = message.indexOf(' ', offset + 1);\n\n    const isStart = offset === 0;\n    const isEnd = spaceIndex === -1;\n\n    const startIndex = isStart ? offset : offset + 1;\n    const endIndex = isEnd ? message.length : spaceIndex;\n\n    const word = message.substring(startIndex, endIndex);\n\n    if (word) {\n      let entity = null;\n\n      // Check embedded twitch emotes\n      if (hasEmbeddedEmotes) {\n        const embeddedEmote = find(\n          propEq('start', startIndex),\n          normalizedEmbeddedEmotes,\n        );\n\n        if (embeddedEmote) {\n          entity = createTwitchEmote(word, embeddedEmote.id);\n        }\n      }\n\n      // Check other entities\n      if (!entity) {\n        entity = findEntity(word, emotes, { parseTwitch: isOwnMessage });\n      }\n\n      if (entity) {\n        // Push all text before this entity\n        if (arrayOffset !== startIndex) {\n          const textBefore = message.substring(arrayOffset, startIndex);\n          result.push(textBefore);\n        }\n\n        // If entity it's an array it means entity may be not full word\n        // The second element is the difference between word length and entity length\n        if (Array.isArray(entity)) {\n          const [entityObject, difference] = entity;\n          result.push(entityObject);\n          arrayOffset = endIndex - difference;\n        } else {\n          result.push(entity);\n          arrayOffset = endIndex;\n        }\n      }\n    }\n\n    // If it's the last word and it wasn't added to the result add it now\n    if (spaceIndex === -1 && arrayOffset !== endIndex) {\n      const textAfter = message.substring(arrayOffset, endIndex);\n      result.push(textAfter);\n    }\n\n    offset = spaceIndex;\n  } while (offset !== -1);\n\n  return result;\n};\n\nexport default formatMessage;\n","import { createActions, handleActions, combineActions } from 'redux-actions';\nimport { pathOr } from 'ramda';\nimport { parse } from 'tekko';\n\nimport {\n  twitchEmotesSelector,\n  bttvEmotesSelector,\n  ffzEmotesSelector,\n} from './emotes/selectors';\nimport { fetchRecentMessages as apiFetchRecentMessages } from '../utils/api';\nimport { CHANNEL_MESSAGES_LIMIT } from '../utils/constants';\nimport {\n  getIsAction,\n  normalizeActionMessage,\n  parseMessageTags,\n} from '../utils/twitchChat';\nimport formatMessage from '../utils/formatMessage';\n\nconst defaultState = {\n  // [channel]: {\n  //   history: {\n  //     isLoading: true,\n  //     isLoaded: false,\n  //     isError: false,\n  //     error: null,\n  //   },\n  //   items: [],\n  // },\n};\n\nconst sliceMessages = (items) => {\n  const diff = items.length - CHANNEL_MESSAGES_LIMIT;\n  return diff > 0 ? items.slice(diff) : items;\n};\n\nconst getEmotes = (state) => ({\n  twitch: twitchEmotesSelector(state),\n  bttv: bttvEmotesSelector(state),\n  ffz: ffzEmotesSelector(state),\n});\n\nconst {\n  addMessages: addMessagesRequest,\n  fetchRecentMessagesRequest,\n  fetchRecentMessagesSuccess,\n  fetchRecentMessagesFailure,\n} = createActions(\n  'ADD_MESSAGES',\n  'FETCH_RECENT_MESSAGES_REQUEST',\n  'FETCH_RECENT_MESSAGES_SUCCESS',\n  'FETCH_RECENT_MESSAGES_FAILURE',\n);\n\nconst normalizeRecentMessages = (messages, state) =>\n  messages\n    .map((m) => parse(m))\n    .filter((m) => m.command === 'PRIVMSG')\n    .map(({ tags, params: [channel, message], prefix: { user } }) => {\n      const isAction = getIsAction(message);\n      const normalizedMessage = isAction\n        ? normalizeActionMessage(message)\n        : message;\n      const parsedTags = parseMessageTags(tags);\n      return {\n        message: normalizedMessage,\n        messageArray: formatMessage(\n          normalizedMessage,\n          parsedTags.emotes,\n          getEmotes(state),\n        ),\n        tags: parsedTags,\n        user,\n        channel: channel.slice(1),\n        isAction,\n        isHistory: true,\n      };\n    });\n\nexport const fetchRecentMessages = (channel) => async (dispatch, getState) => {\n  dispatch(fetchRecentMessagesRequest({ channel }));\n  try {\n    const response = await apiFetchRecentMessages(channel);\n    const data = {\n      channel,\n      items: normalizeRecentMessages(response.messages, getState()),\n    };\n\n    // console.log(normalizeRecentMessages(response.messages));\n\n    dispatch(fetchRecentMessagesSuccess(data));\n  } catch (error) {\n    dispatch(fetchRecentMessagesFailure({ channel, error }));\n  }\n};\n\nconst handleFetchRecentMessages = (state, { type, payload }) => {\n  const { channel } = payload;\n\n  if (type === fetchRecentMessagesRequest.toString()) {\n    const oldItems = pathOr([], [channel, 'items'], state);\n    return {\n      ...state,\n      [channel]: {\n        ...state[channel],\n        history: {\n          isLoading: true,\n          isLoaded: false,\n          isError: false,\n          error: null,\n        },\n        items: oldItems,\n      },\n    };\n  }\n\n  if (type === fetchRecentMessagesSuccess.toString()) {\n    return {\n      ...state,\n      [channel]: {\n        ...state[channel],\n        history: {\n          isLoading: false,\n          isLoaded: true,\n          isError: false,\n          error: null,\n        },\n        items: sliceMessages([...payload.items, ...state[channel].items]),\n      },\n    };\n  }\n\n  if (type === fetchRecentMessagesFailure.toString()) {\n    return {\n      ...state,\n      [channel]: {\n        ...state[channel],\n        history: {\n          isLoading: false,\n          isLoaded: false,\n          isError: true,\n          error: payload.error,\n        },\n      },\n    };\n  }\n\n  return state;\n};\n\nexport const addMessages = (payload) => (dispatch, getState) => {\n  const newItems = payload.items.map(({ message, tags, ...rest }) => ({\n    message,\n    messageArray: formatMessage(message, tags.emotes, getEmotes(getState())),\n    tags,\n    ...rest,\n  }));\n\n  dispatch(\n    addMessagesRequest({\n      ...payload,\n      items: newItems,\n    }),\n  );\n};\n\nconst handleAddMessages = (state, { payload }) => {\n  const { channel } = payload;\n  const oldItems = pathOr([], [channel, 'items'], state);\n\n  return {\n    ...state,\n    [channel]: {\n      ...state[channel],\n      items: sliceMessages([...oldItems, ...payload.items]),\n    },\n  };\n};\n\nconst reducer = handleActions(\n  {\n    [addMessagesRequest]: handleAddMessages,\n    [combineActions(\n      fetchRecentMessagesRequest,\n      fetchRecentMessagesSuccess,\n      fetchRecentMessagesFailure,\n    )]: handleFetchRecentMessages,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","export const TWITCH_API_AUTH_BASE = 'https://id.twitch.tv/oauth2/authorize';\n\nexport const TWITCH_API_CLIENT_ID = process.env.REACT_APP_TWITCH_API_CLIENT_ID;\nexport const TWITCH_API_REDIRECT_URI =\n  process.env.REACT_APP_TWITCH_API_REDIRECT_URI;\n\nexport const CHANNEL_MESSAGES_LIMIT = 500;\n","import { combineReducers } from 'redux';\n\nimport auth from './auth';\nimport chat from './chat';\nimport emotes from './emotes/index';\nimport messages from './messages';\n\nexport default combineReducers({\n  auth,\n  chat,\n  emotes,\n  messages,\n});\n","/* eslint-disable no-underscore-dangle */\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  {},\n  compose(\n    applyMiddleware(thunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__\n      ? window.__REDUX_DEVTOOLS_EXTENSION__()\n      : (noop) => noop,\n  ),\n);\n\nexport default store;\n","import emojilib from 'emojilib/emojis';\n\nconst replaceEmojis = (text) =>\n  text\n    .split(' ')\n    .map((word) => {\n      if (word[0] !== ':' || word[word.length - 1] !== ':') {\n        return word;\n      }\n\n      const name = word.slice(1, -1);\n      const emoji = emojilib[name];\n\n      return emoji && emoji.char ? emoji.char : word;\n    })\n    .join(' ');\n\nexport default replaceEmojis;\n","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst ChatInputRoot = styled.form`\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n  background-color: #000;\n\n  & > :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n\n  & > :not(:last-child) {\n    margin-right: 20px;\n  }\n\n  a {\n    color: #bf94ff;\n    text-decoration: none;\n\n    &:focus,\n    &:hover {\n      color: #a970ff;\n      text-decoration: underline;\n    }\n\n    &:visited {\n      color: #a970ff;\n    }\n  }\n`;\nconst SendButton = styled.button`\n  padding: 0 10px;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #9147ff;\n  outline: none;\n  font-size: 12px;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #772ce8;\n  }\n\n  &:active {\n    background-color: #5c16c5;\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n\n  &[disabled] {\n    background-color: rgba(255, 255, 255, 0.26);\n    color: rgba(255, 255, 255, 0.8);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\nconst Textarea = styled.textarea`\n  display: block;\n  padding: 10px;\n  width: 100%;\n  height: 38px;\n  max-height: 91px;\n  min-height: 40px;\n  overflow: hidden;\n  border: 2px solid transparent;\n  background-color: #262626;\n  font-family: inherit;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\n\nconst ChatInput = ({ isAuth, isDisabled, onSubmit }) => {\n  const textareaRef = useRef(null);\n  const [text, setText] = useState('');\n\n  const handleChange = (e) => setText(e.target.value);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(text);\n    setText('');\n  };\n\n  const handleKeyDown = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        const message = text.trim();\n        if (message) {\n          onSubmit(message);\n          setText('');\n        }\n      }\n    },\n    [onSubmit, setText, text],\n  );\n\n  useEffect(() => {\n    const textareaNode = textareaRef.current;\n\n    textareaNode.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      textareaNode.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [handleKeyDown]);\n\n  return (\n    <ChatInputRoot onSubmit={handleSubmit}>\n      <Textarea\n        placeholder=\"Send a message\"\n        ref={textareaRef}\n        maxLength={500}\n        disabled={isDisabled}\n        onChange={handleChange}\n        value={text}\n      />\n      <Controls>\n        {!isAuth && <Link to=\"/chat/auth\">Sign in with Twitch</Link>}\n        <SendButton disabled={isDisabled} type=\"submit\">\n          Chat\n        </SendButton>\n      </Controls>\n    </ChatInputRoot>\n  );\n};\n\nChatInput.defaultProps = {\n  isDisabled: false,\n};\n\nChatInput.propTypes = {\n  isAuth: pt.bool.isRequired,\n  isDisabled: pt.bool,\n  onSubmit: pt.func.isRequired,\n};\n\nexport default ChatInput;\n","import React from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport {\n  twitchEmoteType,\n  bttvEmoteType,\n  ffzEmoteType,\n  emojiType,\n  mentionType,\n  linkType,\n} from '../utils/formatMessage';\n\nconst ChatMessageRoot = styled.div`\n  padding: 5px 20px;\n  color: ${(p) => (p.isAction ? p.color : '#fff')};\n  opacity: ${(p) => (p.isHistory ? '0.5' : '1')};\n  line-height: 20px;\n  word-wrap: break-word;\n\n  &:nth-child(even) {\n    background-color: #1f1925;\n  }\n`;\nconst Name = styled.span`\n  font-weight: bold;\n  color: ${(p) => p.color};\n`;\nconst Emote = styled.img`\n  display: inline-block;\n  margin: -5px 0;\n  vertical-align: middle;\n`;\nconst Emoji = styled.img`\n  display: inline-block;\n  margin-top: -5px;\n  margin-bottom: -4px;\n  width: 20px;\n  height: auto;\n  vertical-align: middle;\n`;\nconst Mention = styled.span``;\nconst Link = styled.a.attrs({ rel: 'noreferrer noopener', target: '_blank' })`\n  color: #bf94ff;\n  text-decoration: none;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\n\nexport const tagsType = pt.shape({\n  badgeInfo: pt.shape({\n    subscriber: pt.number,\n  }),\n  badges: pt.shape({}),\n  color: pt.string.isRequired,\n  displayName: pt.string.isRequired,\n  emotes: pt.shape({}),\n  flags: pt.string,\n  id: pt.string,\n  mod: pt.bool,\n  roomId: pt.string,\n  tmiSentId: pt.oneOfType([pt.string, pt.number]),\n  userId: pt.string,\n});\n\nconst renderMessageArray = (item, key) => {\n  if (typeof item !== 'object') return item;\n\n  if (\n    item.type === 'twitch-emote' ||\n    item.type === 'bttv-emote' ||\n    item.type === 'ffz-emote'\n  ) {\n    return (\n      <Emote key={key} src={item.src} srcSet={item.srcSet} alt={item.alt} />\n    );\n  }\n\n  if (item.type === 'emoji') {\n    return (\n      <Emoji key={key} src={item.src} srcSet={item.srcSet} alt={item.alt} />\n    );\n  }\n\n  if (item.type === 'mention') {\n    return <Mention key={key}>{item.text}</Mention>;\n  }\n\n  if (item.type === 'link') {\n    // console.log(item);\n    return (\n      <Link key={key} href={item.href}>\n        {item.text}\n      </Link>\n    );\n  }\n\n  return null;\n};\n\nconst ChatMessage = ({\n  // message,\n  messageArray,\n  tags: { color, displayName },\n  isHistory,\n  isAction,\n}) => (\n  <ChatMessageRoot isHistory={isHistory} isAction={isAction} color={color}>\n    <Name color={color}>{displayName}</Name>\n    {!isAction && ':'} {messageArray.map(renderMessageArray)}\n  </ChatMessageRoot>\n);\n\nChatMessage.defaultProps = {\n  isHistory: false,\n  isAction: false,\n};\n\nChatMessage.propTypes = {\n  // message: pt.string.isRequired,\n  messageArray: pt.arrayOf(\n    pt.oneOfType([\n      pt.string,\n      pt.shape({}),\n      twitchEmoteType,\n      bttvEmoteType,\n      ffzEmoteType,\n      emojiType,\n      mentionType,\n      // TODO: fix warning with link type\n      linkType,\n    ]),\n  ).isRequired,\n  tags: tagsType.isRequired,\n  isHistory: pt.bool,\n  isAction: pt.bool,\n};\n\nexport default ChatMessage;\n","import React, { useState, useEffect, useRef } from 'react';\nimport pt from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { pathOr } from 'ramda';\nimport Scrollbar from 'react-scrollbars-custom';\n\nimport ChatInput from './ChatInput';\nimport ChatMessage from './ChatMessage';\n\nconst MORE_MESSAGES_OFFSET = 100;\n\nconst ChatRoot = styled.div`\n  height: 100vh;\n  background-color: #222;\n  font-size: 12px;\n`;\nconst ChatWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background-color: #000;\n`;\nconst MessagesWrapper = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\nconst Messages = styled(Scrollbar).attrs({\n  disableTracksWidthCompensation: true,\n})`\n  overflow-y: auto;\n\n  .ScrollbarsCustom-TrackY {\n    background: none !important;\n  }\n\n  .ScrollbarsCustom-ThumbY {\n    margin-left: auto;\n    margin-right: auto;\n    width: 6px !important;\n  }\n\n  .ScrollbarsCustom-Content {\n    padding-bottom: 10px !important;\n  }\n`;\nconst MoreMessagesButton = styled.button`\n  position: absolute;\n  left: 50%;\n  bottom: 10px;\n  display: ${(p) => (p.visible ? 'block' : 'none')};\n  padding: 5px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  transform: translateX(-50%);\n`;\n\nconst messagesSelector = (state) =>\n  pathOr([], ['messages', state.chat.currentChannel, 'items'], state);\n\nconst Chat = ({ onSendMessage }) => {\n  const isAuth = useSelector((state) => state.auth.isAuth);\n  const messages = useSelector(messagesSelector);\n  // TODO: check if the user has a rights to send messages\n  const isConnected = useSelector((state) => state.chat.isConnected);\n  const [\n    isMoreMessagesButtonVisible,\n    setIsMoreMessagesButtonVisible,\n  ] = useState(false);\n  const messagesRef = useRef(null);\n\n  const handleScrollToBottom = () => {\n    if (messagesRef.current && messagesRef.current.scrollToBottom) {\n      messagesRef.current.scrollToBottom();\n    }\n  };\n\n  useEffect(() => {\n    if (!isMoreMessagesButtonVisible) {\n      handleScrollToBottom();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages]);\n\n  const handleScrollUpdate = ({\n    clientHeight,\n    contentScrollHeight,\n    scrollTop,\n  }) => {\n    const maxScrollTop = contentScrollHeight - clientHeight;\n    const isVisible = scrollTop + MORE_MESSAGES_OFFSET < maxScrollTop;\n\n    setIsMoreMessagesButtonVisible(isVisible);\n  };\n\n  return (\n    <ChatRoot>\n      <ChatWrapper>\n        <MessagesWrapper>\n          <Messages onUpdate={handleScrollUpdate} ref={messagesRef}>\n            {messages.map(\n              ({ message, messageArray, tags, isAction, isHistory }) => (\n                <ChatMessage\n                  key={tags.id}\n                  message={message}\n                  messageArray={messageArray}\n                  tags={tags}\n                  isAction={isAction}\n                  isHistory={isHistory}\n                />\n              ),\n            )}\n          </Messages>\n          <MoreMessagesButton\n            onClick={handleScrollToBottom}\n            visible={isMoreMessagesButtonVisible}\n          >\n            More messages below\n          </MoreMessagesButton>\n        </MessagesWrapper>\n        <ChatInput\n          onSubmit={onSendMessage}\n          isDisabled={!isAuth || !isConnected}\n          isAuth={isAuth}\n        />\n      </ChatWrapper>\n    </ChatRoot>\n  );\n};\n\nChat.propTypes = {\n  onSendMessage: pt.func.isRequired,\n};\n\nexport default Chat;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { pathOr } from 'ramda';\n\nimport { fetchTwitchEmotes } from '../reducers/emotes/twitch';\nimport {\n  fetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes,\n} from '../reducers/emotes/bttv';\nimport {\n  fetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes,\n} from '../reducers/emotes/ffz';\nimport { addMessages, fetchRecentMessages } from '../reducers/messages';\nimport {\n  setCurrentChannel,\n  setIsConnected,\n  updateGlobalUserState,\n  updateUserState,\n  updateRoomState,\n  removeChannel,\n} from '../reducers/chat';\nimport { setIsAuth } from '../reducers/auth';\nimport Client from '../utils/twitchChat';\nimport replaceEmojis from '../utils/replaceEmojis';\n\nimport Chat from './Chat';\n\nlet client = null;\n\nconst channelIdSelector = (state) =>\n  pathOr(\n    null,\n    ['chat', 'channels', state.chat.currentChannel, 'roomState', 'roomId'],\n    state,\n  );\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const isAuth = useSelector((state) => state.auth.isAuth);\n  const username = useSelector((state) => state.auth.user.login);\n  const currentChannel = useSelector((state) => state.chat.currentChannel);\n  const currentChannelId = useSelector(channelIdSelector);\n  const userId = useSelector((state) => state.auth.user.id);\n\n  useEffect(() => {\n    const rawUser = localStorage.getItem('user');\n\n    if (rawUser) {\n      const user = JSON.parse(rawUser);\n\n      dispatch(setIsAuth({ isAuth: true, user }));\n    }\n\n    if (window.location.hash) {\n      dispatch(setCurrentChannel(window.location.hash.slice(1)));\n    }\n\n    // TODO: try to connect to the chat. if there is an error, set isAuth to false and connect without login\n  }, [dispatch]);\n\n  useEffect(() => {\n    document.title = currentChannel\n      ? `#${currentChannel} - ${process.env.REACT_APP_NAME} `\n      : process.env.REACT_APP_NAME;\n  }, [currentChannel]);\n\n  useEffect(() => {\n    if (currentChannel && isAuth) {\n      if (client) {\n        client.disconnect();\n      }\n\n      const handleMessage = (data) => {\n        const eventData = {\n          channel: data.channel,\n          items: [data],\n        };\n        dispatch(addMessages(eventData));\n      };\n\n      const options = {\n        identity: {\n          name: username,\n          auth: localStorage.accessToken,\n        },\n      };\n      client = new Client(options);\n\n      client.connect();\n\n      client.join(currentChannel);\n\n      client.on('connected', () => dispatch(setIsConnected(true)));\n      client.on('disconnected', () => dispatch(setIsConnected(false)));\n\n      client.on('globaluserstate', (data) =>\n        dispatch(updateGlobalUserState(data)),\n      );\n      client.on('userstate', (data) => dispatch(updateUserState(data)));\n      client.on('roomstate', (data) => dispatch(updateRoomState(data)));\n\n      client.on('part', (data) => dispatch(removeChannel(data)));\n\n      client.on('message', handleMessage);\n      client.on('own-message', handleMessage);\n\n      // setTimeout(() => client.part(currentChannel), 5000);\n    }\n  }, [dispatch, username, currentChannel, isAuth]);\n\n  useEffect(() => {\n    dispatch(fetchBttvGlobalEmotes());\n    dispatch(fetchFfzGlobalEmotes());\n  }, [dispatch]);\n\n  useEffect(() => {\n    // TODO: fetch recent messages after all emotes were loaded\n    if (currentChannel) {\n      dispatch(fetchRecentMessages(currentChannel));\n    }\n  }, [dispatch, currentChannel]);\n\n  useEffect(() => {\n    if (userId) {\n      dispatch(fetchTwitchEmotes(userId));\n    }\n  }, [dispatch, userId]);\n\n  useEffect(() => {\n    // TODO: check if emotes for the current channel is already in the store\n    if (currentChannel && currentChannelId) {\n      dispatch(fetchBttvChannelEmotes(currentChannelId, currentChannel));\n      dispatch(fetchFfzChannelEmotes(currentChannelId, currentChannel));\n    }\n  }, [dispatch, currentChannel, currentChannelId]);\n\n  const handleSendMessage = (message) => {\n    console.log(message);\n    const normalizedMessage = replaceEmojis(message.trim());\n    console.log(normalizedMessage);\n    client.say(currentChannel, normalizedMessage);\n  };\n\n  return <Chat onSendMessage={handleSendMessage} />;\n};\n\nexport default Home;\n","import {\n  TWITCH_API_AUTH_BASE,\n  TWITCH_API_CLIENT_ID,\n  TWITCH_API_REDIRECT_URI,\n} from './constants';\n\nconst authParams = {\n  client_id: TWITCH_API_CLIENT_ID,\n  redirect_uri: TWITCH_API_REDIRECT_URI,\n  response_type: 'token+id_token',\n  scope: [\n    'openid',\n    'chat:edit',\n    'chat:read',\n    'user_blocks_read',\n    'user_blocks_edit',\n    'user_subscriptions',\n  ].join('+'),\n  claims: JSON.stringify({\n    id_token: { email_verified: null, picture: null, preferred_username: null },\n  }),\n  // state: uid(),\n};\n\n// const getAuthUrl = () => {\n//   const search = new URLSearchParams();\n//   Object.entries(authParams).forEach(([key, value]) => search.set(key, value));\n\n//   return `${TWITCH_API_AUTH_BASE}?${search.toString()}`;\n// };\n\nconst getAuthUrl = () => {\n  const search = Object.entries(authParams)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n\n  return `${TWITCH_API_AUTH_BASE}?${search}`;\n};\n\nexport default getAuthUrl;\n","import getAuthUrl from '../utils/getAuthUrl';\n\nconst Auth = () => {\n  window.location.href = getAuthUrl();\n\n  return null;\n};\n\nexport default Auth;\n","import { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport jwt from 'jsonwebtoken';\n\nimport { fetchUser } from '../reducers/auth';\n\nconst AuthCallback = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  if (!window.location.hash) return null;\n\n  const params = new URLSearchParams(window.location.hash.slice(1));\n\n  const accessToken = params.get('access_token');\n  const idToken = params.get('id_token');\n\n  if (!accessToken || !idToken) return null;\n\n  localStorage.setItem('accessToken', accessToken);\n  localStorage.setItem('idToken', idToken);\n\n  const { sub: id } = jwt.decode(idToken);\n\n  dispatch(fetchUser(id));\n\n  history.push('/chat/');\n\n  return null;\n};\n\nexport default AuthCallback;\n","import { css } from 'styled-components';\n\nexport default css`\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    margin: 0;\n    font-family: Roobert, Helvetica Neue, Helvetica, Arial, sans-serif;\n  }\n`;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { createGlobalStyle } from 'styled-components';\n\nimport common from './common';\nimport colors from './colors';\nimport vars from './vars';\n\nexport default createGlobalStyle`\n  :root {\n    ${colors};\n    ${vars};\n  }\n  ${common};\n`;\n","import React from 'react';\nimport pt from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Home from './components/Home';\nimport Auth from './components/Auth';\nimport AuthCallback from './components/AuthCallback';\nimport GlobalStyles from './styles';\n\nconst getHomeComponent = () => {\n  const isAuthRedirect = window.location.hash.startsWith('#access_token=');\n  return isAuthRedirect ? AuthCallback : Home;\n};\n\nconst App = ({ store }) => (\n  <>\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/chat/\" component={getHomeComponent()} />\n          <Route exact path=\"/chat/auth\" component={Auth} />\n        </Switch>\n      </Router>\n    </Provider>\n    <GlobalStyles />\n  </>\n);\n\nApp.propTypes = {\n  store: pt.shape({}).isRequired,\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport store from './store';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App store={store} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}