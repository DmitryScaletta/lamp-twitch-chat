{"version":3,"sources":["utils/isAuthRedirect.js","utils/constants.js","utils/fetchRequest.js","utils/api.js","reducers/auth/auth.js","reducers/badges/badges.js","reducers/chat/chat.js","reducers/emotes/twitch.js","reducers/emotes/bttv.js","reducers/emotes/ffz.js","reducers/emotes/index.js","utils/normalizeHref.js","utils/formatMessage.js","reducers/chat/selectors.js","reducers/emotes/selectors.js","reducers/badges/selectors.js","utils/getMessageBadges.js","utils/twitchChat.js","utils/normalizeRecentMessages.js","reducers/messages/messages.js","reducers/options/options.js","reducers/index.js","store/index.js","reducers/auth/selectors.js","reducers/messages/selectors.js","hooks/useFetchChatData.js","hooks/useLocationHash.js","hooks/useCurrentChannel.js","hooks/useTwitchClient.js","utils/replaceEmojis.js","reducers/options/selectors.js","icons/smiley-face.svg","icons/gears.svg","icons/close.svg","components/IconButton.jsx","components/ChatModal.jsx","components/Scrollbar.jsx","components/EmotePicker.jsx","components/Switch.jsx","components/Options.jsx","components/ChatInput.jsx","components/ChatMessage/types.js","components/ChatMessage/Message.jsx","components/ChatMessage/Notice.jsx","components/ChatMessage/UserNotice.jsx","components/ChatMessage/ChatMessage.jsx","components/Messages.jsx","components/Chat.jsx","components/Home.jsx","utils/getAuthUrl.js","components/Auth.jsx","components/AuthCallback.jsx","styles/common.js","styles/colors.js","styles/vars.js","styles/index.js","App.jsx","index.jsx"],"names":["isAuthRedirect","hash","startsWith","MESSAGE_TYPES","STORE_FLAGS","DEFAULT","isLoading","isLoaded","isError","error","REQUEST","SUCCESS","FAILURE","fetchRequest","url","a","options","fetchOptions","timeout","controller","AbortController","signal","setTimeout","abort","fetch","response","json","body","ok","Error","statusText","data","apiRequest","apiRequestKraken","headers","Accept","process","Authorization","localStorage","accessToken","fetchUser","id","fetchTwitchEmotesBySets","userId","fetchBttvChannelEmotes","channelId","fetchFfzChannelEmotes","fetchRecentMessages","channel","fetchGlobalBadges","language","fetchChannelBadges","fetchBlockedUsers","defaultState","isAuth","user","default","login","displayName","setIsAuth","createAction","fetchUserRequest","fetchUserSuccess","fetchUserFailure","handleFetchUser","state","R","payload","reducer","handleActions","undefined","global","items","channels","createActions","fetchGlobalBadgesRequest","fetchGlobalBadgesSuccess","fetchGlobalBadgesFailure","fetchChannelBadgesRequest","fetchChannelBadgesSuccess","fetchChannelBadgesFailure","parseBadges","handleFetchGlobalBadges","handleFetchChannelBadges","currentChannel","isConnected","globalState","blockedUsers","setCurrentChannel","setIsConnected","updateGlobalUserState","updateUserState","updateRoomState","removeChannel","fetchBlockedUsersRequest","fetchBlockedUsersSuccess","fetchBlockedUsersFailure","parseBlockedUsers","handleFetchBlockUsers","tags","userState","roomState","fetchTwitchEmotesRequest","fetchTwitchEmotesSuccess","fetchTwitchEmotesFailure","handleFetchTwitchEmotes","fetchBttvGlobalEmotesRequest","fetchBttvGlobalEmotesSuccess","fetchBttvGlobalEmotesFailure","fetchBttvChannelEmotesRequest","fetchBttvChannelEmotesSuccess","fetchBttvChannelEmotesFailure","parseBttvChannelEmotes","channelEmotes","sharedEmotes","handleFetchBttvGlobalEmotes","handleFetchBttvChannelEmotes","fetchFfzGlobalEmotesRequest","fetchFfzGlobalEmotesSuccess","fetchFfzGlobalEmotesFailure","fetchFfzChannelEmotesRequest","fetchFfzChannelEmotesSuccess","fetchFfzChannelEmotesFailure","parseFfzGlobalEmotes","defaultSets","default_sets","sets","parseFfzChannelEmotes","handleFetchFfzGlobalEmotes","handleFetchFfzChannelEmotes","combineReducers","twitch","bttv","ffz","isStartsWithProtocolRegex","normalizeHref","href","test","TWITCH_EMOTES_CDN","mentionRegex","linkRegex","urlRegex","strict","normalizeEmotesFromTags","value","v","getFfzSrcSet","dpi","createTwitchEmote","type","alt","code","src","srcSet","createBttvEmote","createFfzEmote","name","urls","createMention","text","target","twitchEmoteType","pt","shape","oneOf","isRequired","string","bttvEmoteType","ffzEmoteType","emojiType","mentionType","linkType","regexMap","4","9","findEntity","word","parseTwitch","twitchEmote","RegExp","findTwitchEmote","bttvEmote","findBttvEmote","ffzEmote","findFfzEmote","char","emojiMatch","twemojiParser","assetType","length","emoji","emojilib","mentionMatch","match","toLowerCase","linkMatch","formatMessage","message","embeddedEmotes","emotes","isOwnMessage","hasEmbeddedEmotes","Object","keys","normalizedEmbeddedEmotes","result","offset","arrayOffset","spaceIndex","indexOf","startIndex","endIndex","substring","entity","embeddedEmote","textBefore","push","Array","isArray","entityObject","difference","textAfter","currentChannelSelector","currentChannelIdSelector","isConnectedSelector","chat","isBlockedUsersLoadedSelector","blockedUsersSelector","twitchEmotesSelector","createSelector","createGlobalEmotesSelector","createChannelEmotesSelector","bttvGlobalEmotesSelector","bttvChannelEmotesSelector","bttvEmotesSelector","bttvGlobal","bttvChannel","ffzGlobalEmotesSelector","ffzChannelEmotesSelector","ffzEmotesSelector","ffzGlobal","ffzChannel","emotesSelector","createIsEmotesLoadedSelector","globalLoaded","channelLoaded","isBttvEmotesLoadedSelector","isFfzEmotesLoadedSelector","isTwitchEmotesLoadedSelector","regexEmotesMap","createGlobalTwitchEmote","emoteCategoriesSelector","isEmotesLoaded","title","map","filter","globalBadgesSelector","badges","channelBadgesSelector","isBadgesLoadedSelector","isGlobalBadgesLoadedSelector","isChannelBadgesLoadedSelector","getMessageBadges","globalBadges","channelBadges","version","badge","description","imageUrl1x","image_url_1x","imageUrl2x","image_url_2x","imageUrl4x","image_url_4x","label","createBadge","Boolean","noopIRCCommands","booleanMessageTags","numberMessageTags","depricatedMessageTags","noticeMessageTags","split","reduce","acc","normalizeTagValue","raw","emote","indexes","index","start","end","Number","parseInt","parseMessageEmotes","followersOnly","slow","includes","replace","parseMessageTags","entries","key","camelCase","getIsAction","endsWith","normalizeActionMessage","slice","parseState","params","parseUserState","parseRoomState","parseCommand","parseNotice","parseUserNotice","parseClearMessage","parseClearChat","parseHostTarget","Client","socket","identity","_queue","_messagesQueue","this","auth","nick","Math","floor","random","pass","sendRaw","emit","hadError","willReconnect","rawData","trim","forEach","line","_handleMessage","shift","isAction","messageEventData","uuid","tmiSentTs","Date","getTime","parsedData","tekkoParse","command","prefix","middle","trailing","parseMessageData","eventData","_emmitOwnMessage","msgId","parseChatMessage","ircMessage","handleError","err","send","WebSocket","addEventListener","_onConnect","_onClose","_onError","_onData","tekkoFormat","commandParams","join","roomName","EventEmitter","normalizeRecentMessages","messages","m","parse","normalizedMessage","parsedTags","messageArray","isHistory","addMessageEntity","addRecentMessagesAction","addRecentMessages","fetchRecentMessagesRequest","fetchRecentMessagesSuccess","fetchRecentMessagesFailure","clearChat","sliceMessages","diff","getIsEven","prev","addedItemsCount","isSliced","handleFetchRecentMessages","history","oldItems","newItems","slicedMessages","isEven","targetUserId","isDeleted","getOptionsFromLocalStorage","JSON","showTimestamps","splitChat","blacklistKeywords","highlightKeywords","changeOption","option","setItem","stringify","enhancer","applyMiddleware","thunk","store","createStore","rootReducer","isAuthSelector","userLoginSelector","userIdSelector","messagesSelector","isHistoryLoadedSelector","isEvenSelector","useFetchChatData","dispatch","useDispatch","useSelector","currentChannelId","isTwitchEmotesLoaded","isBttvEmotesLoaded","isFfzEmotesLoaded","isBadgesLoaded","isHistoryLoaded","isBlockedUsersLoaded","isReadyToAddRecentMessages","useEffect","apiFetchGlobalBadges","apiFetchRecentMessages","getState","emoticon_sets","fetchTwitchEmotes","apiFetchBlockedUsers","apiFetchBttvChannelEmotes","apiFetchFfzChannelEmotes","apiFetchChannelBadges","useLocationHash","useState","window","location","setHash","handleHashChange","removeEventListener","useCurrentChannel","document","client","useTwitchClient","handleConnected","handleDisconnected","handleGlobalUserState","handleUserState","handleRoomState","handleMessage","rest","addMessage","handleNotice","handleUserNotice","handleClearChat","connect","on","off","replaceEmojis","optionsSelector","isShowTimestampsSelector","isSplitChatSelector","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","fill","d","fillRule","clipRule","_ref","svgRef","props","viewBox","ref","ForwardRef","forwardRef","sizes","small","css","medium","IconButton","styled","button","attrs","p","size","defaultProps","propTypes","ChatModalRoot","div","CloseButton","CloseIcon","CloseIconSvg","ChatModal","children","onClose","onClick","Scrollbar","CustomScrollbar","disableTracksWidthCompensation","EmotePickerRoot","Categories","Category","CategoryHeader","CategoryItems","Emote","img","EmotePicker","emoteCategories","onEmoteClick","renderCategory","useCallback","SwitchRoot","Label","Input","input","Switch","checked","readOnly","onChange","htmlFor","OptionsRoot","Header","h2","Option","OptionText","span","Options","renderOption","renderOptionsCategory","ChatInputRoot","form","ControlsWrapper","Controls","SendButton","TextareaWrapper","EmotesModal","OptionsModal","Textarea","textarea","EmotesButton","SmileyFaceIcon","SmileyFaceIconSvg","GearsIcon","GearsIconSvg","StyledLink","Link","ChatInput","isDisabled","onChangeText","onSubmit","textareaRef","useRef","textareaWrapperRef","optionsModalRef","isEmotesModalVisible","setIsEmotesModalVisible","isOptionsModalVisible","setIsOptionsModalVisible","handleCloseEmotesModal","handleCloseOptionsModal","useOnClickOutside","handleKeyDown","e","preventDefault","textareaNode","current","renderEmotesModal","emoteName","t","trimLeft","renderOptionsModal","placeholder","maxLength","disabled","to","React","memo","arrayOf","oneOfType","badgeInfo","subscriber","color","flags","mod","bool","roomId","tmiSentId","number","systemMsg","msgParamCumulativeMonths","msgParamDisplayName","msgParamLogin","msgParamMonths","msgParamPromoGiftTotal","msgParamPromoName","msgParamRecipientDisplayName","msgParamRecipientId","msgParamRecipientUserName","msgParamSenderLogin","msgParamSenderName","msgParamShouldShareStreak","msgParamStreakMonths","msgParamSubPlan","msgParamSubPlanName","msgParamViewerCount","msgParamRitualName","msgParamThreshold","MessageRoot","isMention","Name","Emoji","Mention","isActive","Timestamp","Badge","Message","userLogin","isShowTimestamps","onNameRightClick","isVisible","setIsVisible","format","aria-label","renderBadges","onContextMenu","item","rel","renderMessageArray","NoticeRoot","Notice","UserNoticeRoot","ChatMessage","onNameClick","MessagesRoot","StyledScrollbar","MoreMessagesButton","visible","Messages","isSplitChat","isMoreMessagesButtonVisible","setIsMoreMessagesButtonVisible","scrollbarRef","handleScrollToBottom","scrollToBottom","onUpdate","clientHeight","contentScrollHeight","scrollTop","ChatRoot","ChatWrapper","Chat","onSendMessage","setText","handleNameRightClick","Home","rawUser","getItem","handleSendMessage","say","authParams","client_id","redirect_uri","response_type","scope","claims","id_token","email_verified","picture","preferred_username","getAuthUrl","search","Auth","AuthCallback","useHistory","URLSearchParams","get","idToken","apiFetchUser","display_name","jwt","decode","sub","lastChannel","createGlobalStyle","colors","vars","common","App","exact","path","component","ReactGA","initialize","page","pathname","pageview","ReactDOM","render","getElementById"],"mappings":"2RAEeA,EAFQ,SAACC,GAAD,OAAUA,EAAKC,WAAW,mB,4ECUpCC,EACF,UADEA,EAEK,iBAFLA,EAGU,sBAGVC,EAAc,CACzBC,QAAS,CACPC,WAAW,EACXC,UAAU,EACVC,SAAS,EACTC,MAAO,MAETC,QAAS,CACPJ,WAAW,EACXC,UAAU,EACVC,SAAS,EACTC,MAAO,MAETE,QAAS,CACPL,WAAW,EACXC,UAAU,EACVC,SAAS,EACTC,MAAO,MAETG,QAAS,CACPN,WAAW,EACXC,UAAU,EACVC,SAAS,I,yjBCtCb,IAuBeK,EAvBG,uCAAG,WAAOC,GAAP,qCAAAC,EAAA,6DAAYC,EAAZ,+BAAsB,GACrCC,EADe,KACKD,GAEpBA,EAAQE,UACJC,EAAa,IAAIC,uBAChBH,EAAaC,QACpBD,EAAY,KAAQA,EAAR,CAAsBI,OAAQF,EAAWE,SACrDC,YAAW,kBAAMH,EAAWI,UAASP,EAAQE,UAP5B,SAUIM,MAAMV,EAAKG,GAVf,cAUbQ,EAVa,gBAYAA,EAASC,OAZT,UAYbC,EAZa,OAcdF,EAASG,GAdK,uBAeXnB,EAAQoB,MAAMJ,EAASK,aACvBC,KAAOJ,EACPlB,EAjBW,iCAoBZkB,GApBY,4CAAH,sD,yjBCGlB,I,EAaMK,EAAa,SAAClB,EAAKE,GAAN,OACjBH,EAAaC,EAAD,KAAWE,EAAX,CAAoBE,QFTE,QEiB9Be,EAAmB,SAACnB,EAAKE,GAAN,OACvBgB,EAAW,GAAD,OAtBc,gCAsBd,OAAwBlB,GAAxB,KACLE,EADK,CAERkB,QAlB4B,CAC9BC,OAAQ,mCACR,YAAaC,kCACbC,cAAc,SAAD,OAAWC,aAAaC,kBAkB1BC,EAAY,SAACC,GAAD,OAZA3B,EAYwB,aAAD,OAAc2B,GAX5DT,EAAW,GAAD,OAjBa,+BAiBb,OAAuBlB,GAAvB,KACLE,EADK,CAERkB,QAhB2B,CAC7BG,cAAc,UAAD,OAAYC,aAAaC,iBAYhB,IAACzB,EAAKE,GAcjB0B,EAA0B,SAACC,GAAD,OACrCV,EAAiB,UAAD,OAAWU,EAAX,aAILC,EAAyB,SAACC,GAAD,OACpCb,EAAW,mDAAD,OAAoDa,KAInDC,EAAwB,SAACD,GAAD,OACnCb,EAAW,2CAAD,OAA4Ca,KAE3CE,EAAsB,SAACC,GAAD,OACjChB,EAAW,6DAAD,OACqDgB,EADrD,6BAICC,EAAoB,eAACC,EAAD,uDAAY,KAAZ,OAC/BlB,EAAW,8DAAD,OACsDkB,KAErDC,EAAqB,SAACN,GAAD,IAAYK,EAAZ,uDAAuB,KAAvB,OAChClB,EAAW,+CAAD,OACuCa,EADvC,6BACqEK,KAGpEE,EAAoB,SAACT,GAAD,OAC/BV,EAAiB,UAAD,OAAWU,EAAX,a,yjBCvDlB,I,IAAMU,EAAe,CACnBC,QAAQ,EACRC,KAAK,KACAnD,EAAYoD,QADb,CAEFf,GAAI,KACJgB,MAAO,KACPC,YAAa,QAIJC,EAAYC,YAAa,eAChCC,EAAmBD,YAAa,sBAChCE,EAAmBF,YAAa,sBAChCG,EAAmBH,YAAa,sBAuBhCI,GAAe,mBAClBH,GAAmB,SAACI,GAAD,OAClBC,IAAiBD,EAAO,CACtBX,QAAQ,EACRC,KAAK,KAAMnD,EAAYM,cAJR,cAMlBoD,GAAmB,SAACG,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAClBD,IAAiBD,EAAO,CACtBX,QAAQ,EACRC,KAAK,KACAnD,EAAYO,QADb,GAECwD,QAXU,cAclBJ,GAAmB,SAACE,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAClBD,IAAiBD,EAAO,CACtBX,QAAQ,EACRC,KAAK,KACAnD,EAAYQ,QADb,CAEFH,MAAO0D,EAAQ1D,aAnBF,GAgCN2D,EARCC,YAAc,EAAD,eAExBV,GAhCmB,SAACM,EAAD,WAAUE,QAAWb,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,KAA7B,YACnBU,EADmB,CAEtBX,YAAmBgB,IAAXhB,EAAuBW,EAAMX,OAASA,EAC9CC,KAAK,KAAMU,EAAMV,KAAb,GAAsBA,QA8BrBS,GAELX,G,2kBC9DF,I,KAAMA,GAAe,CACnBkB,OAAO,KACFnE,EAAYC,QADX,CAEJmE,MAAO,KAETC,SAAU,I,GAkBRC,YACF,8BACA,8BACA,8BACA,+BACA,+BACA,gCAZAC,G,GAAAA,yBACAC,G,GAAAA,yBACAC,G,GAAAA,yBACAC,G,GAAAA,0BACAC,G,GAAAA,0BACAC,G,GAAAA,0BAUIC,GAAcf,IAAS,GAAI,CAAC,eA+B5BgB,IAAuB,mBAC1BP,IAA2B,SAACV,GAAD,OAC1BC,IAAiBD,EAAO,CACtBM,OAAO,KAAMnE,EAAYM,cAHF,cAK1BkE,IAA2B,SAACX,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC1BD,IAAiBD,EAAO,CACtBM,OAAO,KAAMnE,EAAYO,QAAnB,CAA4B6D,MAAOL,EAAQK,aAP1B,cAS1BK,IAA2B,SAACZ,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC1BD,IAAiBD,EAAO,CACtBM,OAAO,KAAMnE,EAAYQ,QAAnB,CAA4BH,MAAO0D,EAAQ1D,aAX1B,GAevB0E,IAAwB,mBAC3BL,IAA4B,SAACb,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC3BD,IAAiBD,EAAO,CACtBQ,SAAS,eACNN,EAAQnB,QADH,KACkB5C,EAAYM,eAJd,cAO3BqE,IAA4B,SAACd,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC3BD,IAAiBD,EAAO,CACtBQ,SAAS,eACNN,EAAQnB,QADH,KACkB5C,EAAYO,QAD9B,CACuC6D,MAAOL,EAAQK,cAVtC,cAa3BQ,IAA4B,SAACf,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC3BD,IAAiBD,EAAO,CACtBQ,SAAS,eACNN,EAAQnB,QADH,KACkB5C,EAAYQ,QAD9B,CACuCH,MAAO0D,EAAQ1D,cAhBtC,GA6Bf2D,GARCC,YAAc,KAEvBa,GAFsB,GAGtBC,IAEL9B,I,8mBC3GF,I,GAAMA,GAAe,CACnB+B,eAAgB,KAChBC,aAAa,EACbC,YAAa,GACbb,SAAU,GAMVc,aAAa,MACRnF,EAAYC,QADL,CAEVmE,MAAO,M,GAWPE,YACF,sBACA,mBACA,2BACA,oBACA,oBACA,kBAZAc,G,GAAAA,kBACAC,G,GAAAA,eACAC,G,GAAAA,sBACAC,G,GAAAA,gBACAC,G,GAAAA,gBACAC,G,GAAAA,c,GAcEnB,YACF,8BACA,8BACA,+BANAoB,G,GAAAA,yBACAC,G,GAAAA,yBACAC,G,GAAAA,yBAOIC,GAAoB/B,KACxBA,KAAO,UACPA,KAAMA,KAAO,CAAC,OAAQ,WA0ClBgC,IAAqB,mBACxBJ,IAA2B,SAAC7B,GAAD,OAC1BC,IAAiBD,EAAO,CACtBsB,aAAa,MAAMnF,EAAYM,cAHV,cAKxBqF,IAA2B,SAAC9B,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC1BD,IAAiBD,EAAO,CACtBsB,aAAa,MAAMnF,EAAYO,QAAnB,CAA4B6D,MAAOL,EAAQK,aAPlC,cASxBwB,IAA2B,SAAC/B,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC1BD,IAAiBD,EAAO,CACtBsB,aAAa,MAAMnF,EAAYQ,QAAnB,CAA4BH,MAAO0D,EAAQ1D,aAXlC,GA4BZ2D,GAbCC,YAAc,UAAD,eAExBmB,IA7C2B,SAACvB,EAAD,gBAC3BA,EAD2B,CAE9BmB,eAF8B,EAAUjB,aA2Cb,eAGxBsB,IA1CwB,SAACxB,EAAD,gBACxBA,EADwB,CAE3BoB,YAF2B,EAAUlB,aAuCV,eAIxBuB,IAvC+B,SAACzB,EAAD,OAAqBkC,EAArB,EAAUhC,QAAWgC,KAArB,aAC/BlC,EAD+B,CAElCqB,YAAY,MAAMrB,EAAMqB,YAAb,GAA6Ba,QAiCb,eAKxBR,IApCyB,SAAC1B,EAAD,WAAUE,QAAWnB,EAArB,EAAqBA,QAASmD,EAA9B,EAA8BA,KAA9B,OAC5BjC,IAAiBD,EAAO,CACtBQ,SAAS,eACNzB,EAAU,CAAEoD,UAAWD,SA4BD,eAMxBP,IA/ByB,SAAC3B,EAAD,WAAUE,QAAWnB,EAArB,EAAqBA,QAASmD,EAA9B,EAA8BA,KAA9B,OAC5BjC,IAAiBD,EAAO,CACtBQ,SAAS,eACNzB,EAAU,CAAEqD,UAAWF,SAsBD,eAOxBN,IA1BuB,SAAC5B,EAAD,OAAmBjB,EAAnB,EAAUmB,QAAV,aACvBF,EADuB,CAE1BQ,SAAUP,KAAO,CAAClB,GAAUiB,EAAMQ,eAiBP,IAQtByB,IAEL7C,I,6jBChHF,I,MAAMA,GAAY,MACbjD,EAAYC,QADC,CAEhBmE,MAAO,K,GAcLE,YACF,8BACA,8BACA,+BANA4B,G,GAAAA,yBACAC,G,GAAAA,yBACAC,G,GAAAA,yBAoBIC,IAAuB,qBAC1BH,IAA2B,SAACrC,GAAD,aACvBA,EADuB,GAEvB7D,EAAYM,YAHU,eAK1B6F,IAA2B,SAACtC,EAAD,OAAUE,EAAV,EAAUA,QAAV,aACvBF,EADuB,GAEvB7D,EAAYO,QAFW,CAG1B6D,MAAOL,EAAQK,WARU,eAU1BgC,IAA2B,SAACvC,EAAD,OAAUE,EAAV,EAAUA,QAAV,aACvBF,EADuB,GAEvB7D,EAAYQ,QAFW,CAG1BH,MAAO0D,EAAQ1D,WAbU,IAmBd2D,GAFCC,YAAcoC,GAAyBpD,I,skBChDvD,I,SA0BIqB,YACF,mCACA,mCACA,mCACA,oCACA,oCACA,qCAZAgC,G,GAAAA,6BACAC,G,GAAAA,6BACAC,G,GAAAA,6BACAC,G,GAAAA,8BACAC,G,GAAAA,8BACAC,G,GAAAA,8BAUIC,GAAyB,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,aAAlB,6BAC1BD,GAD0B,aAE1BC,KAkCCC,IAA2B,qBAC9BT,IAA+B,SAACzC,GAAD,OAC9BC,IAAiBD,EAAO,CACtBM,OAAO,MAAMnE,EAAYM,cAHE,eAK9BiG,IAA+B,SAAC1C,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC9BD,IAAiBD,EAAO,CACtBM,OAAO,MAAMnE,EAAYO,QAAnB,CAA4B6D,MAAOL,EAAQK,aAPtB,eAS9BoC,IAA+B,SAAC3C,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC9BD,IAAiBD,EAAO,CACtBM,OAAO,MAAMnE,EAAYQ,QAAnB,CAA4BH,MAAO0D,EAAQ1D,aAXtB,IAe3B2G,IAA4B,qBAC/BP,IAAgC,SAAC5C,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC/BD,IAAiBD,EAAO,CACtBQ,SAAS,eACNN,EAAQnB,QADH,MACkB5C,EAAYM,eAJV,eAO/BoG,IAAgC,SAAC7C,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC/BD,IAAiBD,EAAO,CACtBQ,SAAS,eACNN,EAAQnB,QADH,MACkB5C,EAAYO,QAD9B,CACuC6D,MAAOL,EAAQK,cAVlC,eAa/BuC,IAAgC,SAAC9C,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC/BD,IAAiBD,EAAO,CACtBQ,SAAS,eACNN,EAAQnB,QADH,MACkB5C,EAAYQ,QAD9B,CACuCH,MAAO0D,EAAQ1D,cAhBlC,IA6BnB2D,GARCC,YAAc,MAEvB8C,GAFsB,GAGtBC,IA9Gc,CACnB7C,OAAQ,CACNjE,WAAW,EACXC,UAAU,EACVC,SAAS,EACTC,MAAO,KACP+D,MAAO,IAETC,SAAU,K,qmBCRZ,I,GA0BIC,YACF,kCACA,kCACA,kCACA,mCACA,mCACA,oCAZA2C,G,GAAAA,4BACAC,G,GAAAA,4BACAC,G,GAAAA,4BACAC,G,GAAAA,6BACAC,G,GAAAA,6BACAC,G,GAAAA,6BAUIC,GAAuB,SAAC,GAAD,IAAiBC,EAAjB,EAAGC,aAA2BC,EAA9B,EAA8BA,KAA9B,OAC3B5D,KACEA,KAAO0D,GACP1D,KACAA,KAAMA,KAAS,GAAI,cACnBA,KAJFA,CAKE4D,IAEEC,GAAwB7D,KAC5BA,IAAS,GAAI,CAAC,SACdA,KACAA,KAAMA,IAAS,GAAI,CAAC,eACpBA,MAkCI8D,IAA0B,qBAC7BX,IAA8B,SAACpD,GAAD,OAC7BC,IAAiBD,EAAO,CACtBM,OAAO,MAAMnE,EAAYM,cAHC,eAK7B4G,IAA8B,SAACrD,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC7BD,IAAiBD,EAAO,CACtBM,OAAO,MAAMnE,EAAYO,QAAnB,CAA4B6D,MAAOL,EAAQK,aAPvB,eAS7B+C,IAA8B,SAACtD,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC7BD,IAAiBD,EAAO,CACtBM,OAAO,MAAMnE,EAAYQ,QAAnB,CAA4BH,MAAO0D,EAAQ1D,aAXvB,IAe1BwH,IAA2B,qBAC9BT,IAA+B,SAACvD,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC9BD,IAAiBD,EAAO,CACtBQ,SAAS,eACNN,EAAQnB,QADH,MACkB5C,EAAYM,eAJX,eAO9B+G,IAA+B,SAACxD,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC9BD,IAAiBD,EAAO,CACtBQ,SAAS,eACNN,EAAQnB,QADH,MACkB5C,EAAYO,QAD9B,CACuC6D,MAAOL,EAAQK,cAVnC,eAa9BkD,IAA+B,SAACzD,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC9BD,IAAiBD,EAAO,CACtBQ,SAAS,eACNN,EAAQnB,QADH,MACkB5C,EAAYQ,QAD9B,CACuCH,MAAO0D,EAAQ1D,cAhBnC,IA6BlB2D,GARCC,YAAc,MAEvB2D,GAFsB,GAGtBC,IAxHc,CACnB1D,OAAQ,CACNjE,WAAW,EACXC,UAAU,EACVC,SAAS,EACTC,MAAO,KACP+D,MAAO,IAETC,SAAU,KCXGyD,eAAgB,CAC7BC,UACAC,QACAC,S,qKCRIC,GAA4B,wBAKnBC,GAHO,SAACC,GAAD,OACpBF,GAA0BG,KAAKD,GAAQA,EAAvC,YAAmDA,I,+NCIrD,IAAME,GAAoB,sCAGpBC,GAAe,ywQACfC,GAAYC,KAAS,CAAEC,QAAQ,IAE/BC,GAA0B7E,KAC9BA,KACAA,MAAM,oCAAEzB,EAAF,KAAMuG,EAAN,YAAiB9E,MAAM,SAAC+E,GAAD,O,2VAAA,EAAUxG,MAAOwG,KAAMD,MACpD9E,MAGIgF,GAAehF,KACnBA,KACAA,MAAM,oCAAEiF,EAAF,KAAOrI,EAAP,qBAAmBA,EAAnB,YAA0BqI,EAA1B,QACNjF,KAAO,OAGIkF,GAAoB,SAAC,GAAD,IAAG3G,EAAH,EAAGA,GAAH,MAAmB,CAClD4G,KAAM,eACNC,IAF+B,EAAOC,KAGtCC,IAAI,GAAD,OAAKd,GAAL,YAA0BjG,EAA1B,QACHgH,OAAO,GAAD,OAAKf,GAAL,YAA0BjG,EAA1B,oBAAwCiG,GAAxC,YAA6DjG,EAA7D,oBAA2EiG,GAA3E,YAAgGjG,EAAhG,aAEKiH,GAAkB,SAAC,GAAD,IAAGjH,EAAH,EAAGA,GAAH,MAAmB,CAChD4G,KAAM,aACNC,IAF6B,EAAOC,KAGpCC,IAAI,GAAD,OA1BmB,4BA0BnB,YAAwB/G,EAAxB,OACHgH,OAAO,GAAD,OA3BgB,4BA2BhB,YAAwBhH,EAAxB,mBA3BgB,4BA2BhB,YAAwDA,EAAxD,YAEKkH,GAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,MAAqB,CACjDR,KAAM,YACNC,IAAKM,EACLJ,IAAKK,EAAK,GACVJ,OAAQP,GAAaW,KAQVC,GAAgB,SAACC,EAAMC,GAAP,MAAmB,CAC9CX,KAAM,UACNU,OACAC,WAQWC,GAAkBC,KAAGC,MAAM,CACtCd,KAAMa,KAAGE,MAAM,CAAC,iBAAiBC,WACjCf,IAAKY,KAAGI,OAAOD,WACfb,IAAKU,KAAGI,OAAOD,WACfZ,OAAQS,KAAGI,OAAOD,aAEPE,GAAgBL,KAAGC,MAAM,CACpCd,KAAMa,KAAGE,MAAM,CAAC,eAAeC,WAC/Bf,IAAKY,KAAGI,OAAOD,WACfb,IAAKU,KAAGI,OAAOD,WACfZ,OAAQS,KAAGI,OAAOD,aAEPG,GAAeN,KAAGC,MAAM,CACnCd,KAAMa,KAAGE,MAAM,CAAC,cAAcC,WAC9Bf,IAAKY,KAAGI,OAAOD,WACfb,IAAKU,KAAGI,OAAOD,WACfZ,OAAQS,KAAGI,OAAOD,aAEPI,GAAYP,KAAGC,MAAM,CAChCd,KAAMa,KAAGE,MAAM,CAAC,UAAUC,WAC1Bf,IAAKY,KAAGI,OAAOD,WACfb,IAAKU,KAAGI,OAAOD,WACfZ,OAAQS,KAAGI,SAEAI,GAAcR,KAAGC,MAAM,CAClCd,KAAMa,KAAGE,MAAM,CAAC,YAAYC,WAC5BN,KAAMG,KAAGI,OAAOD,WAChBL,OAAQE,KAAGI,OAAOD,aAEPM,GAAWT,KAAGC,MAAM,CAC/Bd,KAAMa,KAAGE,MAAM,CAAC,SAASC,WACzBN,KAAMG,KAAGI,OAAOD,WAChB7B,KAAM0B,KAAGI,OAAOD,aAGZO,GAAW,CACfC,EAAG,OACHC,EAAG,MAiBCC,GAAa,SAACC,EAAD,KAA2D,IAAlD7C,EAAiD,EAAjDA,OAAQC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,IAAmC,IAA1B4C,YACjD,QAD2E,SAC1D,CACf,IAAMC,EAhBc,SAACtB,EAAMzB,GAAP,OACtBjE,MAAO,YAAmB,IAAhBzB,EAAe,EAAfA,GAAI8G,EAAW,EAAXA,KAEZ,OAAI9G,GAAM,GAAKA,GAAM,GAEZ0I,OAAO,IAAD,OADOP,GAASnI,IAAO8G,EACvB,MAAqBd,KAAKmB,GAElCA,IAASL,IACfpB,GAQmBiD,CAAgBJ,EAAM7C,GAC1C,GAAI+C,EACF,OAAO9B,GAAkB,CAAE3G,GAAIyI,EAAYzI,GAAI8G,KAAMyB,IAGzD,IAAMK,EAZc,SAACzB,EAAMxB,GAAP,OAAgBlE,KAAOA,KAAS,OAAQ0F,GAAOxB,GAYjDkD,CAAcN,EAAM5C,GACtC,GAAIiD,EAAW,OAAO3B,GAAgB2B,GAEtC,IAAME,EAda,SAAC3B,EAAMvB,GAAP,OAAenE,KAAOA,KAAS,OAAQ0F,GAAOvB,GAchDmD,CAAaR,EAAM3C,GACpC,GAAIkD,EAAU,OAAO5B,GAAe4B,GAIpC,IAtF+B/B,EAoEdiC,EAkBXC,EAAaC,iBAAcX,EAAM,CAAEY,UAAW,QACpD,GACEF,GACsB,IAAtBA,EAAWG,QACXH,EAAW,GAAG3B,KAAK8B,SAAWb,EAAKa,OACnC,CACA,IAAMC,GAxBSL,EAwBST,EAvB1B9G,KAAOA,KAASA,KAAS,OAAQuH,IAAQvH,KAAQA,KAAjDA,CAAyD6H,KAyBvD,GAAID,EAAO,CAAC,IACDhL,EADA,aACS4K,EADT,MACA5K,IACT,OAhG2B0I,EAgGD1I,EAhGU,CACxCuI,KAAM,QACNC,IAAI,IAAD,OA8FoBwC,EA9FpB,KACHtC,MACAC,OAAQ,OAiGR,IAAMuC,EAAehB,EAAKiB,MAAMtD,IAChC,GAAIqD,EAAc,CAAC,IAAD,eACOA,EADP,GACTjC,EADS,KACHC,EADG,KAEhB,MAAO,CACLF,GAAcC,EAAMC,EAAOkC,eAC3BlB,EAAKa,OAAS9B,EAAK8B,QAIvB,IAnGyBrD,EAmGnB2D,EAAYnB,EAAKiB,MAAMrD,IAC7B,OAAIuD,GAAaA,EAAU,GAAGN,SAAWb,EAAKa,OApGX,CACnCxC,KAAM,OACNU,KAFyBvB,EAqGLwC,EAlGpBxC,KAAMD,GAAcC,IAqGb,MAiFM4D,GA9EO,SAACC,EAASC,EAAgBC,GAI9C,IAAMC,OAAkClI,IAAnBgI,GAAmD,OAAnBA,EAC/CG,EACJH,GAAkBI,OAAOC,KAAKL,GAAgBT,OAAS,EACnDe,EAA2B7D,GAAwBuD,GAEnDO,EAAS,GACXC,EAAS,EAETC,EAAc,EAGlB,EAAG,CACD,IAAMC,EAAaX,EAAQY,QAAQ,IAAKH,EAAS,GAK3CI,EAHqB,IAAXJ,EAGaA,EAASA,EAAS,EACzCK,GAHwB,IAAhBH,EAGWX,EAAQR,OAASmB,EAEpChC,EAAOqB,EAAQe,UAAUF,EAAYC,GAE3C,GAAInC,EAAM,CACR,IAAIqC,EAAS,KAGb,GAAIZ,EAAmB,CACrB,IAAMa,EAAgBpJ,KACpBA,KAAS,QAASgJ,GAClBN,GAGEU,IACFD,EAASjE,GAAkB,CAAE3G,GAAI6K,EAAc7K,GAAI8G,KAAMyB,KAS7D,GAJKqC,IACHA,EAAStC,GAAWC,EAAMuB,EAAQ,CAAEtB,YAAauB,KAG/Ca,EAAQ,CAEV,GAAIN,IAAgBG,EAAY,CAC9B,IAAMK,EAAalB,EAAQe,UAAUL,EAAaG,GAClDL,EAAOW,KAAKD,GAKd,GAAIE,MAAMC,QAAQL,GAAS,CAAC,IAAD,EACUA,EADV,oBAClBM,EADkB,KACJC,EADI,KAEzBf,EAAOW,KAAKG,GACZZ,EAAcI,EAAWS,OAEzBf,EAAOW,KAAKH,GACZN,EAAcI,GAMpB,IAAoB,IAAhBH,GAAqBD,IAAgBI,EAAU,CACjD,IAAMU,EAAYxB,EAAQe,UAAUL,EAAaI,GACjDN,EAAOW,KAAKK,GAGdf,EAASE,SACU,IAAZF,GAET,OAAOD,GC3OIiB,GAAyB5J,IAAS,GAAI,CAAC,OAAQ,mBAE/C6J,GAA2B,SAAC9J,GAAD,OACtCC,IACE,KACA,CAAC,OAAQ,WAAY4J,GAAuB7J,GAAQ,YAAa,UACjEA,IAGS+J,GAAsB,SAAC/J,GAAD,OAAWA,EAAMgK,KAAK5I,aAE5C6I,GAA+B,SAACjK,GAAD,OAC1CA,EAAMgK,KAAK1I,aAAahF,UAAY0D,EAAMgK,KAAK1I,aAAa/E,SAEjD2N,GAAuB,SAAClK,GAAD,OAAWA,EAAMgK,KAAK1I,aAAaf,OCN1D4J,GAAuBC,aAClCnK,IAAS,GAAI,CAAC,SAAU,SAAU,UAClCA,KAAOA,KAAUA,OAGboK,GAA6B,SAACjF,GAAD,OACjCnF,IAAS,GAAI,CAAC,SAAUmF,EAAM,SAAU,WACpCkF,GAA8B,SAAClF,GAAD,OAAU,SAACpF,GAAD,OAC5CC,IACE,GACA,CAAC,SAAUmF,EAAM,WAAYyE,GAAuB7J,GAAQ,SAC5DA,KAGEuK,GAA2BF,GAA2B,QACtDG,GAA4BF,GAA4B,QACjDG,GAAqBL,aAChCG,GACAC,IACA,SAACE,EAAYC,GAAb,6BAAiCD,GAAjC,aAAgDC,OAG5CC,GAA0BP,GAA2B,OACrDQ,GAA2BP,GAA4B,OAChDQ,GAAoBV,aAC/BQ,GACAC,IACA,SAACE,EAAWC,GAAZ,6BAA+BD,GAA/B,aAA6CC,OAGlCC,GAAiB,SAACjL,GAAD,MAAY,CACxCkE,OAAQiG,GAAqBnK,GAC7BmE,KAAMsG,GAAmBzK,GACzBoE,IAAK0G,GAAkB9K,KAGnBkL,GAA+B,SAAC9F,GAAD,OAAU,SAACpF,GAC9C,IAAMjB,EAAU8K,GAAuB7J,GACjCmL,EACJnL,EAAMsI,OAAOlD,GAAM9E,OAAOhE,UAAY0D,EAAMsI,OAAOlD,GAAM9E,OAAO/D,QAC5D6O,EACJnL,KAAO,CAAC,SAAUmF,EAAM,WAAYrG,EAAS,YAAaiB,IAC1DC,KAAO,CAAC,SAAUmF,EAAM,WAAYrG,EAAS,WAAYiB,GAC3D,OAAOmL,GAAgBC,IAGZC,GAA6BH,GAA6B,QAC1DI,GAA4BJ,GAA6B,OACzDK,GAA+B,SAACvL,GAAD,OAC1CA,EAAMsI,OAAOpE,OAAO5H,UAAY0D,EAAMsI,OAAOpE,OAAO3H,SAQhDiP,GAAiB,CACrB,kBAAmB,MACnB,cAAmB,KACnB,YAAmB,KACnB,aAAmB,KACnB,aAAmB,KACnB,eAAmB,KACnB,iBAAmB,KACnB,WAAmB,KACnB,WAAmB,KACnB,SAAmB,KACnB,aAAmB,KACnB,WAAmB,KACnB,SAAmB,KACnB,SAAmB,MAGfC,GAA0B,SAAC,GAAD,IAAGjN,EAAH,EAAGA,GAAI8G,EAAP,EAAOA,KAAP,OAC9BH,GAAkB,CAAE3G,KAAI8G,KAAMkG,GAAelG,IAASA,KAE3CoG,GAA0BtB,cA1BD,SAACpK,GAAD,OACpCuL,GAA6BvL,IAC7BqL,GAA2BrL,IAC3BsL,GAA0BtL,MAyB1B,SAACA,GAAD,OAAWA,EAAMsI,OAAOpE,OAAO3D,QAC/BgK,GACAC,GACAI,GACAC,IACA,SAACc,EAAgBzH,EAAQwG,EAAYC,EAAaI,EAAWC,GAC3D,OAAKW,EAEE,CACL,CACEC,MAAO,2BACPrL,MAAOoK,EAAYkB,IAAIpG,KAEzB,CACEmG,MAAO,8BACPrL,MAAOyK,EAAWa,IAAInG,MAPnB,oBASFzF,KACDA,KAAO,CAAC,MACRA,KACAA,MAAM,SAACM,GAAD,MAAY,CAAEA,MAAON,KAAMkF,GAAmB5E,OAHnDN,CAIDiE,IAbG,CAcL,CACE0H,MAAO,SACPrL,MAAON,KAAMwL,GAAyBxL,KAAS,GAAI,IAAKiE,KAE1D,CACE0H,MAAO,YACPrL,MAAOmK,EAAWmB,IAAIpG,KAExB,CACEmG,MAAO,eACPrL,MAAOwK,EAAUc,IAAInG,OAEvBoG,QAAO,qBAAGvL,MAAkBqH,OAAS,KA5BX,MC3FnBmE,GAAuB,SAAC/L,GAAD,OAAWA,EAAMgM,OAAO1L,OAAOC,OACtD0L,GAAwB,SAACjM,GAAD,OACnCC,IAAS,GAAI,CAAC,SAAU,WAAY4J,GAAuB7J,GAAQ,WAaxDkM,GAAyB,SAAClM,GAAD,OAXD,SAACA,GAAD,OACnCA,EAAMgM,OAAO1L,OAAOhE,UAAY0D,EAAMgM,OAAO1L,OAAO/D,QAWpD4P,CAA6BnM,IATO,SAACA,GACrC,IAAMjB,EAAU8K,GAAuB7J,GACvC,OACEC,KAAS,EAAO,CAAC,SAAU,WAAYlB,EAAS,YAAaiB,IAC7DC,KAAS,EAAO,CAAC,SAAU,WAAYlB,EAAS,WAAYiB,GAKvBoM,CAA8BpM,ICOxDqM,GAZU,SAACL,EAAQM,EAAcC,GAS9C,OAAOtM,KAAOA,KAAWA,MARP,SAAC,GAAqB,IAAD,oBAAnB0F,EAAmB,KAAb6G,EAAa,KAC/BC,EACJxM,KAAS,EAAO,CAAC0F,EAAM,WAAY6G,GAAUD,IAC7CtM,KAAS,EAAO,CAAC0F,EAAM,WAAY6G,GAAUF,GAE/C,QAAOG,GAnBS,SAAC,GAAD,IAClBb,EADkB,EAClBA,MACAc,EAFkB,EAElBA,YACcC,EAHI,EAGlBC,aACcC,EAJI,EAIlBC,aACcC,EALI,EAKlBC,aALkB,MAMb,CACL3H,IAAKuG,EACLqB,MAAOP,EACPnH,IAAKoH,EACLnH,OAAO,GAAD,OAAKmH,EAAL,gBAAuBE,EAAvB,gBAAyCE,EAAzC,QASWG,CAAYT,MAGcxM,KAASkN,SAA7ClN,CAAuD+L,I,orBCjBhE,I,MAEMoB,GAAkB,CACtB,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAGIC,GAAqB,CACzB,MACA,aACA,MACA,UACA,YACA,iCAGIC,GAAoB,CACxB,cACA,eACA,OACA,8BACA,mBACA,6BACA,0BACA,wBACA,uBAGIC,GAAwB,CAAC,aAAc,QAAS,aAEhDC,GAAoB,CACxB,aACA,qBACA,sBACA,wBACA,gBACA,gBACA,eACA,oBACA,6BACA,yBACA,UACA,gBACA,eACA,yBACA,qBACA,eACA,eACA,gBACA,eACA,sBA0BIxM,GAAc,WAAgB,IAAflD,EAAc,uDAAP,GAC1B,OAAKA,EAEEA,EAAK2P,MAAM,KAAKC,QAAO,SAACC,EAAKlB,GAAW,IAAD,EACtBA,EAAMgB,MAAM,KADU,oBACrC9H,EADqC,KAC/BZ,EAD+B,KAG5C,OAAO,MACF4I,EADL,eAEGhI,EAAOZ,MAET,IATe,IAYd6I,GAAoB,SAACjI,EAAMZ,GAC/B,GAAa,WAATY,EAAmB,OAlCE,WAAe,IAAdkI,EAAa,uDAAP,GAChC,OAAKA,EAEEA,EAAIJ,MAAM,KAAKC,QAAO,SAACC,EAAKG,GAAW,IAAD,EACrBA,EAAML,MAAM,KADS,oBACpCjP,EADoC,KAChCuP,EADgC,KAG3C,OAAO,MACFJ,EADL,eAEGnP,EAAKuP,EAAQN,MAAM,KAAK5B,KAAI,SAACmC,GAAW,IAAD,EACjBA,EAAMP,MAAM,KADK,oBAC/BQ,EAD+B,KACxBC,EADwB,KAGtC,MAAO,CACLD,MAAOE,OAAOC,SAASH,EAAO,IAC9BC,IAAKC,OAAOC,SAASF,EAAK,YAI/B,IAhBc,GAiCaG,CAAmBtJ,GACjD,GAAa,WAATY,EAAmB,OAAO3E,GAAY+D,GAC1C,GAAa,eAATY,EAAuB,OAAO3E,GAAY+D,GAE9C,GAAa,mBAATY,EAA2B,CAC7B,IAAI2I,GAAgB,EAQpB,MAPc,OAAVvJ,EACFuJ,GAAgB,EACG,MAAVvJ,EACTuJ,GAAgB,EACU,kBAAVvJ,IAChBuJ,EAAgBF,SAASrJ,EAAO,KAE3BuJ,EAGT,GAAa,SAAT3I,EAAiB,CACnB,IAAI4I,GAAO,EAMX,MALc,MAAVxJ,EACFwJ,GAAO,EACmB,kBAAVxJ,IAChBwJ,EAAOH,SAASrJ,EAAO,KAElBwJ,EAGT,OAAIlB,GAAmBmB,SAAS7I,GAAwB,MAAVZ,EAC1CuI,GAAkBkB,SAAS7I,GAAcyI,SAASrJ,EAAO,IAExC,kBAAVA,EACFA,EAAM0J,QAAQ,MAAO,KAGvB1J,GAGI2J,GAAmB,eAAC5Q,EAAD,uDAAQ,GAAR,OAC9B2K,OAAOkG,QAAQ7Q,GACZgO,QAAO,gBAAE8C,EAAF,4BAAYrB,GAAsBiB,SAASI,MAClDlB,QAAO,SAACC,EAAD,GAAwB,IAAD,oBAAhBiB,EAAgB,KAAX7J,EAAW,KAC7B,OAAO,MACF4I,EADL,eAEGkB,KAAUD,GAAOhB,GAAkBgB,EAAK7J,OAE1C,KAoBM+J,GAAc,SAAC1G,GAAD,OACzBA,EAAQnM,WAAW,gBAAoBmM,EAAQ2G,SAAS,SAC7CC,GAAyB,SAAC5G,GAAD,OAAaA,EAAQ6G,MAAM,GAAI,IAoC/DC,GAAa,SAAC,GAAD,MAAkC,CACnDhN,KADiB,EAAGA,KAEpBnD,QAFiB,eAASoQ,OAAT,MAEAF,MAAM,KAEnBG,GAAiBF,GACjBG,GAAiBH,GAEjBI,GAAe,SAAC,GAAD,MAA2C,CAC9DlH,QADmB,EAAGA,QAEtBlG,KAFmB,EAAYA,KAG/BnD,QAHmB,eAAkBoQ,OAAlB,MAGFF,MAAM,KAEnBM,GAAcD,GACdE,GAAkBF,GAClBG,GAAoBH,GACpBI,GAAiBJ,GACjBK,GAAkBL,GAoTTM,G,YAzRb,aAA2B,IAAD,EAAd7S,EAAc,uDAAJ,GAAI,6BACxB,iDACK8S,OAAS,KACd,EAAKrP,SAAW,GAChB,EAAKzD,QAAUkD,IAAiB,CAAE6P,SAAU,IAAM/S,GAClD,EAAKuC,KAAO,KACZ,EAAKyQ,OAAS,GACd,EAAKC,eAAiB,GAPE,E,4EAUZ,IAAD,EACYC,KAAKlT,QAAQ+S,SAA5BnK,EADG,EACHA,KAAMuK,EADH,EACGA,KAERC,EAAOxK,GAnMS,mBACZyK,KAAKC,MAAsB,IAAhBD,KAAKE,SAAmB,MAmMvCC,EAAOL,EAAI,gBAAYA,GAAS,aAEtCD,KAAKO,QAAQ,CACX,6CADW,eAEHD,GAFG,eAGHJ,KAEVF,KAAKQ,KAAK,e,+BAGHC,GAGPT,KAAKQ,KAAK,eAAgB,CAAEE,eADN,EACqBD,e,+BAMpClU,GAEPyT,KAAKQ,KAAK,QAASjU,K,8BAGboU,GAAU,IAAD,OACFA,EAAQC,OAAOpD,MAAM,QAC7BqD,SAAQ,SAACC,GAAD,OAAU,EAAKC,eAAeD,Q,uCAG5B7O,EAAMnD,GACrB,IAAMqJ,EAAUnI,IAAS,GAAI,CAAC,iBAAkBlB,GAAUkR,MAAMgB,QAEhE,GAAuB,kBAAZ7I,EAAX,CAEA,IAAM8I,EAAW9I,EAAQnM,WAAW,QAC9BkV,EAAmB,CACvB/I,QAAS8I,EAAW9I,EAAQ6G,MAAM,GAAK7G,EACvClG,KAAK,MACAA,EADD,CAEF1D,GAAI4S,OACJC,WAAW,IAAIC,MAAOC,UACtB7S,OAAQuR,KAAK3Q,KAAKZ,SAEpBY,KAAM2Q,KAAKlT,QAAQ+S,SAASnK,KAC5B5G,UACAmS,YAGFjB,KAAKQ,KAAK,aAAcU,M,qCAGXtD,GACb,IAAM2D,EAAaC,iBAAW5D,GAC9B2D,EAAW3D,IAAMA,EAFC,IAGV6D,EAAYF,EAAZE,QAER,GAAgB,SAAZA,EAGF,OAFAzB,KAAKO,QAAQ,4BACbP,KAAKQ,KAAK,QAIZ,IAAIe,EAAWG,QAAqC,QAA3BH,EAAWG,OAAOrS,KAM3C,GAAgB,QAAZoS,GAaJ,IAAItE,GAAgBoB,SAASkD,GAA7B,CAIA,IAAM5T,EAhLsB,SAAC,GAAD,IAC9B+P,EAD8B,EAC9BA,IACA6D,EAF8B,EAE9BA,QACAxP,EAH8B,EAG9BA,KACQiN,EAJsB,EAI9ByC,OACUxJ,EALoB,EAK9ByJ,SACAF,EAN8B,EAM9BA,OAN8B,MAOzB,CACL9D,MACA6D,UACAxP,KAAMwM,GAAiBxM,GACvBiN,SACA/G,UACAuJ,UAmKeG,CAAiBN,GACxBzS,EAAUkB,IAAS,GAAI,CAAC,SAAU,GAAInC,GAAMmR,MAAM,GAGxD,GAAgB,YAAZyC,EAAJ,CAOA,GAAgB,cAAZA,EAAyB,CAC3B,IAAMK,EAAY3C,GAAetR,GAcjC,OAZAmS,KAAKzP,SAAWP,IAAiBgQ,KAAKzP,SAAtB,eACbzB,EAAU,CAAEoD,UAAW4P,EAAU7P,QAIlCjC,IAAS,EAAG,CAAC,iBAAkBlB,EAAS,UAAWkR,MAAQ,GAG3DA,KAAK+B,iBAAiBD,EAAU7P,KAAMnD,QAGxCkR,KAAKQ,KAAK,YAAasB,GAIzB,GAAgB,SAAZL,EAAoB,CACtB,IAAMK,EAAY,CAAEhT,WAGpB,OAFAkR,KAAKzP,SAAWP,IAAiBgQ,KAAKzP,SAAtB,eAAmCzB,EAAU,UAC7DkR,KAAKQ,KAAK,OAAQsB,GAIpB,GAAgB,SAAZL,EAAoB,CACtB,IAAMK,EAAY,CAAEhT,WAGpB,OAFAkR,KAAKzP,SAAWP,KAAO,CAAClB,GAAUkR,KAAKzP,eACvCyP,KAAKQ,KAAK,OAAQsB,GAIpB,GAAgB,cAAZL,EAAyB,CAC3B,IAAMK,EAAY1C,GAAevR,GAKjC,OAJAmS,KAAKzP,SAAWP,IAAiBgQ,KAAKzP,SAAtB,eACbzB,EAAU,CAAEqD,UAAW2P,EAAU7P,aAEpC+N,KAAKQ,KAAK,YAAasB,GAIzB,GAAgB,WAAZL,EAAsB,CACxB,IAAMK,EAAYxC,GAAYzR,GAQ9B,OALI0P,GAAkBgB,SAAS1Q,EAAKoE,KAAK+P,QACvChS,IAAS,GAAI,CAAC,iBAAkBlB,GAAUkR,MAAMgB,aAGlDhB,KAAKQ,KAAK,SAAUsB,GAItB,GAAgB,eAAZL,EAMJ,GAAgB,cAAZA,EAMJ,GAAgB,aAAZA,EAMJ,GAAgB,eAAZA,EAMJ,GAAgB,YAAZA,EAAJ,CApNiB,IAAC,EA0NlB,GAAgB,oBAAZA,EAA+B,CACjC,IAAMK,EA9OgC,CAAE7P,KA8ODpE,EA9OboE,MAiP1B,OAFA+N,KAAK3Q,KAAOyS,EAAU7P,UACtB+N,KAAKQ,KAAK,kBAAmBsB,GAI/B9B,KAAKQ,KAAK,oBAAqB3S,OAb/B,CACE,IAAMiU,EAhNL,CACL3J,SANoB,EAqNetK,GApNnCsK,QAMAlG,KAPmB,EAEnBA,KAMAnD,QARmB,eAGnBoQ,OAHmB,MASnB7P,KATmB,EAInBqS,OAAUrS,MAkNN2Q,KAAKQ,KAAK,UAAWsB,OARvB,CACE,IAAMA,EAAYpC,GAAgB7R,GAClCmS,KAAKQ,KAAK,aAAcsB,OAR1B,CACE,IAAMA,EAAYtC,GAAkB3R,GACpCmS,KAAKQ,KAAK,WAAYsB,OARxB,CACE,IAAMA,EAAYrC,GAAe5R,GACjCmS,KAAKQ,KAAK,YAAasB,OARzB,CACE,IAAMA,EAAYvC,GAAgB1R,GAClCmS,KAAKQ,KAAK,aAAcsB,QA9D1B,CACE,IAAMA,EArKoB,SAAC,GAK1B,IAJL3J,EAII,EAJJA,QACAlG,EAGI,EAHJA,KACAiN,EAEI,EAFJA,OACU7P,EACN,EADJqS,OAAUrS,KAEJ4R,EAAWpC,GAAY1G,GAE7B,MAAO,CACLA,QAAS8I,EAAWlC,GAAuB5G,GAAWA,EACtDlG,OACA5C,OACAP,QAASoQ,EAAO,GAAGF,MAAM,GACzBiC,YAwJoBgB,CAAiBpU,GACnCmS,KAAKQ,KAAK,UAAWsB,SAvBvB,CACE,IAAMpM,EAAO6L,EAAWrC,OAAO,GAG/B,IAFAc,KAAKlT,QAAQ+S,SAASnK,KAAOA,EAEtBsK,KAAKF,OAAOnI,QAAQ,CACzB,IAAMuK,EAAalC,KAAKF,OAAOkB,QAC/BhB,KAAKO,QAAQ2B,O,8BAmHX/J,GAAU,IAAD,OACTgK,EAAc,SAACC,GACfA,GACF,EAAK5B,KAAK,QAAS4B,IAInB7I,MAAMC,QAAQrB,GAChBA,EAAQ0I,SAAQ,SAACC,GAAD,OAAU,EAAKlB,OAAOyC,KAAZ,UAAoBvB,EAApB,QAAgCqB,MAE1DnC,KAAKJ,OAAOyC,KAAZ,UAAoBlK,EAApB,QAAmCgK,K,gCAI5B,IAAD,OACRnC,KAAKJ,OAAS,IAAI0C,UA5cN,mCA2cJ,IAEA1C,EAAWI,KAAXJ,OAERA,EAAO2C,iBAAiB,QAAQ,kBAAM,EAAKC,gBAC3C5C,EAAO2C,iBAAiB,SAAS,SAAC9B,GAAD,OAAc,EAAKgC,SAAShC,MAC7Db,EAAO2C,iBAAiB,SAAS,SAAChW,GAAD,OAAW,EAAKmW,SAASnW,MAC1DqT,EAAO2C,iBAAiB,WAAW,SAAC1U,GAAD,OAAU,EAAK8U,QAAQ9U,EAAKA,W,0BAG7DiB,EAASqJ,GAGX,GAAKA,EAAL,CAEA,IAAM+J,EAAaU,kBAAY,CAC7BnB,QAAS,UACTE,OAAQ,CAAC,IAAD,OAAK7S,IACb8S,SAAUzJ,IAEZ6H,KAAKO,QAAQ2B,GAEblC,KAAKD,eAAiB/P,KAAgBA,KAAUgQ,KAAKD,eAA/B,eACnBjR,EAAU,CAACqJ,Q,kCAIJrJ,EAAS2S,EAASvC,GAC5B,IAAM2D,EAAgBtJ,MAAMC,QAAQ0F,GAAUA,EAAO4D,KAAK,KAAO5D,EAC3DgD,EAAaU,kBAAY,CAC7BnB,QAAS,UACTE,OAAQ,CAAC,IAAD,OAAK7S,IACb8S,SAAS,IAAD,OAAMH,EAAN,YAAiBoB,KAE3B7C,KAAKO,QAAQ2B,K,2BAGVa,GACH,IAAMb,EAAaU,kBAAY,CAC7BnB,QAAS,OACTE,OAAQ,CAAC,IAAD,OAAKoB,MAGV/C,KAAK3Q,KAGR2Q,KAAKO,QAAQ2B,GAFblC,KAAKF,OAAOxG,KAAK4I,K,2BAMhBa,GACH,IAAMb,EAAaU,kBAAY,CAC7BnB,QAAS,OACTE,OAAQ,CAAC,IAAD,OAAKoB,MAGV/C,KAAK3Q,KAGR2Q,KAAKO,QAAQ2B,GAFblC,KAAKF,OAAOxG,KAAK4I,O,GA/RFc,iBCpLNC,GAvCiB,SAAClT,EAAOmT,GACtC,IAAM7G,EAAeP,GAAqB/L,GACpCuM,EAAgBN,GAAsBjM,GACtCsI,EAAS2C,GAAejL,GACxBsB,EAAe4I,GAAqBlK,GA6B1C,OAAOmT,EACJtH,KAAI,SAACuH,GAAD,OAAOC,iBAAMD,MACjBtH,QA7BoB,SAAC,GAAD,IAAG4F,EAAH,EAAGA,QAAmBpS,EAAtB,EAAYqS,OAAUrS,KAAtB,MACT,YAAZoS,IAA0BpQ,EAAakN,SAASlP,MA6B/CuM,KA3BuB,SAAC,GAIpB,IAHL3J,EAGI,EAHJA,KAGI,iBAFJiN,OAEI,GAFKpQ,EAEL,KAFcqJ,EAEd,KADM9I,EACN,EADJqS,OAAUrS,KAEJ4R,EAAWpC,GAAY1G,GACvBkL,EAAoBpC,EACtBlC,GAAuB5G,GACvBA,EACEmL,EAAa7E,GAAiBxM,GAEpC,MAAO,CACLkD,KAAMlJ,EACNkM,QAASkL,EACTE,aAAcrL,GAAcmL,EAAmBC,EAAWjL,OAAQA,GAClEpG,KAAMqR,EACNvH,OAAQK,GAAiBkH,EAAWvH,OAAQM,EAAcC,GAC1DjN,OACAP,QAASA,EAAQkQ,MAAM,GACvBiC,WACAuC,WAAW,O,6jBC3BjB,I,GAmBIhT,YACF,qBACA,sBACA,gCACA,gCACA,iCAVAiT,G,GAAAA,iBACmBC,G,GAAnBC,kBACAC,G,GAAAA,2BACAC,G,GAAAA,2BACAC,G,GAAAA,2BASWC,GAAYrU,YAAa,cAEhCsU,GAAgB,SAAC1T,GACrB,IAAM2T,EAAO3T,EAAMqH,OlB3CiB,IkB4CpC,OAAOsM,EAAO,EAAI3T,EAAM0O,MAAMiF,GAAQ3T,GAGlC4T,GAAY,SAACC,EAAMC,EAAiBC,GACxC,OAAIA,GACKD,EAAkB,GAAKD,EAEzBA,GAgIHG,IAAyB,qBAC5BV,IAA6B,SAAC7T,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC5BD,IAAiBD,EAAjB,eACGE,EAAQnB,QAAU,CACjByV,QAAQ,MAAMrY,EAAYM,eAJH,eAO5BqX,IAA6B,SAAC9T,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC5BD,IAAiBD,EAAjB,eACGE,EAAQnB,QAAU,CACjByV,QAAQ,MAAMrY,EAAYO,QAAnB,CAA4B6D,MAAOL,EAAQK,cAV3B,eAa5BwT,IAA6B,SAAC/T,EAAD,OAAUE,EAAV,EAAUA,QAAV,OAC5BD,IAAiBD,EAAjB,eACGE,EAAQnB,QAAU,CACjByV,QAAQ,MAAMrY,EAAYQ,QAAnB,CAA4BH,MAAO0D,EAAQ1D,cAhB3B,IA+BhB2D,GAVCC,YAAc,UAAD,eAExBsT,IA7E0B,SAAC1T,EAAD,GAAkC,IAAfoI,EAAc,EAAvBlI,QAC/BnB,EAAYqJ,EAAZrJ,QACF0V,EAAWxU,IAAS,GAAI,CAAClB,EAAS,SAAUiB,GAC5C0U,EAAQ,uBAAOD,GAAP,CAAiBrM,IACzBuM,EAAiBV,GAAcS,GAC/BJ,EAAWI,EAAS9M,OAAS+M,EAAe/M,OAC5CgN,EAAS3U,KAAS,EAAO,CAAClB,EAAS,UAAWiB,GAEpD,OAAO,MACFA,EADL,eAEGjB,EAFH,MAGOiB,EAAMjB,GAHb,CAII6V,OAAQT,GAAUS,EAAQ,EAAGN,GAC7B/T,MAAOoU,SA8DgB,eAGxBhB,IA5D2B,SAAC3T,EAAD,GAA6C,IAAD,IAAlCE,QAAWnB,EAAuB,EAAvBA,QAASwB,EAAc,EAAdA,MACtDmU,EAAWzU,KAASM,EAAON,IAAS,GAAI,CAAClB,EAAS,SAAUiB,IAC5D2U,EAAiBV,GAAcS,GAC/BJ,EAAWI,EAAS9M,OAAS+M,EAAe/M,OAC5CgN,EAAS3U,KAAS,EAAO,CAAClB,EAAS,UAAWiB,GAEpD,OAAOC,IAAiBD,EAAjB,eACJjB,EAAU,CACTyV,QAAS,CAAEjU,MAAO,IAClBA,MAAOmU,EACPE,OAAQT,GAAUS,EAAQrU,EAAMqH,OAAQ0M,SA+CjB,eAIxBN,IA9CmB,SAAChU,EAAD,GAAyB,IAAfE,EAAc,EAAdA,QAE9BnB,EAEEmB,EAFFnB,QACQ8V,EACN3U,EADFgC,KAAQ2S,aAGJH,EAAW1U,EAAMjB,GAASwB,MAAMsL,KAAI,SAACzD,GAAD,OACxCA,EAAQlG,KAAKxD,SAAWmW,GAAiBzM,EAAQqL,UAE7CrL,EAFJ,MACSA,EADT,CACkB0M,WAAW,OAI/B,OAAO,MACF9U,EADL,eAEGjB,EAFH,MAGOiB,EAAMjB,GAHb,CAIIwB,MAAOmU,SA0BgB,IAKtBH,IAhMc,I,6jBCjBrB,IAAMQ,GAA6B,WACjC,IACE,OAAOC,KAAK3B,MAAMhV,aAAatB,SAC/B,SACA,MAAO,KAILqC,GAAY,IAChB6V,gBAAgB,EAChBC,WAAW,EACXC,kBAAmB,GACnBC,kBAAmB,IAChBL,MAGQM,GAAe1V,YAAa,iBAAiB,SAAC2V,EAAQvQ,GASjE,OARA1G,aAAakX,QACX,UACAP,KAAKQ,UAAL,MACKT,KADL,eAEGO,EAASvQ,MAIP,CACLuQ,SACAvQ,YAeW5E,GAPCC,YAAc,eAEzBiV,IAPsB,SAACrV,EAAD,WAAUE,QAAWoV,EAArB,EAAqBA,OAAQvQ,EAA7B,EAA6BA,MAA7B,aACtB/E,EADsB,eAExBsV,EAASvQ,OAOV3F,IChCa6E,eAAgB,CAC7BiM,OACAlE,UACAhC,QACA1B,UACA6K,YACApW,aCTI0Y,GAEAC,YAAgBC,KAUPC,GAFDC,YAAYC,GAAa,GAAIL,I,0BChB9BM,GAAiB,SAAC/V,GAAD,OAAWA,EAAMkQ,KAAK7Q,QACvC2W,GAAoB,SAAChW,GAAD,OAAWA,EAAMkQ,KAAK5Q,KAAKE,OAC/CyW,GAAiB,SAACjW,GAAD,OAAWA,EAAMkQ,KAAK5Q,KAAKd,ICE5C0X,GAAmB,SAAClW,GAAD,OAC9BC,IAAS,GAAI,CAAC,WAAY4J,GAAuB7J,GAAQ,SAAUA,IAUxDmW,GAA0B,SAACnW,GAAD,OACrCC,KAAS,EAAO,CACd,WACA4J,GAAuB7J,GACvB,UACA,YAJFC,CAKGD,IAEQoW,GAAiB,SAACpW,GAAD,OAC5BC,KAAS,EAAO,CAAC,WAAY4J,GAAuB7J,GAAQ,UAAWA,ICgE1DqW,GA3DU,WACvB,IAAMC,EAAWC,eAEXlX,EAASmX,aAAYT,IACrBrX,EAAS8X,aAAYP,IACrB9U,EAAiBqV,aAAY3M,IAC7B4M,EAAmBD,aAAY1M,IAE/B4M,EAAuBF,aAAYjL,IACnCoL,EAAqBH,aAAYnL,IACjCuL,EAAoBJ,aAAYlL,IAChCuL,EAAiBL,aAAYtK,IAC7B4K,EAAkBN,aAAYL,IAC9BY,EAAuBP,aAAYvM,IAEnC+M,EACJ7V,KACC9B,GAASqX,MACTrX,GAAS0X,IACVJ,GACAC,GACAC,GACAC,EAEFG,qBAAU,WACRX,EjBLiC,uCAAM,WAAOA,GAAP,eAAAxZ,EAAA,6DACzCwZ,EAAS7T,MADgC,kBLZzC1E,EAAW,oDKY8B,OAIjCwC,EAJiC,OAOvC+V,EAAS5T,GAFI,CAAEnC,WALwB,gDASvC+V,EAAS3T,GAA6B,CAAEnG,MAAO,KAAE4L,WATV,yDAAN,uDiBMjCkO,EhBIgC,uCAAM,WAAOA,GAAP,iBAAAxZ,EAAA,6DACxCwZ,EAASlT,MAD+B,kBNjBxCrF,EAAW,8CMiB6B,OAIhCP,EAJgC,OAKhCM,EAAO,CAAEyC,MAAOmD,GAAqBlG,IAE3C8Y,EAASjT,GAA4BvF,IAPC,gDAStCwY,EAAShT,GAA4B,CAAE9G,MAAO,KAAE4L,WATV,yDAAN,uDgBHhCkO,EpBb6B,uCAAM,WAAOA,GAAP,iBAAAxZ,EAAA,6DACrCwZ,EAAS5V,MAD4B,kBAIZwW,IAJY,OAI7B1Z,EAJ6B,OAK7BM,EAAO,CAAEyC,MAAOS,GAAYxD,IAElC8Y,EAAS3V,GAAyB7C,IAPC,gDASnCwY,EAAS1V,GAAyB,CAAEpE,MAAO,KAAE4L,WATV,yDAAN,yDoBc5B,CAACkO,IAEJW,qBAAU,WNgBuB,IAAClY,EMf5BoC,GACFmV,GNc8BvX,EMdDoC,ENcA,uCAAa,WAAOmV,GAAP,iBAAAxZ,EAAA,6DAC9CwZ,EAASzC,GAA2B,CAAE9U,aADQ,kBAGrBoY,EAAuBpY,GAHF,OAGtCvB,EAHsC,OAItCM,EAAO,CAAEiB,UAASwB,MAAO/C,EAAS2V,UAExCmD,EAASxC,GAA2BhW,IANQ,gDAQ5CwY,EAASvC,GAA2B,CAAEhV,UAASvC,MAAO,KAAE4L,WARZ,yDAAb,0DMZ9B,CAACkO,EAAUnV,IAEd8V,qBAAU,WNLqB,IAAClY,EMM1BiY,GACFV,GNP4BvX,EMODoC,ENPa,SAACmV,EAAUc,GACvD,IAAMpX,EAAQoX,IACRjE,EAAWlT,IACf,GACA,CAAC,WAAYlB,EAAS,UAAW,SACjCiB,GAEIlC,EAAO,CACXiB,UACAwB,MAAO2S,GAAwBlT,EAAOmT,IAGxCmD,EAAS3C,GAAwB7V,SMH9B,CAACwY,EAAUnV,EAAgB6V,IAE9BC,qBAAU,WACJvY,IACF4X,ElB9C2B,SAAC5X,GAAD,8CAAY,WAAO4X,GAAP,iBAAAxZ,EAAA,6DAC3CwZ,EAASjU,IADkC,kBAIlB5D,EAAwBC,GAJN,OAInClB,EAJmC,OAKnCM,EAAO,CAAEyC,MAAO/C,EAAS6Z,eAE/Bf,EAAShU,GAAyBxE,IAPO,gDASzCwY,EAAS/T,GAAyB,CAAE/F,MAAO,KAAE4L,WATJ,yDAAZ,sDkB8ClBkP,CAAkB5Y,IAC3B4X,EnBrB2B,SAAC5X,GAAD,8CAAY,WAAO4X,GAAP,eAAAxZ,EAAA,6DAC3CwZ,EAASzU,MADkC,kBAGlB0V,EAAqB7Y,GAHH,OAGnClB,EAHmC,OAKzC8Y,EAASxU,GAAyB,CAAEvB,MAAOyB,GAAkBxE,MALpB,gDAOzC8Y,EAASvU,GAAyB,CAAEvF,MAAO,KAAE4L,WAPJ,yDAAZ,sDmBqBlBjJ,CAAkBT,OAE5B,CAAC4X,EAAU5X,IAEduY,qBAAU,WjBhB0B,IAACrY,EAAWG,EiBkB1CoC,GAAkBsV,IACpBH,GjBnBiC1X,EiBmBD6X,EjBnBY1X,EiBmBMoC,EjBnBlB,uCAAwB,WAC5DmV,GAD4D,iBAAAxZ,EAAA,6DAG5DwZ,EAAS1T,GAA8B,CAAE7D,aAHmB,kBAMnCyY,EAA0B5Y,GANS,OAMpDpB,EANoD,OAOpDM,EAAO,CACXiB,UACAwB,MAAOwC,GAAuBvF,IAGhC8Y,EAASzT,GAA8B/E,IAZmB,gDAc1DwY,EAASxT,GAA8B,CAAE/D,UAASvC,MAAO,KAAE4L,WAdD,yDAAxB,wDiBoBhCkO,EhBV+B,SAAC1X,EAAWG,GAAZ,8CAAwB,WAC3DuX,GAD2D,iBAAAxZ,EAAA,6DAG3DwZ,EAAS/S,GAA6B,CAAExE,aAHmB,kBAMlC0Y,EAAyB7Y,GANS,OAMnDpB,EANmD,OAOnDM,EAAO,CACXiB,UACAwB,MAAOuD,GAAsBtG,IAG/B8Y,EAAS9S,GAA6B1F,IAZmB,gDAczDwY,EAAS7S,GAA6B,CAAE1E,UAASvC,MAAO,KAAE4L,WAdD,yDAAxB,sDgBUtBvJ,CAAsB4X,EAAkBtV,IACjDmV,EpB3B4B,SAAC1X,EAAWG,GAAZ,8CAAwB,WAAOuX,GAAP,iBAAAxZ,EAAA,6DACxDwZ,EAASzV,GAA0B,CAAE9B,aADmB,kBAI/B2Y,EAAsB9Y,GAJS,OAIhDpB,EAJgD,OAKhDM,EAAO,CACXiB,UACAwB,MAAOS,GAAYxD,IAGrB8Y,EAASxV,GAA0BhD,IAVmB,gDAYtDwY,EAASvV,GAA0B,CAAEhC,UAASvC,MAAO,KAAE4L,WAZD,yDAAxB,sDoB2BnBlJ,CAAmBuX,EAAkBtV,OAE/C,CAACmV,EAAUnV,EAAgBsV,KCrEjBkB,GAdS,WAAO,IAAD,EACJC,mBAASC,OAAOC,SAAS9b,MADrB,oBACrBA,EADqB,KACf+b,EADe,KAW5B,OARAd,qBAAU,WACR,IAAMe,EAAmB,kBAAMD,EAAQF,OAAOC,SAAS9b,OAIvD,OAFA6b,OAAOrF,iBAAiB,aAAcwF,GAE/B,kBAAMH,OAAOI,oBAAoB,aAAcD,MACrD,IAEIhc,GCYMkc,GAnBW,WACxB,IAAM5B,EAAWC,eACXva,EAAO2b,KAEbV,qBAAU,WACR,GAAIjb,GAAQA,EAAK4L,OAAS,EAAG,CAC3B,IAAM7I,EAAU/C,EAAKiT,MAAM,GAE3BqH,EAAS/U,GAAkBxC,IAE3BV,aAAakX,QAAQ,cAAexW,GAEpCoZ,SAASvM,MAAQ7M,EAAO,WAChBA,EADgB,cACHZ,aADG,KAEpBA,gBAEL,CAACmY,EAAUta,K,6jBCFhB,IAAIoc,GAAS,KA6EEC,GA3ES,SAAC1S,EAAMuK,GAC7B,IAAMoG,EAAWC,eAEXpV,EAAiBqV,aAAY3M,IAC7BxK,EAASmX,aAAYT,IAoE3B,OAlEAkB,qBAAU,WACR,IAAK9V,EAAgB,OAAO,aAE5B,IAOMmX,EAAkB,kBAAMhC,EAAS9U,IAAe,KAChD+W,EAAqB,kBAAMjC,EAAS9U,IAAe,KAEnDgX,EAAwB,SAAC1a,GAAD,OAC5BwY,EAAS7U,GAAsB3D,KAE3B2a,EAAkB,SAAC3a,GAAD,OAAUwY,EAAS5U,GAAgB5D,KACrD4a,EAAkB,SAAC5a,GAAD,OAAUwY,EAAS3U,GAAgB7D,KACrD6a,EAAgB,SAAC7a,GAAD,OAAUwY,ETyCV,SAAC,GAAD,IAAGlO,EAAH,EAAGA,QAASlG,EAAZ,EAAYA,KAAM5C,EAAlB,EAAkBA,KAASsZ,EAA3B,iDAAsC,SAC9DtC,EACAc,GAEA,IAAMpX,EAAQoX,IAGd,IAFqBlN,GAAqBlK,GAEzBwO,SAASlP,GAA1B,CAEA,IAAMgN,EAAeP,GAAqB/L,GACpCuM,EAAgBN,GAAsBjM,GACtCsI,EAAS2C,GAAejL,GAExBsT,EAAiB,IACrBlO,KAAMlJ,EACNkM,UACAoL,aAAcrL,GAAcC,EAASlG,EAAKoG,OAAQA,GAClDpG,OACA5C,OACA0M,OAAQK,GAAiBnK,EAAK8J,OAAQM,EAAcC,IACjDqM,GAGLtC,EAAS5C,GAAiBJ,MShEiBuF,CAAW/a,KAE9Cgb,EAAe,SAAChb,GACpB,ITgE2BsK,EShErBkL,EAAiB,MAAQxV,EAAR,CAAcoE,KAAK,MAAMpE,EAAKoE,KAAZ,CAAkB1D,GAAI4S,WAC/DkF,GT+D2BlO,ES/DDkL,ET+Da,SAACgD,GAC5C,IAAMhD,EAAiB,MAClBlL,EADkB,CAErBhD,KAAMlJ,IAGRoa,EAAS5C,GAAiBJ,QSnElByF,EAAmB,SAACjb,GAAD,OAAUwY,GTsEFlO,EStEgCtK,ETsEpB,SAACwY,GAChD,IAAMhD,EAAiB,MAClBlL,EADkB,CAErBhD,KAAMlJ,IAGRoa,EAAS5C,GAAiBJ,OANQ,IAAClL,GSpE3B4Q,EAAkB,SAAClb,GAClBA,EAAKoE,KAAK2S,cACfyB,EAAStC,GAAUlW,KAwBrB,OArBKsa,KACHA,GAAS,IAAIxI,GAAOvQ,EA7BN,CACdyQ,SAAU,CACRnK,OACAuK,SA0BqC,KAChC+I,UAKTb,GAAOc,GAAG,YAAaZ,GACvBF,GAAOc,GAAG,eAAgBX,GAC1BH,GAAOc,GAAG,kBAAmBV,GAC7BJ,GAAOc,GAAG,YAAaT,GACvBL,GAAOc,GAAG,YAAaR,GACvBN,GAAOc,GAAG,UAAWP,GACrBP,GAAOc,GAAG,aAAcP,GACxBP,GAAOc,GAAG,SAAUJ,GACpBV,GAAOc,GAAG,aAAcH,GACxBX,GAAOc,GAAG,YAAaF,GAGvBZ,GAAOrF,KAAK5R,GAEL,WACLiX,GAAOe,IAAI,YAAab,GACxBF,GAAOe,IAAI,eAAgBZ,GAC3BH,GAAOe,IAAI,kBAAmBX,GAC9BJ,GAAOe,IAAI,YAAaV,GACxBL,GAAOe,IAAI,YAAaT,GACxBN,GAAOe,IAAI,UAAWR,GACtBP,GAAOe,IAAI,aAAcR,GACzBP,GAAOe,IAAI,SAAUL,GACrBV,GAAOe,IAAI,aAAcJ,GACzBX,GAAOe,IAAI,YAAaH,MAEzB,CAAC1C,EAAU3Q,EAAMuK,EAAM/O,EAAgB9B,IAEnC+Y,IC7EMgB,GAfO,SAACtT,GAAD,OACpBA,EACG2H,MAAM,KACN5B,KAAI,SAAC9E,GACJ,GAAgB,MAAZA,EAAK,IAAwC,MAA1BA,EAAKA,EAAKa,OAAS,GACxC,OAAOb,EAGT,IAAMpB,EAAOoB,EAAKkI,MAAM,GAAI,GACtBpH,EAAQC,GAASnC,GAEvB,OAAOkC,GAASA,EAAML,KAAOK,EAAML,KAAOT,KAE3CgM,KAAK,M,gBCfGsG,GAAkB,SAACrZ,GAAD,MAAW,CACxC,CACE4L,MAAO,iBACPrL,MAAO,CACL,CACE6E,KAAM,SACN5G,GAAI,kBACJmH,KAAM,iBACNiG,MAAO,kBACPc,YAAa,GACb3H,MAAO/E,EAAMjD,QAAQkY,gBAEvB,CACE7P,KAAM,SACN5G,GAAI,aACJmH,KAAM,YACNiG,MAAO,aACPc,YAAa,GACb3H,MAAO/E,EAAMjD,QAAQmY,eAsBhBoE,GAA2B,SAACtZ,GAAD,OAAWA,EAAMjD,QAAQkY,gBACpDsE,GAAsB,SAACvZ,GAAD,OAAWA,EAAMjD,QAAQmY,W,UCzC5D,SAASsE,KAA2Q,OAA9PA,GAAW/Q,OAAOgR,QAAU,SAAU1T,GAAU,IAAK,IAAI2T,EAAI,EAAGA,EAAIC,UAAU/R,OAAQ8R,IAAK,CAAE,IAAIE,EAASD,UAAUD,GAAI,IAAK,IAAI9K,KAAOgL,EAAcnR,OAAOoR,UAAUC,eAAeC,KAAKH,EAAQhL,KAAQ7I,EAAO6I,GAAOgL,EAAOhL,IAAY,OAAO7I,IAA2BiU,MAAM/J,KAAM0J,WAEhT,SAASM,GAAyBL,EAAQM,GAAY,GAAc,MAAVN,EAAgB,MAAO,GAAI,IAAkEhL,EAAK8K,EAAnE3T,EAEzF,SAAuC6T,EAAQM,GAAY,GAAc,MAAVN,EAAgB,MAAO,GAAI,IAA2DhL,EAAK8K,EAA5D3T,EAAS,GAAQoU,EAAa1R,OAAOC,KAAKkR,GAAqB,IAAKF,EAAI,EAAGA,EAAIS,EAAWvS,OAAQ8R,IAAO9K,EAAMuL,EAAWT,GAAQQ,EAASlR,QAAQ4F,IAAQ,IAAa7I,EAAO6I,GAAOgL,EAAOhL,IAAQ,OAAO7I,EAFxMqU,CAA8BR,EAAQM,GAAuB,GAAIzR,OAAO4R,sBAAuB,CAAE,IAAIC,EAAmB7R,OAAO4R,sBAAsBT,GAAS,IAAKF,EAAI,EAAGA,EAAIY,EAAiB1S,OAAQ8R,IAAO9K,EAAM0L,EAAiBZ,GAAQQ,EAASlR,QAAQ4F,IAAQ,GAAkBnG,OAAOoR,UAAUU,qBAAqBR,KAAKH,EAAQhL,KAAgB7I,EAAO6I,GAAOgL,EAAOhL,IAAU,OAAO7I,EAMne,IAAI,GAEJ,IAAMyU,cAAc,IAAK,CACvBC,KAAM,gBACL,IAAMD,cAAc,OAAQ,CAC7BE,EAAG,iGACD,IAAMF,cAAc,OAAQ,CAC9BG,SAAU,UACVD,EAAG,sEACHE,SAAU,aAGR,GAAgB,SAAuBC,GACzC,IAAIC,EAASD,EAAKC,OACdlP,EAAQiP,EAAKjP,MACbmP,EAAQd,GAAyBY,EAAM,CAAC,SAAU,UAEtD,OAAO,IAAML,cAAc,MAAOhB,GAAS,CACzCwB,QAAS,YACTC,IAAKH,GACJC,GAAQnP,EAAQ,IAAM4O,cAAc,QAAS,KAAM5O,GAAS,KAAM,KAGnEsP,GAAa,IAAMC,YAAW,SAAUJ,EAAOE,GACjD,OAAO,IAAMT,cAAc,GAAehB,GAAS,CACjDsB,OAAQG,GACPF,OAEU,ICpCf,SAAS,KAA2Q,OAA9P,GAAWtS,OAAOgR,QAAU,SAAU1T,GAAU,IAAK,IAAI2T,EAAI,EAAGA,EAAIC,UAAU/R,OAAQ8R,IAAK,CAAE,IAAIE,EAASD,UAAUD,GAAI,IAAK,IAAI9K,KAAOgL,EAAcnR,OAAOoR,UAAUC,eAAeC,KAAKH,EAAQhL,KAAQ7I,EAAO6I,GAAOgL,EAAOhL,IAAY,OAAO7I,IAA2BiU,MAAM/J,KAAM0J,WAEhT,SAAS,GAAyBC,EAAQM,GAAY,GAAc,MAAVN,EAAgB,MAAO,GAAI,IAAkEhL,EAAK8K,EAAnE3T,EAEzF,SAAuC6T,EAAQM,GAAY,GAAc,MAAVN,EAAgB,MAAO,GAAI,IAA2DhL,EAAK8K,EAA5D3T,EAAS,GAAQoU,EAAa1R,OAAOC,KAAKkR,GAAqB,IAAKF,EAAI,EAAGA,EAAIS,EAAWvS,OAAQ8R,IAAO9K,EAAMuL,EAAWT,GAAQQ,EAASlR,QAAQ4F,IAAQ,IAAa7I,EAAO6I,GAAOgL,EAAOhL,IAAQ,OAAO7I,EAFxM,CAA8B6T,EAAQM,GAAuB,GAAIzR,OAAO4R,sBAAuB,CAAE,IAAIC,EAAmB7R,OAAO4R,sBAAsBT,GAAS,IAAKF,EAAI,EAAGA,EAAIY,EAAiB1S,OAAQ8R,IAAO9K,EAAM0L,EAAiBZ,GAAQQ,EAASlR,QAAQ4F,IAAQ,GAAkBnG,OAAOoR,UAAUU,qBAAqBR,KAAKH,EAAQhL,KAAgB7I,EAAO6I,GAAOgL,EAAOhL,IAAU,OAAO7I,EAMne,IAAI,GAEJ,IAAMyU,cAAc,IAAK,CACvBC,KAAM,gBACL,IAAMD,cAAc,OAAQ,CAC7BE,EAAG,mCACD,IAAMF,cAAc,OAAQ,CAC9BG,SAAU,UACVD,EAAG,wlBACHE,SAAU,aAGR,GAAW,SAAkBC,GAC/B,IAAIC,EAASD,EAAKC,OACdlP,EAAQiP,EAAKjP,MACbmP,EAAQ,GAAyBF,EAAM,CAAC,SAAU,UAEtD,OAAO,IAAML,cAAc,MAAO,GAAS,CACzCQ,QAAS,YACTC,IAAKH,GACJC,GAAQnP,EAAQ,IAAM4O,cAAc,QAAS,KAAM5O,GAAS,KAAM,KAGnE,GAAa,IAAMuP,YAAW,SAAUJ,EAAOE,GACjD,OAAO,IAAMT,cAAc,GAAU,GAAS,CAC5CM,OAAQG,GACPF,OAEU,ICpCf,SAAS,KAA2Q,OAA9P,GAAWtS,OAAOgR,QAAU,SAAU1T,GAAU,IAAK,IAAI2T,EAAI,EAAGA,EAAIC,UAAU/R,OAAQ8R,IAAK,CAAE,IAAIE,EAASD,UAAUD,GAAI,IAAK,IAAI9K,KAAOgL,EAAcnR,OAAOoR,UAAUC,eAAeC,KAAKH,EAAQhL,KAAQ7I,EAAO6I,GAAOgL,EAAOhL,IAAY,OAAO7I,IAA2BiU,MAAM/J,KAAM0J,WAEhT,SAAS,GAAyBC,EAAQM,GAAY,GAAc,MAAVN,EAAgB,MAAO,GAAI,IAAkEhL,EAAK8K,EAAnE3T,EAEzF,SAAuC6T,EAAQM,GAAY,GAAc,MAAVN,EAAgB,MAAO,GAAI,IAA2DhL,EAAK8K,EAA5D3T,EAAS,GAAQoU,EAAa1R,OAAOC,KAAKkR,GAAqB,IAAKF,EAAI,EAAGA,EAAIS,EAAWvS,OAAQ8R,IAAO9K,EAAMuL,EAAWT,GAAQQ,EAASlR,QAAQ4F,IAAQ,IAAa7I,EAAO6I,GAAOgL,EAAOhL,IAAQ,OAAO7I,EAFxM,CAA8B6T,EAAQM,GAAuB,GAAIzR,OAAO4R,sBAAuB,CAAE,IAAIC,EAAmB7R,OAAO4R,sBAAsBT,GAAS,IAAKF,EAAI,EAAGA,EAAIY,EAAiB1S,OAAQ8R,IAAO9K,EAAM0L,EAAiBZ,GAAQQ,EAASlR,QAAQ4F,IAAQ,GAAkBnG,OAAOoR,UAAUU,qBAAqBR,KAAKH,EAAQhL,KAAgB7I,EAAO6I,GAAOgL,EAAOhL,IAAU,OAAO7I,EAMne,IAAI,GAEJ,IAAMyU,cAAc,OAAQ,CAC1BC,KAAM,eACNC,EAAG,mGAGD,GAAW,SAAkBG,GAC/B,IAAIC,EAASD,EAAKC,OACdlP,EAAQiP,EAAKjP,MACbmP,EAAQ,GAAyBF,EAAM,CAAC,SAAU,UAEtD,OAAO,IAAML,cAAc,MAAO,GAAS,CACzCQ,QAAS,YACTC,IAAKH,GACJC,GAAQnP,EAAQ,IAAM4O,cAAc,QAAS,KAAM5O,GAAS,KAAM,KAGnE,GAAa,IAAMuP,YAAW,SAAUJ,EAAOE,GACjD,OAAO,IAAMT,cAAc,GAAU,GAAS,CAC5CM,OAAQG,GACPF,OAEU,I,4tBC5Bf,IAAMK,GAAQ,CACZC,MAAOC,aAAF,MAILC,OAAQD,aAAF,OAOFE,GAAaC,KAAOC,OAAOC,MAAM,CAAEvW,KAAM,UAA5BqW,CAAH,MAaZ,SAACG,GAAD,OAAOR,GAAMQ,EAAEC,SAgBnBL,GAAWM,aAAe,CACxBD,KAAM,UAGRL,GAAWO,UAAY,CACrBF,KAAM5V,KAAGE,MAAMsC,OAAOC,KAAK0S,MAGdI,U,+gBC7Cf,IAAMQ,GAAgBP,KAAOQ,IAAV,MASbC,GAAcT,aAAOD,IAAYG,MAAM,CAAEE,KAAM,SAAjCJ,CAAH,MAKXU,GAAYV,aAAOW,GAAPX,CAAH,MAMTY,GAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,QAAb,OAChB,kBAACP,GAAD,KACE,kBAACE,GAAD,CAAaM,QAASD,GACpB,kBAACJ,GAAD,OAEDG,IAILD,GAAUP,aAAe,GAOVO,U,kSCxCf,IAgBeI,GAhBGhB,aAAOiB,MAAiBf,MAAM,CAC9CgB,gCAAgC,GADhBlB,CAAH,M,88BCGf,IAAMmB,GAAkBnB,KAAOQ,IAAV,MAKfY,GAAapB,KAAOQ,IAAV,MAGVa,GAAWrB,KAAOQ,IAAV,MAURc,GAAiBtB,KAAOQ,IAAV,MAMde,GAAgBvB,KAAOQ,IAAV,MACbgB,GAAQxB,KAAOyB,IAAV,MAYLC,GAAc,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,gBAAiBC,EAAmB,EAAnBA,aAChCC,EAAiBC,uBACrB,WAAmB3O,GAAnB,IAAGhD,EAAH,EAAGA,MAAOrL,EAAV,EAAUA,MAAV,OACE,kBAACuc,GAAD,CAAUlO,IAAKA,KACVhD,GAAS,kBAACmR,GAAD,KAAiBnR,GAC7B,kBAACoR,GAAD,KACGzc,EAAMsL,KAAI,gBAAGxG,EAAH,EAAGA,IAAKE,EAAR,EAAQA,IAAKC,EAAb,EAAaA,OAAb,OACT,kBAACyX,GAAD,CACErO,IAAKvJ,EACLA,IAAKA,EACLE,IAAKA,EACLC,OAAQA,EACRgX,QAAS,kBAAMa,EAAahY,aAMtC,CAACgY,IAGH,OACE,kBAACT,GAAD,KACE,kBAACC,GAAD,KACE,kBAAC,GAAD,KAAYO,EAAgBvR,IAAIyR,OAMxCH,GAAYrB,aAAe,CACzBsB,gBAAiB,IAQJD,U,82CC9Ef,IAAMK,GAAa/B,KAAOQ,IAAV,MAMVwB,GAAQhC,KAAOxO,MAAV,MA2BLyQ,GAAQjC,KAAOkC,MAAMhC,MAAM,CAAEvW,KAAM,YAA3BqW,CAAH,KAIKgC,IAwBVG,GAAS,SAAC,GAAD,IAAGpf,EAAH,EAAGA,GAAIyO,EAAP,EAAOA,MAAO4Q,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,SAAUC,EAAjC,EAAiCA,SAAjC,OACb,kBAACP,GAAD,KACE,kBAACE,GAAD,CACElf,GAAIA,EACJyO,MAAOA,EACP4Q,QAASA,EACTC,SAAUA,EACVC,SAAUA,IAEZ,kBAACN,GAAD,CAAOO,QAASxf,MAIpBof,GAAO9B,aAAe,CACpB+B,SAAS,EACTC,UAAU,EACVC,SAAU,cAWGH,U,sgCClFf,IAAMK,GAAcxC,KAAOQ,IAAV,MAIXiC,GAASzC,KAAO0C,GAAV,MAONtB,GAAapB,aAAOgB,GAAPhB,CAAH,MAGVqB,GAAWrB,KAAOQ,IAAV,MAMRc,GAAiBtB,KAAOQ,IAAV,MAKde,GAAgBvB,KAAOQ,IAAV,MACbmC,GAAS3C,KAAOQ,IAAV,MAMNoC,GAAa5C,KAAO6C,KAAV,MAEVC,GAAU,WACd,IAAMjI,EAAWC,eACXxZ,EAAUyZ,aAAY6C,IAEtBmF,EAAejB,uBACnB,gBAAG/e,EAAH,EAAGA,GAAImH,EAAP,EAAOA,KAAMiG,EAAb,EAAaA,MAAOc,EAApB,EAAoBA,YAAa3H,EAAjC,EAAiCA,MAAjC,OACE,kBAACqZ,GAAD,CACExP,IAAKpQ,EACLge,QAAS,kBAAMlG,EAASjB,GAAa1P,GAAOZ,KAC5C6G,MAAOc,GAEP,kBAAC2R,GAAD,KAAazS,GACb,kBAAC,GAAD,CACEpN,GAAIA,EACJyO,MAAOrB,EACPiS,QAAS9Y,EACTgZ,SAAU,kBAAMzH,EAASjB,GAAa1P,EAAMZ,UAIlD,CAACuR,IAGGmI,EAAwBlB,uBAC5B,WAAmB3O,GAAnB,IAAGhD,EAAH,EAAGA,MAAOrL,EAAV,EAAUA,MAAV,OACE,kBAAC,GAAD,CAAUqO,IAAKA,KACVhD,GAAS,kBAAC,GAAD,KAAiBA,GAC7B,kBAAC,GAAD,KAAgBrL,EAAMsL,IAAI2S,OAG9B,CAACA,IAGH,OACE,kBAACP,GAAD,KACE,kBAACC,GAAD,sBACA,kBAAC,GAAD,KAAanhB,EAAQ8O,IAAI4S,MAK/BF,GAAQzC,aAAe,GAIRyC,U,w+FC5Ef,IAAMG,GAAgBjD,KAAOkD,KAAV,MAUbC,GAAkBnD,KAAOQ,IAAV,MAGf4C,GAAWpD,KAAOQ,IAAV,MAUR6C,GAAarD,KAAOC,OAAV,MA8BVqD,GAAkBtD,KAAOQ,IAAV,MAGf+C,GAAcvD,KAAOQ,IAAV,MAWXgD,GAAexD,KAAOQ,IAAV,MAWZiD,GAAWzD,KAAO0D,SAAV,MA+BRC,GAAe3D,aAAOD,GAAPC,CAAH,MAKZ4D,GAAiB5D,aAAO6D,GAAP7D,CAAH,MAKd8D,GAAY9D,aAAO+D,GAAP/D,CAAH,MAKTgE,GAAahE,aAAOiE,KAAPjE,CAAH,MAeVkE,GAAY,SAAC,GAOZ,IANL7Z,EAMI,EANJA,KACAsX,EAKI,EALJA,gBACA/d,EAII,EAJJA,OACAugB,EAGI,EAHJA,WACAC,EAEI,EAFJA,aACAC,EACI,EADJA,SAEMC,EAAcC,iBAAO,MACrBC,EAAqBD,iBAAO,MAC5BE,EAAkBF,iBAAO,MAH3B,EAKoDpI,oBAAS,GAL7D,oBAKGuI,EALH,KAKyBC,EALzB,OAMsDxI,oBAAS,GAN/D,oBAMGyI,EANH,KAM0BC,EAN1B,KAQEC,EAAyB,kBAAMH,GAAwB,IACvDI,EAA0B,kBAAMF,GAAyB,IAE/DG,aAAkBR,EAAoBM,GACtCE,aAAkBP,EAAiBM,GAEnC,IAQME,EAAgBnD,uBACpB,SAACoD,GACC,GAAc,UAAVA,EAAE/R,IAAiB,CACrB+R,EAAEC,iBACF,IAAMxY,EAAUtC,EAAK+K,OACjBzI,IACF0X,EAAS1X,GACTyX,EAAa,QAInB,CAACC,EAAUD,EAAc/Z,IAG3BmR,qBAAU,WACR,IAAM4J,EAAed,EAAYe,QAIjC,OAFAD,EAAarO,iBAAiB,UAAWkO,GAAe,GAEjD,WACLG,EAAa5I,oBAAoB,UAAWyI,GAAe,MAE5D,CAACA,IAEJ,IAAMK,EAAoBxD,uBACxB,kBACE,kBAACyB,GAAD,KACE,kBAAC,GAAD,CAAWzC,QAASgE,GAClB,kBAAC,GAAD,CACEnD,gBAAiBA,EACjBC,aAAc,SAAC2D,GAAD,OACZnB,GAAa,SAACoB,GAAD,MAAO,UAAGA,EAAEpQ,OAAL,YAAemQ,EAAf,KAA4BE,qBAM1D,CAACrB,EAAczC,IAGX+D,EAAqB5D,uBACzB,kBACE,kBAAC0B,GAAD,CAAchE,IAAKiF,GACjB,kBAAC,GAAD,CAAW3D,QAASiE,GAClB,kBAAC,GAAD,UAIN,IAGF,OACE,kBAAC9B,GAAD,CAAeoB,SA1DI,SAACa,GACpBA,EAAEC,iBACFd,EAASha,GACT+Z,EAAa,MAwDX,kBAACd,GAAD,CAAiB9D,IAAKgF,GACpB,kBAACf,GAAD,CACEkC,YAAY,iBACZnG,IAAK8E,EACLsB,UAAW,IACXC,SAAU1B,EACV7B,SAnEa,SAAC4C,GAAD,OAAOd,EAAac,EAAE5a,OAAOhB,QAoE1CA,MAAOe,MAENsX,EAAgBxV,QACjB,kBAACwX,GAAD,CACE5C,QAAS,kBAAM4D,GAAyBD,KAExC,kBAACd,GAAD,OAGHc,GAAwBY,KAE3B,kBAACnC,GAAD,KACE,kBAACC,GAAD,MACIxf,GACA,kBAACogB,GAAD,CAAY8B,GAAG,cAAf,uBAEF,kBAAC,GAAD,CACE/E,QAAS,kBAAM8D,GAA0BD,KAEzC,kBAACd,GAAD,OAEF,kBAACT,GAAD,CAAYwC,SAAU1B,EAAYxa,KAAK,UAAvC,SAIDib,GAAyBc,OAMlCxB,GAAU7D,aAAe,CACvBsB,gBAAiB,GACjBwC,YAAY,GAYC4B,WAAMC,KAAK9B,I,IClRC1Z,KAAGC,MAAM,CAClCd,KAAMa,KAAGE,MAAM,CAACjK,IAAwBkK,WACxCgC,QAASnC,KAAGI,OAAOD,WACnBoN,aAAcvN,KAAGyb,QACfzb,KAAG0b,UAAU,CACX1b,KAAGI,OACHL,GACAM,GACAC,GACAC,GACAC,GACAC,MAEFN,WACFlE,KAAM+D,KAAGC,MAAM,CACb0b,UAAW3b,KAAGC,MAAM,CAClB2b,WAAY5b,KAAGI,SAEjB2F,OAAQ/F,KAAGC,MAAM,IACjB4b,MAAO7b,KAAGI,OACV5G,YAAawG,KAAGI,OAAOD,WACvBkC,OAAQrC,KAAGC,MAAM,IACjB6b,MAAO9b,KAAGI,OACV7H,GAAIyH,KAAGI,OACP2b,IAAK/b,KAAGgc,KACRC,OAAQjc,KAAGI,OACX8b,UAAWlc,KAAG0b,UAAU,CAAC1b,KAAGI,OAAQJ,KAAGmc,SACvC1jB,OAAQuH,KAAGI,SACVD,WACH4F,OAAQ/F,KAAGyb,QACTzb,KAAGC,MAAM,CACPb,IAAKY,KAAGI,OACR4G,MAAOhH,KAAGI,OACVd,IAAKU,KAAGI,OAAOD,WACfZ,OAAQS,KAAGI,UAGf/G,KAAM2G,KAAGI,OAAOD,WAChBqN,UAAWxN,KAAGgc,KACd/Q,SAAUjL,KAAGgc,KACbnN,UAAW7O,KAAGgc,OAGUhc,KAAGC,MAAM,CACjCd,KAAMa,KAAGE,MAAM,CAACjK,IAA+BkK,WAC/CgC,QAASnC,KAAGI,OAAOD,WACnBrH,QAASkH,KAAGI,OAAOD,WACnBlE,KAAM+D,KAAGC,MAAM,CACb+L,MAAOhM,KAAGI,OAAOD,aAChBA,aAGyBH,KAAGC,MAAM,CACrCd,KAAMa,KAAGE,MAAM,CAACjK,IAAoCkK,WACpDgC,QAASnC,KAAGI,OACZtH,QAASkH,KAAGI,OAAOD,WACnBlE,KAAM+D,KAAGC,MAAM,CACb0b,UAAW3b,KAAGC,MAAM,CAClB2b,WAAY5b,KAAGI,SAEjB2F,OAAQ/F,KAAGC,MAAM,IACjB4b,MAAO7b,KAAGI,OACV5G,YAAawG,KAAGI,OAAOD,WACvBkC,OAAQrC,KAAGC,MAAM,IACjB1H,GAAIyH,KAAGI,OACP7G,MAAOyG,KAAGI,OACV2b,IAAK/b,KAAGgc,KACRhQ,MAAOhM,KAAGI,OACVgc,UAAWpc,KAAGI,OACd8b,UAAWlc,KAAG0b,UAAU,CAAC1b,KAAGI,OAAQJ,KAAGmc,SACvC1jB,OAAQuH,KAAGI,OACXic,yBAA0Brc,KAAGmc,OAC7BG,oBAAqBtc,KAAGI,OACxBmc,cAAevc,KAAGI,OAClBoc,eAAgBxc,KAAGmc,OACnBM,uBAAwBzc,KAAGmc,OAC3BO,kBAAmB1c,KAAGI,OACtBuc,6BAA8B3c,KAAGI,OACjCwc,oBAAqB5c,KAAGI,OACxByc,0BAA2B7c,KAAGI,OAC9B0c,oBAAqB9c,KAAGI,OACxB2c,mBAAoB/c,KAAGI,OACvB4c,0BAA2Bhd,KAAGgc,KAC9BiB,qBAAsBjd,KAAGmc,OACzBe,gBAAiBld,KAAGI,OACpB+c,oBAAqBnd,KAAGI,OACxBgd,oBAAqBpd,KAAGmc,OACxBkB,mBAAoBrd,KAAGI,OACvBkd,kBAAmBtd,KAAGmc,SACrBhc,a,qtDC7FL,IAMMod,GAAc/H,KAAOQ,IAAV,MAEN,SAACL,GAAD,OAAQA,EAAE1K,SAAW0K,EAAEkG,MAAQ,UAC7B,SAAClG,GAAD,OAAQA,EAAEnI,WAAamI,EAAE9G,UAAY,MAAQ,OATjC,SAAC8G,GACxB,OAAIA,EAAE6H,UAAkB,uBACpB7H,EAAEhH,OAAe,UACd,iBAWH8O,GAAOjI,KAAO6C,KAAV,MAEC,SAAC1C,GAAD,OAAOA,EAAEkG,SAGd7E,GAAQxB,KAAOyB,IAAV,MAKLyG,GAAQlI,KAAOyB,IAAV,MAQL0G,GAAUnI,KAAO6C,KAAV,MACT,SAAC1C,GAAD,OACCA,EAAEiI,UAAYjI,EAAErT,eACjB+S,aADC,SAID,SAACM,GAAD,OACAA,EAAErT,cACF+S,aADA,SAKA,SAACM,GAAD,OACAA,EAAEiI,UACFvI,aADA,SAMEoE,GAAOjE,KAAO3e,EAAV,MAeJgnB,GAAYrI,KAAO6C,KAAV,MAITyF,GAAQtI,KAAOyB,IAAV,MA+DL8G,GAAU,SAAC,GAgBV,IAAD,IAfJ5b,QACEA,EAcE,EAdFA,QACAoL,EAaE,EAbFA,aAaE,IAZFtR,KAAQ4f,EAYN,EAZMA,MAAOriB,EAYb,EAZaA,YAAa4R,EAY1B,EAZ0BA,UAC5BrF,EAWE,EAXFA,OACA1M,EAUE,EAVFA,KACAmU,EASE,EATFA,UACAvC,EAQE,EARFA,SACA4D,EAOE,EAPFA,UAEFmP,EAKI,EALJA,UACArP,EAII,EAJJA,OACAsP,EAGI,EAHJA,iBAEAC,EACI,EADJA,iBACI,EAG8BvM,oBAAS,GAHvC,oBAGGwM,EAHH,KAGcC,EAHd,KAIEZ,EAAYnkB,IAAS2kB,GAAa/c,OAAO+c,EAAW,MAAMzf,KAAK4D,GAOrE,OACE,kBAACob,GAAD,CACE/P,UAAWA,EACXvC,SAAUA,EACV0D,OAAQA,EACR6O,UAAWA,EACX3O,UAAWA,EACXgN,MAAOA,GAENoC,GACC,kBAACJ,GAAD,KAAYQ,aAAO,OAAQ,IAAIhT,KAAKD,KAErCrF,EAAOpE,OAAS,GA/CF,SAACoE,GAAD,OACnBA,EAAOH,KAAI,WAA8B+C,GAA9B,IAAGvJ,EAAH,EAAGA,IAAK4H,EAAR,EAAQA,MAAO1H,EAAf,EAAeA,IAAKC,EAApB,EAAoBA,OAApB,OAET,kBAACue,GAAD,CAAOnV,IAAKA,EAAKvJ,IAAKA,EAAKkf,aAAYtX,EAAO1H,IAAKA,EAAKC,OAAQA,OA4CxCgf,CAAaxY,GACnC,kBAAC0X,GAAD,CAAM5B,MAAOA,EAAO2C,cAlBK,SAAC9D,GAC5BwD,EAAiB1kB,GACjBkhB,EAAEC,mBAiBGnhB,GAEFyR,EAAW,IAAM,KACjB4D,IAAcsP,EAEb,kBAAC1E,GAAD,CAAMlD,QAAS,kBAAM6H,GAAa,KAhDZ,qBAkDtB7Q,EAAa3H,IAvGM,SAACvM,EAAME,GAAP,OAAiB,SAACklB,EAAM9V,GACjD,MAAoB,kBAAT8V,EAA0BA,EAGrB,iBAAdA,EAAKtf,MACS,eAAdsf,EAAKtf,MACS,cAAdsf,EAAKtf,KAGH,kBAAC,GAAD,CAAOwJ,IAAKA,EAAKrJ,IAAKmf,EAAKnf,IAAKC,OAAQkf,EAAKlf,OAAQH,IAAKqf,EAAKrf,MAIjD,UAAdqf,EAAKtf,KAEL,kBAACue,GAAD,CAAO/U,IAAKA,EAAKrJ,IAAKmf,EAAKnf,IAAKC,OAAQkf,EAAKlf,OAAQH,IAAKqf,EAAKrf,MAIjD,YAAdqf,EAAKtf,KAEL,kBAACwe,GAAD,CACEhV,IAAKA,EACLiV,SAAUa,EAAK3e,SAAWvG,EAC1B+I,aAAcjJ,IAASE,GAEtBklB,EAAK5e,MAKM,SAAd4e,EAAKtf,KAEL,kBAACsa,GAAD,CACE9Q,IAAKA,EACLrK,KAAMmgB,EAAKngB,KACXogB,IAAI,sBACJ5e,OAAO,UAEN2e,EAAK5e,MAKL,MA2DgB8e,CAAmBtlB,EAAM2kB,MAMlDD,GAAQlI,aAAe,CACrBmI,UAAW,GACXrP,QAAQ,EACRsP,kBAAkB,EAElBC,iBAAkB,cAcL3C,WAAMC,KAAKuC,I,8MC/M1B,IAAMa,GAAapJ,KAAOQ,IAAV,MAKM,SAACL,GAAD,OAAQA,EAAEhH,OAAS,UAAY,iBAG/CkQ,GAAS,SAAC,GAAD,IAAc1c,EAAd,EAAGA,QAAWA,QAAWwM,EAAzB,EAAyBA,OAAzB,OACb,kBAACiQ,GAAD,CAAYjQ,OAAQA,GAASxM,IAG/B0c,GAAOhJ,aAAe,CACpBlH,QAAQ,GAUK4M,WAAMC,KAAKqD,I,4MCvB1B,IAAMC,GAAiBtJ,KAAOQ,IAAV,MAoBLuF,OAAMC,MAZF,SAAC,GAAD,IAEPY,EAFO,EACjBja,QACElG,KAAQmgB,UAFO,OAIb,kBAAC0C,GAAD,KAAiB1C,MCVjB2C,GAAc,SAAC,GAOd,IANL5c,EAMI,EANJA,QACA6b,EAKI,EALJA,UACArP,EAII,EAJJA,OACAsP,EAGI,EAHJA,iBACAe,EAEI,EAFJA,YACAd,EACI,EADJA,iBAEA,OAAI/b,EAAQhD,OAASlJ,EAEjB,kBAAC,GAAD,CACEkM,QAASA,EACT6b,UAAWA,EACXrP,OAAQA,EACRsP,iBAAkBA,EAClBe,YAAaA,EACbd,iBAAkBA,IAKpB/b,EAAQhD,OAASlJ,EACZ,kBAAC,GAAD,CAAQkM,QAASA,EAASwM,OAAQA,IAGvCxM,EAAQhD,OAASlJ,EACZ,kBAAC,GAAD,CAAYkM,QAASA,IAGvB,MAGT4c,GAAYlJ,aAAe,CACzBmI,UAAW,GACXrP,QAAQ,EACRsP,kBAAkB,EAClBe,YAAa,aACbd,iBAAkB,cAYLa,U,8kBClDf,IAEME,GAAezJ,KAAOQ,IAAV,MAIZkJ,GAAkB1J,aAAOgB,GAAPhB,CAAH,MAKf2J,GAAqB3J,KAAOC,OAAV,MAIX,SAACE,GAAD,OAAQA,EAAEyJ,QAAU,QAAU,UAWrCC,GAAW,SAAC,GAOX,IANLnS,EAMI,EANJA,SACA8Q,EAKI,EALJA,UACArP,EAII,EAJJA,OACA2Q,EAGI,EAHJA,YACArB,EAEI,EAFJA,iBACAC,EACI,EADJA,iBACI,EAIAvM,oBAAS,GAJT,oBAEF4N,EAFE,KAGFC,EAHE,KAiBEC,EAAe1F,iBAAO,MAEtB2F,EAAuB,WACvBD,EAAa5E,SAAW4E,EAAa5E,QAAQ8E,gBAC/CF,EAAa5E,QAAQ8E,kBAIzB3O,qBAAU,WACHuO,GACHG,MAGD,CAACxS,IAEJ,IAAMgB,EAAY,SAACvF,GACjB,QAAK2W,IACE3Q,EAAShG,EAAM,IAAM,EAAIA,EAAM,IAAM,IAG9C,OACE,kBAACsW,GAAD,KACE,kBAACC,GAAD,CAAiBU,SAjCM,SAAC,GAIrB,IAHLC,EAGI,EAHJA,aACAC,EAEI,EAFJA,oBACAC,EACI,EADJA,UAKAP,EAFkBO,EA7CO,IA4CJD,EAAsBD,IA4BM7K,IAAKyK,GACjDvS,EAAStH,KAAI,SAACzD,EAASwG,GAAV,OACZ,kBAAC,GAAD,CACEA,IAAKxG,EAAQlG,KAAK1D,GAClB4J,QAASA,EACT6b,UAAWA,EACXrP,OAAQT,EAAUvF,GAClBsV,iBAAkBA,EAClBC,iBAAkBA,QAIxB,kBAACiB,GAAD,CACE5I,QAASmJ,EACTN,QAASG,GAFX,yBAUNF,GAASxJ,aAAe,CACtB3I,SAAU,GACV8Q,UAAW,GACXrP,QAAQ,EACR2Q,aAAa,EACbrB,kBAAkB,EAClBC,iBAAkB,cAYL3C,WAAMC,KAAK6D,I,sRCxG1B,IAAMW,GAAWxK,KAAOQ,IAAV,MAIRiK,GAAczK,KAAOQ,IAAV,MAoDFkK,GA7CF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVxO,mBAAS,IADC,oBAC3B9R,EAD2B,KACrBugB,EADqB,KAE5BhnB,EAASmX,aAAYT,IACrB5C,EAAWqD,aAAYN,IACvBkH,EAAkB5G,aAAY9K,IAE9BtK,EAAcoV,aAAYzM,IAC1B6K,EAAS4B,aAAYJ,IACrB6N,EAAYzN,aAAYR,IACxBkO,EAAmB1N,aAAY8C,IAC/BiM,EAAc/O,aAAY+C,IAE1B+M,EAAuB/I,uBAC3B,SAAC5X,GAAD,OAAU0gB,GAAQ,SAACpF,GAAD,MAAO,UAAGA,EAAEpQ,OAAL,aAAgBlL,EAAhB,KAAwBub,gBACjD,CAACmF,IAGH,OACE,kBAACJ,GAAD,KACE,kBAACC,GAAD,KACE,kBAAC,GAAD,CACE/S,SAAUA,EACV8Q,UAAWA,EACXrP,SAAQ2Q,GAAc3Q,EACtBsP,iBAAkBA,EAClBqB,YAAaA,EACbpB,iBAAkBmC,IAEpB,kBAAC,GAAD,CACExgB,KAAMA,EACNsX,gBAAiBA,EACjBwC,YAAavgB,IAAW+B,EACxB/B,OAAQA,EACRwgB,aAAcwG,EACdvG,SAAUsG,OCbLG,GApCF,WACX,IAAMjQ,EAAWC,eAEX0N,EAAYzN,aAAYR,IACxB7U,EAAiBqV,aAAY3M,IAE7BuO,EAASC,GAAgB4L,EAAW5lB,aAAaC,aAGvD4Z,KACA7B,KAEAY,qBAAU,WACR,IAAMuP,EAAUnoB,aAAaooB,QAAQ,QAErC,GAAID,EAAS,CACX,IAAMlnB,EAAO0V,KAAK3B,MAAMmT,GAExBlQ,EAAS5W,EAAU,CAAEL,QAAQ,EAAMC,aAIpC,CAACgX,IAEJ,IAAMoQ,EAAoBnJ,uBACxB,SAACnV,GACC,GAAKgQ,EAAL,CACA,IAAM9E,EAAoB8F,GAAchR,EAAQyI,QAChDuH,EAAOuO,IAAIxlB,EAAgBmS,MAE7B,CAAC8E,EAAQjX,IAGX,OAAO,kBAAC,GAAD,CAAMilB,cAAeM,KCvCxBE,GAAa,CACjBC,UhDLkC1oB,kCgDMlC2oB,ahDJA3oB,uCgDKA4oB,cAAe,iBACfC,MAAO,CACL,SACA,mBACA,YACA,YACA,gBACA,gBACA,mBACA,mBACA,sBACAjU,KAAK,KACPkU,OAAQjS,KAAKQ,UAAU,CACrB0R,SAAU,CAAEC,eAAgB,KAAMC,QAAS,KAAMC,mBAAoB,SAa1DC,GARI,WACjB,IAAMC,EAAS9e,OAAOkG,QAAQiY,IAC3B/a,KAAI,oCAAE+C,EAAF,KAAO7J,EAAP,qBAAqB6J,EAArB,YAA4B7J,MAChCgO,KAAK,KAER,MAAM,GAAN,OhDhCkC,wCgDgClC,YAAkCwU,ICxBrBC,GANF,WAGX,OAFA3P,OAAOC,SAASvT,KAAO+iB,KAEhB,M,qBC4BMG,GA3BM,WACnB,IAAMnR,EAAWC,eACX/B,EAAUkT,eAEhB,IAAK7P,OAAOC,SAAS9b,KAAM,OAAO,KAElC,IAAMmT,EAAS,IAAIwY,gBAAgB9P,OAAOC,SAAS9b,KAAKiT,MAAM,IAExD3Q,EAAc6Q,EAAOyY,IAAI,gBACzBC,EAAU1Y,EAAOyY,IAAI,YAE3B,IAAKtpB,IAAgBupB,EAAS,OAAO,KAErCxpB,aAAakX,QAAQ,cAAejX,GACpCD,aAAakX,QAAQ,UAAWsS,GAIhCvR,E/CHuB,SAAC9X,GAAD,8CAAQ,WAAO8X,GAAP,uBAAAxZ,EAAA,6DAC/BwZ,EAAS1W,KADsB,kBAINkoB,EAAatpB,GAJP,OAIvBhB,EAJuB,SAKgBA,EAASM,KAAK,GAAnD0B,EALqB,EAKrBA,MAAqBC,EALA,EAKdsoB,aACTzoB,EAAO,CAAEd,KAAIgB,QAAOC,eAC1BpB,aAAakX,QAAQ,OAAQP,KAAKQ,UAAUlW,IAE5CgX,EAASzW,EAAiBP,IATG,kDAW7BgX,EAASxW,EAAiB,CAAEtD,MAAO,KAAE4L,WAXR,0DAAR,sD+CGd7J,CAFWypB,KAAIC,OAAOJ,GAAvBK,MAIR,IAAMC,EAAc9pB,aAAaooB,QAAQ,eAIzC,OAFAjS,EAAQjL,KAAK4e,EAAW,iBAAaA,GAAgB,UAE9C,M,2NC5BM7M,oBAAf,M,wECAeA,oBAAf,M,wECAeA,oBAAf,M,sHCIe8M,oBAAf,KAEMC,GACAC,GAEFC,ICqBWC,GAlBH,SAAC,GAAD,IAAG5S,EAAH,EAAGA,MAAH,OACV,oCACE,kBAAC,KAAD,CAAUA,MAAOA,GACf,kBAAC,KAAD,KACE,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAO6S,OAAK,EAACC,KAAK,SAASC,UAPnC5sB,EAAe8b,OAAOC,SAAS9b,MAAQyrB,GAAelB,KAQ9C,kBAAC,KAAD,CAAOkC,OAAK,EAACC,KAAK,aAAaC,UAAWnB,QAIhD,kBAAC,GAAD,QCZF,GAFAoB,IAAQC,WAAW,mBAEd9sB,EAAe8b,OAAOC,SAAS9b,MAAO,CACzC,IAAM8sB,GACJjR,OAAOC,SAASiR,SAAWlR,OAAOC,SAASyP,OAAS1P,OAAOC,SAAS9b,KACtE4sB,IAAQI,SAASF,IAIrBG,IAASC,OAAO,kBAAC,GAAD,CAAKtT,MAAOA,KAAWuC,SAASgR,eAAe,W","file":"static/js/main.f17010b9.chunk.js","sourcesContent":["const isAuthRedirect = (hash) => hash.startsWith('#access_token=');\n\nexport default isAuthRedirect;\n","export const TWITCH_API_AUTH_BASE = 'https://id.twitch.tv/oauth2/authorize';\n\nexport const TWITCH_API_CLIENT_ID = process.env.REACT_APP_TWITCH_API_CLIENT_ID;\nexport const TWITCH_API_REDIRECT_URI =\n  process.env.REACT_APP_TWITCH_API_REDIRECT_URI;\n\nexport const CHANNEL_MESSAGES_LIMIT = 500;\n\nexport const API_REQUESTS_TIMEOUT = 10000;\n\nexport const MESSAGE_TYPES = {\n  MESSAGE: 'MESSAGE',\n  NOTICE_MESSAGE: 'NOTICE_MESSAGE',\n  USER_NOTICE_MESSAGE: 'USER_NOTICE_MESSAGE',\n};\n\nexport const STORE_FLAGS = {\n  DEFAULT: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n  },\n  REQUEST: {\n    isLoading: true,\n    isLoaded: false,\n    isError: false,\n    error: null,\n  },\n  SUCCESS: {\n    isLoading: false,\n    isLoaded: true,\n    isError: false,\n    error: null,\n  },\n  FAILURE: {\n    isLoading: false,\n    isLoaded: false,\n    isError: true,\n  },\n};\n","const fetchRequest = async (url, options = {}) => {\n  let fetchOptions = { ...options };\n\n  if (options.timeout) {\n    const controller = new AbortController();\n    delete fetchOptions.timeout;\n    fetchOptions = { ...fetchOptions, signal: controller.signal };\n    setTimeout(() => controller.abort(), options.timeout);\n  }\n\n  const response = await fetch(url, fetchOptions);\n\n  const body = await response.json();\n\n  if (!response.ok) {\n    const error = Error(response.statusText);\n    error.data = body;\n    throw error;\n  }\n\n  return body;\n};\n\nexport default fetchRequest;\n","import fetchRequest from 'utils/fetchRequest';\nimport { API_REQUESTS_TIMEOUT } from 'utils/constants';\n\nconst TWITCH_API_HELIX = 'https://api.twitch.tv/helix';\nconst TWITCH_API_KRAKEN = 'https://api.twitch.tv/kraken';\n\nconst getHelixHeaders = () => ({\n  Authorization: `Bearer ${localStorage.accessToken}`,\n});\n\nconst getKrakenHeaders = () => ({\n  Accept: 'application/vnd.twitchtv.v5+json',\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `OAuth ${localStorage.accessToken}`,\n});\n\nconst apiRequest = (url, options) =>\n  fetchRequest(url, { ...options, timeout: API_REQUESTS_TIMEOUT });\n\nconst apiRequestHelix = (url, options) =>\n  apiRequest(`${TWITCH_API_HELIX}${url}`, {\n    ...options,\n    headers: getHelixHeaders(),\n  });\n\nconst apiRequestKraken = (url, options) =>\n  apiRequest(`${TWITCH_API_KRAKEN}${url}`, {\n    ...options,\n    headers: getKrakenHeaders(),\n  });\n\nexport const fetchUser = (id) => apiRequestHelix(`/users?id=${id}`);\n\nexport const fetchTwitchEmotesBySets = (userId) =>\n  apiRequestKraken(`/users/${userId}/emotes`);\n\nexport const fetchBttvGlobalEmotes = () =>\n  apiRequest('https://api.betterttv.net/3/cached/emotes/global');\nexport const fetchBttvChannelEmotes = (channelId) =>\n  apiRequest(`https://api.betterttv.net/3/cached/users/twitch/${channelId}`);\n\nexport const fetchFfzGlobalEmotes = () =>\n  apiRequest('https://api.frankerfacez.com/v1/set/global');\nexport const fetchFfzChannelEmotes = (channelId) =>\n  apiRequest(`https://api.frankerfacez.com/v1/room/id/${channelId}`);\n\nexport const fetchRecentMessages = (channel) =>\n  apiRequest(\n    `https://recent-messages.robotty.de/api/v2/recent-messages/${channel}?clearchatToNotice=true`,\n  );\n\nexport const fetchGlobalBadges = (language = 'en') =>\n  apiRequest(\n    `https://badges.twitch.tv/v1/badges/global/display?language=${language}`,\n  );\nexport const fetchChannelBadges = (channelId, language = 'en') =>\n  apiRequest(\n    `https://badges.twitch.tv/v1/badges/channels/${channelId}/display?language=${language}`,\n  );\n\nexport const fetchBlockedUsers = (userId) =>\n  apiRequestKraken(`/users/${userId}/blocks`);\n","import { createAction, handleActions } from 'redux-actions';\nimport * as R from 'ramda';\n\nimport { STORE_FLAGS } from 'utils/constants';\nimport { fetchUser as apiFetchUser } from 'utils/api';\n\nconst defaultState = {\n  isAuth: false,\n  user: {\n    ...STORE_FLAGS.default,\n    id: null,\n    login: null,\n    displayName: null,\n  },\n};\n\nexport const setIsAuth = createAction('SET_IS_AUTH');\nconst fetchUserRequest = createAction('FETCH_USER_REQUEST');\nconst fetchUserSuccess = createAction('FETCH_USER_SUCCESS');\nconst fetchUserFailure = createAction('FETCH_USER_FAILURE');\n\nexport const fetchUser = (id) => async (dispatch) => {\n  dispatch(fetchUserRequest());\n\n  try {\n    const response = await apiFetchUser(id);\n    const { login, display_name: displayName } = response.data[0];\n    const user = { id, login, displayName };\n    localStorage.setItem('user', JSON.stringify(user));\n\n    dispatch(fetchUserSuccess(user));\n  } catch (e) {\n    dispatch(fetchUserFailure({ error: e.message }));\n  }\n};\n\nconst handleSetIsAuth = (state, { payload: { isAuth, user } }) => ({\n  ...state,\n  isAuth: isAuth === undefined ? state.isAuth : isAuth,\n  user: { ...state.user, ...user },\n});\n\nconst handleFetchUser = {\n  [fetchUserRequest]: (state) =>\n    R.mergeDeepRight(state, {\n      isAuth: false,\n      user: { ...STORE_FLAGS.REQUEST },\n    }),\n  [fetchUserSuccess]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      isAuth: true,\n      user: {\n        ...STORE_FLAGS.SUCCESS,\n        ...payload,\n      },\n    }),\n  [fetchUserFailure]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      isAuth: false,\n      user: {\n        ...STORE_FLAGS.FAILURE,\n        error: payload.error,\n      },\n    }),\n};\n\nconst reducer = handleActions(\n  {\n    [setIsAuth]: handleSetIsAuth,\n    ...handleFetchUser,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions } from 'redux-actions';\nimport * as R from 'ramda';\n\nimport {\n  fetchGlobalBadges as apiFetchGlobalBadges,\n  fetchChannelBadges as apiFetchChannelBadges,\n} from 'utils/api';\nimport { STORE_FLAGS } from 'utils/constants';\n\nconst defaultState = {\n  global: {\n    ...STORE_FLAGS.DEFAULT,\n    items: {},\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: {},\n    // },\n  },\n};\n\nconst {\n  fetchGlobalBadgesRequest,\n  fetchGlobalBadgesSuccess,\n  fetchGlobalBadgesFailure,\n  fetchChannelBadgesRequest,\n  fetchChannelBadgesSuccess,\n  fetchChannelBadgesFailure,\n} = createActions(\n  'FETCH_GLOBAL_BADGES_REQUEST',\n  'FETCH_GLOBAL_BADGES_SUCCESS',\n  'FETCH_GLOBAL_BADGES_FAILURE',\n  'FETCH_CHANNEL_BADGES_REQUEST',\n  'FETCH_CHANNEL_BADGES_SUCCESS',\n  'FETCH_CHANNEL_BADGES_FAILURE',\n);\n\nconst parseBadges = R.pathOr({}, ['badge_sets']);\n\nexport const fetchGlobalBadges = () => async (dispatch) => {\n  dispatch(fetchGlobalBadgesRequest());\n\n  try {\n    const response = await apiFetchGlobalBadges();\n    const data = { items: parseBadges(response) };\n\n    dispatch(fetchGlobalBadgesSuccess(data));\n  } catch (e) {\n    dispatch(fetchGlobalBadgesFailure({ error: e.message }));\n  }\n};\n\nexport const fetchChannelBadges = (channelId, channel) => async (dispatch) => {\n  dispatch(fetchChannelBadgesRequest({ channel }));\n\n  try {\n    const response = await apiFetchChannelBadges(channelId);\n    const data = {\n      channel,\n      items: parseBadges(response),\n    };\n\n    dispatch(fetchChannelBadgesSuccess(data));\n  } catch (e) {\n    dispatch(fetchChannelBadgesFailure({ channel, error: e.message }));\n  }\n};\n\nconst handleFetchGlobalBadges = {\n  [fetchGlobalBadgesRequest]: (state) =>\n    R.mergeDeepRight(state, {\n      global: { ...STORE_FLAGS.REQUEST },\n    }),\n  [fetchGlobalBadgesSuccess]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      global: { ...STORE_FLAGS.SUCCESS, items: payload.items },\n    }),\n  [fetchGlobalBadgesFailure]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      global: { ...STORE_FLAGS.FAILURE, error: payload.error },\n    }),\n};\n\nconst handleFetchChannelBadges = {\n  [fetchChannelBadgesRequest]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      channels: {\n        [payload.channel]: { ...STORE_FLAGS.REQUEST },\n      },\n    }),\n  [fetchChannelBadgesSuccess]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      channels: {\n        [payload.channel]: { ...STORE_FLAGS.SUCCESS, items: payload.items },\n      },\n    }),\n  [fetchChannelBadgesFailure]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      channels: {\n        [payload.channel]: { ...STORE_FLAGS.FAILURE, error: payload.error },\n      },\n    }),\n};\n\nconst reducer = handleActions(\n  {\n    ...handleFetchGlobalBadges,\n    ...handleFetchChannelBadges,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions } from 'redux-actions';\nimport * as R from 'ramda';\n\nimport { fetchBlockedUsers as apiFetchBlockedUsers } from 'utils/api';\nimport { STORE_FLAGS } from 'utils/constants';\n\nconst defaultState = {\n  currentChannel: null,\n  isConnected: false,\n  globalState: {},\n  channels: {\n    // [channel]: {\n    //   userState: {},\n    //   roomState: {},\n    // }\n  },\n  blockedUsers: {\n    ...STORE_FLAGS.DEFAULT,\n    items: [],\n  },\n};\n\nexport const {\n  setCurrentChannel,\n  setIsConnected,\n  updateGlobalUserState,\n  updateUserState,\n  updateRoomState,\n  removeChannel,\n} = createActions(\n  'SET_CURRENT_CHANNEL',\n  'SET_IS_CONNECTED',\n  'UPDATE_GLOBAL_USER_STATE',\n  'UPDATE_USER_STATE',\n  'UPDATE_ROOM_STATE',\n  'REMOVE_CHANNEL',\n);\n\nconst {\n  fetchBlockedUsersRequest,\n  fetchBlockedUsersSuccess,\n  fetchBlockedUsersFailure,\n} = createActions(\n  'FETCH_BLOCKED_USERS_REQUEST',\n  'FETCH_BLOCKED_USERS_SUCCESS',\n  'FETCH_BLOCKED_USERS_FAILURE',\n);\n\nconst parseBlockedUsers = R.pipe(\n  R.prop('blocks'),\n  R.map(R.path(['user', 'name'])),\n);\n\nexport const fetchBlockedUsers = (userId) => async (dispatch) => {\n  dispatch(fetchBlockedUsersRequest());\n  try {\n    const response = await apiFetchBlockedUsers(userId);\n\n    dispatch(fetchBlockedUsersSuccess({ items: parseBlockedUsers(response) }));\n  } catch (e) {\n    dispatch(fetchBlockedUsersFailure({ error: e.message }));\n  }\n};\n\nconst handleSetCurrentChannel = (state, { payload }) => ({\n  ...state,\n  currentChannel: payload,\n});\nconst handleSetIsConnected = (state, { payload }) => ({\n  ...state,\n  isConnected: payload,\n});\nconst handleUpdateGlobalUserState = (state, { payload: { tags } }) => ({\n  ...state,\n  globalState: { ...state.globalState, ...tags },\n});\nconst handleUpdateUserState = (state, { payload: { channel, tags } }) =>\n  R.mergeDeepRight(state, {\n    channels: {\n      [channel]: { userState: tags },\n    },\n  });\nconst handleUpdateRoomState = (state, { payload: { channel, tags } }) =>\n  R.mergeDeepRight(state, {\n    channels: {\n      [channel]: { roomState: tags },\n    },\n  });\nconst handleRemoveChannel = (state, { payload: channel }) => ({\n  ...state,\n  channels: R.omit([channel], state.channels),\n});\nconst handleFetchBlockUsers = {\n  [fetchBlockedUsersRequest]: (state) =>\n    R.mergeDeepRight(state, {\n      blockedUsers: { ...STORE_FLAGS.REQUEST },\n    }),\n  [fetchBlockedUsersSuccess]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      blockedUsers: { ...STORE_FLAGS.SUCCESS, items: payload.items },\n    }),\n  [fetchBlockedUsersFailure]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      blockedUsers: { ...STORE_FLAGS.FAILURE, error: payload.error },\n    }),\n};\n\nconst reducer = handleActions(\n  {\n    [setCurrentChannel]: handleSetCurrentChannel,\n    [setIsConnected]: handleSetIsConnected,\n    [updateGlobalUserState]: handleUpdateGlobalUserState,\n    [updateUserState]: handleUpdateUserState,\n    [updateRoomState]: handleUpdateRoomState,\n    [removeChannel]: handleRemoveChannel,\n    ...handleFetchBlockUsers,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions } from 'redux-actions';\n\nimport { STORE_FLAGS } from 'utils/constants';\nimport { fetchTwitchEmotesBySets } from 'utils/api';\n\nconst defaultState = {\n  ...STORE_FLAGS.DEFAULT,\n  items: {\n    // [setId]: [\n    //   {\n    //     code: \"PartyPoro\",\n    //     id: 300949540,\n    //   },\n    // ],\n  },\n};\n\nconst {\n  fetchTwitchEmotesRequest,\n  fetchTwitchEmotesSuccess,\n  fetchTwitchEmotesFailure,\n} = createActions(\n  'FETCH_TWITCH_EMOTES_REQUEST',\n  'FETCH_TWITCH_EMOTES_SUCCESS',\n  'FETCH_TWITCH_EMOTES_FAILURE',\n);\n\nexport const fetchTwitchEmotes = (userId) => async (dispatch) => {\n  dispatch(fetchTwitchEmotesRequest);\n\n  try {\n    const response = await fetchTwitchEmotesBySets(userId);\n    const data = { items: response.emoticon_sets };\n\n    dispatch(fetchTwitchEmotesSuccess(data));\n  } catch (e) {\n    dispatch(fetchTwitchEmotesFailure({ error: e.message }));\n  }\n};\n\nconst handleFetchTwitchEmotes = {\n  [fetchTwitchEmotesRequest]: (state) => ({\n    ...state,\n    ...STORE_FLAGS.REQUEST,\n  }),\n  [fetchTwitchEmotesSuccess]: (state, { payload }) => ({\n    ...state,\n    ...STORE_FLAGS.SUCCESS,\n    items: payload.items,\n  }),\n  [fetchTwitchEmotesFailure]: (state, { payload }) => ({\n    ...state,\n    ...STORE_FLAGS.FAILURE,\n    error: payload.error,\n  }),\n};\n\nconst reducer = handleActions(handleFetchTwitchEmotes, defaultState);\n\nexport default reducer;\n","import { createActions, handleActions } from 'redux-actions';\nimport * as R from 'ramda';\n\nimport {\n  fetchBttvGlobalEmotes as apiFetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes as apiFetchBttvChannelEmotes,\n} from 'utils/api';\nimport { STORE_FLAGS } from 'utils/constants';\n\nconst defaultState = {\n  global: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n    items: [],\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: [],\n    // },\n  },\n};\n\nconst {\n  fetchBttvGlobalEmotesRequest,\n  fetchBttvGlobalEmotesSuccess,\n  fetchBttvGlobalEmotesFailure,\n  fetchBttvChannelEmotesRequest,\n  fetchBttvChannelEmotesSuccess,\n  fetchBttvChannelEmotesFailure,\n} = createActions(\n  'FETCH_BTTV_GLOBAL_EMOTES_REQUEST',\n  'FETCH_BTTV_GLOBAL_EMOTES_SUCCESS',\n  'FETCH_BTTV_GLOBAL_EMOTES_FAILURE',\n  'FETCH_BTTV_CHANNEL_EMOTES_REQUEST',\n  'FETCH_BTTV_CHANNEL_EMOTES_SUCCESS',\n  'FETCH_BTTV_CHANNEL_EMOTES_FAILURE',\n);\n\nconst parseBttvChannelEmotes = ({ channelEmotes, sharedEmotes }) => [\n  ...channelEmotes,\n  ...sharedEmotes,\n];\n\nexport const fetchBttvGlobalEmotes = () => async (dispatch) => {\n  dispatch(fetchBttvGlobalEmotesRequest());\n\n  try {\n    const items = await apiFetchBttvGlobalEmotes();\n    const data = { items };\n\n    dispatch(fetchBttvGlobalEmotesSuccess(data));\n  } catch (e) {\n    dispatch(fetchBttvGlobalEmotesFailure({ error: e.message }));\n  }\n};\n\nexport const fetchBttvChannelEmotes = (channelId, channel) => async (\n  dispatch,\n) => {\n  dispatch(fetchBttvChannelEmotesRequest({ channel }));\n\n  try {\n    const response = await apiFetchBttvChannelEmotes(channelId);\n    const data = {\n      channel,\n      items: parseBttvChannelEmotes(response),\n    };\n\n    dispatch(fetchBttvChannelEmotesSuccess(data));\n  } catch (e) {\n    dispatch(fetchBttvChannelEmotesFailure({ channel, error: e.message }));\n  }\n};\n\nconst handleFetchBttvGlobalEmotes = {\n  [fetchBttvGlobalEmotesRequest]: (state) =>\n    R.mergeDeepRight(state, {\n      global: { ...STORE_FLAGS.REQUEST },\n    }),\n  [fetchBttvGlobalEmotesSuccess]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      global: { ...STORE_FLAGS.SUCCESS, items: payload.items },\n    }),\n  [fetchBttvGlobalEmotesFailure]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      global: { ...STORE_FLAGS.FAILURE, error: payload.error },\n    }),\n};\n\nconst handleFetchBttvChannelEmotes = {\n  [fetchBttvChannelEmotesRequest]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      channels: {\n        [payload.channel]: { ...STORE_FLAGS.REQUEST },\n      },\n    }),\n  [fetchBttvChannelEmotesSuccess]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      channels: {\n        [payload.channel]: { ...STORE_FLAGS.SUCCESS, items: payload.items },\n      },\n    }),\n  [fetchBttvChannelEmotesFailure]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      channels: {\n        [payload.channel]: { ...STORE_FLAGS.FAILURE, error: payload.error },\n      },\n    }),\n};\n\nconst reducer = handleActions(\n  {\n    ...handleFetchBttvGlobalEmotes,\n    ...handleFetchBttvChannelEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createActions, handleActions } from 'redux-actions';\nimport * as R from 'ramda';\n\nimport {\n  fetchFfzGlobalEmotes as apiFetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes as apiFetchFfzChannelEmotes,\n} from 'utils/api';\nimport { STORE_FLAGS } from 'utils/constants';\n\nconst defaultState = {\n  global: {\n    isLoading: false,\n    isLoaded: false,\n    isError: false,\n    error: null,\n    items: [],\n  },\n  channels: {\n    // [channel]: {\n    //   isLoading: false,\n    //   isLoaded: false,\n    //   isError: false,\n    //   error: null,\n    //   items: [],\n    // },\n  },\n};\n\nconst {\n  fetchFfzGlobalEmotesRequest,\n  fetchFfzGlobalEmotesSuccess,\n  fetchFfzGlobalEmotesFailure,\n  fetchFfzChannelEmotesRequest,\n  fetchFfzChannelEmotesSuccess,\n  fetchFfzChannelEmotesFailure,\n} = createActions(\n  'FETCH_FFZ_GLOBAL_EMOTES_REQUEST',\n  'FETCH_FFZ_GLOBAL_EMOTES_SUCCESS',\n  'FETCH_FFZ_GLOBAL_EMOTES_FAILURE',\n  'FETCH_FFZ_CHANNEL_EMOTES_REQUEST',\n  'FETCH_FFZ_CHANNEL_EMOTES_SUCCESS',\n  'FETCH_FFZ_CHANNEL_EMOTES_FAILURE',\n);\n\nconst parseFfzGlobalEmotes = ({ default_sets: defaultSets, sets }) =>\n  R.pipe(\n    R.pick(defaultSets),\n    R.values,\n    R.map(R.propOr([], 'emoticons')),\n    R.flatten,\n  )(sets);\n\nconst parseFfzChannelEmotes = R.pipe(\n  R.pathOr({}, ['sets']),\n  R.values,\n  R.map(R.pathOr([], ['emoticons'])),\n  R.flatten,\n);\n\nexport const fetchFfzGlobalEmotes = () => async (dispatch) => {\n  dispatch(fetchFfzGlobalEmotesRequest());\n\n  try {\n    const response = await apiFetchFfzGlobalEmotes();\n    const data = { items: parseFfzGlobalEmotes(response) };\n\n    dispatch(fetchFfzGlobalEmotesSuccess(data));\n  } catch (e) {\n    dispatch(fetchFfzGlobalEmotesFailure({ error: e.message }));\n  }\n};\n\nexport const fetchFfzChannelEmotes = (channelId, channel) => async (\n  dispatch,\n) => {\n  dispatch(fetchFfzChannelEmotesRequest({ channel }));\n\n  try {\n    const response = await apiFetchFfzChannelEmotes(channelId);\n    const data = {\n      channel,\n      items: parseFfzChannelEmotes(response),\n    };\n\n    dispatch(fetchFfzChannelEmotesSuccess(data));\n  } catch (e) {\n    dispatch(fetchFfzChannelEmotesFailure({ channel, error: e.message }));\n  }\n};\n\nconst handleFetchFfzGlobalEmotes = {\n  [fetchFfzGlobalEmotesRequest]: (state) =>\n    R.mergeDeepRight(state, {\n      global: { ...STORE_FLAGS.REQUEST },\n    }),\n  [fetchFfzGlobalEmotesSuccess]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      global: { ...STORE_FLAGS.SUCCESS, items: payload.items },\n    }),\n  [fetchFfzGlobalEmotesFailure]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      global: { ...STORE_FLAGS.FAILURE, error: payload.error },\n    }),\n};\n\nconst handleFetchFfzChannelEmotes = {\n  [fetchFfzChannelEmotesRequest]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      channels: {\n        [payload.channel]: { ...STORE_FLAGS.REQUEST },\n      },\n    }),\n  [fetchFfzChannelEmotesSuccess]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      channels: {\n        [payload.channel]: { ...STORE_FLAGS.SUCCESS, items: payload.items },\n      },\n    }),\n  [fetchFfzChannelEmotesFailure]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      channels: {\n        [payload.channel]: { ...STORE_FLAGS.FAILURE, error: payload.error },\n      },\n    }),\n};\n\nconst reducer = handleActions(\n  {\n    ...handleFetchFfzGlobalEmotes,\n    ...handleFetchFfzChannelEmotes,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport twitch from './twitch';\nimport bttv from './bttv';\nimport ffz from './ffz';\n\nexport default combineReducers({\n  twitch,\n  bttv,\n  ffz,\n});\n","// https://regex101.com/r/cpaNXh/1\nconst isStartsWithProtocolRegex = /^(?:(?:[a-z]+:)?\\/\\/)/;\n\nconst normalizeHref = (href) =>\n  isStartsWithProtocolRegex.test(href) ? href : `//${href}`;\n\nexport default normalizeHref;\n","import pt from 'prop-types';\nimport { parse as twemojiParser } from 'twemoji-parser';\nimport emojilib from 'emojilib/emojis';\nimport urlRegex from 'url-regex';\nimport * as R from 'ramda';\n\nimport normalizeHref from 'utils/normalizeHref';\n\nconst TWITCH_EMOTES_CDN = '//static-cdn.jtvnw.net/emoticons/v1';\nconst BTTV_EMOTES_CDN = '//cdn.betterttv.net/emote';\n\nconst mentionRegex = /^@([\\p{Letter}\\p{Number}_]+)/u;\nconst linkRegex = urlRegex({ strict: false });\n\nconst normalizeEmotesFromTags = R.pipe(\n  R.toPairs,\n  R.map(([id, value]) => R.map((v) => ({ id, ...v }), value)),\n  R.flatten,\n);\n\nconst getFfzSrcSet = R.pipe(\n  R.toPairs,\n  R.map(([dpi, url]) => `${url} ${dpi}x`),\n  R.join(', '),\n);\n\nexport const createTwitchEmote = ({ id, code }) => ({\n  type: 'twitch-emote',\n  alt: code,\n  src: `${TWITCH_EMOTES_CDN}/${id}/1.0`,\n  srcSet: `${TWITCH_EMOTES_CDN}/${id}/1.0 1x, ${TWITCH_EMOTES_CDN}/${id}/2.0 2x, ${TWITCH_EMOTES_CDN}/${id}/3.0 4x`,\n});\nexport const createBttvEmote = ({ id, code }) => ({\n  type: 'bttv-emote',\n  alt: code,\n  src: `${BTTV_EMOTES_CDN}/${id}/1x`,\n  srcSet: `${BTTV_EMOTES_CDN}/${id}/2x 2x, ${BTTV_EMOTES_CDN}/${id}/3x 4x`,\n});\nexport const createFfzEmote = ({ name, urls }) => ({\n  type: 'ffz-emote',\n  alt: name,\n  src: urls[1],\n  srcSet: getFfzSrcSet(urls),\n});\nexport const createEmoji = (alt, src) => ({\n  type: 'emoji',\n  alt: `:${alt}:`,\n  src,\n  srcSet: null,\n});\nexport const createMention = (text, target) => ({\n  type: 'mention',\n  text,\n  target,\n});\nexport const createLink = (href) => ({\n  type: 'link',\n  text: href,\n  href: normalizeHref(href),\n});\n\nexport const twitchEmoteType = pt.shape({\n  type: pt.oneOf(['twitch-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const bttvEmoteType = pt.shape({\n  type: pt.oneOf(['bttv-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const ffzEmoteType = pt.shape({\n  type: pt.oneOf(['ffz-emote']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string.isRequired,\n});\nexport const emojiType = pt.shape({\n  type: pt.oneOf(['emoji']).isRequired,\n  alt: pt.string.isRequired,\n  src: pt.string.isRequired,\n  srcSet: pt.string,\n});\nexport const mentionType = pt.shape({\n  type: pt.oneOf(['mention']).isRequired,\n  text: pt.string.isRequired,\n  target: pt.string.isRequired,\n});\nexport const linkType = pt.shape({\n  type: pt.oneOf(['link']).isRequired,\n  text: pt.string.isRequired,\n  href: pt.string.isRequired,\n});\n\nconst regexMap = {\n  4: '>\\\\(', // '\\\\&gt\\\\;\\\\('\n  9: '<3', // '\\\\&lt\\\\;3'\n};\n\nconst findTwitchEmote = (name, twitch) =>\n  R.find(({ id, code }) => {\n    // 1-14 - match by regex\n    if (id >= 1 && id <= 14) {\n      const regexString = regexMap[id] || code;\n      return RegExp(`^${regexString}$`).test(name);\n    }\n    return name === code;\n  }, twitch);\nconst findBttvEmote = (name, bttv) => R.find(R.propEq('code', name), bttv);\nconst findFfzEmote = (name, ffz) => R.find(R.propEq('name', name), ffz);\nconst findEmoji = (char) =>\n  R.pipe(R.filter(R.propEq('char', char)), R.keys, R.head)(emojilib);\n\nconst findEntity = (word, { twitch, bttv, ffz }, { parseTwitch = false }) => {\n  if (parseTwitch) {\n    const twitchEmote = findTwitchEmote(word, twitch);\n    if (twitchEmote)\n      return createTwitchEmote({ id: twitchEmote.id, code: word });\n  }\n\n  const bttvEmote = findBttvEmote(word, bttv);\n  if (bttvEmote) return createBttvEmote(bttvEmote);\n\n  const ffzEmote = findFfzEmote(word, ffz);\n  if (ffzEmote) return createFfzEmote(ffzEmote);\n\n  // Don't parse two or more emotes without spaces between\n  // Don't parse emote if it's not in the emojilib package\n  const emojiMatch = twemojiParser(word, { assetType: 'png' });\n  if (\n    emojiMatch &&\n    emojiMatch.length === 1 &&\n    emojiMatch[0].text.length === word.length\n  ) {\n    const emoji = findEmoji(word);\n\n    if (emoji) {\n      const [{ url }] = emojiMatch;\n      return createEmoji(emoji, url);\n    }\n  }\n\n  // TODO: Use unicode regex if it supports\n  const mentionMatch = word.match(mentionRegex);\n  if (mentionMatch) {\n    const [text, target] = mentionMatch;\n    return [\n      createMention(text, target.toLowerCase()),\n      word.length - text.length,\n    ];\n  }\n\n  const linkMatch = word.match(linkRegex);\n  if (linkMatch && linkMatch[0].length === word.length) {\n    return createLink(word);\n  }\n\n  return null;\n};\n\nconst formatMessage = (message, embeddedEmotes, emotes) => {\n  // If the message was sent by the current user, there is no embedded emotes\n  // So we need to parse twitch emotes manually\n\n  const isOwnMessage = embeddedEmotes === undefined || embeddedEmotes === null;\n  const hasEmbeddedEmotes =\n    embeddedEmotes && Object.keys(embeddedEmotes).length > 0;\n  const normalizedEmbeddedEmotes = normalizeEmotesFromTags(embeddedEmotes);\n\n  const result = [];\n  let offset = 0;\n  // Before that offset all content was added to the result array\n  let arrayOffset = 0;\n\n  // Check every word. From offset to the next space index\n  do {\n    const spaceIndex = message.indexOf(' ', offset + 1);\n\n    const isStart = offset === 0;\n    const isEnd = spaceIndex === -1;\n\n    const startIndex = isStart ? offset : offset + 1;\n    const endIndex = isEnd ? message.length : spaceIndex;\n\n    const word = message.substring(startIndex, endIndex);\n\n    if (word) {\n      let entity = null;\n\n      // Check embedded twitch emotes\n      if (hasEmbeddedEmotes) {\n        const embeddedEmote = R.find(\n          R.propEq('start', startIndex),\n          normalizedEmbeddedEmotes,\n        );\n\n        if (embeddedEmote) {\n          entity = createTwitchEmote({ id: embeddedEmote.id, code: word });\n        }\n      }\n\n      // Check other entities\n      if (!entity) {\n        entity = findEntity(word, emotes, { parseTwitch: isOwnMessage });\n      }\n\n      if (entity) {\n        // Push all text before this entity\n        if (arrayOffset !== startIndex) {\n          const textBefore = message.substring(arrayOffset, startIndex);\n          result.push(textBefore);\n        }\n\n        // If entity it's an array it means entity may be not full word\n        // The second element is the difference between word length and entity length\n        if (Array.isArray(entity)) {\n          const [entityObject, difference] = entity;\n          result.push(entityObject);\n          arrayOffset = endIndex - difference;\n        } else {\n          result.push(entity);\n          arrayOffset = endIndex;\n        }\n      }\n    }\n\n    // If it's the last word and it wasn't added to the result add it now\n    if (spaceIndex === -1 && arrayOffset !== endIndex) {\n      const textAfter = message.substring(arrayOffset, endIndex);\n      result.push(textAfter);\n    }\n\n    offset = spaceIndex;\n  } while (offset !== -1);\n\n  return result;\n};\n\nexport default formatMessage;\n","import * as R from 'ramda';\n\nexport const currentChannelSelector = R.pathOr('', ['chat', 'currentChannel']);\n\nexport const currentChannelIdSelector = (state) =>\n  R.pathOr(\n    null,\n    ['chat', 'channels', currentChannelSelector(state), 'roomState', 'roomId'],\n    state,\n  );\n\nexport const isConnectedSelector = (state) => state.chat.isConnected;\n\nexport const isBlockedUsersLoadedSelector = (state) =>\n  state.chat.blockedUsers.isLoaded || state.chat.blockedUsers.isError;\n\nexport const blockedUsersSelector = (state) => state.chat.blockedUsers.items;\n","import { createSelector } from 'reselect';\nimport * as R from 'ramda';\n\nimport {\n  createTwitchEmote,\n  createBttvEmote,\n  createFfzEmote,\n} from 'utils/formatMessage';\nimport { currentChannelSelector } from 'reducers/chat/selectors';\n\nexport const twitchEmotesSelector = createSelector(\n  R.pathOr([], ['emotes', 'twitch', 'items']),\n  R.pipe(R.values, R.flatten),\n);\n\nconst createGlobalEmotesSelector = (type) =>\n  R.pathOr([], ['emotes', type, 'global', 'items']);\nconst createChannelEmotesSelector = (type) => (state) =>\n  R.pathOr(\n    [],\n    ['emotes', type, 'channels', currentChannelSelector(state), 'items'],\n    state,\n  );\n\nconst bttvGlobalEmotesSelector = createGlobalEmotesSelector('bttv');\nconst bttvChannelEmotesSelector = createChannelEmotesSelector('bttv');\nexport const bttvEmotesSelector = createSelector(\n  bttvGlobalEmotesSelector,\n  bttvChannelEmotesSelector,\n  (bttvGlobal, bttvChannel) => [...bttvGlobal, ...bttvChannel],\n);\n\nconst ffzGlobalEmotesSelector = createGlobalEmotesSelector('ffz');\nconst ffzChannelEmotesSelector = createChannelEmotesSelector('ffz');\nexport const ffzEmotesSelector = createSelector(\n  ffzGlobalEmotesSelector,\n  ffzChannelEmotesSelector,\n  (ffzGlobal, ffzChannel) => [...ffzGlobal, ...ffzChannel],\n);\n\nexport const emotesSelector = (state) => ({\n  twitch: twitchEmotesSelector(state),\n  bttv: bttvEmotesSelector(state),\n  ffz: ffzEmotesSelector(state),\n});\n\nconst createIsEmotesLoadedSelector = (type) => (state) => {\n  const channel = currentChannelSelector(state);\n  const globalLoaded =\n    state.emotes[type].global.isLoaded || state.emotes[type].global.isError;\n  const channelLoaded =\n    R.path(['emotes', type, 'channels', channel, 'isLoaded'], state) ||\n    R.path(['emotes', type, 'channels', channel, 'isError'], state);\n  return globalLoaded && channelLoaded;\n};\n\nexport const isBttvEmotesLoadedSelector = createIsEmotesLoadedSelector('bttv');\nexport const isFfzEmotesLoadedSelector = createIsEmotesLoadedSelector('ffz');\nexport const isTwitchEmotesLoadedSelector = (state) =>\n  state.emotes.twitch.isLoaded || state.emotes.twitch.isError;\n\nexport const isEmotesLoadedSelector = (state) =>\n  isTwitchEmotesLoadedSelector(state) &&\n  isBttvEmotesLoadedSelector(state) &&\n  isFfzEmotesLoadedSelector(state);\n\n// prettier-ignore\nconst regexEmotesMap = {\n  '[oO](_|\\\\.)[oO]': 'O_o',\n  '\\\\&gt\\\\;\\\\(':     '>(',\n  '\\\\&lt\\\\;3':       '<3',\n  '\\\\:-?(o|O)':      ':O',\n  '\\\\:-?(p|P)':      ':P',\n  '\\\\:-?[\\\\\\\\/]':    ':/',\n  '\\\\:-?[z|Z|\\\\|]':  ':Z',\n  '\\\\:-?\\\\(':        ':(',\n  '\\\\:-?\\\\)':        ':)',\n  '\\\\:-?D':          ':D',\n  '\\\\;-?(p|P)':      ';P',\n  '\\\\;-?\\\\)':        ';)',\n  'R-?\\\\)':          'R)',\n  'B-?\\\\)':          'B)',\n};\n\nconst createGlobalTwitchEmote = ({ id, code }) =>\n  createTwitchEmote({ id, code: regexEmotesMap[code] || code });\n\nexport const emoteCategoriesSelector = createSelector(\n  isEmotesLoadedSelector,\n  (state) => state.emotes.twitch.items,\n  bttvGlobalEmotesSelector,\n  bttvChannelEmotesSelector,\n  ffzGlobalEmotesSelector,\n  ffzChannelEmotesSelector,\n  (isEmotesLoaded, twitch, bttvGlobal, bttvChannel, ffzGlobal, ffzChannel) => {\n    if (!isEmotesLoaded) return [];\n\n    return [\n      {\n        title: 'BetterTTV Channel Emotes',\n        items: bttvChannel.map(createBttvEmote),\n      },\n      {\n        title: 'FrankerFaceZ Channel Emotes',\n        items: ffzChannel.map(createFfzEmote),\n      },\n      ...R.pipe(\n        R.omit(['0']),\n        R.values,\n        R.map((items) => ({ items: R.map(createTwitchEmote, items) })),\n      )(twitch),\n      {\n        title: 'Twitch',\n        items: R.map(createGlobalTwitchEmote, R.propOr([], '0', twitch)),\n      },\n      {\n        title: 'BetterTTV',\n        items: bttvGlobal.map(createBttvEmote),\n      },\n      {\n        title: 'FrankerFaceZ',\n        items: ffzGlobal.map(createFfzEmote),\n      },\n    ].filter(({ items }) => items.length > 0);\n  },\n);\n","import * as R from 'ramda';\n\nimport { currentChannelSelector } from 'reducers/chat/selectors';\n\nexport const globalBadgesSelector = (state) => state.badges.global.items;\nexport const channelBadgesSelector = (state) =>\n  R.pathOr({}, ['badges', 'channels', currentChannelSelector(state), 'items']);\n\nconst isGlobalBadgesLoadedSelector = (state) =>\n  state.badges.global.isLoaded || state.badges.global.isError;\n\nconst isChannelBadgesLoadedSelector = (state) => {\n  const channel = currentChannelSelector(state);\n  return (\n    R.pathOr(false, ['badges', 'channels', channel, 'isLoaded'], state) ||\n    R.pathOr(false, ['badges', 'channels', channel, 'isError'], state)\n  );\n};\n\nexport const isBadgesLoadedSelector = (state) =>\n  isGlobalBadgesLoadedSelector(state) && isChannelBadgesLoadedSelector(state);\n","import * as R from 'ramda';\n\nconst createBadge = ({\n  title,\n  description,\n  image_url_1x: imageUrl1x,\n  image_url_2x: imageUrl2x,\n  image_url_4x: imageUrl4x,\n}) => ({\n  alt: title,\n  label: description,\n  src: imageUrl1x,\n  srcSet: `${imageUrl1x} 1x, ${imageUrl2x} 2x, ${imageUrl4x} 4x`,\n});\n\nconst getMessageBadges = (badges, globalBadges, channelBadges) => {\n  const mapBadges = ([name, version]) => {\n    const badge =\n      R.pathOr(false, [name, 'versions', version], channelBadges) ||\n      R.pathOr(false, [name, 'versions', version], globalBadges);\n\n    return badge ? createBadge(badge) : false;\n  };\n\n  return R.pipe(R.toPairs, R.map(mapBadges), R.filter(Boolean))(badges);\n};\n\nexport default getMessageBadges;\n","/* eslint-disable no-underscore-dangle */\nimport * as R from 'ramda';\nimport { EventEmitter } from 'events';\nimport { parse as tekkoParse, format as tekkoFormat } from 'tekko';\nimport camelCase from 'camel-case';\nimport uuid from 'uuid/v4';\n\nconst chatUrl = 'wss://irc-ws.chat.twitch.tv:443';\n\nconst noopIRCCommands = [\n  'CAP',\n  '002',\n  '003',\n  '004',\n  '353',\n  '366',\n  '375',\n  '372',\n  '376',\n];\n\nconst booleanMessageTags = [\n  'mod',\n  'emote-only',\n  'r9k',\n  'rituals',\n  'subs-only',\n  'msg-param-should-share-streak',\n];\n\nconst numberMessageTags = [\n  'tmi-sent-ts',\n  'ban-duration',\n  'bits',\n  'msg-param-cumulative-months',\n  'msg-param-months',\n  'msg-param-promo-gift-total',\n  'msg-param-streak-months',\n  'msg-param-viewerCount',\n  'msg-param-threshold',\n];\n\nconst depricatedMessageTags = ['subscriber', 'turbo', 'user-type'];\n\nconst noticeMessageTags = [\n  'msg_banned',\n  'msg_bad_characters',\n  'msg_channel_blocked',\n  'msg_channel_suspended',\n  'msg_duplicate',\n  'msg_emoteonly',\n  'msg_facebook',\n  'msg_followersonly',\n  'msg_followersonly_followed',\n  'msg_followersonly_zero',\n  'msg_r9k',\n  'msg_ratelimit',\n  'msg_rejected',\n  'msg_rejected_mandatory',\n  'msg_room_not_found',\n  'msg_slowmode',\n  'msg_subsonly',\n  'msg_suspended',\n  'msg_timedout',\n  'msg_verified_email',\n];\n\nconst getRandomUsername = () =>\n  `justinfan${Math.floor(Math.random() * 80000 + 1000)}`;\n\nconst parseMessageEmotes = (raw = '') => {\n  if (!raw) return {};\n\n  return raw.split('/').reduce((acc, emote) => {\n    const [id, indexes] = emote.split(':');\n\n    return {\n      ...acc,\n      [id]: indexes.split(',').map((index) => {\n        const [start, end] = index.split('-');\n\n        return {\n          start: Number.parseInt(start, 10),\n          end: Number.parseInt(end, 10),\n        };\n      }),\n    };\n  }, {});\n};\n\nconst parseBadges = (data = '') => {\n  if (!data) return {};\n\n  return data.split(',').reduce((acc, badge) => {\n    const [name, value] = badge.split('/');\n\n    return {\n      ...acc,\n      [name]: value,\n    };\n  }, {});\n};\n\nconst normalizeTagValue = (name, value) => {\n  if (name === 'emotes') return parseMessageEmotes(value);\n  if (name === 'badges') return parseBadges(value);\n  if (name === 'badge-info') return parseBadges(value);\n\n  if (name === 'followers-only') {\n    let followersOnly = false;\n    if (value === '-1') {\n      followersOnly = false;\n    } else if (value === '0') {\n      followersOnly = true;\n    } else if (typeof value === 'string') {\n      followersOnly = parseInt(value, 10);\n    }\n    return followersOnly;\n  }\n\n  if (name === 'slow') {\n    let slow = false;\n    if (value === '0') {\n      slow = false;\n    } else if (typeof value === 'string') {\n      slow = parseInt(value, 10);\n    }\n    return slow;\n  }\n\n  if (booleanMessageTags.includes(name)) return value === '1';\n  if (numberMessageTags.includes(name)) return parseInt(value, 10);\n\n  if (typeof value === 'string') {\n    return value.replace('\\\\s', ' ');\n  }\n\n  return value;\n};\n\nexport const parseMessageTags = (data = {}) =>\n  Object.entries(data)\n    .filter(([key]) => !depricatedMessageTags.includes(key))\n    .reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [camelCase(key)]: normalizeTagValue(key, value),\n      };\n    }, {});\n\nexport const isBroadcaster = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'broadcaster');\n\nexport const isMod = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'moderator');\n\nexport const isSub = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'subscriber');\n\nexport const isVIP = (tags = {}) =>\n  Object.prototype.hasOwnProperty.call(tags, 'vip');\n\nexport const monthsSubbed = (tags = {}) => {\n  const subbed = tags.subscriber;\n\n  return subbed ? parseInt(subbed, 10) : 0;\n};\n\nexport const getIsAction = (message) =>\n  message.startsWith('\\u0001ACTION ') && message.endsWith('\\u0001');\nexport const normalizeActionMessage = (message) => message.slice(8, -1);\n\nexport const parseMessageData = ({\n  raw,\n  command,\n  tags,\n  middle: params,\n  trailing: message,\n  prefix,\n}) => ({\n  raw,\n  command,\n  tags: parseMessageTags(tags),\n  params,\n  message,\n  prefix,\n});\n\nexport const parseChatMessage = ({\n  message,\n  tags,\n  params,\n  prefix: { user },\n}) => {\n  const isAction = getIsAction(message);\n\n  return {\n    message: isAction ? normalizeActionMessage(message) : message,\n    tags,\n    user,\n    channel: params[0].slice(1),\n    isAction,\n  };\n};\n\nconst parseGlobalUserState = ({ tags }) => ({ tags });\nconst parseState = ({ tags, params: [channel] }) => ({\n  tags,\n  channel: channel.slice(1),\n});\nconst parseUserState = parseState;\nconst parseRoomState = parseState;\n\nconst parseCommand = ({ message, tags, params: [channel] }) => ({\n  message,\n  tags,\n  channel: channel.slice(1),\n});\nconst parseNotice = parseCommand;\nconst parseUserNotice = parseCommand;\nconst parseClearMessage = parseCommand;\nconst parseClearChat = parseCommand;\nconst parseHostTarget = parseCommand;\n\nconst parseWhisper = ({\n  message,\n  tags,\n  params: [channel],\n  prefix: { user },\n}) => ({\n  message,\n  tags,\n  channel,\n  user,\n});\n\nclass Client extends EventEmitter {\n  socket;\n\n  options;\n\n  user;\n\n  channels;\n\n  _queue;\n\n  _messagesQueue;\n\n  constructor(options = {}) {\n    super();\n    this.socket = null;\n    this.channels = {};\n    this.options = R.mergeDeepRight({ identity: {} }, options);\n    this.user = null;\n    this._queue = [];\n    this._messagesQueue = {};\n  }\n\n  _onConnect() {\n    const { name, auth } = this.options.identity;\n\n    const nick = name || getRandomUsername();\n    const pass = auth ? `oauth:${auth}` : 'SCHMOOPIIE';\n\n    this.sendRaw([\n      'CAP REQ :twitch.tv/tags twitch.tv/commands',\n      `PASS ${pass}`,\n      `NICK ${nick}`,\n    ]);\n    this.emit('connected');\n  }\n\n  _onClose(hadError) {\n    // TODO\n    const willReconnect = false;\n    this.emit('disconnected', { willReconnect, hadError });\n    if (willReconnect) {\n      this.connect();\n    }\n  }\n\n  _onError(error) {\n    // TODO\n    this.emit('error', error);\n  }\n\n  _onData(rawData) {\n    const data = rawData.trim().split('\\r\\n');\n    data.forEach((line) => this._handleMessage(line));\n  }\n\n  _emmitOwnMessage(tags, channel) {\n    const message = R.pathOr([], ['_messagesQueue', channel], this).shift();\n\n    if (typeof message !== 'string') return;\n\n    const isAction = message.startsWith('/me ');\n    const messageEventData = {\n      message: isAction ? message.slice(4) : message,\n      tags: {\n        ...tags,\n        id: uuid(),\n        tmiSentTs: new Date().getTime(),\n        userId: this.user.userId,\n      },\n      user: this.options.identity.name,\n      channel,\n      isAction,\n    };\n\n    this.emit('ownmessage', messageEventData);\n  }\n\n  _handleMessage(raw) {\n    const parsedData = tekkoParse(raw);\n    parsedData.raw = raw;\n    const { command } = parsedData;\n\n    if (command === 'PING') {\n      this.sendRaw('PONG :tmi.twitch.tv');\n      this.emit('ping');\n      return;\n    }\n\n    if (parsedData.prefix && parsedData.prefix.user === 'jtv') {\n      // console.log('JTV');\n      // console.log(parsedData);\n      return;\n    }\n\n    if (command === '001') {\n      const name = parsedData.params[0];\n      this.options.identity.name = name;\n\n      while (this._queue.length) {\n        const ircMessage = this._queue.shift();\n        this.sendRaw(ircMessage);\n      }\n\n      return;\n    }\n\n    // noop\n    if (noopIRCCommands.includes(command)) {\n      return;\n    }\n\n    const data = parseMessageData(parsedData);\n    const channel = R.pathOr('', ['params', 0], data).slice(1);\n\n    // Sends a message to a channel\n    if (command === 'PRIVMSG') {\n      const eventData = parseChatMessage(data);\n      this.emit('message', eventData);\n      return;\n    }\n\n    // Sends user-state data when a user joins a channel or sends a PRIVMSG to a channel\n    if (command === 'USERSTATE') {\n      const eventData = parseUserState(data);\n\n      this.channels = R.mergeDeepRight(this.channels, {\n        [channel]: { userState: eventData.tags },\n      });\n\n      const isSendedAfterPrivateMessage =\n        R.pathOr(0, ['_messagesQueue', channel, 'length'], this) > 0;\n\n      if (isSendedAfterPrivateMessage) {\n        this._emmitOwnMessage(eventData.tags, channel);\n      }\n\n      this.emit('userstate', eventData);\n      return;\n    }\n\n    if (command === 'JOIN') {\n      const eventData = { channel };\n      this.channels = R.mergeDeepRight(this.channels, { [channel]: {} });\n      this.emit('join', eventData);\n      return;\n    }\n\n    if (command === 'PART') {\n      const eventData = { channel };\n      this.channels = R.omit([channel], this.channels);\n      this.emit('part', eventData);\n      return;\n    }\n\n    if (command === 'ROOMSTATE') {\n      const eventData = parseRoomState(data);\n      this.channels = R.mergeDeepRight(this.channels, {\n        [channel]: { roomState: eventData.tags },\n      });\n      this.emit('roomstate', eventData);\n      return;\n    }\n\n    if (command === 'NOTICE') {\n      const eventData = parseNotice(data);\n\n      // Last message was not sent\n      if (noticeMessageTags.includes(data.tags.msgId)) {\n        R.pathOr([], ['_messagesQueue', channel], this).shift();\n      }\n\n      this.emit('notice', eventData);\n      return;\n    }\n\n    if (command === 'USERNOTICE') {\n      const eventData = parseUserNotice(data);\n      this.emit('usernotice', eventData);\n      return;\n    }\n\n    if (command === 'CLEARCHAT') {\n      const eventData = parseClearChat(data);\n      this.emit('clearchat', eventData);\n      return;\n    }\n\n    if (command === 'CLEARMSG') {\n      const eventData = parseClearMessage(data);\n      this.emit('clearmsg', eventData);\n      return;\n    }\n\n    if (command === 'HOSTTARGET') {\n      const eventData = parseHostTarget(data);\n      this.emit('hosttarget', eventData);\n      return;\n    }\n\n    if (command === 'WHISPER') {\n      const eventData = parseWhisper(data);\n      this.emit('whisper', eventData);\n      return;\n    }\n\n    if (command === 'GLOBALUSERSTATE') {\n      const eventData = parseGlobalUserState(data);\n      this.user = eventData.tags;\n      this.emit('globaluserstate', eventData);\n      return;\n    }\n\n    this.emit('unhandled-command', data);\n  }\n\n  sendRaw(message) {\n    const handleError = (err) => {\n      if (err) {\n        this.emit('error', err);\n      }\n    };\n\n    if (Array.isArray(message)) {\n      message.forEach((line) => this.socket.send(`${line}\\r\\n`, handleError));\n    } else {\n      this.socket.send(`${message}\\r\\n`, handleError);\n    }\n  }\n\n  connect() {\n    this.socket = new WebSocket(chatUrl);\n    const { socket } = this;\n\n    socket.addEventListener('open', () => this._onConnect());\n    socket.addEventListener('close', (hadError) => this._onClose(hadError));\n    socket.addEventListener('error', (error) => this._onError(error));\n    socket.addEventListener('message', (data) => this._onData(data.data));\n  }\n\n  say(channel, message) {\n    // TODO: check if conected to the channel before send\n\n    if (!message) return;\n\n    const ircMessage = tekkoFormat({\n      command: 'PRIVMSG',\n      middle: [`#${channel}`],\n      trailing: message,\n    });\n    this.sendRaw(ircMessage);\n\n    this._messagesQueue = R.mergeDeepWith(R.concat, this._messagesQueue, {\n      [channel]: [message],\n    });\n  }\n\n  sendCommand(channel, command, params) {\n    const commandParams = Array.isArray(params) ? params.join(' ') : params;\n    const ircMessage = tekkoFormat({\n      command: 'PRIVMSG',\n      middle: [`#${channel}`],\n      trailing: `/${command} ${commandParams}`,\n    });\n    this.sendRaw(ircMessage);\n  }\n\n  join(roomName) {\n    const ircMessage = tekkoFormat({\n      command: 'JOIN',\n      middle: [`#${roomName}`],\n    });\n\n    if (!this.user) {\n      this._queue.push(ircMessage);\n    } else {\n      this.sendRaw(ircMessage);\n    }\n  }\n\n  part(roomName) {\n    const ircMessage = tekkoFormat({\n      command: 'PART',\n      middle: [`#${roomName}`],\n    });\n\n    if (!this.user) {\n      this._queue.push(ircMessage);\n    } else {\n      this.sendRaw(ircMessage);\n    }\n  }\n}\n\nexport default Client;\n","import { parse } from 'tekko';\n\nimport {\n  globalBadgesSelector,\n  channelBadgesSelector,\n} from 'reducers/badges/selectors';\nimport { emotesSelector } from 'reducers/emotes/selectors';\nimport { blockedUsersSelector } from 'reducers/chat/selectors';\nimport { MESSAGE_TYPES } from 'utils/constants';\nimport {\n  getIsAction,\n  normalizeActionMessage,\n  parseMessageTags,\n} from 'utils/twitchChat';\nimport formatMessage from 'utils/formatMessage';\nimport getMessageBadges from 'utils/getMessageBadges';\n\nconst normalizeRecentMessages = (state, messages) => {\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n  const blockedUsers = blockedUsersSelector(state);\n\n  const filterMessages = ({ command, prefix: { user } }) =>\n    command === 'PRIVMSG' && !blockedUsers.includes(user);\n\n  const normalizeMessages = ({\n    tags,\n    params: [channel, message],\n    prefix: { user },\n  }) => {\n    const isAction = getIsAction(message);\n    const normalizedMessage = isAction\n      ? normalizeActionMessage(message)\n      : message;\n    const parsedTags = parseMessageTags(tags);\n\n    return {\n      type: MESSAGE_TYPES.MESSAGE,\n      message: normalizedMessage,\n      messageArray: formatMessage(normalizedMessage, parsedTags.emotes, emotes),\n      tags: parsedTags,\n      badges: getMessageBadges(parsedTags.badges, globalBadges, channelBadges),\n      user,\n      channel: channel.slice(1),\n      isAction,\n      isHistory: true,\n    };\n  };\n\n  return messages\n    .map((m) => parse(m))\n    .filter(filterMessages)\n    .map(normalizeMessages);\n};\n\nexport default normalizeRecentMessages;\n","import { createAction, createActions, handleActions } from 'redux-actions';\nimport * as R from 'ramda';\n\nimport { emotesSelector } from 'reducers/emotes/selectors';\nimport {\n  globalBadgesSelector,\n  channelBadgesSelector,\n} from 'reducers/badges/selectors';\nimport { blockedUsersSelector } from 'reducers/chat/selectors';\nimport { fetchRecentMessages as apiFetchRecentMessages } from 'utils/api';\nimport {\n  CHANNEL_MESSAGES_LIMIT,\n  MESSAGE_TYPES,\n  STORE_FLAGS,\n} from 'utils/constants';\nimport formatMessage from 'utils/formatMessage';\nimport getMessageBadges from 'utils/getMessageBadges';\nimport normalizeRecentMessages from 'utils/normalizeRecentMessages';\n\nconst defaultState = {\n  // [channel]: {\n  //   history: {\n  //     isLoading: true,\n  //     isLoaded: false,\n  //     isError: false,\n  //     error: null,\n  //   },\n  //   isEven: false,\n  //   items: [],\n  // },\n};\n\nconst {\n  addMessageEntity,\n  addRecentMessages: addRecentMessagesAction,\n  fetchRecentMessagesRequest,\n  fetchRecentMessagesSuccess,\n  fetchRecentMessagesFailure,\n} = createActions(\n  'ADD_MESSAGE_ENTITY',\n  'ADD_RECENT_MESSAGES',\n  'FETCH_RECENT_MESSAGES_REQUEST',\n  'FETCH_RECENT_MESSAGES_SUCCESS',\n  'FETCH_RECENT_MESSAGES_FAILURE',\n);\n\nexport const clearChat = createAction('CLEAR_CHAT');\n\nconst sliceMessages = (items) => {\n  const diff = items.length - CHANNEL_MESSAGES_LIMIT;\n  return diff > 0 ? items.slice(diff) : items;\n};\n\nconst getIsEven = (prev, addedItemsCount, isSliced) => {\n  if (isSliced) {\n    return addedItemsCount % 2 ? !prev : prev;\n  }\n  return prev;\n};\n\nexport const addRecentMessages = (channel) => (dispatch, getState) => {\n  const state = getState();\n  const messages = R.pathOr(\n    [],\n    ['messages', channel, 'history', 'items'],\n    state,\n  );\n  const data = {\n    channel,\n    items: normalizeRecentMessages(state, messages),\n  };\n\n  dispatch(addRecentMessagesAction(data));\n};\n\nexport const fetchRecentMessages = (channel) => async (dispatch) => {\n  dispatch(fetchRecentMessagesRequest({ channel }));\n  try {\n    const response = await apiFetchRecentMessages(channel);\n    const data = { channel, items: response.messages };\n\n    dispatch(fetchRecentMessagesSuccess(data));\n  } catch (e) {\n    dispatch(fetchRecentMessagesFailure({ channel, error: e.message }));\n  }\n};\n\nexport const addMessage = ({ message, tags, user, ...rest }) => (\n  dispatch,\n  getState,\n) => {\n  const state = getState();\n  const blockedUsers = blockedUsersSelector(state);\n\n  if (blockedUsers.includes(user)) return;\n\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n\n  const normalizedMessage = {\n    type: MESSAGE_TYPES.MESSAGE,\n    message,\n    messageArray: formatMessage(message, tags.emotes, emotes),\n    tags,\n    user,\n    badges: getMessageBadges(tags.badges, globalBadges, channelBadges),\n    ...rest,\n  };\n\n  dispatch(addMessageEntity(normalizedMessage));\n};\n\nexport const addNoticeMessage = (message) => (dispatch) => {\n  const normalizedMessage = {\n    ...message,\n    type: MESSAGE_TYPES.NOTICE_MESSAGE,\n  };\n\n  dispatch(addMessageEntity(normalizedMessage));\n};\n\nexport const addUserNoticeMessage = (message) => (dispatch) => {\n  const normalizedMessage = {\n    ...message,\n    type: MESSAGE_TYPES.USER_NOTICE_MESSAGE,\n  };\n\n  dispatch(addMessageEntity(normalizedMessage));\n};\n\nconst handleAddMessageEntity = (state, { payload: message }) => {\n  const { channel } = message;\n  const oldItems = R.pathOr([], [channel, 'items'], state);\n  const newItems = [...oldItems, message];\n  const slicedMessages = sliceMessages(newItems);\n  const isSliced = newItems.length > slicedMessages.length;\n  const isEven = R.pathOr(false, [channel, 'isEven'], state);\n\n  return {\n    ...state,\n    [channel]: {\n      ...state[channel],\n      isEven: getIsEven(isEven, 1, isSliced),\n      items: slicedMessages,\n    },\n  };\n};\n\nconst handleAddRecentMessages = (state, { payload: { channel, items } }) => {\n  const newItems = R.concat(items, R.pathOr([], [channel, 'items'], state));\n  const slicedMessages = sliceMessages(newItems);\n  const isSliced = newItems.length > slicedMessages.length;\n  const isEven = R.pathOr(false, [channel, 'isEven'], state);\n\n  return R.mergeDeepRight(state, {\n    [channel]: {\n      history: { items: [] },\n      items: newItems,\n      isEven: getIsEven(isEven, items.length, isSliced),\n    },\n  });\n};\n\nconst handleClearChat = (state, { payload }) => {\n  const {\n    channel,\n    tags: { targetUserId },\n  } = payload;\n\n  const newItems = state[channel].items.map((message) =>\n    message.tags.userId === targetUserId && !message.isHistory\n      ? { ...message, isDeleted: true }\n      : message,\n  );\n\n  return {\n    ...state,\n    [channel]: {\n      ...state[channel],\n      items: newItems,\n    },\n  };\n};\n\nconst handleFetchRecentMessages = {\n  [fetchRecentMessagesRequest]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      [payload.channel]: {\n        history: { ...STORE_FLAGS.REQUEST },\n      },\n    }),\n  [fetchRecentMessagesSuccess]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      [payload.channel]: {\n        history: { ...STORE_FLAGS.SUCCESS, items: payload.items },\n      },\n    }),\n  [fetchRecentMessagesFailure]: (state, { payload }) =>\n    R.mergeDeepRight(state, {\n      [payload.channel]: {\n        history: { ...STORE_FLAGS.FAILURE, error: payload.error },\n      },\n    }),\n};\n\nconst reducer = handleActions(\n  {\n    [addMessageEntity]: handleAddMessageEntity,\n    [addRecentMessagesAction]: handleAddRecentMessages,\n    [clearChat]: handleClearChat,\n    ...handleFetchRecentMessages,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { createAction, handleActions } from 'redux-actions';\n\nconst getOptionsFromLocalStorage = () => {\n  try {\n    return JSON.parse(localStorage.options);\n  } catch {\n    return {};\n  }\n};\n\nconst defaultState = {\n  showTimestamps: false,\n  splitChat: true,\n  blacklistKeywords: '',\n  highlightKeywords: '',\n  ...getOptionsFromLocalStorage(),\n};\n\nexport const changeOption = createAction('CHANGE_OPTION', (option, value) => {\n  localStorage.setItem(\n    'options',\n    JSON.stringify({\n      ...getOptionsFromLocalStorage(),\n      [option]: value,\n    }),\n  );\n\n  return {\n    option,\n    value,\n  };\n});\nconst handleChangeOption = (state, { payload: { option, value } }) => ({\n  ...state,\n  [option]: value,\n});\n\nconst reducer = handleActions(\n  {\n    [changeOption]: handleChangeOption,\n  },\n  defaultState,\n);\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport auth from './auth';\nimport badges from './badges';\nimport chat from './chat';\nimport emotes from './emotes/index';\nimport messages from './messages';\nimport options from './options';\n\nexport default combineReducers({\n  auth,\n  badges,\n  chat,\n  emotes,\n  messages,\n  options,\n});\n","/* eslint-disable no-underscore-dangle */\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from 'reducers';\n\nconst enhancer =\n  process.env.NODE_ENV === 'production'\n    ? applyMiddleware(thunk)\n    : compose(\n        applyMiddleware(thunk),\n        window.__REDUX_DEVTOOLS_EXTENSION__\n          ? window.__REDUX_DEVTOOLS_EXTENSION__()\n          : (noop) => noop,\n      );\n\nconst store = createStore(rootReducer, {}, enhancer);\n\nexport default store;\n","export const isAuthSelector = (state) => state.auth.isAuth;\nexport const userLoginSelector = (state) => state.auth.user.login;\nexport const userIdSelector = (state) => state.auth.user.id;\n","import * as R from 'ramda';\n\nimport { currentChannelSelector } from 'reducers/chat/selectors';\n\nexport const messagesSelector = (state) =>\n  R.pathOr([], ['messages', currentChannelSelector(state), 'items'], state);\n\nexport const isHistoryLoadingSelector = (state) =>\n  R.pathOr(false, [\n    'messages',\n    currentChannelSelector(state),\n    'history',\n    'isLoading',\n  ])(state);\n\nexport const isHistoryLoadedSelector = (state) =>\n  R.pathOr(false, [\n    'messages',\n    currentChannelSelector(state),\n    'history',\n    'isLoaded',\n  ])(state);\n\nexport const isEvenSelector = (state) =>\n  R.pathOr(false, ['messages', currentChannelSelector(state), 'isEven'], state);\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { isAuthSelector, userIdSelector } from 'reducers/auth/selectors';\nimport { fetchTwitchEmotes } from 'reducers/emotes/twitch';\nimport {\n  fetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes,\n} from 'reducers/emotes/bttv';\nimport {\n  fetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes,\n} from 'reducers/emotes/ffz';\nimport {\n  isTwitchEmotesLoadedSelector,\n  isBttvEmotesLoadedSelector,\n  isFfzEmotesLoadedSelector,\n} from 'reducers/emotes/selectors';\nimport { fetchRecentMessages, addRecentMessages } from 'reducers/messages';\nimport { isHistoryLoadedSelector } from 'reducers/messages/selectors';\nimport { fetchBlockedUsers } from 'reducers/chat';\nimport {\n  currentChannelSelector,\n  currentChannelIdSelector,\n  isBlockedUsersLoadedSelector,\n} from 'reducers/chat/selectors';\nimport { fetchGlobalBadges, fetchChannelBadges } from 'reducers/badges';\nimport { isBadgesLoadedSelector } from 'reducers/badges/selectors';\n\nconst useFetchChatData = () => {\n  const dispatch = useDispatch();\n\n  const isAuth = useSelector(isAuthSelector);\n  const userId = useSelector(userIdSelector);\n  const currentChannel = useSelector(currentChannelSelector);\n  const currentChannelId = useSelector(currentChannelIdSelector);\n\n  const isTwitchEmotesLoaded = useSelector(isTwitchEmotesLoadedSelector);\n  const isBttvEmotesLoaded = useSelector(isBttvEmotesLoadedSelector);\n  const isFfzEmotesLoaded = useSelector(isFfzEmotesLoadedSelector);\n  const isBadgesLoaded = useSelector(isBadgesLoadedSelector);\n  const isHistoryLoaded = useSelector(isHistoryLoadedSelector);\n  const isBlockedUsersLoaded = useSelector(isBlockedUsersLoadedSelector);\n\n  const isReadyToAddRecentMessages =\n    currentChannel &&\n    (isAuth ? isTwitchEmotesLoaded : true) &&\n    (isAuth ? isBlockedUsersLoaded : true) &&\n    isBttvEmotesLoaded &&\n    isFfzEmotesLoaded &&\n    isBadgesLoaded &&\n    isHistoryLoaded;\n\n  useEffect(() => {\n    dispatch(fetchBttvGlobalEmotes());\n    dispatch(fetchFfzGlobalEmotes());\n    dispatch(fetchGlobalBadges());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (currentChannel) {\n      dispatch(fetchRecentMessages(currentChannel));\n    }\n  }, [dispatch, currentChannel]);\n\n  useEffect(() => {\n    if (isReadyToAddRecentMessages) {\n      dispatch(addRecentMessages(currentChannel));\n    }\n  }, [dispatch, currentChannel, isReadyToAddRecentMessages]);\n\n  useEffect(() => {\n    if (userId) {\n      dispatch(fetchTwitchEmotes(userId));\n      dispatch(fetchBlockedUsers(userId));\n    }\n  }, [dispatch, userId]);\n\n  useEffect(() => {\n    // TODO: check if emotes for the current channel is already in the store\n    if (currentChannel && currentChannelId) {\n      dispatch(fetchBttvChannelEmotes(currentChannelId, currentChannel));\n      dispatch(fetchFfzChannelEmotes(currentChannelId, currentChannel));\n      dispatch(fetchChannelBadges(currentChannelId, currentChannel));\n    }\n  }, [dispatch, currentChannel, currentChannelId]);\n};\n\nexport default useFetchChatData;\n","import { useState, useEffect } from 'react';\n\nconst useLocationHash = () => {\n  const [hash, setHash] = useState(window.location.hash);\n\n  useEffect(() => {\n    const handleHashChange = () => setHash(window.location.hash);\n\n    window.addEventListener('hashchange', handleHashChange);\n\n    return () => window.removeEventListener('hashchange', handleHashChange);\n  }, []);\n\n  return hash;\n};\n\nexport default useLocationHash;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport useLocationHash from 'hooks/useLocationHash';\nimport { setCurrentChannel } from 'reducers/chat';\n\nconst useCurrentChannel = () => {\n  const dispatch = useDispatch();\n  const hash = useLocationHash();\n\n  useEffect(() => {\n    if (hash && hash.length > 1) {\n      const channel = hash.slice(1);\n\n      dispatch(setCurrentChannel(channel));\n\n      localStorage.setItem('lastChannel', channel);\n\n      document.title = channel\n        ? `#${channel} - ${process.env.REACT_APP_NAME} `\n        : process.env.REACT_APP_NAME;\n    }\n  }, [dispatch, hash]);\n};\n\nexport default useCurrentChannel;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport uuid from 'uuid/v4';\n\nimport {\n  addMessage,\n  addNoticeMessage,\n  addUserNoticeMessage,\n  clearChat,\n} from 'reducers/messages';\nimport {\n  setIsConnected,\n  updateGlobalUserState,\n  updateUserState,\n  updateRoomState,\n} from 'reducers/chat';\nimport { currentChannelSelector } from 'reducers/chat/selectors';\nimport { isAuthSelector } from 'reducers/auth/selectors';\nimport Client from 'utils/twitchChat';\n\nlet client = null;\n\nconst useTwitchClient = (name, auth) => {\n  const dispatch = useDispatch();\n\n  const currentChannel = useSelector(currentChannelSelector);\n  const isAuth = useSelector(isAuthSelector);\n\n  useEffect(() => {\n    if (!currentChannel) return () => {};\n\n    const options = {\n      identity: {\n        name,\n        auth,\n      },\n    };\n\n    const handleConnected = () => dispatch(setIsConnected(true));\n    const handleDisconnected = () => dispatch(setIsConnected(true));\n\n    const handleGlobalUserState = (data) =>\n      dispatch(updateGlobalUserState(data));\n\n    const handleUserState = (data) => dispatch(updateUserState(data));\n    const handleRoomState = (data) => dispatch(updateRoomState(data));\n    const handleMessage = (data) => dispatch(addMessage(data));\n\n    const handleNotice = (data) => {\n      const normalizedMessage = { ...data, tags: { ...data.tags, id: uuid() } };\n      dispatch(addNoticeMessage(normalizedMessage));\n    };\n    const handleUserNotice = (data) => dispatch(addUserNoticeMessage(data));\n\n    const handleClearChat = (data) => {\n      if (!data.tags.targetUserId) return;\n      dispatch(clearChat(data));\n    };\n\n    if (!client) {\n      client = new Client(isAuth ? options : {});\n      client.connect();\n    }\n\n    // TODO: update blocked users if the /block command was sent\n\n    client.on('connected', handleConnected);\n    client.on('disconnected', handleDisconnected);\n    client.on('globaluserstate', handleGlobalUserState);\n    client.on('userstate', handleUserState);\n    client.on('roomstate', handleRoomState);\n    client.on('message', handleMessage);\n    client.on('ownmessage', handleMessage);\n    client.on('notice', handleNotice);\n    client.on('usernotice', handleUserNotice);\n    client.on('clearchat', handleClearChat);\n\n    // TODO: Part the previous channel before join\n    client.join(currentChannel);\n\n    return () => {\n      client.off('connected', handleConnected);\n      client.off('disconnected', handleDisconnected);\n      client.off('globaluserstate', handleGlobalUserState);\n      client.off('userstate', handleUserState);\n      client.off('roomstate', handleRoomState);\n      client.off('message', handleMessage);\n      client.off('ownmessage', handleMessage);\n      client.off('notice', handleNotice);\n      client.off('usernotice', handleUserNotice);\n      client.off('clearchat', handleClearChat);\n    };\n  }, [dispatch, name, auth, currentChannel, isAuth]);\n\n  return client;\n};\n\nexport default useTwitchClient;\n","import emojilib from 'emojilib/emojis';\n\nconst replaceEmojis = (text) =>\n  text\n    .split(' ')\n    .map((word) => {\n      if (word[0] !== ':' || word[word.length - 1] !== ':') {\n        return word;\n      }\n\n      const name = word.slice(1, -1);\n      const emoji = emojilib[name];\n\n      return emoji && emoji.char ? emoji.char : word;\n    })\n    .join(' ');\n\nexport default replaceEmojis;\n","export const optionsSelector = (state) => [\n  {\n    title: 'My preferences',\n    items: [\n      {\n        type: 'SWITCH',\n        id: 'show-timestamps',\n        name: 'showTimestamps',\n        title: 'Show Timestamps',\n        description: '',\n        value: state.options.showTimestamps,\n      },\n      {\n        type: 'SWITCH',\n        id: 'split-chat',\n        name: 'splitChat',\n        title: 'Split Chat',\n        description: '',\n        value: state.options.splitChat,\n      },\n      // {\n      //   type: 'INPUT',\n      //   id: 'blacklist-keywords',\n      //   name: 'blacklistKeywords',\n      //   title: 'Set Blacklist Keywords',\n      //   description: '',\n      //   value: state.options.blacklistKeywords,\n      // },\n      // {\n      //   type: 'INPUT',\n      //   id: 'highlight-keywords',\n      //   name: 'highlightKeywords',\n      //   title: 'Set Highlight Keywords',\n      //   description: '',\n      //   value: state.options.highlightKeywords,\n      // },\n    ],\n  },\n];\n\nexport const isShowTimestampsSelector = (state) => state.options.showTimestamps;\nexport const isSplitChatSelector = (state) => state.options.splitChat;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  fill: \"currentColor\"\n}, React.createElement(\"path\", {\n  d: \"M7 11a1 1 0 100-2 1 1 0 000 2zm7-1a1 1 0 11-2 0 1 1 0 012 0zm-4 4a2 2 0 002-2H8a2 2 0 002 2z\"\n}), React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-2 0a6 6 0 11-12 0 6 6 0 0112 0z\",\n  clipRule: \"evenodd\"\n}));\n\nvar SvgSmileyFace = function SvgSmileyFace(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 20 20\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgSmileyFace, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/smiley-face.1cc055ed.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  fill: \"currentColor\"\n}, React.createElement(\"path\", {\n  d: \"M10 8a2 2 0 100 4 2 2 0 000-4z\"\n}), React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M9 2h2a2.01 2.01 0 001.235 1.855l.53.22a2.01 2.01 0 002.185-.439l1.414 1.414a2.01 2.01 0 00-.439 2.185l.22.53A2.01 2.01 0 0018 9v2a2.01 2.01 0 00-1.855 1.235l-.22.53a2.01 2.01 0 00.44 2.185l-1.415 1.414a2.01 2.01 0 00-2.184-.439l-.531.22A2.01 2.01 0 0011 18H9a2.01 2.01 0 00-1.235-1.854l-.53-.22a2.009 2.009 0 00-2.185.438L3.636 14.95a2.009 2.009 0 00.438-2.184l-.22-.531A2.01 2.01 0 002 11V9c.809 0 1.545-.487 1.854-1.235l.22-.53a2.009 2.009 0 00-.438-2.185L5.05 3.636a2.01 2.01 0 002.185.438l.53-.22A2.01 2.01 0 009 2zm-4 8l1.464 3.536L10 15l3.535-1.464L15 10l-1.465-3.536L10 5 6.464 6.464 5 10z\",\n  clipRule: \"evenodd\"\n}));\n\nvar SvgGears = function SvgGears(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 20 20\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgGears, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/gears.5f76af43.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M8.5 10L4 5.5 5.5 4 10 8.5 14.5 4 16 5.5 11.5 10l4.5 4.5-1.5 1.5-4.5-4.5L5.5 16 4 14.5 8.5 10z\"\n});\n\nvar SvgClose = function SvgClose(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 20 20\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgClose, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/close.992b249e.svg\";\nexport { ForwardRef as ReactComponent };","import pt from 'prop-types';\nimport styled, { css } from 'styled-components';\n\nconst sizes = {\n  small: css`\n    width: 24px;\n    height: 24px;\n  `,\n  medium: css`\n    width: 30px;\n    height: 30px;\n  `,\n  // large: css``,\n};\n\nconst IconButton = styled.button.attrs({ type: 'button' })`\n  margin: 0;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: none;\n  border: none;\n  outline: none;\n  color: #fff;\n  border-radius: 4px;\n  cursor: pointer;\n\n  ${(p) => sizes[p.size]};\n\n  &:hover,\n  &:focus {\n    background-color: rgba(255, 255, 255, 0.15);\n  }\n\n  &:active {\n    background-color: rgba(255, 255, 255, 0.2);\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n`;\n\nIconButton.defaultProps = {\n  size: 'medium',\n};\n\nIconButton.propTypes = {\n  size: pt.oneOf(Object.keys(sizes)),\n};\n\nexport default IconButton;\n","import React from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport { ReactComponent as CloseIconSvg } from 'icons/close.svg';\nimport IconButton from 'components/IconButton';\n\nconst ChatModalRoot = styled.div`\n  height: 100%;\n  box-shadow: rgba(0, 0, 0, 0.4) 0px 4px 8px 0px,\n    rgba(0, 0, 0, 0.4) 0px 0px 4px 0px;\n  background-color: #18181b;\n  white-space: normal;\n  color: #fff;\n  border-radius: 4px;\n`;\nconst CloseButton = styled(IconButton).attrs({ size: 'small' })`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n`;\nconst CloseIcon = styled(CloseIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\n\nconst ChatModal = ({ children, onClose }) => (\n  <ChatModalRoot>\n    <CloseButton onClick={onClose}>\n      <CloseIcon />\n    </CloseButton>\n    {children}\n  </ChatModalRoot>\n);\n\nChatModal.defaultProps = {};\n\nChatModal.propTypes = {\n  children: pt.node.isRequired,\n  onClose: pt.func.isRequired,\n};\n\nexport default ChatModal;\n","import CustomScrollbar from 'react-scrollbars-custom';\nimport styled from 'styled-components';\n\nconst Scrollbar = styled(CustomScrollbar).attrs({\n  disableTracksWidthCompensation: true,\n})`\n  overflow-y: auto;\n\n  .ScrollbarsCustom-TrackY {\n    background: none !important;\n  }\n\n  .ScrollbarsCustom-ThumbY {\n    margin-left: auto;\n    margin-right: auto;\n    width: 6px !important;\n  }\n`;\n\nexport default Scrollbar;\n","import React, { useCallback } from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport Scrollbar from 'components/Scrollbar';\n\nconst EmotePickerRoot = styled.div`\n  padding-top: 32px;\n  padding-bottom: 16px;\n  height: 100%;\n`;\nconst Categories = styled.div`\n  height: 100%;\n`;\nconst Category = styled.div`\n  padding-top: 10px;\n  padding-right: 16px;\n  padding-left: 16px;\n\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding-bottom: 10px;\n  font-size: 12px;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst CategoryItems = styled.div``;\nconst Emote = styled.img`\n  padding: 2px;\n  width: 32px;\n  height: 32px;\n  object-fit: contain;\n\n  &:hover {\n    background-color: rgba(119, 44, 232, 0.2);\n    cursor: pointer;\n  }\n`;\n\nconst EmotePicker = ({ emoteCategories, onEmoteClick }) => {\n  const renderCategory = useCallback(\n    ({ title, items }, key) => (\n      <Category key={key}>\n        {!!title && <CategoryHeader>{title}</CategoryHeader>}\n        <CategoryItems>\n          {items.map(({ alt, src, srcSet }) => (\n            <Emote\n              key={alt}\n              alt={alt}\n              src={src}\n              srcSet={srcSet}\n              onClick={() => onEmoteClick(alt)}\n            />\n          ))}\n        </CategoryItems>\n      </Category>\n    ),\n    [onEmoteClick],\n  );\n\n  return (\n    <EmotePickerRoot>\n      <Categories>\n        <Scrollbar>{emoteCategories.map(renderCategory)}</Scrollbar>\n      </Categories>\n    </EmotePickerRoot>\n  );\n};\n\nEmotePicker.defaultProps = {\n  emoteCategories: [],\n};\n\nEmotePicker.propTypes = {\n  onEmoteClick: pt.func.isRequired,\n  emoteCategories: pt.arrayOf(pt.shape({})),\n};\n\nexport default EmotePicker;\n","import React from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\n\nconst SwitchRoot = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  line-height: 20px;\n`;\nconst Label = styled.label`\n  content: '';\n  position: relative;\n  display: inline-block;\n  order: 0;\n  width: 35px;\n  height: 20px;\n  vertical-align: bottom;\n  border-radius: 10px/50%;\n  background-color: rgba(0, 0, 0, 0.3);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15), 0 0 2px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.1s ease;\n  cursor: pointer;\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    bottom: 2px;\n    display: block;\n    width: 16px;\n    border-radius: 50%;\n    background-color: #fff;\n    transition: left 0.1s ease;\n  }\n`;\nconst Input = styled.input.attrs({ type: 'checkbox' })`\n  position: absolute;\n  opacity: 0;\n\n  &:checked + ${Label} {\n    background-color: #9147ff;\n\n    &:after {\n      content: '';\n      top: 2px;\n      left: calc(100% - 18px);\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 9px;\n      left: 10px;\n      display: block;\n      height: 3px;\n      width: 7px;\n      border-bottom: 2px solid #fff;\n      border-left: 2px solid #fff;\n      transform: translate3d(-50%, -50%, 0) rotate(-45deg);\n    }\n  }\n`;\n\nconst Switch = ({ id, label, checked, readOnly, onChange }) => (\n  <SwitchRoot>\n    <Input\n      id={id}\n      label={label}\n      checked={checked}\n      readOnly={readOnly}\n      onChange={onChange}\n    />\n    <Label htmlFor={id} />\n  </SwitchRoot>\n);\n\nSwitch.defaultProps = {\n  checked: false,\n  readOnly: false,\n  onChange: () => {},\n};\n\nSwitch.propTypes = {\n  id: pt.string.isRequired,\n  label: pt.string.isRequired,\n  checked: pt.bool,\n  readOnly: pt.bool,\n  onChange: pt.func,\n};\n\nexport default Switch;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import pt from 'prop-types';\nimport styled from 'styled-components';\n\nimport { changeOption } from 'reducers/options';\nimport { optionsSelector } from 'reducers/options/selectors';\nimport Scrollbar from 'components/Scrollbar';\nimport Switch from 'components/Switch';\n\nconst OptionsRoot = styled.div`\n  padding: 16px;\n  height: 100%;\n`;\nconst Header = styled.h2`\n  margin: 0;\n  padding: 0;\n  font-size: 14px;\n  text-align: center;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst Categories = styled(Scrollbar)`\n  height: 100%;\n`;\nconst Category = styled.div`\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding: 8px 0;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst CategoryItems = styled.div``;\nconst Option = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 4px 0;\n  cursor: pointer;\n`;\nconst OptionText = styled.span``;\n\nconst Options = () => {\n  const dispatch = useDispatch();\n  const options = useSelector(optionsSelector);\n\n  const renderOption = useCallback(\n    ({ id, name, title, description, value }) => (\n      <Option\n        key={id}\n        onClick={() => dispatch(changeOption(name, !value))}\n        title={description}\n      >\n        <OptionText>{title}</OptionText>\n        <Switch\n          id={id}\n          label={title}\n          checked={value}\n          onChange={() => dispatch(changeOption(name, value))}\n        />\n      </Option>\n    ),\n    [dispatch],\n  );\n\n  const renderOptionsCategory = useCallback(\n    ({ title, items }, key) => (\n      <Category key={key}>\n        {!!title && <CategoryHeader>{title}</CategoryHeader>}\n        <CategoryItems>{items.map(renderOption)}</CategoryItems>\n      </Category>\n    ),\n    [renderOption],\n  );\n\n  return (\n    <OptionsRoot>\n      <Header>Chat settings</Header>\n      <Categories>{options.map(renderOptionsCategory)}</Categories>\n    </OptionsRoot>\n  );\n};\n\nOptions.defaultProps = {};\n\nOptions.propTypes = {};\n\nexport default Options;\n","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport useOnClickOutside from 'use-onclickoutside';\n\nimport { ReactComponent as SmileyFaceIconSvg } from 'icons/smiley-face.svg';\nimport { ReactComponent as GearsIconSvg } from 'icons/gears.svg';\nimport ChatModal from 'components/ChatModal';\nimport IconButton from 'components/IconButton';\nimport EmotePicker from 'components/EmotePicker';\nimport Options from 'components/Options';\n\nconst ChatInputRoot = styled.form`\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n  background-color: #18181b;\n\n  & > :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nconst ControlsWrapper = styled.div`\n  position: relative;\n`;\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n\n  & > :not(:last-child) {\n    margin-right: 8px;\n  }\n`;\nconst SendButton = styled.button`\n  padding: 0 10px;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #9147ff;\n  outline: none;\n  font-size: 12px;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #772ce8;\n  }\n\n  &:active {\n    background-color: #5c16c5;\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n\n  &[disabled] {\n    background-color: rgba(255, 255, 255, 0.26);\n    color: rgba(255, 255, 255, 0.8);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\nconst TextareaWrapper = styled.div`\n  position: relative;\n`;\nconst EmotesModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 0;\n  bottom: 100%;\n  margin-bottom: 8px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nconst OptionsModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 0;\n  bottom: 100%;\n  margin-bottom: 10px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nconst Textarea = styled.textarea`\n  display: block;\n  padding: 10px;\n  width: 100%;\n  height: 38px;\n  max-height: 91px;\n  min-height: 40px;\n  overflow: hidden;\n  border: 2px solid transparent;\n  background-color: rgba(255, 255, 255, 0.15);\n  font-family: inherit;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\nconst EmotesButton = styled(IconButton)`\n  position: absolute;\n  right: 5px;\n  bottom: 5px;\n`;\nconst SmileyFaceIcon = styled(SmileyFaceIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\nconst GearsIcon = styled(GearsIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\nconst StyledLink = styled(Link)`\n  color: #bf94ff;\n  text-decoration: none;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\n\nconst ChatInput = ({\n  text,\n  emoteCategories,\n  isAuth,\n  isDisabled,\n  onChangeText,\n  onSubmit,\n}) => {\n  const textareaRef = useRef(null);\n  const textareaWrapperRef = useRef(null);\n  const optionsModalRef = useRef(null);\n\n  const [isEmotesModalVisible, setIsEmotesModalVisible] = useState(false);\n  const [isOptionsModalVisible, setIsOptionsModalVisible] = useState(false);\n\n  const handleCloseEmotesModal = () => setIsEmotesModalVisible(false);\n  const handleCloseOptionsModal = () => setIsOptionsModalVisible(false);\n\n  useOnClickOutside(textareaWrapperRef, handleCloseEmotesModal);\n  useOnClickOutside(optionsModalRef, handleCloseOptionsModal);\n\n  const handleChange = (e) => onChangeText(e.target.value);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(text);\n    onChangeText('');\n  };\n\n  const handleKeyDown = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        const message = text.trim();\n        if (message) {\n          onSubmit(message);\n          onChangeText('');\n        }\n      }\n    },\n    [onSubmit, onChangeText, text],\n  );\n\n  useEffect(() => {\n    const textareaNode = textareaRef.current;\n\n    textareaNode.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      textareaNode.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [handleKeyDown]);\n\n  const renderEmotesModal = useCallback(\n    () => (\n      <EmotesModal>\n        <ChatModal onClose={handleCloseEmotesModal}>\n          <EmotePicker\n            emoteCategories={emoteCategories}\n            onEmoteClick={(emoteName) =>\n              onChangeText((t) => `${t.trim()} ${emoteName} `.trimLeft())\n            }\n          />\n        </ChatModal>\n      </EmotesModal>\n    ),\n    [onChangeText, emoteCategories],\n  );\n\n  const renderOptionsModal = useCallback(\n    () => (\n      <OptionsModal ref={optionsModalRef}>\n        <ChatModal onClose={handleCloseOptionsModal}>\n          <Options />\n        </ChatModal>\n      </OptionsModal>\n    ),\n    [],\n  );\n\n  return (\n    <ChatInputRoot onSubmit={handleSubmit}>\n      <TextareaWrapper ref={textareaWrapperRef}>\n        <Textarea\n          placeholder=\"Send a message\"\n          ref={textareaRef}\n          maxLength={500}\n          disabled={isDisabled}\n          onChange={handleChange}\n          value={text}\n        />\n        {!!emoteCategories.length && (\n          <EmotesButton\n            onClick={() => setIsEmotesModalVisible(!isEmotesModalVisible)}\n          >\n            <SmileyFaceIcon />\n          </EmotesButton>\n        )}\n        {isEmotesModalVisible && renderEmotesModal()}\n      </TextareaWrapper>\n      <ControlsWrapper>\n        <Controls>\n          {!isAuth && (\n            <StyledLink to=\"/chat/auth\">Sign in with Twitch</StyledLink>\n          )}\n          <IconButton\n            onClick={() => setIsOptionsModalVisible(!isOptionsModalVisible)}\n          >\n            <GearsIcon />\n          </IconButton>\n          <SendButton disabled={isDisabled} type=\"submit\">\n            Chat\n          </SendButton>\n        </Controls>\n        {isOptionsModalVisible && renderOptionsModal()}\n      </ControlsWrapper>\n    </ChatInputRoot>\n  );\n};\n\nChatInput.defaultProps = {\n  emoteCategories: [],\n  isDisabled: false,\n};\n\nChatInput.propTypes = {\n  text: pt.string.isRequired,\n  emoteCategories: pt.arrayOf(pt.shape({})),\n  isAuth: pt.bool.isRequired,\n  isDisabled: pt.bool,\n  onChangeText: pt.func.isRequired,\n  onSubmit: pt.func.isRequired,\n};\n\nexport default React.memo(ChatInput);\n","import pt from 'prop-types';\n\nimport { MESSAGE_TYPES } from 'utils/constants';\nimport {\n  twitchEmoteType,\n  bttvEmoteType,\n  ffzEmoteType,\n  emojiType,\n  mentionType,\n  linkType,\n} from 'utils/formatMessage';\n\nexport const messageType = pt.shape({\n  type: pt.oneOf([MESSAGE_TYPES.MESSAGE]).isRequired,\n  message: pt.string.isRequired,\n  messageArray: pt.arrayOf(\n    pt.oneOfType([\n      pt.string,\n      twitchEmoteType,\n      bttvEmoteType,\n      ffzEmoteType,\n      emojiType,\n      mentionType,\n      linkType,\n    ]),\n  ).isRequired,\n  tags: pt.shape({\n    badgeInfo: pt.shape({\n      subscriber: pt.string,\n    }),\n    badges: pt.shape({}),\n    color: pt.string,\n    displayName: pt.string.isRequired,\n    emotes: pt.shape({}),\n    flags: pt.string,\n    id: pt.string,\n    mod: pt.bool,\n    roomId: pt.string,\n    tmiSentId: pt.oneOfType([pt.string, pt.number]),\n    userId: pt.string,\n  }).isRequired,\n  badges: pt.arrayOf(\n    pt.shape({\n      alt: pt.string,\n      label: pt.string,\n      src: pt.string.isRequired,\n      srcSet: pt.string,\n    }),\n  ),\n  user: pt.string.isRequired,\n  isHistory: pt.bool,\n  isAction: pt.bool,\n  isDeleted: pt.bool,\n});\n\nexport const noticeType = pt.shape({\n  type: pt.oneOf([MESSAGE_TYPES.NOTICE_MESSAGE]).isRequired,\n  message: pt.string.isRequired,\n  channel: pt.string.isRequired,\n  tags: pt.shape({\n    msgId: pt.string.isRequired,\n  }).isRequired,\n});\n\nexport const userNoticeType = pt.shape({\n  type: pt.oneOf([MESSAGE_TYPES.USER_NOTICE_MESSAGE]).isRequired,\n  message: pt.string,\n  channel: pt.string.isRequired,\n  tags: pt.shape({\n    badgeInfo: pt.shape({\n      subscriber: pt.string,\n    }),\n    badges: pt.shape({}),\n    color: pt.string,\n    displayName: pt.string.isRequired,\n    emotes: pt.shape({}),\n    id: pt.string,\n    login: pt.string,\n    mod: pt.bool,\n    msgId: pt.string,\n    systemMsg: pt.string,\n    tmiSentId: pt.oneOfType([pt.string, pt.number]),\n    userId: pt.string,\n    msgParamCumulativeMonths: pt.number,\n    msgParamDisplayName: pt.string,\n    msgParamLogin: pt.string,\n    msgParamMonths: pt.number,\n    msgParamPromoGiftTotal: pt.number,\n    msgParamPromoName: pt.string,\n    msgParamRecipientDisplayName: pt.string,\n    msgParamRecipientId: pt.string,\n    msgParamRecipientUserName: pt.string,\n    msgParamSenderLogin: pt.string,\n    msgParamSenderName: pt.string,\n    msgParamShouldShareStreak: pt.bool,\n    msgParamStreakMonths: pt.number,\n    msgParamSubPlan: pt.string,\n    msgParamSubPlanName: pt.string,\n    msgParamViewerCount: pt.number,\n    msgParamRitualName: pt.string,\n    msgParamThreshold: pt.number,\n  }).isRequired,\n});\n","import React, { useState } from 'react';\nimport pt from 'prop-types';\nimport styled, { css } from 'styled-components';\n// import * as R from 'ramda';\nimport { format } from 'date-fns/fp';\n\nimport { messageType } from './types';\n\nconst getChatMessageBg = (p) => {\n  if (p.isMention) return 'rgba(255, 0, 0, 0.3)';\n  if (p.isEven) return '#1f1925';\n  return 'transparent';\n};\n\nconst MessageRoot = styled.div`\n  padding: 5px 20px;\n  color: ${(p) => (p.isAction ? p.color : '#fff')};\n  opacity: ${(p) => (p.isHistory || p.isDeleted ? '0.5' : '1')};\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${getChatMessageBg};\n`;\nconst Name = styled.span`\n  font-weight: bold;\n  color: ${(p) => p.color};\n  cursor: pointer;\n`;\nconst Emote = styled.img`\n  display: inline-block;\n  margin: -5px 0;\n  vertical-align: middle;\n`;\nconst Emoji = styled.img`\n  display: inline-block;\n  margin-top: -5px;\n  margin-bottom: -4px;\n  width: 20px;\n  height: auto;\n  vertical-align: middle;\n`;\nconst Mention = styled.span`\n  ${(p) =>\n    (p.isActive || p.isOwnMessage) &&\n    css`\n      padding: 2px 4px;\n    `};\n  ${(p) =>\n    p.isOwnMessage &&\n    css`\n      background-color: #40404a;\n      color: #fff;\n    `};\n  ${(p) =>\n    p.isActive &&\n    css`\n      background-color: #fafafa;\n      color: #18181b;\n    `};\n`;\nconst Link = styled.a`\n  color: #bf94ff;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Timestamp = styled.span`\n  margin-right: 5px;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst Badge = styled.img`\n  margin-bottom: 2px;\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst renderMessageArray = (user, login) => (item, key) => {\n  if (typeof item !== 'object') return item;\n\n  if (\n    item.type === 'twitch-emote' ||\n    item.type === 'bttv-emote' ||\n    item.type === 'ffz-emote'\n  ) {\n    return (\n      <Emote key={key} src={item.src} srcSet={item.srcSet} alt={item.alt} />\n    );\n  }\n\n  if (item.type === 'emoji') {\n    return (\n      <Emoji key={key} src={item.src} srcSet={item.srcSet} alt={item.alt} />\n    );\n  }\n\n  if (item.type === 'mention') {\n    return (\n      <Mention\n        key={key}\n        isActive={item.target === login}\n        isOwnMessage={user === login}\n      >\n        {item.text}\n      </Mention>\n    );\n  }\n\n  if (item.type === 'link') {\n    return (\n      <Link\n        key={key}\n        href={item.href}\n        rel=\"noreferrer noopener\"\n        target=\"_blank\"\n      >\n        {item.text}\n      </Link>\n    );\n  }\n\n  return null;\n};\n\nconst renderBadges = (badges) =>\n  badges.map(({ alt, label, src, srcSet }, key) => (\n    // eslint-disable-next-line react/no-array-index-key\n    <Badge key={key} alt={alt} aria-label={label} src={src} srcSet={srcSet} />\n  ));\n\nconst MESSAGE_DELETED_LABEL = '<message deleted>';\n\nconst Message = ({\n  message: {\n    message,\n    messageArray,\n    tags: { color, displayName, tmiSentTs },\n    badges,\n    user,\n    isHistory,\n    isAction,\n    isDeleted,\n  },\n  userLogin,\n  isEven,\n  isShowTimestamps,\n  // onNameClick,\n  onNameRightClick,\n}) => {\n  // console.log('render Message');\n\n  const [isVisible, setIsVisible] = useState(false);\n  const isMention = user !== userLogin && RegExp(userLogin, 'gi').test(message);\n\n  const handleNameRightClick = (e) => {\n    onNameRightClick(displayName);\n    e.preventDefault();\n  };\n\n  return (\n    <MessageRoot\n      isHistory={isHistory}\n      isAction={isAction}\n      isEven={isEven}\n      isMention={isMention}\n      isDeleted={isDeleted}\n      color={color}\n    >\n      {isShowTimestamps && (\n        <Timestamp>{format('h:mm', new Date(tmiSentTs))}</Timestamp>\n      )}\n      {badges.length > 0 && renderBadges(badges)}\n      <Name color={color} onContextMenu={handleNameRightClick}>\n        {displayName}\n      </Name>\n      {isAction ? ' ' : ': '}\n      {isDeleted && !isVisible ? (\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n        <Link onClick={() => setIsVisible(true)}>{MESSAGE_DELETED_LABEL}</Link>\n      ) : (\n        messageArray.map(renderMessageArray(user, userLogin))\n      )}\n    </MessageRoot>\n  );\n};\n\nMessage.defaultProps = {\n  userLogin: '',\n  isEven: false,\n  isShowTimestamps: false,\n  // onNameClick: () => {},\n  onNameRightClick: () => {},\n};\n\nMessage.propTypes = {\n  message: messageType.isRequired,\n  userLogin: pt.string,\n  isEven: pt.bool,\n  isShowTimestamps: pt.bool,\n  // onNameClick: pt.func,\n  onNameRightClick: pt.func,\n};\n\n// const areEqual = (prevProps, nextProps) => !R.equals(prevProps, nextProps);\n\nexport default React.memo(Message);\n","import React from 'react';\nimport pt from 'prop-types';\nimport styled from 'styled-components';\n// import * as R from 'ramda';\n\nimport { noticeType } from './types';\n\nconst NoticeRoot = styled.div`\n  padding: 5px 20px;\n  color: rgba(255, 255, 255, 0.6);\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${(p) => (p.isEven ? '#1f1925' : 'transparent')};\n`;\n\nconst Notice = ({ message: { message }, isEven }) => (\n  <NoticeRoot isEven={isEven}>{message}</NoticeRoot>\n);\n\nNotice.defaultProps = {\n  isEven: false,\n};\n\nNotice.propTypes = {\n  message: noticeType.isRequired,\n  isEven: pt.bool,\n};\n\n// const areEqual = (prevProps, nextProps) => !R.equals(prevProps, nextProps);\n\nexport default React.memo(Notice);\n","import React from 'react';\n// import pt from 'prop-types';\nimport styled from 'styled-components';\n// import * as R from 'ramda';\n\nimport { userNoticeType } from './types';\n\nconst UserNoticeRoot = styled.div`\n  padding: 5px 20px 5px 16px;\n  line-height: 20px;\n  word-wrap: break-word;\n  border-left: 4px solid #9147ff;\n  color: #fff;\n`;\n\nconst UserNotice = ({\n  message: {\n    tags: { systemMsg },\n  },\n}) => <UserNoticeRoot>{systemMsg}</UserNoticeRoot>;\n\nUserNotice.propTypes = {\n  message: userNoticeType.isRequired,\n};\n\n// const areEqual = (prevProps, nextProps) => !R.equals(prevProps, nextProps);\n\nexport default React.memo(UserNotice);\n","import React from 'react';\nimport pt from 'prop-types';\n\nimport { MESSAGE_TYPES } from 'utils/constants';\nimport { messageType, noticeType, userNoticeType } from './types';\nimport Message from './Message';\nimport Notice from './Notice';\nimport UserNotice from './UserNotice';\n\nconst ChatMessage = ({\n  message,\n  userLogin,\n  isEven,\n  isShowTimestamps,\n  onNameClick,\n  onNameRightClick,\n}) => {\n  if (message.type === MESSAGE_TYPES.MESSAGE) {\n    return (\n      <Message\n        message={message}\n        userLogin={userLogin}\n        isEven={isEven}\n        isShowTimestamps={isShowTimestamps}\n        onNameClick={onNameClick}\n        onNameRightClick={onNameRightClick}\n      />\n    );\n  }\n\n  if (message.type === MESSAGE_TYPES.NOTICE_MESSAGE) {\n    return <Notice message={message} isEven={isEven} />;\n  }\n\n  if (message.type === MESSAGE_TYPES.USER_NOTICE_MESSAGE) {\n    return <UserNotice message={message} />;\n  }\n\n  return null;\n};\n\nChatMessage.defaultProps = {\n  userLogin: '',\n  isEven: false,\n  isShowTimestamps: false,\n  onNameClick: () => {},\n  onNameRightClick: () => {},\n};\n\nChatMessage.propTypes = {\n  message: pt.oneOfType([messageType, noticeType, userNoticeType]).isRequired,\n  userLogin: pt.string,\n  isEven: pt.bool,\n  isShowTimestamps: pt.bool,\n  onNameClick: pt.func,\n  onNameRightClick: pt.func,\n};\n\nexport default ChatMessage;\n","import React, { useState, useEffect, useRef } from 'react';\nimport pt from 'prop-types';\n// import { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport Scrollbar from 'components/Scrollbar';\nimport ChatMessage from 'components/ChatMessage';\n\nconst MORE_MESSAGES_OFFSET = 100;\n\nconst MessagesRoot = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\nconst StyledScrollbar = styled(Scrollbar)`\n  .ScrollbarsCustom-Content {\n    padding-bottom: 10px !important;\n  }\n`;\nconst MoreMessagesButton = styled.button`\n  position: absolute;\n  left: 50%;\n  bottom: 10px;\n  display: ${(p) => (p.visible ? 'block' : 'none')};\n  padding: 5px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  transform: translateX(-50%);\n`;\n\nconst Messages = ({\n  messages,\n  userLogin,\n  isEven,\n  isSplitChat,\n  isShowTimestamps,\n  onNameRightClick,\n}) => {\n  const [\n    isMoreMessagesButtonVisible,\n    setIsMoreMessagesButtonVisible,\n  ] = useState(false);\n\n  const handleScrollUpdate = ({\n    clientHeight,\n    contentScrollHeight,\n    scrollTop,\n  }) => {\n    const maxScrollTop = contentScrollHeight - clientHeight;\n    const isVisible = scrollTop + MORE_MESSAGES_OFFSET < maxScrollTop;\n\n    setIsMoreMessagesButtonVisible(isVisible);\n  };\n\n  const scrollbarRef = useRef(null);\n\n  const handleScrollToBottom = () => {\n    if (scrollbarRef.current && scrollbarRef.current.scrollToBottom) {\n      scrollbarRef.current.scrollToBottom();\n    }\n  };\n\n  useEffect(() => {\n    if (!isMoreMessagesButtonVisible) {\n      handleScrollToBottom();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages]);\n\n  const getIsEven = (key) => {\n    if (!isSplitChat) return false;\n    return isEven ? key % 2 === 1 : key % 2 === 0;\n  };\n\n  return (\n    <MessagesRoot>\n      <StyledScrollbar onUpdate={handleScrollUpdate} ref={scrollbarRef}>\n        {messages.map((message, key) => (\n          <ChatMessage\n            key={message.tags.id}\n            message={message}\n            userLogin={userLogin}\n            isEven={getIsEven(key)}\n            isShowTimestamps={isShowTimestamps}\n            onNameRightClick={onNameRightClick}\n          />\n        ))}\n      </StyledScrollbar>\n      <MoreMessagesButton\n        onClick={handleScrollToBottom}\n        visible={isMoreMessagesButtonVisible}\n      >\n        More messages below\n      </MoreMessagesButton>\n    </MessagesRoot>\n  );\n};\n\nMessages.defaultProps = {\n  messages: [],\n  userLogin: '',\n  isEven: false,\n  isSplitChat: true,\n  isShowTimestamps: false,\n  onNameRightClick: () => {},\n};\n\nMessages.propTypes = {\n  messages: pt.arrayOf(pt.shape({})),\n  userLogin: pt.string,\n  isEven: pt.bool,\n  isSplitChat: pt.bool,\n  isShowTimestamps: pt.bool,\n  onNameRightClick: pt.func,\n};\n\nexport default React.memo(Messages);\n","import React, { useState, useCallback } from 'react';\nimport pt from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { messagesSelector, isEvenSelector } from 'reducers/messages/selectors';\nimport { isConnectedSelector } from 'reducers/chat/selectors';\nimport {\n  isShowTimestampsSelector,\n  isSplitChatSelector,\n} from 'reducers/options/selectors';\nimport { userLoginSelector, isAuthSelector } from 'reducers/auth/selectors';\nimport { emoteCategoriesSelector } from 'reducers/emotes/selectors';\nimport ChatInput from 'components/ChatInput';\nimport Messages from 'components/Messages';\n\nconst ChatRoot = styled.div`\n  height: 100vh;\n  font-size: 12px;\n`;\nconst ChatWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background-color: #18181b;\n`;\n\nconst Chat = ({ onSendMessage }) => {\n  const [text, setText] = useState('');\n  const isAuth = useSelector(isAuthSelector);\n  const messages = useSelector(messagesSelector);\n  const emoteCategories = useSelector(emoteCategoriesSelector);\n  // TODO: check if the user has a rights to send messages\n  const isConnected = useSelector(isConnectedSelector);\n  const isEven = useSelector(isEvenSelector);\n  const userLogin = useSelector(userLoginSelector);\n  const isShowTimestamps = useSelector(isShowTimestampsSelector);\n  const isSplitChat = useSelector(isSplitChatSelector);\n\n  const handleNameRightClick = useCallback(\n    (name) => setText((t) => `${t.trim()} @${name} `.trimLeft()),\n    [setText],\n  );\n\n  return (\n    <ChatRoot>\n      <ChatWrapper>\n        <Messages\n          messages={messages}\n          userLogin={userLogin}\n          isEven={isSplitChat ? isEven : false}\n          isShowTimestamps={isShowTimestamps}\n          isSplitChat={isSplitChat}\n          onNameRightClick={handleNameRightClick}\n        />\n        <ChatInput\n          text={text}\n          emoteCategories={emoteCategories}\n          isDisabled={!isAuth || !isConnected}\n          isAuth={isAuth}\n          onChangeText={setText}\n          onSubmit={onSendMessage}\n        />\n      </ChatWrapper>\n    </ChatRoot>\n  );\n};\n\nChat.propTypes = {\n  onSendMessage: pt.func.isRequired,\n};\n\nexport default Chat;\n","import React, { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport useFetchChatData from 'hooks/useFetchChatData';\nimport useCurrentChannel from 'hooks/useCurrentChannel';\nimport useTwitchClient from 'hooks/useTwitchClient';\nimport { userLoginSelector } from 'reducers/auth/selectors';\nimport { currentChannelSelector } from 'reducers/chat/selectors';\nimport { setIsAuth } from 'reducers/auth';\nimport replaceEmojis from 'utils/replaceEmojis';\nimport Chat from 'components/Chat';\n\nconst Home = () => {\n  const dispatch = useDispatch();\n\n  const userLogin = useSelector(userLoginSelector);\n  const currentChannel = useSelector(currentChannelSelector);\n\n  const client = useTwitchClient(userLogin, localStorage.accessToken);\n  // const client = null;\n\n  useCurrentChannel();\n  useFetchChatData();\n\n  useEffect(() => {\n    const rawUser = localStorage.getItem('user');\n\n    if (rawUser) {\n      const user = JSON.parse(rawUser);\n\n      dispatch(setIsAuth({ isAuth: true, user }));\n    }\n\n    // TODO: try to connect to the chat. if there is an error, set isAuth to false and connect without login\n  }, [dispatch]);\n\n  const handleSendMessage = useCallback(\n    (message) => {\n      if (!client) return;\n      const normalizedMessage = replaceEmojis(message.trim());\n      client.say(currentChannel, normalizedMessage);\n    },\n    [client, currentChannel],\n  );\n\n  return <Chat onSendMessage={handleSendMessage} />;\n};\n\nexport default Home;\n","import {\n  TWITCH_API_AUTH_BASE,\n  TWITCH_API_CLIENT_ID,\n  TWITCH_API_REDIRECT_URI,\n} from 'utils/constants';\n\nconst authParams = {\n  client_id: TWITCH_API_CLIENT_ID,\n  redirect_uri: TWITCH_API_REDIRECT_URI,\n  response_type: 'token+id_token',\n  scope: [\n    'openid',\n    'channel:moderate',\n    'chat:edit',\n    'chat:read',\n    'whispers:read',\n    'whispers:edit',\n    'user_blocks_read',\n    'user_blocks_edit',\n    'user_subscriptions',\n  ].join('+'),\n  claims: JSON.stringify({\n    id_token: { email_verified: null, picture: null, preferred_username: null },\n  }),\n  // state: uid(),\n};\n\nconst getAuthUrl = () => {\n  const search = Object.entries(authParams)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n\n  return `${TWITCH_API_AUTH_BASE}?${search}`;\n};\n\nexport default getAuthUrl;\n","import getAuthUrl from 'utils/getAuthUrl';\n\nconst Auth = () => {\n  window.location.href = getAuthUrl();\n\n  return null;\n};\n\nexport default Auth;\n","import { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport jwt from 'jsonwebtoken';\n\nimport { fetchUser } from 'reducers/auth';\n\nconst AuthCallback = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  if (!window.location.hash) return null;\n\n  const params = new URLSearchParams(window.location.hash.slice(1));\n\n  const accessToken = params.get('access_token');\n  const idToken = params.get('id_token');\n\n  if (!accessToken || !idToken) return null;\n\n  localStorage.setItem('accessToken', accessToken);\n  localStorage.setItem('idToken', idToken);\n\n  const { sub: id } = jwt.decode(idToken);\n\n  dispatch(fetchUser(id));\n\n  const lastChannel = localStorage.getItem('lastChannel');\n\n  history.push(lastChannel ? `/chat/#${lastChannel}` : '/chat/');\n\n  return null;\n};\n\nexport default AuthCallback;\n","import { css } from 'styled-components';\n\nexport default css`\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    margin: 0;\n    font-family: Roobert, Helvetica Neue, Helvetica, Arial, sans-serif;\n  }\n`;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { createGlobalStyle } from 'styled-components';\n\nimport common from 'styles/common';\nimport colors from 'styles/colors';\nimport vars from 'styles/vars';\n\nexport default createGlobalStyle`\n  :root {\n    ${colors};\n    ${vars};\n  }\n  ${common};\n`;\n","import React from 'react';\nimport pt from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport isAuthRedirect from 'utils/isAuthRedirect';\nimport Home from 'components/Home';\nimport Auth from 'components/Auth';\nimport AuthCallback from 'components/AuthCallback';\nimport GlobalStyles from 'styles';\n\nconst getHomeComponent = () =>\n  isAuthRedirect(window.location.hash) ? AuthCallback : Home;\n\nconst App = ({ store }) => (\n  <>\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/chat/\" component={getHomeComponent()} />\n          <Route exact path=\"/chat/auth\" component={Auth} />\n        </Switch>\n      </Router>\n    </Provider>\n    <GlobalStyles />\n  </>\n);\n\nApp.propTypes = {\n  store: pt.shape({}).isRequired,\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactGA from 'react-ga';\n\nimport isAuthRedirect from 'utils/isAuthRedirect';\nimport store from 'store';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nif (process.env.NODE_ENV === 'production') {\n  ReactGA.initialize('UA-139550930-3');\n\n  if (!isAuthRedirect(window.location.hash)) {\n    const page =\n      window.location.pathname + window.location.search + window.location.hash;\n    ReactGA.pageview(page);\n  }\n}\n\nReactDOM.render(<App store={store} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}