{"version":3,"sources":["features/auth/authSlice.ts","utils/normalizeHref.ts","features/chat/utils/htmlEntity.ts","features/chat/assets/ts-tink.ogg","utils/fetchRequest.ts","api/twitch.ts","api/bttv.ts","api/ffz.ts","api/chatHistory.ts","features/chat/utils/findEmote.ts","features/auth/authUtils.ts","features/options/optionsSelectors.ts","features/auth/hooks/useInitializeAuth.ts","features/chat/hooks/useFetchChatData.ts","features/chat/hooks/useCurrentChannel.ts","hooks/usePrevious.ts","features/chat/utils/replaceEmojis.ts","features/chat/hooks/useTwitchClient.ts","hooks/useSetState.ts","features/chat/utils/getUsersByBeginText.ts","features/chat/hooks/useChatInput.ts","hooks/useOnClickOutside.ts","icons/close.svg","components/IconButton.tsx","components/ChatModal.tsx","icons/smiley-face.svg","components/Scrollbar.tsx","icons/search.svg","features/chat/components/EmotePicker.tsx","features/chat/components/ChatInput.tsx","icons/gears.svg","icons/twitch.svg","components/Button.tsx","components/Switch.tsx","features/options/Options.tsx","features/chat/components/ChatControls.tsx","features/chat/components/Message.tsx","features/chat/components/Notice.tsx","features/chat/components/UserNotice.tsx","features/chat/components/ChatMessage.tsx","features/chat/components/Messages.tsx","features/chat/components/JoinChannel.tsx","features/chat/components/Chat.tsx","features/auth/Auth.tsx","features/auth/Logout.tsx","features/auth/AuthCallback.tsx","styles/common.js","styles/colors.js","styles/vars.js","styles/index.js","app/App.tsx","serviceWorker.ts","app/rootReducer.ts","app/store.ts","index.tsx","features/chat/utils/parseMessageEntities.ts","features/chat/utils/normalizeMessages.ts","features/chat/utils/sliceItemsByLimit.ts","features/chat/slice/messages.ts","features/chat/utils/parseApiResponse.ts","features/chat/slice/twitchEmotes.ts","features/chat/slice/bttvEmotes.ts","features/chat/slice/ffzEmotes.ts","features/chat/slice/badges.ts","features/chat/slice/params.ts","features/chat/slice/blockedUsers.ts","features/chat/slice/chatSlice.ts","features/chat/utils/createEmoteCategories.ts","features/chat/selectors/chatSelectors.ts","../../src/client.ts","../../src/utils.ts","../../src/parse.ts","../../src/normalize.ts","../../src/types.ts","utils/constants.ts","features/options/optionsUtils.ts","features/options/optionsSlice.ts","utils/assertNever.ts","features/chat/utils/getEmotesByText.ts","features/chat/utils/emotesUsageStatistic.ts","features/chat/utils/checkIsMention.ts"],"names":["initialState","status","userId","userLogin","fetchUser","createAsyncThunk","async","users","api","id","login","data","writeUserToLocatStorage","auth","createSlice","name","reducers","initializeAuth","state","payload","isAuth","invalidateAuth","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","isAuthReadySelector","isAuthSelector","userLoginSelector","userIdSelector","isStartsWithProtocolRegex","normalizeHref","href","test","TWITCH_EMOTES_CDN","regexEmotesMap","getFfzSrcSet","R","dpi","url","createTwitchEmote","code","type","alt","src","srcSet","createBttvEmote","createFfzEmote","urls","createEmoji","createMention","text","target","createLink","createBadges","badges","globalBadges","channelBadges","version","badge","versions","title","description","image_url_1x","imageUrl1x","image_url_2x","imageUrl2x","image_url_4x","imageUrl4x","label","createBadge","Boolean","module","exports","fetchRequest","timeout","restOptions","options","fetchTimeout","API_REQUESTS_TIMEOUT","controller","AbortController","signal","setTimeout","abort","response","fetch","ok","Error","statusText","json","apiRequestKraken","headers","Accept","process","Authorization","localStorage","getItem","LS_ACCESS_TOKEN","apiRequestHelix","fetchTwitchEmotes","fetchGlobalBadges","language","fetchChannelBadges","channelId","fetchBlockedUsers","fetchBttvGlobalEmotes","fetchBttvChannelEmotes","fetchFfzGlobalEmotes","fetchFfzChannelEmotes","fetchChatHistory","channel","findTwitchEmoteByIdInSets","sets","set","Object","values","result","htmlEntity","regexMap","4","9","findTwitchEmoteByNameInSets","RegExp","findEmote","twitch","byId","twitchGlobal","twitchUser","byName","byText","limit","items","emote","begins","length","contains","index","toLowerCase","indexOf","push","bttv","bttvGlobal","bttvChannel","findById","findByName","ffz","ffzGlobal","ffzChannel","authParams","client_id","TWITCH_API_CLIENT_ID","redirect_uri","TWITCH_API_REDIRECT_URI","response_type","scope","join","claims","JSON","stringify","id_token","email_verified","picture","preferred_username","getAuthUrl","search","entries","map","key","value","TWITCH_API_AUTH_BASE","isAuthRedirect","hash","startsWith","user","setItem","LS_USER","readUserFromLocatStorage","parse","e","optionsSelector","showTimestamps","splitChat","fixedWidth","highlightNotifications","isShowTimestampsSelector","isSplitChatSelector","isFixedWidthSelector","isHighlightNotificationsSelector","useInitializeAuth","dispatch","useDispatch","isAuthReady","useSelector","useEffect","idToken","params","jwtData","jwt","decode","sub","useFetchChatData","currentChannel","currentChannelSelector","currentChannelId","currentChannelIdSelector","isTwitchEmotesLoaded","isTwitchEmotesLoadedSelector","isBttvGlobalEmotesLoaded","isBttvGlobalEmotesLoadedSelector","isBttvChannelEmotesLoaded","isBttvChannelEmotesLoadedSelector","isFfzGlobalEmotesLoaded","isFfzGlobalEmotesLoadedSelector","isFfzChannelEmotesLoaded","isFfzChannelEmotesLoadedSelector","isGlobalBadgesLoaded","isGlobalBadgesLoadedSelector","isChannelBadgesLoaded","isChannelBadgesLoadedSelector","isHistoryLoaded","isHistoryLoadedSelector","isBlockedUsersLoaded","isBlockedUsersLoadedSelector","isHistoryAdded","isHistoryAddedSelector","isReadyToAddHistory","addChatHistory","useCurrentChannel","history","useHistory","location","slice","updateCurrentChannel","LS_LAST_CHANNEL","document","lastChannel","pathname","usePrevious","ref","useRef","current","replaceEmojis","split","word","emoji","emojilib","char","useTwitchClient","playTink","useSound","tinkSfx","isConnected","isConnectedSelector","prevChannel","clientRef","blockedUsers","blockedUsersSelector","isHighlightNotifications","registerEventsParamsRef","registerEvents","useCallback","client","on","updateIsConnected","updateGlobalUserParams","updateUserParams","updateRoomParams","message","includes","isMention","checkIsMenction","addMessage","disconnect","nanoid","tags","targetUserId","clearChat","part","twitchIrc","connect","useMemo","say","trim","normalizedMessage","handleUserState","ownMessage","removeListeners","handleNotice","NOTICE_MESSAGE_TAGS","msgId","off","useSetState","useState","patch","prevState","Function","getUsersByBeginText","beginText","beginTextLower","nameLower","suggestionsInitialState","isActive","activeIndex","start","end","setSuggestionsIndexUp","rest","setSuggestionsIndexDown","replaceSuggestionText","currentItem","insertedText","substring","useChatInput","setText","onSendMessage","chatInputRef","suggestions","setSuggestions","emotes","emotesSelector","usersSelector","usersRef","emotesRef","suggestionsRef","handleChange","selectionStart","spaceIndexBefore","lastIndexOf","spaceIndexAfter","usersMatch","SUGGESTION_TYPES","regex","exec","emotesMatch","getEmotesByText","handleKeyUp","handleKeyDown","preventDefault","t","handleSuggestionMouseEnter","handleSuggestionClick","focus","handleBlur","events","arePassiveEvents","arePassiveEventsSupported","getOptions","event","passive","undefined","isContainsNode","el","node","useOnClickOutside","handler","handlerRef","useLatest","listener","Array","isArray","some","r","forEach","addEventListener","removeEventListener","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","this","_ref","createElement","fill","d","SvgClose","svgRef","props","viewBox","ForwardRef","forwardRef","sizes","small","css","medium","IconButton","styled","button","attrs","p","size","ChatModalRoot","div","CloseButton","CloseIcon","CloseIconSvg","ChatModal","children","onClose","onClick","fillRule","clipRule","SvgSmileyFace","Scrollbar","CustomScrollbar","disableTracksWidthCompensation","SvgSearch","EmotePickerRoot","Categories","Category","CategoryHeader","CategoryItems","Emote","img","SearchBlock","SearchInput","input","SearchIcon","SearchIconSvg","EmotePicker","onEmoteClick","setSearch","searchInputRef","emoteCategories","emoteCategoriesSelector","placeholder","onChange","ChatInputRoot","ChatInputInner","Suggestions","SuggestionItem","SuggestionImage","TextareaInput","TextareaWrapper","isSuggestions","EmotesModal","Textarea","TextareaAutosize","$showScroll","EmotesButton","SmileyFaceIcon","SmileyFaceIconSvg","ChatInput","React","isDisabled","onKeyUp","onKeyDown","onBlur","onSuggestionMouseEnter","onSuggestionClick","textareaRef","suggestionNodesRef","isShowTextareaScroll","setIsShowTextareaScroll","isEmotesModalVisible","setIsEmotesModalVisible","isEmotesLoaded","isEmotesLoadedSelector","handleCloseEmotesModal","renderUser","onMouseEnter","renderEmote","renderSuggestions","inputRef","maxLength","maxRows","disabled","onHeightChange","height","memo","SvgGears","_ref2","_ref3","SvgTwitch","Button","SwitchRoot","Label","Input","Switch","checked","readOnly","aria-label","htmlFor","defaultProps","OptionsRoot","Header","h2","Option","OptionText","span","Profile","UserName","color","LogOutButton","Link","Badge","Options","userDisplayName","userDisplayNameSelector","userColor","userColorSelector","userBadgesImages","userBadgesImagesSelector","renderOption","changeChatOption","renderOptionsCategory","to","ChatControlsRoot","Controls","OptionsModal","OptionsButton","GearsIcon","GearsIconSvg","TwitchIcon","TwitchIconSvg","isOptionsModalVisible","setIsOptionsModalVisible","optionsModalRef","optionsButtonRef","optionsNodesRef","handleCloseOptionsModal","as","prev","MessageRoot","isAction","isHistory","isDeleted","isEven","Name","EmoteWrapper","Emoji","Mention","isOwnMessage","a","Timestamp","entities","displayName","timestamp","isShowTimestamps","onNameRightClick","isVisible","setIsVisible","format","Date","renderBadges","onContextMenu","item","data-emote-id","rel","renderMessageArray","NoticeRoot","Notice","UserNoticeRoot","UserNotice","systemMessage","assertNever","MessagesRoot","StyledScrollbar","MoreMessagesButton","Messages","isMoreMessagesButtonVisible","setIsMoreMessagesButtonVisible","messages","messagesSelector","isEvenSelector","isSplitChat","scrollbarRef","handleScrollToBottom","scrollToBottom","getIsEven","onUpdate","clientHeight","contentScrollHeight","scrollTop","JoinChannelRoot","Title","JoinButton","JoinChannel","setValue","handleChangeChannel","onKeyPress","ChatRoot","ChatWrapper","isFixedWidth","Chat","textRef","handleSendMessage","chatInput","handleNameRightClick","trimLeft","handleEmoteClick","Auth","window","Logout","removeItem","LS_ID_TOKEN","AuthCallback","URLSearchParams","accessToken","get","createGlobalStyle","colors","vars","common","getHomeComponent","App","exact","path","render","component","isLocalhost","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","console","log","onSuccess","catch","error","rootReducer","combineReducers","chat","store","configureStore","reducer","ReactGA","initialize","page","pageview","require","default","ReactDOM","getElementById","URL","origin","contentType","ready","unregister","reload","checkValidServiceWorker","mentionRegex","linkRegex","urlRegex","strict","normalizeEmbeddedEmotes","embeddedEmotes","reduce","Number","parseInt","acc","findEntity","parseTwitch","twitchEmote","emojiMatch","twemojiParser","assetType","mentionMatch","linkMatch","parseMessageEntities","offset","arrayOffset","spaceIndex","startIndex","endIndex","entity","keys","textBefore","entityObject","difference","textAfter","normalizeHistoryMessages","rawMessages","chatState","fakeState","globalBadgesSelector","channelBadgesSelector","rawMessage","tekko","command","prefix","parsedTags","messageUser","tmiSentTs","normalizeHistoryMessage","sliceItemsByLimit","addedItemsCount","diff","isSliced","normalizePayload","normalizeMessage","noticeType","normalizeNotice","systemMsg","normalizeUserNotice","writeEmotesUsageStatistic","now","normalizeOwnMessage","messagesReducers","newItems","newIsEven","CHANNEL_MESSAGES_LIMIT","newUsers","STORE_USERS_LIMIT","rawHistory","slicedRawHistory","isAdded","parseTwitchEmotes","parseFfzChannelEmotes","parseBlockedUsers","parseBadges","ffzEmotesExtraReducers","ffzEmotes","global","default_sets","defaultSets","parseFfzGlobalEmotes","meta","arg","byChannels","paramsReducers","room","twitchEmotes","bttvEmotes","messagesExtraReducers","twitchEmotesExtraReducers","channelEmotes","sharedEmotes","bttvEmotesExtraReducers","badgesExtraReducers","blockedUsersExtraReducers","getTwitchUserEmoteCategories","getMainEmoteCategories","createSelector","filter","createEmoteCategories","mainEmoteCategories","frequentlyUsed","getEmotesFromUsageStatistic","twitchEmotesSelector","twitchGlobalEmotesSelector","twitchUserEmotesSelector","roomId","getIsAction","normalizeActionMessage","getChannelFromMessage","isNode","booleanMessageTags","numberMessageTags","tagNamesMap","depricatedMessageTags","normalizeTagValue","raw","indexes","followersOnly","slow","parseMessageTags","newKey","normalizeState","normalizeCommand","trailing","Commands","Client","socket","globalUserState","channels","_connected","_connecting","_registered","secure","connection","receiveRaw","rawData","sendRaw","ircMessage","middle","sendCommand","commandParams","_handleMessage","eventData","normalizeGlobalUserState","normalizeWhisper","normalizeChatMessage","_connectInNode","host","port","Promise","handleConnect","resolve","tls","reject","_connectInBrowser","WebSocket","wasClean","reason","_register","nick","Math","pass","handleRegister","_updateGlobalUserState","_updateUserState","userState","_updateRoomState","roomState","UserNoticeType","LS_EMOTES_USAGE_STATISTIC","LS_OPTIONS","readOptionsFromLocalStorage","blacklistKeywords","highlightKeywords","changeOption","textLower","readEmotesUsageStatistic","statistic","getUsageStatisticFromEntities","v","lastUpdatedAt","uses","mergeFn","left","right","newHistory","normalizeHistory","emoteEntity","messageText"],"mappings":"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","file":"static/js/main.002c6a9d.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport { RootState } from 'app/rootReducer';\nimport { writeUserToLocatStorage } from 'features/auth/authUtils';\nimport { FetchStatus } from 'utils/types';\n\ntype AuthState = {\n  status: FetchStatus;\n  userId: string | null;\n  userLogin: string | null;\n};\n\ntype InitializeAuth = {\n  isAuth: boolean;\n  userId?: string;\n  userLogin?: string;\n};\n\nexport const initialState: AuthState = {\n  status: 'idle',\n  userId: null,\n  userLogin: null,\n};\n\nexport const fetchUser = createAsyncThunk(\n  'auth/fetchUser',\n  async (userId: string) => {\n    const users = await api.fetchUser(userId);\n    const { id, login } = users.data[0];\n\n    writeUserToLocatStorage({ id, login });\n\n    return users;\n  },\n);\n\nconst auth = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    initializeAuth: (\n      state,\n      { payload }: PayloadAction<InitializeAuth>,\n    ): void => {\n      state.status = payload.isAuth ? 'success' : 'error';\n\n      if (payload.userId) {\n        state.userId = payload.userId;\n      }\n\n      if (payload.userLogin) {\n        state.userLogin = payload.userLogin;\n      }\n    },\n\n    invalidateAuth: (): AuthState => initialState,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchUser.pending, (state) => {\n      state.status = 'loading';\n    });\n\n    builder.addCase(fetchUser.fulfilled, (state, { payload }) => {\n      state.status = 'success';\n\n      state.userId = payload.data[0].id;\n      state.userLogin = payload.data[0].login;\n    });\n\n    builder.addCase(fetchUser.rejected, (state) => {\n      state.status = 'error';\n    });\n  },\n});\n\nexport const { initializeAuth, invalidateAuth } = auth.actions;\n\nexport default auth.reducer;\n\nexport const isAuthReadySelector = (state: RootState): boolean =>\n  state.auth.status !== 'idle' && state.auth.status !== 'loading';\n\nexport const isAuthSelector = (state: RootState): boolean =>\n  state.auth.status === 'success';\n\nexport const userLoginSelector = (state: RootState): string | null =>\n  state.auth.userLogin;\n\nexport const userIdSelector = (state: RootState): string | null =>\n  state.auth.userId;\n","// https://regex101.com/r/cpaNXh/1\nconst isStartsWithProtocolRegex = /^(?:(?:[a-z]+:)?\\/\\/)/;\n\nconst normalizeHref = (href: string) =>\n  isStartsWithProtocolRegex.test(href) ? href : `//${href}`;\n\nexport default normalizeHref;\n","import * as R from 'ramda';\r\nimport twitchIrc from 'twitch-simple-irc';\r\n\r\nimport * as api from 'api';\r\nimport normalizeHref from 'utils/normalizeHref';\r\n\r\nexport interface TwitchEmote {\r\n  type: 'twitch-emote';\r\n  id: number;\r\n  alt: string;\r\n  src: string;\r\n  srcSet: string;\r\n}\r\nexport interface BttvEmote {\r\n  type: 'bttv-emote';\r\n  id: string;\r\n  alt: string;\r\n  src: string;\r\n  srcSet: string;\r\n}\r\nexport interface FfzEmote {\r\n  type: 'ffz-emote';\r\n  id: number;\r\n  alt: string;\r\n  src: string;\r\n  srcSet: string;\r\n}\r\nexport interface Emoji {\r\n  type: 'emoji';\r\n  alt: string;\r\n  src: string;\r\n}\r\nexport interface Mention {\r\n  type: 'mention';\r\n  text: string;\r\n  target: string;\r\n}\r\nexport interface Link {\r\n  type: 'link';\r\n  text: string;\r\n  href: string;\r\n}\r\nexport interface Badge {\r\n  alt: string;\r\n  label: string;\r\n  src: string;\r\n  srcSet: string;\r\n}\r\n\r\nexport type Emote = TwitchEmote | BttvEmote | FfzEmote;\r\n\r\nconst TWITCH_EMOTES_CDN = '//static-cdn.jtvnw.net/emoticons/v1';\r\nconst BTTV_EMOTES_CDN = '//cdn.betterttv.net/emote';\r\n\r\n// prettier-ignore\r\nexport const regexEmotesMap: Record<string, string> = {\r\n  '[oO](_|\\\\.)[oO]': 'O_o',\r\n  '\\\\&gt\\\\;\\\\(':     '>(',\r\n  '\\\\&lt\\\\;3':       '<3',\r\n  '\\\\:-?(o|O)':      ':O',\r\n  '\\\\:-?(p|P)':      ':P',\r\n  '\\\\:-?[\\\\\\\\/]':    ':/',\r\n  '\\\\:-?[z|Z|\\\\|]':  ':Z',\r\n  '\\\\:-?\\\\(':        ':(',\r\n  '\\\\:-?\\\\)':        ':)',\r\n  '\\\\:-?D':          ':D',\r\n  '\\\\;-?(p|P)':      ';P',\r\n  '\\\\;-?\\\\)':        ';)',\r\n  'R-?\\\\)':          'R)',\r\n  'B-?\\\\)':          'B)',\r\n};\r\n\r\nexport const getFfzSrcSet = R.pipe<{}, [string, string][], string[], string>(\r\n  R.toPairs,\r\n  R.map(([dpi, url]) => `${url} ${dpi}x`),\r\n  R.join(', '),\r\n);\r\n\r\nexport const createTwitchEmote = ({\r\n  id,\r\n  code,\r\n}: api.TwitchEmote): TwitchEmote => ({\r\n  type: 'twitch-emote',\r\n  id,\r\n  alt: regexEmotesMap[code] || code,\r\n  src: `${TWITCH_EMOTES_CDN}/${id}/1.0`,\r\n  srcSet: `${TWITCH_EMOTES_CDN}/${id}/1.0 1x, ${TWITCH_EMOTES_CDN}/${id}/2.0 2x, ${TWITCH_EMOTES_CDN}/${id}/3.0 4x`,\r\n});\r\n\r\nexport const createBttvEmote = ({\r\n  id,\r\n  code,\r\n}: api.BttvGlobalEmote | api.BttvChannelEmote): BttvEmote => ({\r\n  type: 'bttv-emote',\r\n  id,\r\n  alt: code,\r\n  src: `${BTTV_EMOTES_CDN}/${id}/1x`,\r\n  srcSet: `${BTTV_EMOTES_CDN}/${id}/2x 2x, ${BTTV_EMOTES_CDN}/${id}/3x 4x`,\r\n});\r\n\r\nexport const createFfzEmote = ({ id, name, urls }: api.FfzEmote): FfzEmote => ({\r\n  type: 'ffz-emote',\r\n  id,\r\n  alt: name,\r\n  src: urls[1],\r\n  srcSet: getFfzSrcSet(urls),\r\n});\r\n\r\nexport const createEmoji = (alt: string, src: string): Emoji => ({\r\n  type: 'emoji',\r\n  alt: `:${alt}:`,\r\n  src,\r\n});\r\n\r\nexport const createMention = (text: string, target: string): Mention => ({\r\n  type: 'mention',\r\n  text,\r\n  target,\r\n});\r\n\r\nexport const createLink = (href: string): Link => ({\r\n  type: 'link',\r\n  text: href,\r\n  href: normalizeHref(href),\r\n});\r\n\r\nexport const createBadge = ({\r\n  title,\r\n  description,\r\n  image_url_1x: imageUrl1x,\r\n  image_url_2x: imageUrl2x,\r\n  image_url_4x: imageUrl4x,\r\n}: api.TwitchBadgeVersion): Badge => ({\r\n  alt: title,\r\n  label: description,\r\n  src: imageUrl1x,\r\n  srcSet: `${imageUrl1x} 1x, ${imageUrl2x} 2x, ${imageUrl4x} 4x`,\r\n});\r\n\r\nexport const createBadges = (\r\n  badges: twitchIrc.Badges,\r\n  globalBadges: Record<string, api.TwitchBadge>,\r\n  channelBadges: Record<string, api.TwitchBadge>,\r\n): Badge[] => {\r\n  const mapBadges = ([name, version]: [string, string]): Badge | false => {\r\n    const badge =\r\n      channelBadges[name]?.versions[version] ||\r\n      globalBadges[name]?.versions[version];\r\n\r\n    return badge ? createBadge(badge) : false;\r\n  };\r\n\r\n  return R.pipe<{}, [string, string][], any[], any[]>(\r\n    R.toPairs,\r\n    R.map(mapBadges),\r\n    R.filter(Boolean),\r\n  )(badges);\r\n};\r\n","module.exports = __webpack_public_path__ + \"static/media/ts-tink.4251bf04.ogg\";","import { API_REQUESTS_TIMEOUT } from 'utils/constants';\n\nexport interface FetchRequestOptions extends RequestInit {\n  timeout?: number;\n}\n\nconst fetchRequest = async (\n  url: string,\n  { timeout, ...restOptions }: FetchRequestOptions = {},\n) => {\n  let options = { ...restOptions };\n  const fetchTimeout = timeout || API_REQUESTS_TIMEOUT;\n\n  if (fetchTimeout) {\n    const controller = new AbortController();\n\n    options = { ...options, signal: controller.signal };\n\n    setTimeout(() => controller.abort(), fetchTimeout);\n  }\n\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  const body = await response.json();\n\n  return body;\n};\n\nexport default fetchRequest;\n","import { LS_ACCESS_TOKEN } from 'utils/constants';\nimport fetchRequest, { FetchRequestOptions } from 'utils/fetchRequest';\n\nconst TWITCH_API_HELIX = 'https://api.twitch.tv/helix';\nconst TWITCH_API_KRAKEN = 'https://api.twitch.tv/kraken';\n\nconst getHelixHeaders = () => ({\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `Bearer ${localStorage.getItem(LS_ACCESS_TOKEN)}`,\n});\n\nconst getKrakenHeaders = () => ({\n  Accept: 'application/vnd.twitchtv.v5+json',\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `OAuth ${localStorage.getItem(LS_ACCESS_TOKEN)}`,\n});\n\nconst apiRequestHelix = (url: string, options?: FetchRequestOptions) =>\n  fetchRequest(`${TWITCH_API_HELIX}${url}`, {\n    ...options,\n    headers: getHelixHeaders(),\n  } as FetchRequestOptions);\n\nconst apiRequestKraken = (url: string, options?: FetchRequestOptions) =>\n  fetchRequest(`${TWITCH_API_KRAKEN}${url}`, {\n    ...options,\n    headers: getKrakenHeaders(),\n  } as FetchRequestOptions);\n\nexport interface TwitchUser {\n  id: string;\n  login: string;\n  display_name: string;\n  type: string;\n  broadcaster_type: string;\n  description: string;\n  profile_image_url: string;\n  offline_image_url: string;\n  view_count: number;\n}\n\nexport interface TwitchUsersResponse {\n  data: TwitchUser[];\n}\n\nexport interface TwitchEmote {\n  id: number;\n  code: string;\n}\n\nexport interface TwitchEmotesResponse {\n  emoticon_sets: Record<string, TwitchEmote[]>;\n}\n\nexport interface TwitchBadgeVersion {\n  image_url_1x: string;\n  image_url_2x: string;\n  image_url_4x: string;\n  description: string;\n  title: string;\n  click_action: string;\n  click_url: string;\n  last_updated: null;\n}\n\nexport interface TwitchBadge {\n  versions: Record<string, TwitchBadgeVersion>;\n}\n\nexport interface TwitchBadgesResponse {\n  badge_sets: Record<string, TwitchBadge>;\n}\n\nexport interface TwitchBlockedUser {\n  display_name: string;\n  _id: string;\n  name: string;\n  type: string;\n  bio: string | null;\n  created_at: string;\n  updated_at: string;\n  logo: string;\n}\n\nexport interface TwitchBlockedUsersResponse {\n  _total: number;\n  blocks: {\n    user: TwitchBlockedUser;\n  }[];\n}\n\nexport const fetchUser = (userId: string): Promise<TwitchUsersResponse> =>\n  apiRequestHelix(`/users?id=${userId}`);\n\nexport const fetchTwitchEmotes = (\n  userId: string,\n): Promise<TwitchEmotesResponse> => apiRequestKraken(`/users/${userId}/emotes`);\n\nexport const fetchGlobalBadges = (\n  language = 'en',\n): Promise<TwitchBadgesResponse> =>\n  fetchRequest(\n    `https://badges.twitch.tv/v1/badges/global/display?language=${language}`,\n  );\n\nexport const fetchChannelBadges = (\n  channelId: string,\n  language = 'en',\n): Promise<TwitchBadgesResponse> =>\n  fetchRequest(\n    `https://badges.twitch.tv/v1/badges/channels/${channelId}/display?language=${language}`,\n  );\n\nexport const fetchBlockedUsers = (\n  userId: string,\n): Promise<TwitchBlockedUsersResponse> =>\n  apiRequestKraken(`/users/${userId}/blocks`);\n","import fetchRequest from 'utils/fetchRequest';\r\n\r\nexport interface BttvEmote {\r\n  id: string;\r\n  code: string;\r\n  imageType: 'png' | 'gif';\r\n}\r\n\r\nexport interface BttvGlobalEmote extends BttvEmote {\r\n  userId: string;\r\n}\r\n\r\nexport interface BttvChannelEmote extends BttvEmote {\r\n  user: {\r\n    id: string;\r\n    name: string;\r\n    displayName: string;\r\n    providerId: string;\r\n  };\r\n}\r\n\r\nexport type BttvGlobalEmotesResponse = BttvGlobalEmote[];\r\n\r\nexport interface BttvChannelEmotesResponse {\r\n  id: string;\r\n  bots: string[];\r\n  channelEmotes: BttvChannelEmote[];\r\n  sharedEmotes: BttvChannelEmote[];\r\n}\r\n\r\nexport const fetchBttvGlobalEmotes = (): Promise<BttvGlobalEmotesResponse> =>\r\n  fetchRequest('https://api.betterttv.net/3/cached/emotes/global');\r\n\r\nexport const fetchBttvChannelEmotes = (\r\n  channelId: string,\r\n): Promise<BttvChannelEmotesResponse> =>\r\n  fetchRequest(`https://api.betterttv.net/3/cached/users/twitch/${channelId}`);\r\n","import fetchRequest from 'utils/fetchRequest';\r\n\r\nexport interface FfzEmote {\r\n  css: null;\r\n  height: number;\r\n  hidden: boolean;\r\n  id: number;\r\n  margins: null;\r\n  modifier: boolean;\r\n  name: string;\r\n  offset: null;\r\n  owner: {\r\n    _id: number;\r\n    display_name: string;\r\n    name: string;\r\n  };\r\n  public: boolean;\r\n  urls: {\r\n    '1': string;\r\n    '2'?: string;\r\n    '4'?: string;\r\n  };\r\n  width: number;\r\n}\r\n\r\ninterface FfzEmoteSet {\r\n  _type: number;\r\n  css: null;\r\n  description: null;\r\n  emoticons: FfzEmote[];\r\n  icon: null;\r\n  id: number;\r\n  title: string;\r\n}\r\n\r\nexport interface FfzGlobalEmotesResponse {\r\n  default_sets: number[];\r\n  sets: Record<string, FfzEmoteSet>;\r\n  users: Record<string, string[]>;\r\n}\r\n\r\nexport interface FfzChannelEmotesResponse {\r\n  room: {\r\n    _id: number;\r\n    css: null;\r\n    display_name: string;\r\n    id: string;\r\n    is_group: boolean;\r\n    mod_urls: null;\r\n    moderator_badge: null;\r\n    set: number;\r\n    twitch_id: number;\r\n    user_badges: {};\r\n  };\r\n  sets: Record<string, FfzEmoteSet>;\r\n}\r\n\r\nexport const fetchFfzGlobalEmotes = (): Promise<FfzGlobalEmotesResponse> =>\r\n  fetchRequest('https://api.frankerfacez.com/v1/set/global');\r\n\r\nexport const fetchFfzChannelEmotes = (\r\n  channelId: string,\r\n): Promise<FfzChannelEmotesResponse> =>\r\n  fetchRequest(`https://api.frankerfacez.com/v1/room/id/${channelId}`);\r\n","import fetchRequest from 'utils/fetchRequest';\r\n\r\nexport interface ChatHistoryResponse {\r\n  messages: string[];\r\n  error: null;\r\n}\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const fetchChatHistory = (\r\n  channel: string,\r\n): Promise<ChatHistoryResponse> =>\r\n  fetchRequest(\r\n    `https://recent-messages.robotty.de/api/v2/recent-messages/${channel}?clearchatToNotice=true`,\r\n  );\r\n","import * as R from 'ramda';\n\nimport * as api from 'api';\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\nimport { StateEmotes } from 'features/chat/selectors/chatSelectors';\nimport { EmotesByText } from 'features/chat/utils/getEmotesByText';\n\n// by id\n\nconst findTwitchEmoteByIdInSets = (\n  id: number,\n  sets: Record<string, api.TwitchEmote[]>,\n) => {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const set of Object.values(sets)) {\n    const result = R.find(R.propEq('id', id), set);\n\n    if (result) return htmlEntity.createTwitchEmote(result);\n  }\n\n  return null;\n};\n\nconst findTwitchEmoteById = (\n  id: number,\n  { twitchGlobal, twitchUser }: NonNullable<StateEmotes>,\n) =>\n  findTwitchEmoteByIdInSets(id, twitchGlobal) ||\n  findTwitchEmoteByIdInSets(id, twitchUser);\n\nconst findBttvEmoteById = (\n  id: string,\n  { bttvGlobal, bttvChannel }: NonNullable<StateEmotes>,\n) => {\n  const findById = R.find<api.BttvGlobalEmote | api.BttvChannelEmote>(\n    R.propEq('id', id),\n  );\n  const result = findById(bttvGlobal) || findById(bttvChannel);\n\n  return result ? htmlEntity.createBttvEmote(result) : null;\n};\n\nconst findFfzEmoteById = (\n  id: number,\n  { ffzGlobal, ffzChannel }: NonNullable<StateEmotes>,\n) => {\n  const findById = R.find<api.FfzEmote>(R.propEq('id', id));\n  const result = findById(ffzGlobal) || findById(ffzChannel);\n\n  return result ? htmlEntity.createFfzEmote(result) : null;\n};\n\n// by name\n\nconst regexMap: Record<number, string> = {\n  4: '>\\\\(', // '\\\\&gt\\\\;\\\\('\n  9: '<3', // '\\\\&lt\\\\;3'\n};\n\nconst findTwitchEmoteByNameInSets = (\n  name: string,\n  sets: Record<string, api.TwitchEmote[]>,\n) => {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const set of Object.values(sets)) {\n    const result = R.find(({ id, code }) => {\n      // 1-14 - match by regex\n      if (id >= 1 && id <= 14) {\n        const regexString = regexMap[id] || code;\n        return RegExp(`^${regexString}$`).test(name);\n      }\n\n      return name === code;\n    }, set);\n\n    if (result) return htmlEntity.createTwitchEmote(result);\n  }\n\n  return null;\n};\n\nconst findTwitchEmoteByName = (\n  name: string,\n  { twitchGlobal, twitchUser }: NonNullable<StateEmotes>,\n) =>\n  findTwitchEmoteByNameInSets(name, twitchGlobal) ||\n  findTwitchEmoteByNameInSets(name, twitchUser);\n\nconst findBttvEmoteByName = (\n  name: string,\n  { bttvGlobal, bttvChannel }: NonNullable<StateEmotes>,\n) => {\n  const findByName = R.find<api.BttvGlobalEmote | api.BttvChannelEmote>(\n    R.propEq('code', name),\n  );\n  const result = findByName(bttvGlobal) || findByName(bttvChannel);\n\n  return result ? htmlEntity.createBttvEmote(result) : null;\n};\n\nconst findFfzEmoteByName = (\n  name: string,\n  { ffzGlobal, ffzChannel }: NonNullable<StateEmotes>,\n) => {\n  const findByName = R.find<api.FfzEmote>(R.propEq('name', name));\n  const result = findByName(ffzGlobal) || findByName(ffzChannel);\n\n  return result ? htmlEntity.createFfzEmote(result) : null;\n};\n\n// by text\n\n/* eslint-disable no-restricted-syntax */\nconst findTwitchEmotesByText = (\n  result: EmotesByText,\n  sets: Record<string, api.TwitchEmote[]>,\n  text: string,\n  limit: number,\n): boolean => {\n  for (const items of Object.values(sets)) {\n    for (const emote of items) {\n      if (result.begins.length + result.contains.length === limit) return true;\n\n      const index = emote.code.toLowerCase().indexOf(text);\n\n      if (index !== -1) {\n        const type = index === 0 ? 'begins' : 'contains';\n\n        result[type].push(htmlEntity.createTwitchEmote(emote));\n      }\n    }\n  }\n\n  return false;\n};\n\nconst findBttvEmotesByText = (\n  result: EmotesByText,\n  bttv: api.BttvGlobalEmote[] | api.BttvChannelEmote[],\n  text: string,\n  limit: number,\n): boolean => {\n  for (const emote of bttv) {\n    if (result.begins.length + result.contains.length === limit) return true;\n\n    const index = emote.code.toLowerCase().indexOf(text);\n\n    if (index !== -1) {\n      const type = index === 0 ? 'begins' : 'contains';\n\n      result[type].push(htmlEntity.createBttvEmote(emote));\n    }\n  }\n\n  return false;\n};\n\nconst findFfzEmotesByText = (\n  result: EmotesByText,\n  ffz: api.FfzEmote[],\n  text: string,\n  limit: number,\n): boolean => {\n  for (const emote of ffz) {\n    if (result.begins.length + result.contains.length === limit) return true;\n\n    const index = emote.name.toLowerCase().indexOf(text);\n\n    if (index !== -1) {\n      const type = index === 0 ? 'begins' : 'contains';\n\n      result[type].push(htmlEntity.createFfzEmote(emote));\n    }\n  }\n\n  return false;\n};\n/* eslint-enable no-restricted-syntax */\n\nconst findEmote = {\n  twitch: {\n    byId: findTwitchEmoteById,\n    byName: findTwitchEmoteByName,\n    byText: findTwitchEmotesByText,\n  },\n  bttv: {\n    byId: findBttvEmoteById,\n    byName: findBttvEmoteByName,\n    byText: findBttvEmotesByText,\n  },\n  ffz: {\n    byId: findFfzEmoteById,\n    byName: findFfzEmoteByName,\n    byText: findFfzEmotesByText,\n  },\n};\n\nexport default findEmote;\n","import {\n  TWITCH_API_AUTH_BASE,\n  TWITCH_API_CLIENT_ID,\n  TWITCH_API_REDIRECT_URI,\n  LS_USER,\n} from 'utils/constants';\n\ntype StoredUser = {\n  id: string;\n  login: string;\n};\n\n/* eslint-disable @typescript-eslint/camelcase */\nconst authParams = {\n  client_id: TWITCH_API_CLIENT_ID,\n  redirect_uri: TWITCH_API_REDIRECT_URI,\n  response_type: 'token+id_token',\n  scope: [\n    'openid',\n    'channel:moderate',\n    'chat:edit',\n    'chat:read',\n    'whispers:read',\n    'whispers:edit',\n    'user_blocks_read',\n    'user_blocks_edit',\n    'user_subscriptions',\n  ].join('+'),\n  claims: JSON.stringify({\n    id_token: { email_verified: null, picture: null, preferred_username: null },\n  }),\n  // TODO:\n  // state: uid(),\n};\n/* eslint-enable @typescript-eslint/camelcase */\n\nexport const getAuthUrl = (): string => {\n  const search = Object.entries(authParams)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n\n  return `${TWITCH_API_AUTH_BASE}?${search}`;\n};\n\nexport const isAuthRedirect = (hash: string): boolean =>\n  hash.startsWith('#access_token=');\n\nexport const writeUserToLocatStorage = (user: StoredUser): void => {\n  localStorage.setItem(LS_USER, JSON.stringify(user));\n};\n\nexport const readUserFromLocatStorage = (): StoredUser | null => {\n  let user;\n\n  try {\n    user = JSON.parse(localStorage.getItem(LS_USER) as string);\n  } catch (e) {\n    user = null;\n  }\n\n  if (!user || !user.id || !user.login) return null;\n\n  return user as StoredUser;\n};\n","import { RootState } from 'app/rootReducer';\n\ntype OptionItem = {\n  type: 'switch' | 'input';\n  id: string;\n  name: string;\n  title: string;\n  description: string;\n  value: boolean | string;\n};\n\ntype OptionCategories = {\n  title: string;\n  items: OptionItem[];\n};\n\nexport const optionsSelector = (state: RootState): OptionCategories[] => [\n  {\n    title: 'My preferences',\n    items: [\n      {\n        type: 'switch',\n        id: 'show-timestamps',\n        name: 'showTimestamps',\n        title: 'Show Timestamps',\n        description: '',\n        value: state.options.showTimestamps,\n      },\n      {\n        type: 'switch',\n        id: 'split-chat',\n        name: 'splitChat',\n        title: 'Split Chat',\n        description: '',\n        value: state.options.splitChat,\n      },\n      {\n        type: 'switch',\n        id: 'fixed-width',\n        name: 'fixedWidth',\n        title: 'Fixed Width',\n        description: '',\n        value: state.options.fixedWidth,\n      },\n      {\n        type: 'switch',\n        id: 'highlight-notifications',\n        name: 'highlightNotifications',\n        title: 'Highlight Notifications',\n        description: 'Plays a sound for messages directed at you',\n        value: state.options.highlightNotifications,\n      },\n      // {\n      //   type: 'input',\n      //   id: 'blacklist-keywords',\n      //   name: 'blacklistKeywords',\n      //   title: 'Set Blacklist Keywords',\n      //   description: '',\n      //   value: state.options.blacklistKeywords,\n      // },\n      // {\n      //   type: 'input',\n      //   id: 'highlight-keywords',\n      //   name: 'highlightKeywords',\n      //   title: 'Set Highlight Keywords',\n      //   description: '',\n      //   value: state.options.highlightKeywords,\n      // },\n    ],\n  },\n];\n\nexport const isShowTimestampsSelector = (state: RootState) =>\n  state.options.showTimestamps;\n\nexport const isSplitChatSelector = (state: RootState) =>\n  state.options.splitChat;\n\nexport const isFixedWidthSelector = (state: RootState) =>\n  state.options.fixedWidth;\n\nexport const isHighlightNotificationsSelector = (state: RootState) =>\n  state.options.highlightNotifications;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport jwt from 'jsonwebtoken';\n\nimport {\n  isAuthReadySelector,\n  initializeAuth,\n  fetchUser,\n} from 'features/auth/authSlice';\nimport { readUserFromLocatStorage } from 'features/auth/authUtils';\n\nconst useInitializeAuth = () => {\n  const dispatch = useDispatch();\n  const isAuthReady = useSelector(isAuthReadySelector);\n\n  useEffect(() => {\n    if (isAuthReady) return;\n\n    const { idToken } = localStorage;\n    const user = readUserFromLocatStorage();\n\n    if (!idToken) {\n      dispatch(initializeAuth({ isAuth: false }));\n      return;\n    }\n\n    if (user) {\n      const { id, login } = user;\n      const params = { isAuth: true, userId: id, userLogin: login };\n\n      dispatch(initializeAuth(params));\n    } else {\n      const jwtData = jwt.decode(idToken);\n\n      if (jwtData) {\n        dispatch(fetchUser(jwtData.sub));\n      } else {\n        dispatch(initializeAuth({ isAuth: false }));\n      }\n    }\n  }, [dispatch, isAuthReady]);\n};\n\nexport default useInitializeAuth;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  isAuthReadySelector,\n  isAuthSelector,\n  userIdSelector,\n  userLoginSelector,\n} from 'features/auth/authSlice';\nimport {\n  currentChannelSelector,\n  currentChannelIdSelector,\n  isHistoryAddedSelector,\n  isHistoryLoadedSelector,\n  isTwitchEmotesLoadedSelector,\n  isBttvGlobalEmotesLoadedSelector,\n  isBttvChannelEmotesLoadedSelector,\n  isFfzGlobalEmotesLoadedSelector,\n  isFfzChannelEmotesLoadedSelector,\n  isGlobalBadgesLoadedSelector,\n  isChannelBadgesLoadedSelector,\n  isBlockedUsersLoadedSelector,\n} from 'features/chat/selectors';\nimport {\n  addChatHistory,\n  fetchChatHistory,\n  fetchTwitchEmotes,\n  fetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes,\n  fetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes,\n  fetchChannelBadges,\n  fetchGlobalBadges,\n  fetchBlockedUsers,\n} from 'features/chat/slice';\n\nconst useFetchChatData = () => {\n  const dispatch = useDispatch();\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n  const userId = useSelector(userIdSelector);\n  const userLogin = useSelector(userLoginSelector);\n  const currentChannel = useSelector(currentChannelSelector);\n  const currentChannelId = useSelector(currentChannelIdSelector);\n\n  const isTwitchEmotesLoaded = useSelector(isTwitchEmotesLoadedSelector);\n  const isBttvGlobalEmotesLoaded = useSelector(\n    isBttvGlobalEmotesLoadedSelector,\n  );\n  const isBttvChannelEmotesLoaded = useSelector(\n    isBttvChannelEmotesLoadedSelector,\n  );\n  const isFfzGlobalEmotesLoaded = useSelector(isFfzGlobalEmotesLoadedSelector);\n  const isFfzChannelEmotesLoaded = useSelector(\n    isFfzChannelEmotesLoadedSelector,\n  );\n  const isGlobalBadgesLoaded = useSelector(isGlobalBadgesLoadedSelector);\n  const isChannelBadgesLoaded = useSelector(isChannelBadgesLoadedSelector);\n  const isHistoryLoaded = useSelector(isHistoryLoadedSelector);\n  const isBlockedUsersLoaded = useSelector(isBlockedUsersLoadedSelector);\n  const isHistoryAdded = useSelector(isHistoryAddedSelector);\n\n  const isReadyToAddHistory =\n    isAuthReady &&\n    currentChannel &&\n    !isHistoryAdded &&\n    (isAuth ? isTwitchEmotesLoaded : true) &&\n    (isAuth ? isBlockedUsersLoaded : true) &&\n    (isAuth ? !!userLogin : true) &&\n    isBttvGlobalEmotesLoaded &&\n    isBttvChannelEmotesLoaded &&\n    isFfzGlobalEmotesLoaded &&\n    isFfzChannelEmotesLoaded &&\n    isGlobalBadgesLoaded &&\n    isChannelBadgesLoaded &&\n    isHistoryLoaded;\n\n  useEffect(() => {\n    dispatch(fetchBttvGlobalEmotes());\n    dispatch(fetchFfzGlobalEmotes());\n    dispatch(fetchGlobalBadges());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (isReadyToAddHistory) {\n      dispatch(addChatHistory({ channel: currentChannel, userLogin }));\n    }\n  }, [dispatch, currentChannel, isReadyToAddHistory, userLogin]);\n\n  useEffect(() => {\n    if (!isHistoryAdded && currentChannel) {\n      dispatch(fetchChatHistory(currentChannel));\n    }\n  }, [dispatch, currentChannel, isHistoryAdded]);\n\n  useEffect(() => {\n    if (isAuthReady && isAuth && userId) {\n      dispatch(fetchTwitchEmotes(userId));\n      dispatch(fetchBlockedUsers(userId));\n    }\n  }, [dispatch, isAuthReady, isAuth, userId]);\n\n  // TODO: check if emotes and badges is already in the store\n\n  useEffect(() => {\n    if (currentChannel && currentChannelId) {\n      const params = {\n        channel: currentChannel,\n        channelId: currentChannelId,\n      };\n\n      dispatch(fetchBttvChannelEmotes(params));\n      dispatch(fetchFfzChannelEmotes(params));\n      dispatch(fetchChannelBadges(params));\n    }\n  }, [dispatch, currentChannel, currentChannelId]);\n};\n\nexport default useFetchChatData;\n","import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { LS_LAST_CHANNEL } from 'utils/constants';\r\nimport { updateCurrentChannel } from 'features/chat/slice';\r\n\r\n// TODO: remove lastChannel if can't connect to the channel\r\n\r\nconst useCurrentChannel = () => {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const { hash } = history.location;\r\n\r\n  useEffect(() => {\r\n    if (hash && hash.length > 1) {\r\n      const channel = hash.slice(1);\r\n\r\n      dispatch(updateCurrentChannel(channel));\r\n\r\n      localStorage.setItem(LS_LAST_CHANNEL, channel);\r\n\r\n      document.title = channel\r\n        ? `#${channel} - ${process.env.REACT_APP_NAME} `\r\n        : (process.env.REACT_APP_NAME as string);\r\n\r\n      return;\r\n    }\r\n\r\n    const lastChannel = localStorage.getItem(LS_LAST_CHANNEL);\r\n\r\n    if (lastChannel) {\r\n      history.push({ pathname: '/chat/', hash: lastChannel });\r\n\r\n      dispatch(updateCurrentChannel(lastChannel));\r\n    } else {\r\n      dispatch(updateCurrentChannel(''));\r\n    }\r\n  }, [dispatch, history, hash]);\r\n};\r\n\r\nexport default useCurrentChannel;\r\n","import { useEffect, useRef } from 'react';\n\nconst usePrevious = <T>(state: T): T | undefined => {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = state;\n  });\n\n  return ref.current;\n};\n\nexport default usePrevious;\n","import { lib as emojilib } from 'emojilib';\n\nconst replaceEmojis = (text: string): string =>\n  text\n    .split(' ')\n    .map((word: string) => {\n      if (word[0] !== ':' || word[word.length - 1] !== ':') {\n        return word;\n      }\n\n      const name = word.slice(1, -1);\n      const emoji = emojilib[name];\n\n      return emoji && emoji.char ? emoji.char : word;\n    })\n    .join(' ');\n\nexport default replaceEmojis;\n","import { useEffect, useRef, useMemo, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport * as twitchIrc from 'twitch-simple-irc';\nimport useSound from 'use-sound';\n\nimport usePrevious from 'hooks/usePrevious';\nimport { NOTICE_MESSAGE_TAGS, LS_ACCESS_TOKEN } from 'utils/constants';\nimport {\n  addMessage,\n  clearChat,\n  updateIsConnected,\n  updateGlobalUserParams,\n  updateUserParams,\n  updateRoomParams,\n} from 'features/chat/slice';\nimport {\n  currentChannelSelector,\n  isConnectedSelector,\n  blockedUsersSelector,\n} from 'features/chat/selectors';\nimport replaceEmojis from 'features/chat/utils/replaceEmojis';\nimport checkIsMenction from 'features/chat/utils/checkIsMention';\nimport {\n  isAuthSelector,\n  isAuthReadySelector,\n  userLoginSelector,\n  invalidateAuth,\n} from 'features/auth/authSlice';\nimport { readUserFromLocatStorage } from 'features/auth/authUtils';\nimport { isHighlightNotificationsSelector } from 'features/options/optionsSelectors';\n\nimport tinkSfx from 'features/chat/assets/ts-tink.ogg';\n\nconst useTwitchClient = () => {\n  const dispatch = useDispatch();\n  const [playTink] = useSound(tinkSfx);\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n  const userLogin = useSelector(userLoginSelector);\n  const isConnected = useSelector(isConnectedSelector);\n  const currentChannel = useSelector(currentChannelSelector);\n  const prevChannel = usePrevious(currentChannel);\n  const clientRef = useRef<twitchIrc.Client | null>(null);\n\n  const blockedUsers = useSelector(blockedUsersSelector);\n  const isHighlightNotifications = useSelector(\n    isHighlightNotificationsSelector,\n  );\n\n  const registerEventsParamsRef = useRef({\n    userLogin,\n    isHighlightNotifications,\n    playTink,\n    blockedUsers,\n  });\n\n  registerEventsParamsRef.current = {\n    userLogin,\n    isHighlightNotifications,\n    playTink,\n    blockedUsers,\n  };\n\n  const registerEvents = useCallback(\n    (client: typeof clientRef) => {\n      if (!client.current) return;\n\n      const handleRegister = () => dispatch(updateIsConnected(true));\n\n      const handleDisconnect = () => dispatch(updateIsConnected(false));\n\n      const handleGlobalUserState = (data: twitchIrc.GlobalUserStateEvent) =>\n        dispatch(updateGlobalUserParams(data));\n\n      const handleUserState = (data: twitchIrc.UserStateEvent) =>\n        dispatch(updateUserParams(data));\n\n      const handleRoomState = (data: twitchIrc.RoomStateEvent) =>\n        dispatch(updateRoomParams(data));\n\n      const handleMessage = (message: twitchIrc.MessageEvent) => {\n        const isBlockedUser = registerEventsParamsRef.current.blockedUsers.includes(\n          message.user,\n        );\n\n        if (isBlockedUser) return;\n\n        const isMention = checkIsMenction(\n          registerEventsParamsRef.current.userLogin,\n          message.user,\n          message.message,\n        );\n\n        if (\n          registerEventsParamsRef.current.isHighlightNotifications &&\n          isMention\n        ) {\n          registerEventsParamsRef.current.playTink();\n        }\n\n        dispatch(addMessage({ type: 'message', message, isMention }));\n      };\n\n      const handleNotice = (message: twitchIrc.NoticeEvent) => {\n        if (\n          client.current &&\n          message.message === 'Login authentication failed'\n        ) {\n          dispatch(invalidateAuth());\n          client.current.disconnect();\n          // eslint-disable-next-line no-param-reassign\n          client.current = null;\n          return;\n        }\n\n        dispatch(addMessage({ type: 'notice', message, id: nanoid() }));\n      };\n\n      const handleUserNotice = (message: twitchIrc.UserNoticeEvent) =>\n        dispatch(addMessage({ type: 'user-notice', message }));\n\n      const handleClearChat = (data: twitchIrc.ClearChatEvent) => {\n        if (!data.tags.targetUserId) return;\n        dispatch(clearChat(data));\n      };\n\n      client.current.on('register', handleRegister);\n      client.current.on('disconnect', handleDisconnect);\n      client.current.on('globaluserstate', handleGlobalUserState);\n      client.current.on('userstate', handleUserState);\n      client.current.on('roomstate', handleRoomState);\n      client.current.on('message', handleMessage);\n      client.current.on('notice', handleNotice);\n      client.current.on('usernotice', handleUserNotice);\n      client.current.on('clearchat', handleClearChat);\n    },\n    [dispatch],\n  );\n\n  useEffect(() => {\n    return () => {\n      if (clientRef.current) {\n        clientRef.current.disconnect();\n        clientRef.current = null;\n      }\n    };\n  }, [clientRef]);\n\n  useEffect(() => {\n    if (!currentChannel || !isAuthReady) return;\n\n    if (!clientRef.current) {\n      const options = isAuth\n        ? {\n            name: userLogin as string,\n            auth: localStorage.getItem(LS_ACCESS_TOKEN) as string,\n          }\n        : null;\n\n      (async () => {\n        clientRef.current = new twitchIrc.Client(options);\n\n        registerEvents(clientRef);\n\n        await clientRef.current.connect();\n\n        clientRef.current.join(currentChannel);\n      })();\n\n      return;\n    }\n\n    if (prevChannel && prevChannel !== currentChannel) {\n      clientRef.current.part(prevChannel);\n      clientRef.current.join(currentChannel);\n    }\n  }, [\n    dispatch,\n    registerEvents,\n    isAuth,\n    isAuthReady,\n    isConnected,\n    userLogin,\n    currentChannel,\n    prevChannel,\n  ]);\n\n  const client = () => ({\n    say(channel: string, message: string) {\n      if (!clientRef.current || !message.trim()) return;\n\n      const normalizedMessage = replaceEmojis(message.trim());\n\n      clientRef.current.say(channel, normalizedMessage);\n\n      function handleUserState(data: twitchIrc.UserStateEvent) {\n        if (data.channel === channel) {\n          const user = readUserFromLocatStorage();\n\n          const ownMessage = {\n            message: normalizedMessage,\n            channel,\n            tags: data.tags,\n            userId: user?.id,\n            userLogin: user?.login,\n          };\n\n          dispatch(addMessage({ type: 'own-message', message: ownMessage }));\n\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          removeListeners();\n        }\n      }\n\n      function handleNotice(data: twitchIrc.NoticeEvent) {\n        if (\n          data.channel === channel &&\n          NOTICE_MESSAGE_TAGS.includes(data.tags.msgId)\n        ) {\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          removeListeners();\n        }\n      }\n\n      function removeListeners() {\n        if (!clientRef.current) return;\n\n        clientRef.current.off('notice', handleNotice);\n        clientRef.current.off('userstate', handleUserState);\n      }\n\n      clientRef.current.on('notice', handleNotice);\n      clientRef.current.on('userstate', handleUserState);\n\n      setTimeout(() => removeListeners(), 10000);\n    },\n  });\n\n  return useMemo(client, [clientRef, dispatch]);\n};\n\nexport default useTwitchClient;\n","import { useCallback, useState } from 'react';\n\nconst useSetState = <T extends object>(\n  initialState: T = {} as T,\n): [T, (patch: Partial<T> | ((prevState: T) => Partial<T>)) => void] => {\n  const [state, set] = useState<T>(initialState);\n  const setState = useCallback(\n    (patch) => {\n      set((prevState) => ({\n        ...prevState,\n        ...(patch instanceof Function ? patch(prevState) : patch),\n      }));\n    },\n    [set],\n  );\n\n  return [state, setState];\n};\n\nexport default useSetState;\n","const getUsersByBeginText = (\n  beginText: string,\n  users: string[],\n  limit = 5,\n): string[] => {\n  const result = [];\n  const beginTextLower = beginText.toLowerCase();\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const name of users) {\n    if (result.length === limit) return result;\n\n    const nameLower = name.toLowerCase();\n\n    if (beginTextLower === '' || nameLower.startsWith(beginTextLower)) {\n      result.push(name);\n    }\n  }\n\n  return result;\n};\n\nexport default getUsersByBeginText;\n","import { useRef, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport useSetState from 'hooks/useSetState';\nimport { SUGGESTION_TYPES } from 'utils/constants';\nimport getUsersByBeginText from 'features/chat/utils/getUsersByBeginText';\nimport getEmotesByText from 'features/chat/utils/getEmotesByText';\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\nimport { usersSelector, emotesSelector } from 'features/chat/selectors';\n\ninterface ASuggestions {\n  isActive: boolean;\n  activeIndex: number;\n  start: number;\n  end: number;\n}\ninterface UserSuggestions extends ASuggestions {\n  type: 'users';\n  items: string[];\n}\ninterface EmoteSuggestions extends ASuggestions {\n  type: 'emotes';\n  items: htmlEntity.Emote[];\n}\nexport type SuggestionsState = UserSuggestions | EmoteSuggestions;\n\nconst suggestionsInitialState: SuggestionsState = {\n  type: 'users',\n  isActive: false,\n  items: [],\n  activeIndex: 0,\n  start: 0,\n  end: 0,\n};\n\nconst setSuggestionsIndexUp = ({\n  activeIndex,\n  items,\n  ...rest\n}: SuggestionsState) =>\n  ({\n    activeIndex: activeIndex === 0 ? items.length - 1 : activeIndex - 1,\n    items,\n    ...rest,\n  } as SuggestionsState);\n\nconst setSuggestionsIndexDown = ({\n  activeIndex,\n  items,\n  ...rest\n}: SuggestionsState) =>\n  ({\n    activeIndex: activeIndex === items.length - 1 ? 0 : activeIndex + 1,\n    items,\n    ...rest,\n  } as SuggestionsState);\n\nconst replaceSuggestionText = (\n  text: string,\n  { type, items, activeIndex, start, end }: SuggestionsState,\n) => {\n  if (items.length === 0) return text;\n\n  const currentItem = items[activeIndex];\n  const insertedText =\n    type === 'users'\n      ? `@${currentItem}`\n      : (currentItem as htmlEntity.Emote).alt;\n\n  const textBefore = text.substring(0, start);\n  const testAfter = text.substring(end) || ' ';\n\n  return `${textBefore}${insertedText}${testAfter}`;\n};\n\nconst useChatInput = (\n  setText: (value: React.SetStateAction<string>) => void,\n  onSendMessage: () => void,\n  chatInputRef: React.RefObject<HTMLElement>,\n) => {\n  const [suggestions, setSuggestions] = useSetState<SuggestionsState>(\n    suggestionsInitialState,\n  );\n\n  const emotes = useSelector(emotesSelector);\n  const users = useSelector(usersSelector);\n\n  const usersRef = useRef(users);\n  usersRef.current = users;\n  const emotesRef = useRef(emotes);\n  emotesRef.current = emotes;\n  const suggestionsRef = useRef(suggestions);\n  suggestionsRef.current = suggestions;\n\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      const { value, selectionStart } = e.target;\n\n      setText(value);\n\n      const spaceIndexBefore = value.lastIndexOf(' ', selectionStart - 1);\n      const spaceIndexAfter = value.indexOf(' ', selectionStart);\n\n      const start = spaceIndexBefore === -1 ? 0 : spaceIndexBefore + 1;\n      const end = spaceIndexAfter === -1 ? value.length : spaceIndexAfter;\n\n      const word = value.substring(start, end);\n\n      const usersMatch = SUGGESTION_TYPES.users.regex.exec(word);\n\n      if (usersMatch) {\n        const [, beginText] = usersMatch;\n        const items = getUsersByBeginText(\n          beginText,\n          usersRef.current,\n          SUGGESTION_TYPES.users.limit,\n        );\n\n        setSuggestions({\n          type: 'users',\n          isActive: true,\n          items,\n          activeIndex: 0,\n          start,\n          end,\n        });\n\n        return;\n      }\n\n      const emotesMatch = SUGGESTION_TYPES.emotes.regex.exec(word);\n\n      if (emotesMatch && emotesRef.current) {\n        const [, text] = emotesMatch;\n        const items = getEmotesByText(\n          text,\n          emotesRef.current,\n          SUGGESTION_TYPES.emotes.limit,\n        );\n\n        setSuggestions({\n          type: 'emotes',\n          isActive: true,\n          items,\n          activeIndex: 0,\n          start,\n          end,\n        });\n\n        return;\n      }\n\n      if (suggestionsRef.current.isActive) {\n        setSuggestions(suggestionsInitialState);\n      }\n    },\n    [setText, setSuggestions, suggestionsRef],\n  );\n\n  const handleKeyUp = useCallback(\n    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {},\n    [],\n  );\n\n  const handleKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n      if (suggestionsRef.current.isActive) {\n        if (e.key === 'Enter' || e.key === 'Tab') {\n          e.preventDefault();\n          setText((t) => replaceSuggestionText(t, suggestionsRef.current));\n          setSuggestions(suggestionsInitialState);\n\n          return;\n        }\n\n        if (e.key === 'ArrowUp') {\n          e.preventDefault();\n          setSuggestions(setSuggestionsIndexUp);\n          return;\n        }\n\n        if (e.key === 'ArrowDown') {\n          e.preventDefault();\n          setSuggestions(setSuggestionsIndexDown);\n          return;\n        }\n\n        if (e.key === 'Escape') {\n          setSuggestions({ isActive: false });\n          return;\n        }\n      }\n\n      if (!suggestionsRef.current.isActive) {\n        if (e.key === 'Enter') {\n          e.preventDefault();\n          onSendMessage();\n        }\n      }\n    },\n    [onSendMessage, setText, setSuggestions, suggestionsRef],\n  );\n\n  const handleSuggestionMouseEnter = useCallback(\n    (activeIndex: number) => setSuggestions({ activeIndex }),\n    [setSuggestions],\n  );\n\n  const handleSuggestionClick = useCallback(\n    (activeIndex: number) => {\n      setText((t) =>\n        replaceSuggestionText(t, { ...suggestionsRef.current, activeIndex }),\n      );\n\n      if (chatInputRef.current) {\n        chatInputRef.current.focus();\n      }\n\n      setSuggestions(suggestionsInitialState);\n    },\n    [setText, setSuggestions, chatInputRef],\n  );\n\n  const handleBlur = useCallback(() => {\n    setSuggestions({ isActive: false });\n  }, [setSuggestions]);\n\n  return {\n    suggestions,\n    handleChange,\n    handleKeyUp,\n    handleKeyDown,\n    handleBlur,\n    handleSuggestionMouseEnter,\n    handleSuggestionClick,\n  };\n};\n\nexport default useChatInput;\n","import { useEffect } from 'react';\nimport arePassiveEventsSupported from 'are-passive-events-supported';\nimport useLatest from 'use-latest';\n\nconst MOUSEDOWN = 'mousedown';\nconst TOUCHSTART = 'touchstart';\n\ntype HandledEvents = [typeof MOUSEDOWN, typeof TOUCHSTART];\ntype HandledEventsType = HandledEvents[number];\ntype PossibleEvent = {\n  [Type in HandledEventsType]: HTMLElementEventMap[Type];\n}[HandledEventsType];\ntype Handler = (event: PossibleEvent) => void;\n\nconst events: HandledEvents = [MOUSEDOWN, TOUCHSTART];\n\nconst arePassiveEvents = arePassiveEventsSupported();\n\nconst getOptions = (event: HandledEventsType) =>\n  event === MOUSEDOWN && arePassiveEvents ? { passive: true } : undefined;\n\nconst isContainsNode = (el: HTMLElement | null, node: Node) =>\n  el && el.contains(node);\n\nconst useOnClickOutside = (\n  ref:\n    | React.RefObject<HTMLElement>\n    | React.RefObject<React.RefObject<HTMLElement>[]>,\n  handler: Handler | null,\n) => {\n  const handlerRef = useLatest(handler);\n\n  useEffect(() => {\n    if (!handler) {\n      return;\n    }\n\n    const listener = (event: PossibleEvent) => {\n      if (!ref.current || !handlerRef.current) return;\n\n      const isContains = Array.isArray(ref.current)\n        ? ref.current.some((r) =>\n            isContainsNode(r.current, event.target as Node),\n          )\n        : isContainsNode(ref.current, event.target as Node);\n\n      if (isContains) {\n        return;\n      }\n\n      handlerRef.current(event);\n    };\n\n    events.forEach((event) => {\n      document.addEventListener(event, listener, getOptions(event));\n    });\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      events.forEach((event) => {\n        document.removeEventListener(\n          event,\n          listener,\n          getOptions(event) as EventListenerOptions,\n        );\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [!handler]);\n};\n\nexport default useOnClickOutside;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M8.5 10L4 5.5 5.5 4 10 8.5 14.5 4 16 5.5 11.5 10l4.5 4.5-1.5 1.5-4.5-4.5L5.5 16 4 14.5 8.5 10z\"\n});\n\nconst SvgClose = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 20 20\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref);\n\nconst ForwardRef = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgClose, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/close.992b249e.svg\";\nexport { ForwardRef as ReactComponent };","import styled, { css } from 'styled-components';\n\nconst sizes = {\n  small: css`\n    width: 24px;\n    height: 24px;\n  `,\n  medium: css`\n    width: 30px;\n    height: 30px;\n  `,\n  // large: css``,\n};\n\nconst IconButton = styled.button.attrs({\n  type: 'button',\n})<{ size?: 'small' | 'medium' }>`\n  margin: 0;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: none;\n  border: none;\n  outline: none;\n  color: #fff;\n  border-radius: 4px;\n  cursor: pointer;\n\n  ${(p) => sizes[p.size || 'medium']};\n\n  &:hover,\n  &:focus {\n    background-color: rgba(255, 255, 255, 0.15);\n  }\n\n  &:active {\n    background-color: rgba(255, 255, 255, 0.2);\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n`;\n\nexport default IconButton;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { ReactComponent as CloseIconSvg } from 'icons/close.svg';\nimport IconButton from 'components/IconButton';\n\nconst ChatModalRoot = styled.div`\n  height: 100%;\n  box-shadow: rgba(0, 0, 0, 0.4) 0px 4px 8px 0px,\n    rgba(0, 0, 0, 0.4) 0px 0px 4px 0px;\n  background-color: #18181b;\n  white-space: normal;\n  color: #fff;\n  border-radius: 4px;\n`;\nconst CloseButton = styled(IconButton).attrs({ size: 'small' })`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n`;\nconst CloseIcon = styled(CloseIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  children: React.ReactNode;\n  onClose: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n};\n\nconst ChatModal = ({ children, onClose }: Props) => (\n  <ChatModalRoot>\n    <CloseButton onClick={onClose}>\n      <CloseIcon />\n    </CloseButton>\n    {children}\n  </ChatModalRoot>\n);\n\nexport default ChatModal;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"currentColor\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M7 11a1 1 0 100-2 1 1 0 000 2zm7-1a1 1 0 11-2 0 1 1 0 012 0zm-4 4a2 2 0 002-2H8a2 2 0 002 2z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-2 0a6 6 0 11-12 0 6 6 0 0112 0z\",\n  clipRule: \"evenodd\"\n}));\n\nconst SvgSmileyFace = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 20 20\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref);\n\nconst ForwardRef = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgSmileyFace, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/smiley-face.1cc055ed.svg\";\nexport { ForwardRef as ReactComponent };","import CustomScrollbar from 'react-scrollbars-custom';\nimport styled from 'styled-components';\n\nconst Scrollbar = styled(CustomScrollbar).attrs({\n  disableTracksWidthCompensation: true,\n})`\n  overflow-y: auto;\n\n  .ScrollbarsCustom-Content {\n    padding: 0 !important;\n  }\n\n  .ScrollbarsCustom-TrackY {\n    background: none !important;\n  }\n\n  .ScrollbarsCustom-ThumbY {\n    margin-left: auto;\n    margin-right: auto;\n    width: 6px !important;\n  }\n`;\n\nexport default Scrollbar;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  fillRule: \"evenodd\",\n  d: \"M13.192 14.606a7 7 0 111.414-1.414l3.101 3.1-1.414 1.415-3.1-3.1zM14 9A5 5 0 114 9a5 5 0 0110 0z\",\n  clipRule: \"evenodd\"\n});\n\nconst SvgSearch = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 20 20\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref);\n\nconst ForwardRef = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgSearch, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/search.a2f0945f.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport type { RootState } from 'app/rootReducer';\nimport Scrollbar from 'components/Scrollbar';\nimport { emoteCategoriesSelector } from 'features/chat/selectors';\nimport type { EmoteCategory } from 'features/chat/utils/createEmoteCategories';\nimport { ReactComponent as SearchIconSvg } from 'icons/search.svg';\n\nconst EmotePickerRoot = styled.div`\n  padding-top: 30px;\n  padding-bottom: 16px;\n  height: 100%;\n`;\nconst Categories = styled.div`\n  height: calc(100% - 30px);\n`;\nconst Category = styled.div`\n  padding-top: 10px;\n  padding-right: 16px;\n  padding-left: 16px;\n\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding-bottom: 10px;\n  font-size: 12px;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst CategoryItems = styled.div``;\nconst Emote = styled.img`\n  padding: 2px;\n  width: 32px;\n  height: 32px;\n  object-fit: contain;\n\n  &:hover {\n    background-color: rgba(119, 44, 232, 0.2);\n    cursor: pointer;\n  }\n`;\nconst SearchBlock = styled.div`\n  position: relative;\n  padding: 0 16px;\n  color: #adadb8;\n`;\nconst SearchInput = styled.input`\n  padding-left: 30px;\n  padding-right: 10px;\n  width: 100%;\n  height: 30px;\n  color: #efeff1;\n  font-family: inherit;\n  line-height: 1.5;\n  background-clip: padding-box;\n  background-color: rgba(255, 255, 255, 0.15);\n  border: 2px solid rgba(255, 255, 255, 0.15);\n  outline: 0;\n  border-radius: 4px;\n  appearance: none;\n  transition: box-shadow 0.1s ease-in, border 0.1s ease-in,\n    background-color 0.1s ease-in;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n`;\nconst SearchIcon = styled(SearchIconSvg)`\n  position: absolute;\n  top: 50%;\n  left: 21px;\n  display: block;\n  width: 20px;\n  height: 20px;\n  transform: translateY(-50%);\n`;\n\ntype Props = {\n  onEmoteClick: (name: string) => void;\n};\n\nconst EmotePicker = ({ onEmoteClick }: Props) => {\n  const [search, setSearch] = useState('');\n  const searchInputRef = useRef<HTMLInputElement>(null);\n  const emoteCategories = useSelector((state: RootState) =>\n    emoteCategoriesSelector(state, search),\n  );\n\n  useEffect(() => {\n    if (searchInputRef.current) {\n      searchInputRef.current.focus();\n    }\n\n    return () => setSearch('');\n  }, []);\n\n  const renderCategory = ({ title, items }: EmoteCategory, key: number) => (\n    <Category key={key}>\n      {!!title && <CategoryHeader>{title}</CategoryHeader>}\n      <CategoryItems>\n        {items.map(({ alt, src, srcSet }) => (\n          <Emote\n            key={alt}\n            alt={alt}\n            src={src}\n            srcSet={srcSet}\n            onClick={() => onEmoteClick(alt)}\n          />\n        ))}\n      </CategoryItems>\n    </Category>\n  );\n\n  return (\n    <EmotePickerRoot>\n      <SearchBlock>\n        <SearchIcon />\n        <SearchInput\n          ref={searchInputRef}\n          placeholder=\"Search for Emotes\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n        />\n      </SearchBlock>\n      <Categories>\n        <Scrollbar>{emoteCategories.map(renderCategory)}</Scrollbar>\n      </Categories>\n    </EmotePickerRoot>\n  );\n};\n\nexport default EmotePicker;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\nimport TextareaAutosize, {\n  TextareaAutosizeProps,\n} from 'react-textarea-autosize';\nimport useOnClickOutside from 'hooks/useOnClickOutside';\n\nimport ChatModal from 'components/ChatModal';\nimport IconButton from 'components/IconButton';\nimport { ReactComponent as SmileyFaceIconSvg } from 'icons/smiley-face.svg';\nimport EmotePicker from 'features/chat/components/EmotePicker';\nimport { SuggestionsState } from 'features/chat/hooks/useChatInput';\nimport { isEmotesLoadedSelector } from 'features/chat/selectors';\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\n\nconst ChatInputRoot = styled.div`\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n  background-color: #18181b;\n\n  & > :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nconst ChatInputInner = styled.div`\n  position: relative;\n`;\nconst Suggestions = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 100%;\n  margin-left: -5px;\n  margin-bottom: -5px;\n  margin-right: -5px;\n  margin-bottom: 0;\n  padding-top: 10px;\n  padding-bottom: 5px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border: 1px solid rgba(255, 255, 255, 0.15);\n  border-bottom: none;\n  background-color: #18181b;\n  color: #fff;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n  /* box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15), 0 0px 2px rgba(0, 0, 0, 0.1); */\n`;\nconst SuggestionItem = styled.div<{ isActive: boolean }>`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border-radius: 2px;\n  background-color: ${(p) =>\n    p.isActive ? 'rgba(255, 255, 255, 0.15)' : 'transparent'};\n  cursor: pointer;\n`;\nconst SuggestionImage = styled.img`\n  margin-right: 8px;\n  width: 28px;\n  height: 28px;\n  object-fit: contain;\n`;\nconst TextareaInput = styled.div`\n  position: relative;\n`;\nconst TextareaWrapper = styled.div<{ isSuggestions: boolean }>`\n  ${(p) =>\n    p.isSuggestions &&\n    css`\n      margin-left: -5px;\n      margin-bottom: -5px;\n      margin-right: -5px;\n      padding: 5px;\n      border: 1px solid rgba(255, 255, 255, 0.15);\n      border-top: none;\n      border-bottom-left-radius: 6px;\n      border-bottom-right-radius: 6px;\n      /* box-shadow: 0 2px 3px -1px rgba(0, 0, 0, 0.1),\n        0 2px 2px -2px rgba(0, 0, 0, 0.02); */\n\n      & > ${TextareaInput} {\n        margin-left: -1px;\n        margin-bottom: -1px;\n        margin-right: -1px;\n      }\n    `};\n`;\nconst EmotesModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 0;\n  bottom: 100%;\n  margin-bottom: 8px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nconst Textarea = styled(TextareaAutosize)<{ $showScroll: boolean }>`\n  display: block;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  padding-left: 10px;\n  padding-right: 32px;\n  width: 100%;\n  height: 38px;\n  max-height: 91px;\n  min-height: 40px;\n  overflow-x: hidden;\n  overflow-y: ${(p) => (p.$showScroll ? 'auto' : 'hidden')};\n  border: 2px solid transparent;\n  background-color: rgba(255, 255, 255, 0.15);\n  font-family: inherit;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\nconst EmotesButton = styled(IconButton)`\n  position: absolute;\n  right: 5px;\n  bottom: 5px;\n`;\nconst SmileyFaceIcon = styled(SmileyFaceIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  text: string;\n  suggestions: SuggestionsState;\n  isDisabled: boolean;\n  onEmoteClick: (name: string) => void;\n  onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onKeyUp: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur: () => void;\n  onSuggestionMouseEnter: (index: number) => void;\n  onSuggestionClick: (index: number) => void;\n};\n\nconst ChatInput = React.forwardRef<HTMLTextAreaElement, Props>(\n  (\n    {\n      text,\n      suggestions,\n      isDisabled,\n      onEmoteClick,\n      onChange,\n      onKeyUp,\n      onKeyDown,\n      onBlur,\n      onSuggestionMouseEnter,\n      onSuggestionClick,\n    },\n    textareaRef,\n  ) => {\n    const chatInputRef = useRef(null);\n    const suggestionsRef = useRef<HTMLDivElement>(null);\n    const suggestionNodesRef = useRef([\n      textareaRef,\n      suggestionsRef,\n    ] as React.RefObject<HTMLElement>[]);\n\n    useOnClickOutside(suggestionNodesRef, () => onBlur());\n\n    const [isShowTextareaScroll, setIsShowTextareaScroll] = useState(false);\n    const [isEmotesModalVisible, setIsEmotesModalVisible] = useState(false);\n    const isEmotesLoaded = useSelector(isEmotesLoadedSelector);\n    const handleCloseEmotesModal = () => setIsEmotesModalVisible(false);\n\n    useOnClickOutside(chatInputRef, handleCloseEmotesModal);\n\n    const renderSuggestions = ({\n      type,\n      items,\n      activeIndex,\n    }: SuggestionsState) => {\n      const renderUser = (name: string, index: number) => (\n        <SuggestionItem\n          key={name}\n          isActive={index === activeIndex}\n          onMouseEnter={() => onSuggestionMouseEnter(index)}\n          onClick={() => onSuggestionClick(index)}\n        >\n          {name}\n        </SuggestionItem>\n      );\n\n      const renderEmote = (\n        { src, srcSet, alt }: htmlEntity.Emote,\n        index: number,\n      ) => (\n        <SuggestionItem\n          key={alt}\n          isActive={index === activeIndex}\n          onMouseEnter={() => onSuggestionMouseEnter(index)}\n          onClick={() => onSuggestionClick(index)}\n        >\n          <SuggestionImage src={src} srcSet={srcSet} alt={alt} />\n          {alt}\n        </SuggestionItem>\n      );\n\n      const renderItems = () =>\n        type === 'users'\n          ? (items as string[]).map(renderUser)\n          : (items as htmlEntity.Emote[]).map(renderEmote);\n\n      return (\n        <Suggestions ref={suggestionsRef}>\n          {items.length ? renderItems() : 'No matches'}\n        </Suggestions>\n      );\n    };\n\n    const renderEmotesButton = () => (\n      <EmotesButton\n        onClick={() => setIsEmotesModalVisible(!isEmotesModalVisible)}\n      >\n        <SmileyFaceIcon />\n      </EmotesButton>\n    );\n\n    const renderEmotesModal = () => (\n      <EmotesModal>\n        <ChatModal onClose={handleCloseEmotesModal}>\n          <EmotePicker onEmoteClick={onEmoteClick} />\n        </ChatModal>\n      </EmotesModal>\n    );\n\n    const handleHeightChange = (height: number) =>\n      setIsShowTextareaScroll(height >= 96);\n\n    return (\n      <ChatInputRoot ref={chatInputRef}>\n        <ChatInputInner>\n          {suggestions.isActive && renderSuggestions(suggestions)}\n          <TextareaWrapper isSuggestions={suggestions.isActive}>\n            <TextareaInput>\n              <Textarea\n                inputRef={textareaRef as TextareaAutosizeProps['inputRef']}\n                value={text}\n                placeholder=\"Send a message\"\n                maxLength={500}\n                maxRows={4}\n                disabled={isDisabled}\n                $showScroll={isShowTextareaScroll}\n                onChange={onChange}\n                onKeyUp={onKeyUp}\n                onKeyDown={onKeyDown}\n                onHeightChange={handleHeightChange}\n              />\n              {isEmotesLoaded && renderEmotesButton()}\n            </TextareaInput>\n          </TextareaWrapper>\n          {isEmotesModalVisible && renderEmotesModal()}\n        </ChatInputInner>\n      </ChatInputRoot>\n    );\n  },\n);\n\nexport default React.memo(ChatInput);\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"currentColor\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 8a2 2 0 100 4 2 2 0 000-4z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M9 2h2a2.01 2.01 0 001.235 1.855l.53.22a2.01 2.01 0 002.185-.439l1.414 1.414a2.01 2.01 0 00-.439 2.185l.22.53A2.01 2.01 0 0018 9v2a2.01 2.01 0 00-1.855 1.235l-.22.53a2.01 2.01 0 00.44 2.185l-1.415 1.414a2.01 2.01 0 00-2.184-.439l-.531.22A2.01 2.01 0 0011 18H9a2.01 2.01 0 00-1.235-1.854l-.53-.22a2.009 2.009 0 00-2.185.438L3.636 14.95a2.009 2.009 0 00.438-2.184l-.22-.531A2.01 2.01 0 002 11V9c.809 0 1.545-.487 1.854-1.235l.22-.53a2.009 2.009 0 00-.438-2.185L5.05 3.636a2.01 2.01 0 002.185.438l.53-.22A2.01 2.01 0 009 2zm-4 8l1.464 3.536L10 15l3.535-1.464L15 10l-1.465-3.536L10 5 6.464 6.464 5 10z\",\n  clipRule: \"evenodd\"\n}));\n\nconst SvgGears = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 20 20\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref);\n\nconst ForwardRef = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgGears, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/gears.5f76af43.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M13 8l-5 5v18h6v5l5-5h4l9-9V8z\"\n});\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#9147ff\",\n  d: \"M26 25l4-4V10H14v15h4v4l4-4z\"\n});\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M20 14h2v6h-2v-6zm7 0v6h-2v-6h2z\"\n});\n\nconst SvgTwitch = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 40 40\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref, _ref2, _ref3);\n\nconst ForwardRef = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgTwitch, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/twitch.75e6e194.svg\";\nexport { ForwardRef as ReactComponent };","import styled from 'styled-components';\n\nconst Button = styled.button.attrs({ type: 'button' })`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0 10px;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #9147ff;\n  outline: none;\n  font-size: 12px;\n  border-radius: 4px;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #772ce8;\n  }\n\n  &:active {\n    background-color: #5c16c5;\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n\n  &[disabled] {\n    background-color: rgba(255, 255, 255, 0.26);\n    color: rgba(255, 255, 255, 0.8);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst SwitchRoot = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  line-height: 20px;\n`;\nconst Label = styled.label`\n  content: '';\n  position: relative;\n  display: inline-block;\n  order: 0;\n  width: 35px;\n  height: 20px;\n  vertical-align: bottom;\n  border-radius: 10px/50%;\n  background-color: rgba(0, 0, 0, 0.3);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15), 0 0 2px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.1s ease;\n  cursor: pointer;\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    bottom: 2px;\n    display: block;\n    width: 16px;\n    border-radius: 50%;\n    background-color: #fff;\n    transition: left 0.1s ease;\n  }\n`;\nconst Input = styled.input.attrs({ type: 'checkbox' })`\n  position: absolute;\n  opacity: 0;\n\n  &:checked + ${Label} {\n    background-color: #9147ff;\n\n    &:after {\n      content: '';\n      top: 2px;\n      left: calc(100% - 18px);\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 9px;\n      left: 10px;\n      display: block;\n      height: 3px;\n      width: 7px;\n      border-bottom: 2px solid #fff;\n      border-left: 2px solid #fff;\n      transform: translate3d(-50%, -50%, 0) rotate(-45deg);\n    }\n  }\n`;\n\ntype Props = {\n  id: string;\n  label: string;\n  checked?: boolean;\n  readOnly?: boolean;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst Switch = ({ id, label, checked, readOnly, onChange }: Props) => (\n  <SwitchRoot>\n    <Input\n      id={id}\n      aria-label={label}\n      checked={checked}\n      readOnly={readOnly}\n      onChange={onChange}\n    />\n    <Label htmlFor={id} />\n  </SwitchRoot>\n);\n\nSwitch.defaultProps = {\n  checked: false,\n  readOnly: false,\n  onChange: () => {},\n};\n\nexport default Switch;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport Scrollbar from 'components/Scrollbar';\nimport Switch from 'components/Switch';\nimport {\n  userDisplayNameSelector,\n  userColorSelector,\n  userBadgesImagesSelector,\n} from 'features/chat/selectors';\nimport { isAuthSelector } from 'features/auth/authSlice';\nimport { changeChatOption } from 'features/options/optionsSlice';\nimport { optionsSelector } from 'features/options/optionsSelectors';\n\nconst OptionsRoot = styled.div`\n  padding: 16px;\n  height: 100%;\n`;\nconst Header = styled.h2`\n  margin: 0;\n  padding: 0;\n  font-size: 14px;\n  text-align: center;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst Categories = styled(Scrollbar)`\n  height: 100%;\n`;\nconst Category = styled.div`\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding: 8px 0;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst CategoryItems = styled.div``;\nconst Option = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 4px 0;\n  cursor: pointer;\n`;\nconst OptionText = styled.span``;\nconst Profile = styled.div`\n  display: flex;\n  align-items: center;\n`;\nconst UserName = styled.div`\n  font-weight: bold;\n  color: ${(p) => p.color};\n`;\nconst LogOutButton = styled(Link)`\n  margin-left: auto;\n  color: #bf94ff;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Badge = styled.img`\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst Options = () => {\n  const dispatch = useDispatch();\n  const options = useSelector(optionsSelector);\n\n  const isAuth = useSelector(isAuthSelector);\n\n  const userDisplayName = useSelector(userDisplayNameSelector);\n  const userColor = useSelector(userColorSelector);\n  const userBadgesImages = useSelector(userBadgesImagesSelector);\n\n  const renderOption = useCallback(\n    ({ id, name, title, description, value }) => (\n      <Option\n        key={id}\n        onClick={() => dispatch(changeChatOption({ name, value: !value }))}\n        title={description}\n      >\n        <OptionText>{title}</OptionText>\n        <Switch\n          id={id}\n          label={title}\n          checked={value}\n          onChange={() => dispatch(changeChatOption({ name, value }))}\n        />\n      </Option>\n    ),\n    [dispatch],\n  );\n\n  const renderProfileCategory = () => {\n    return (\n      <Category>\n        <CategoryHeader>Profile</CategoryHeader>\n        <CategoryItems>\n          <Profile>\n            {userBadgesImages.map(({ alt, label, src, srcSet }, key) => (\n              <Badge\n                // eslint-disable-next-line react/no-array-index-key\n                key={key}\n                alt={alt}\n                aria-label={label}\n                src={src}\n                srcSet={srcSet}\n              />\n            ))}\n            <UserName color={userColor}>{userDisplayName}</UserName>\n            <LogOutButton to=\"/chat/logout\">Log Out</LogOutButton>\n          </Profile>\n        </CategoryItems>\n      </Category>\n    );\n  };\n\n  const renderOptionsCategory = useCallback(\n    ({ title, items }, key) => (\n      <Category key={key}>\n        {!!title && <CategoryHeader>{title}</CategoryHeader>}\n        <CategoryItems>{items.map(renderOption)}</CategoryItems>\n      </Category>\n    ),\n    [renderOption],\n  );\n\n  return (\n    <OptionsRoot>\n      <Header>Chat settings</Header>\n      <Categories>\n        {isAuth && renderProfileCategory()}\n        {options.map(renderOptionsCategory)}\n      </Categories>\n    </OptionsRoot>\n  );\n};\n\nexport default Options;\n","import React, { useState, useRef } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport styled, { css } from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useOnClickOutside from 'hooks/useOnClickOutside';\r\nimport { ReactComponent as GearsIconSvg } from 'icons/gears.svg';\r\nimport { ReactComponent as TwitchIconSvg } from 'icons/twitch.svg';\r\nimport Button from 'components/Button';\r\nimport IconButton from 'components/IconButton';\r\nimport ChatModal from 'components/ChatModal';\r\nimport Options from 'features/options/Options';\r\nimport { isAuthSelector, isAuthReadySelector } from 'features/auth/authSlice';\r\n\r\nconst ChatControlsRoot = styled.div`\r\n  position: relative;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  padding-bottom: 10px;\r\n`;\r\nconst Controls = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  & > :not(:last-child) {\r\n    margin-right: 8px;\r\n  }\r\n`;\r\nconst OptionsModal = styled.div`\r\n  position: absolute;\r\n  top: auto;\r\n  right: 10px;\r\n  bottom: 100%;\r\n  margin-bottom: 10px;\r\n  width: 320px;\r\n  height: 405px;\r\n  min-width: 0;\r\n  white-space: nowrap;\r\n`;\r\nexport const buttonStyles = css`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 0 10px;\r\n  height: 30px;\r\n  border: none;\r\n  color: #fff;\r\n  background-color: #9147ff;\r\n  outline: none;\r\n  font-size: 12px;\r\n  border-radius: 4px;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: #772ce8;\r\n  }\r\n\r\n  &:active {\r\n    background-color: #5c16c5;\r\n  }\r\n\r\n  &:focus {\r\n    box-shadow: 0 0 6px 0 #772ce8;\r\n  }\r\n\r\n  &[disabled] {\r\n    background-color: rgba(255, 255, 255, 0.26);\r\n    color: rgba(255, 255, 255, 0.8);\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\nconst OptionsButton = styled(IconButton)`\r\n  margin-left: auto;\r\n`;\r\nconst GearsIcon = styled(GearsIconSvg)`\r\n  display: block;\r\n  width: 20px;\r\n  height: 20px;\r\n`;\r\nconst TwitchIcon = styled(TwitchIconSvg)`\r\n  display: block;\r\n  margin-right: 4px;\r\n  width: 20px;\r\n  height: 20px;\r\n`;\r\n\r\ntype Props = {\r\n  isDisabled: boolean;\r\n  onSendMessage: () => void;\r\n};\r\n\r\nconst ChatControls = ({ isDisabled, onSendMessage }: Props) => {\r\n  const [isOptionsModalVisible, setIsOptionsModalVisible] = useState(false);\r\n  const optionsModalRef = useRef(null);\r\n  const optionsButtonRef = useRef(null);\r\n  const optionsNodesRef = useRef([optionsModalRef, optionsButtonRef]);\r\n\r\n  const isAuthReady = useSelector(isAuthReadySelector);\r\n  const isAuth = useSelector(isAuthSelector);\r\n\r\n  const handleCloseOptionsModal = () => setIsOptionsModalVisible(false);\r\n  useOnClickOutside(optionsNodesRef, handleCloseOptionsModal);\r\n\r\n  const renderSignInButton = () => (\r\n    <Button as={Link} to=\"/chat/auth\">\r\n      <TwitchIcon />\r\n      Sign in with Twitch\r\n    </Button>\r\n  );\r\n\r\n  const renderOptionsModal = () => (\r\n    <OptionsModal ref={optionsModalRef}>\r\n      <ChatModal onClose={handleCloseOptionsModal}>\r\n        <Options />\r\n      </ChatModal>\r\n    </OptionsModal>\r\n  );\r\n\r\n  return (\r\n    <ChatControlsRoot>\r\n      <Controls>\r\n        {isAuthReady && !isAuth && renderSignInButton()}\r\n        <OptionsButton\r\n          ref={optionsButtonRef}\r\n          onClick={() => setIsOptionsModalVisible((prev) => !prev)}\r\n        >\r\n          <GearsIcon />\r\n        </OptionsButton>\r\n        <Button disabled={isDisabled} onClick={onSendMessage}>\r\n          Chat\r\n        </Button>\r\n      </Controls>\r\n      {isOptionsModalVisible && renderOptionsModal()}\r\n    </ChatControlsRoot>\r\n  );\r\n};\r\n\r\nexport default React.memo(ChatControls);\r\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { format } from 'date-fns/fp';\n\nimport {\n  Message as MessageType,\n  MessageEntity,\n} from 'features/chat/slice/messages';\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\n\ntype MessageRootProps = {\n  isAction: boolean;\n  isHistory: boolean;\n  isDeleted: boolean;\n  isMention: boolean;\n  isEven: boolean;\n};\n\nconst getChatMessageBg = (p: MessageRootProps) => {\n  if (p.isMention) return 'rgba(255, 0, 0, 0.3)';\n  if (p.isEven) return '#1f1925';\n  return 'transparent';\n};\n\nconst MessageRoot = styled.div<MessageRootProps>`\n  padding: 5px 20px;\n  color: ${(p) => (p.isAction ? p.color : '#fff')};\n  opacity: ${(p) => (p.isHistory || p.isDeleted ? '0.5' : '1')};\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${getChatMessageBg};\n`;\nconst Name = styled.span`\n  font-weight: bold;\n  color: ${(p) => p.color};\n  cursor: pointer;\n`;\nconst EmoteWrapper = styled.span`\n  display: inline-block;\n`;\nconst Emoji = styled.img`\n  display: inline-block;\n  margin-top: -5px;\n  margin-bottom: -4px;\n  width: 20px;\n  height: auto;\n  vertical-align: middle;\n`;\n// https://github.com/night/BetterTTV/blob/master/src/modules/emotes/style.css\n// prettier-ignore\nconst Emote = styled.img`\n  display: inline-block;\n  margin: -5px 0;\n  vertical-align: middle;\n\n  /* Prevent stacking of IceCold, SoSnowy */\n  &[data-emote-id='5849c9a4f52be01a7ee5f79d'] + &[data-emote-id='5849c9a4f52be01a7ee5f79d'],\n  &[data-emote-id='567b5b520e984428652809b6'] + &[data-emote-id='567b5b520e984428652809b6'] {\n    display: none;\n  }\n\n  /* IceCold */\n  &        + &[data-emote-id='5849c9a4f52be01a7ee5f79d'],\n  ${Emoji} + &[data-emote-id='5849c9a4f52be01a7ee5f79d'] {\n    margin-left: -33px;\n  }\n\n  /* SoSnowy */\n  &        + &[data-emote-id='567b5b520e984428652809b6'],\n  ${Emoji} + &[data-emote-id='567b5b520e984428652809b6'] {\n    margin-left: -32px;\n  }\n\n  /* SantaHat */\n  &        + &[data-emote-id='58487cc6f52be01a7ee5f205'],\n  ${Emoji} + &[data-emote-id='58487cc6f52be01a7ee5f205'] {\n    margin-left: -34px;\n    margin-top: -18px;\n  }\n\n  /* TopHat, CandyCane, ReinDeer */\n  &        + &[data-emote-id='5849c9c8f52be01a7ee5f79e'],\n  ${Emoji} + &[data-emote-id='5849c9c8f52be01a7ee5f79e'],\n  &        + &[data-emote-id='567b5c080e984428652809ba'],\n  ${Emoji} + &[data-emote-id='567b5c080e984428652809ba'],\n  &        + &[data-emote-id='567b5dc00e984428652809bd'],\n  ${Emoji} + &[data-emote-id='567b5dc00e984428652809bd'] {\n    margin-left: -31px;\n    margin-top: -18px;\n  }\n\n  /* cvHazmat, cvMask */\n  &        + &[data-emote-id='5e76d338d6581c3724c0f0b2'],\n  ${Emoji} + &[data-emote-id='5e76d338d6581c3724c0f0b2'],\n  &        + &[data-emote-id='5e76d399d6581c3724c0f0b8'],\n  ${Emoji} + &[data-emote-id='5e76d399d6581c3724c0f0b8'] {\n    margin-left: -34px;\n    height: 34px;\n    width: 34px;\n  }\n`;\nconst Mention = styled.span<{ isActive: boolean; isOwnMessage: boolean }>`\n  ${(p) =>\n    (p.isActive || p.isOwnMessage) &&\n    css`\n      padding: 2px 4px;\n    `};\n  ${(p) =>\n    p.isOwnMessage &&\n    css`\n      background-color: #40404a;\n      color: #fff;\n    `};\n  ${(p) =>\n    p.isActive &&\n    css`\n      background-color: #fafafa;\n      color: #18181b;\n    `};\n`;\nconst Link = styled.a`\n  color: #bf94ff;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Timestamp = styled.span`\n  margin-right: 5px;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst Badge = styled.img`\n  margin-bottom: 2px;\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst renderMessageArray = (login: string, userLogin: string | null) => (\n  item: MessageEntity,\n  key: number,\n) => {\n  if (typeof item !== 'object') return item;\n\n  if (\n    item.type === 'twitch-emote' ||\n    item.type === 'bttv-emote' ||\n    item.type === 'ffz-emote'\n  ) {\n    return (\n      <EmoteWrapper>\n        <Emote\n          key={key}\n          src={item.src}\n          srcSet={item.srcSet}\n          alt={item.alt}\n          data-emote-id={item.id}\n        />\n      </EmoteWrapper>\n    );\n  }\n\n  if (item.type === 'emoji') {\n    return (\n      <EmoteWrapper>\n        <Emoji key={key} src={item.src} alt={item.alt} />\n      </EmoteWrapper>\n    );\n  }\n\n  if (item.type === 'mention') {\n    return (\n      <Mention\n        key={key}\n        isActive={item.target === userLogin}\n        isOwnMessage={login === userLogin}\n      >\n        {item.text}\n      </Mention>\n    );\n  }\n\n  if (item.type === 'link') {\n    return (\n      <Link\n        key={key}\n        href={item.href}\n        rel=\"noreferrer noopener\"\n        target=\"_blank\"\n      >\n        {item.text}\n      </Link>\n    );\n  }\n\n  return null;\n};\n\nconst renderBadges = (badges: htmlEntity.Badge[]) =>\n  badges.map(({ alt, label, src, srcSet }, key: number) => (\n    // eslint-disable-next-line react/no-array-index-key\n    <Badge key={key} alt={alt} aria-label={label} src={src} srcSet={srcSet} />\n  ));\n\ntype Props = {\n  message: MessageType;\n  userLogin: string | null;\n  isEven: boolean;\n  isShowTimestamps: boolean;\n  onNameRightClick: (name: string) => void;\n};\n\nconst MESSAGE_DELETED_LABEL = '<message deleted>';\n\nconst Message = ({\n  message: {\n    entities,\n    user: { login, color, displayName, badges },\n    timestamp,\n    isHistory,\n    isAction,\n    isDeleted,\n    isMention,\n  },\n  userLogin,\n  isEven,\n  isShowTimestamps,\n  // onNameClick,\n  onNameRightClick,\n}: Props) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const handleNameRightClick = (\n    e: React.MouseEvent<HTMLSpanElement, MouseEvent>,\n  ) => {\n    onNameRightClick(displayName);\n    e.preventDefault();\n  };\n\n  return (\n    <MessageRoot\n      isHistory={isHistory}\n      isAction={isAction}\n      isEven={isEven}\n      isMention={isMention}\n      isDeleted={isDeleted}\n      color={color}\n    >\n      {isShowTimestamps && (\n        <Timestamp>{format('h:mm', new Date(timestamp))}</Timestamp>\n      )}\n      {badges.length > 0 && renderBadges(badges)}\n      <Name color={color} onContextMenu={handleNameRightClick}>\n        {displayName}\n      </Name>\n      {isAction ? ' ' : ': '}\n      {isDeleted && !isVisible ? (\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n        <Link onClick={() => setIsVisible(true)}>{MESSAGE_DELETED_LABEL}</Link>\n      ) : (\n        entities.map(renderMessageArray(login, userLogin))\n      )}\n    </MessageRoot>\n  );\n};\n\nexport default React.memo(Message);\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Notice as NoticeType } from 'features/chat/slice/messages';\n\nconst NoticeRoot = styled.div<{ isEven: boolean }>`\n  padding: 5px 20px;\n  color: rgba(255, 255, 255, 0.6);\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${(p) => (p.isEven ? '#1f1925' : 'transparent')};\n`;\n\ntype Props = {\n  message: NoticeType;\n  isEven: boolean;\n};\n\nconst Notice = ({ message: { message }, isEven }: Props) => (\n  <NoticeRoot isEven={isEven}>{message}</NoticeRoot>\n);\n\nexport default Notice;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { UserNotice as UserNoticeType } from 'features/chat/slice/messages';\n\nconst UserNoticeRoot = styled.div`\n  padding: 5px 20px 5px 16px;\n  line-height: 20px;\n  word-wrap: break-word;\n  border-left: 4px solid #9147ff;\n  color: #fff;\n`;\n\ntype Props = {\n  message: UserNoticeType;\n};\n\nconst UserNotice = ({ message: { systemMessage } }: Props) => (\n  <UserNoticeRoot>{systemMessage}</UserNoticeRoot>\n);\n\nexport default UserNotice;\n","import React from 'react';\n\nimport assertNever from 'utils/assertNever';\nimport { ChatMessage as ChatMessageType } from 'features/chat/slice/messages';\nimport Message from 'features/chat/components/Message';\nimport Notice from 'features/chat/components/Notice';\nimport UserNotice from 'features/chat/components/UserNotice';\n\ntype Props = {\n  message: ChatMessageType;\n  userLogin: string | null;\n  isEven: boolean;\n  isShowTimestamps: boolean;\n  // onNameClick: (name: string) => void;\n  onNameRightClick: (name: string) => void;\n};\n\nconst ChatMessage = ({\n  message,\n  userLogin,\n  isEven,\n  isShowTimestamps,\n  // onNameClick,\n  onNameRightClick,\n}: Props) => {\n  if (message.type === 'message') {\n    return (\n      <Message\n        message={message}\n        userLogin={userLogin}\n        isEven={isEven}\n        isShowTimestamps={isShowTimestamps}\n        // onNameClick={onNameClick}\n        onNameRightClick={onNameRightClick}\n      />\n    );\n  }\n\n  if (message.type === 'notice') {\n    return <Notice message={message} isEven={isEven} />;\n  }\n\n  if (message.type === 'user-notice') {\n    return <UserNotice message={message} />;\n  }\n\n  return assertNever(message);\n};\n\nexport default React.memo(ChatMessage);\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport ScrollbarType from 'react-scrollbars-custom';\nimport { ScrollState } from 'react-scrollbars-custom/dist/types/types';\n\nimport Scrollbar from 'components/Scrollbar';\nimport ChatMessage from 'features/chat/components/ChatMessage';\nimport { messagesSelector, isEvenSelector } from 'features/chat/selectors';\nimport { userLoginSelector } from 'features/auth/authSlice';\nimport {\n  isShowTimestampsSelector,\n  isSplitChatSelector,\n} from 'features/options/optionsSelectors';\n\nconst MORE_MESSAGES_OFFSET = 100;\n\nconst MessagesRoot = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\nconst StyledScrollbar = styled(Scrollbar)`\n  .ScrollbarsCustom-Content {\n    padding-bottom: 10px !important;\n  }\n`;\nconst MoreMessagesButton = styled.button<{ isVisible: boolean }>`\n  position: absolute;\n  left: 50%;\n  bottom: 10px;\n  display: ${(p) => (p.isVisible ? 'block' : 'none')};\n  padding: 5px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  transform: translateX(-50%);\n`;\n\ntype Props = {\n  onNameRightClick: (name: string) => void;\n};\n\nconst Messages = ({ onNameRightClick }: Props) => {\n  const [\n    isMoreMessagesButtonVisible,\n    setIsMoreMessagesButtonVisible,\n  ] = useState(false);\n\n  const messages = useSelector(messagesSelector);\n  const userLogin = useSelector(userLoginSelector);\n\n  const isEven = useSelector(isEvenSelector);\n  const isShowTimestamps = useSelector(isShowTimestampsSelector);\n  const isSplitChat = useSelector(isSplitChatSelector);\n\n  const handleScrollUpdate = ({\n    clientHeight,\n    contentScrollHeight,\n    scrollTop,\n  }: ScrollState) => {\n    const maxScrollTop = contentScrollHeight - clientHeight;\n    const isVisible = scrollTop + MORE_MESSAGES_OFFSET < maxScrollTop;\n\n    setIsMoreMessagesButtonVisible(isVisible);\n  };\n\n  const scrollbarRef = useRef<ScrollbarType>(null);\n\n  const handleScrollToBottom = () => {\n    if (scrollbarRef.current) {\n      scrollbarRef.current.scrollToBottom();\n    }\n  };\n\n  useEffect(() => {\n    if (!isMoreMessagesButtonVisible) {\n      handleScrollToBottom();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages]);\n\n  const getIsEven = (key: number) => {\n    if (!isSplitChat) return false;\n    return isEven ? key % 2 === 1 : key % 2 === 0;\n  };\n\n  return (\n    <MessagesRoot>\n      <StyledScrollbar onUpdate={handleScrollUpdate} ref={scrollbarRef}>\n        {messages.map((message, key) => (\n          <ChatMessage\n            key={message.id}\n            message={message}\n            userLogin={userLogin}\n            isEven={getIsEven(key)}\n            isShowTimestamps={isShowTimestamps}\n            onNameRightClick={onNameRightClick}\n          />\n        ))}\n      </StyledScrollbar>\n      <MoreMessagesButton\n        onClick={handleScrollToBottom}\n        isVisible={isMoreMessagesButtonVisible}\n      >\n        More messages below\n      </MoreMessagesButton>\n    </MessagesRoot>\n  );\n};\n\nexport default Messages;\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from 'components/Button';\r\n\r\nconst JoinChannelRoot = styled.div`\r\n  padding: 10px;\r\n  flex-grow: 1;\r\n  width: 320px;\r\n`;\r\nconst Title = styled.h2`\r\n  margin-top: 0;\r\n  margin-bottom: 10px;\r\n  padding: 0;\r\n  color: #fff;\r\n`;\r\nconst Controls = styled.div`\r\n  display: flex;\r\n\r\n  & > :not(:last-child) {\r\n    margin-right: 10px;\r\n  }\r\n`;\r\nconst Input = styled.input`\r\n  display: block;\r\n  padding: 4px 10px;\r\n  width: 100%;\r\n  border: 2px solid transparent;\r\n  background-color: rgba(255, 255, 255, 0.15);\r\n  font-family: inherit;\r\n  font-size: 12px;\r\n  line-height: 1.5;\r\n  border-radius: 4px;\r\n  outline: none;\r\n  color: #fff;\r\n  resize: none;\r\n  transition-duration: 0.1s;\r\n  transition-timing-function: ease-in;\r\n  transition-property: box-shadow, border, background-color;\r\n\r\n  &:focus {\r\n    background-color: #000;\r\n    border-color: #9147ff;\r\n  }\r\n\r\n  &[disabled] {\r\n    opacity: 0.5;\r\n    pointer-events: none;\r\n  }\r\n`;\r\nconst JoinButton = styled(Button)`\r\n  flex-shrink: none;\r\n`;\r\n\r\nconst JoinChannel = () => {\r\n  const history = useHistory();\r\n  const [value, setValue] = useState('');\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, []);\r\n\r\n  const handleChangeChannel = () => {\r\n    history.push({\r\n      pathname: '/chat/',\r\n      hash: value,\r\n    });\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      handleChangeChannel();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <JoinChannelRoot>\r\n      <Title>Channel to join: </Title>\r\n      <Controls>\r\n        <Input\r\n          ref={inputRef}\r\n          value={value}\r\n          onChange={(e) => setValue(e.target.value)}\r\n          onKeyPress={handleKeyPress}\r\n        />\r\n        <JoinButton onClick={handleChangeChannel} disabled={!value}>\r\n          Join\r\n        </JoinButton>\r\n      </Controls>\r\n    </JoinChannelRoot>\r\n  );\r\n};\r\n\r\nexport default JoinChannel;\r\n","import React, { useState, useCallback, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { isAuthSelector } from 'features/auth/authSlice';\nimport { isFixedWidthSelector } from 'features/options/optionsSelectors';\nimport useInitializeAuth from 'features/auth/hooks/useInitializeAuth';\nimport useFetchChatData from 'features/chat/hooks/useFetchChatData';\nimport useCurrentChannel from 'features/chat/hooks/useCurrentChannel';\nimport useTwitchClient from 'features/chat/hooks/useTwitchClient';\nimport useChatInput from 'features/chat/hooks/useChatInput';\nimport {\n  currentChannelSelector,\n  isConnectedSelector,\n} from 'features/chat/selectors';\nimport ChatInput from 'features/chat/components/ChatInput';\nimport ChatControls from 'features/chat/components/ChatControls';\nimport Messages from 'features/chat/components/Messages';\nimport JoinChannel from 'features/chat/components/JoinChannel';\n\nconst ChatRoot = styled.div`\n  height: 100vh;\n  font-size: 12px;\n  background-color: #0e0e10;\n`;\nconst ChatWrapper = styled.div<{ isFixedWidth: boolean }>`\n  display: flex;\n  flex-direction: column;\n  width: ${(p) => (p.isFixedWidth ? '340px' : 'auto')};\n  height: 100%;\n  background-color: #18181b;\n`;\n\nconst Chat = () => {\n  const [text, setText] = useState('');\n\n  const client = useTwitchClient();\n\n  useInitializeAuth();\n  useCurrentChannel();\n  useFetchChatData();\n\n  const currentChannel = useSelector(currentChannelSelector);\n\n  const isAuth = useSelector(isAuthSelector);\n  const isConnected = useSelector(isConnectedSelector);\n\n  const isFixedWidth = useSelector(isFixedWidthSelector);\n  const chatInputRef = useRef<HTMLTextAreaElement>(null);\n\n  const textRef = useRef(text);\n  textRef.current = text;\n\n  const isDisabled = !isAuth || !isConnected;\n\n  const handleSendMessage = useCallback(() => {\n    if (!client || !textRef.current) return;\n\n    client.say(currentChannel, textRef.current);\n\n    setText('');\n  }, [client, currentChannel, textRef, setText]);\n\n  const chatInput = useChatInput(setText, handleSendMessage, chatInputRef);\n\n  const handleNameRightClick = useCallback(\n    (name: string) => {\n      setText((t) => `${t.trim()} @${name} `.trimLeft());\n      if (chatInputRef.current) {\n        chatInputRef.current.focus();\n      }\n    },\n    [setText, chatInputRef],\n  );\n\n  const handleEmoteClick = useCallback(\n    (name: string) => {\n      setText((t) => `${t.trim()} ${name} `.trimLeft());\n    },\n    [setText],\n  );\n\n  return (\n    <ChatRoot>\n      <ChatWrapper isFixedWidth={isFixedWidth}>\n        {currentChannel ? (\n          <Messages onNameRightClick={handleNameRightClick} />\n        ) : (\n          <JoinChannel />\n        )}\n        <ChatInput\n          ref={chatInputRef}\n          text={text}\n          suggestions={chatInput.suggestions}\n          isDisabled={isDisabled}\n          onEmoteClick={handleEmoteClick}\n          onChange={chatInput.handleChange}\n          onKeyUp={chatInput.handleKeyUp}\n          onKeyDown={chatInput.handleKeyDown}\n          onBlur={chatInput.handleBlur}\n          onSuggestionMouseEnter={chatInput.handleSuggestionMouseEnter}\n          onSuggestionClick={chatInput.handleSuggestionClick}\n        />\n        <ChatControls\n          isDisabled={isDisabled}\n          onSendMessage={handleSendMessage}\n        />\n      </ChatWrapper>\n    </ChatRoot>\n  );\n};\n\nexport default Chat;\n","import { getAuthUrl } from 'features/auth/authUtils';\n\nconst Auth = () => {\n  window.location.href = getAuthUrl();\n\n  return null;\n};\n\nexport default Auth;\n","import { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport {\r\n  LS_ACCESS_TOKEN,\r\n  LS_ID_TOKEN,\r\n  LS_USER,\r\n  LS_LAST_CHANNEL,\r\n} from 'utils/constants';\r\nimport { invalidateAuth } from 'features/auth/authSlice';\r\n\r\nconst Logout = () => {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  localStorage.removeItem(LS_ACCESS_TOKEN);\r\n  localStorage.removeItem(LS_ID_TOKEN);\r\n  localStorage.removeItem(LS_USER);\r\n\r\n  dispatch(invalidateAuth());\r\n\r\n  history.push({\r\n    pathname: '/chat/',\r\n    hash: localStorage.getItem(LS_LAST_CHANNEL) || '',\r\n  });\r\n\r\n  return null;\r\n};\r\n\r\nexport default Logout;\r\n","import { useHistory } from 'react-router-dom';\r\n\r\nimport { LS_ACCESS_TOKEN, LS_ID_TOKEN, LS_LAST_CHANNEL } from 'utils/constants';\r\n\r\nconst AuthCallback = () => {\r\n  const history = useHistory();\r\n\r\n  if (!window.location.hash) return null;\r\n\r\n  const params = new URLSearchParams(window.location.hash.slice(1));\r\n\r\n  const accessToken = params.get('access_token');\r\n  const idToken = params.get('id_token');\r\n\r\n  if (!accessToken || !idToken) return null;\r\n\r\n  localStorage.setItem(LS_ACCESS_TOKEN, accessToken);\r\n  localStorage.setItem(LS_ID_TOKEN, idToken);\r\n\r\n  history.push({\r\n    pathname: '/chat/',\r\n    hash: localStorage.getItem(LS_LAST_CHANNEL) || '',\r\n  });\r\n\r\n  return null;\r\n};\r\n\r\nexport default AuthCallback;\r\n","import { css } from 'styled-components';\n\nexport default css`\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    margin: 0;\n    font-family: Roobert, Helvetica Neue, Helvetica, Arial, sans-serif;\n  }\n`;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { createGlobalStyle } from 'styled-components';\n\nimport common from 'styles/common';\nimport colors from 'styles/colors';\nimport vars from 'styles/vars';\n\nexport default createGlobalStyle`\n  :root {\n    ${colors};\n    ${vars};\n  }\n  ${common};\n`;\n","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  RouteComponentProps,\r\n} from 'react-router-dom';\r\n\r\nimport { isAuthRedirect } from 'features/auth/authUtils';\r\nimport Chat from 'features/chat/components/Chat';\r\nimport Auth from 'features/auth/Auth';\r\nimport Logout from 'features/auth/Logout';\r\nimport AuthCallback from 'features/auth/AuthCallback';\r\nimport GlobalStyles from 'styles';\r\n\r\nconst getHomeComponent = ({ location }: RouteComponentProps) =>\r\n  isAuthRedirect(location.hash) ? <AuthCallback /> : <Chat />;\r\n\r\nconst App: React.FC = () => (\r\n  <>\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/chat/\" render={getHomeComponent} />\r\n        <Route exact path=\"/chat/auth\" component={Auth} />\r\n        <Route exact path=\"/chat/logout\" component={Logout} />\r\n      </Switch>\r\n    </Router>\r\n    <GlobalStyles />\r\n  </>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nconst registerValidSW = (swUrl: string, config?: Config) => {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n};\n\nconst checkValidServiceWorker = (swUrl: string, config?: Config) => {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n};\n\nexport const register = (config?: Config) => {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n};\n\nexport const unregister = () => {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n};\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport auth from 'features/auth/authSlice';\nimport chat from 'features/chat/slice/chatSlice';\nimport options from 'features/options/optionsSlice';\n\nconst rootReducer = combineReducers({\n  auth,\n  chat,\n  options,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore, Action } from '@reduxjs/toolkit';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { ThunkAction } from 'redux-thunk';\n\nimport rootReducer, { RootState } from 'app/rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nif (process.env.NODE_ENV === 'development' && (module as any).hot) {\n  (module as any).hot.accept('./rootReducer', () => {\n    // eslint-disable-next-line global-require\n    const newRootReducer = require('./rootReducer').default;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport ReactGA from 'react-ga';\n\nimport * as serviceWorker from 'serviceWorker';\nimport { isAuthRedirect } from 'features/auth/authUtils';\nimport store from 'app/store';\n\nif (process.env.NODE_ENV === 'production') {\n  ReactGA.initialize('UA-139550930-3');\n\n  if (!isAuthRedirect(window.location.hash)) {\n    const page =\n      window.location.pathname + window.location.search + window.location.hash;\n    ReactGA.pageview(page);\n  }\n}\n\nconst render = () => {\n  // eslint-disable-next-line global-require\n  const App = require('./app/App').default;\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n};\n\nrender();\n\nif (process.env.NODE_ENV === 'development' && (module as any).hot) {\n  (module as any).hot.accept('./app/App', render);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import * as R from 'ramda';\nimport { parse as twemojiParser } from 'twemoji-parser';\nimport { lib as emojilib } from 'emojilib';\nimport urlRegex from 'url-regex';\nimport twitchIrc from 'twitch-simple-irc';\n\nimport { StateEmotes } from 'features/chat/selectors/chatSelectors';\nimport { MessageEntity } from 'features/chat/slice/messages';\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\nimport findEmote from 'features/chat/utils/findEmote';\n\nconst mentionRegex = /^@([\\p{Letter}\\p{Number}_]+)/u;\nconst linkRegex = urlRegex({ strict: false });\n\nconst normalizeEmbeddedEmotes = (embeddedEmotes: twitchIrc.Emotes) =>\n  Object.entries(embeddedEmotes).reduce((result, [key, items]) => {\n    const id = Number.parseInt(key, 10);\n\n    return {\n      ...result,\n      ...items.reduce((acc, { start }) => ({ ...acc, [start]: id }), {}),\n    };\n  }, {} as Record<string, number>);\n\nconst findEmojiByName = (char: string) =>\n  R.pipe<any, any, any, string | undefined>(\n    R.filter(R.propEq('char', char)),\n    R.keys,\n    R.head,\n  )(emojilib);\n\nconst findEntity = (\n  word: string,\n  emotes: StateEmotes,\n  parseTwitch: boolean,\n):\n  | htmlEntity.TwitchEmote\n  | htmlEntity.BttvEmote\n  | htmlEntity.FfzEmote\n  | htmlEntity.Emoji\n  | [htmlEntity.Mention, number]\n  | htmlEntity.Link\n  | null => {\n  if (!emotes) return null;\n\n  if (parseTwitch) {\n    const twitchEmote = findEmote.twitch.byName(word, emotes);\n\n    if (twitchEmote) return twitchEmote;\n  }\n\n  const emote =\n    findEmote.bttv.byName(word, emotes) || findEmote.ffz.byName(word, emotes);\n\n  if (emote) return emote;\n\n  // Don't parse two or more emotes without spaces between\n  // Don't parse emote if it's not in the emojilib package\n  const emojiMatch = twemojiParser(word, { assetType: 'png' });\n\n  if (\n    emojiMatch &&\n    emojiMatch.length === 1 &&\n    emojiMatch[0].text.length === word.length\n  ) {\n    const emoji = findEmojiByName(word);\n\n    if (emoji) {\n      const [{ url }] = emojiMatch;\n\n      return htmlEntity.createEmoji(emoji, url);\n    }\n  }\n\n  const mentionMatch = word.match(mentionRegex);\n\n  if (mentionMatch) {\n    const [text, target] = mentionMatch;\n\n    return [\n      htmlEntity.createMention(text, target.toLowerCase()),\n      word.length - text.length,\n    ] as [htmlEntity.Mention, number];\n  }\n\n  const linkMatch = word.match(linkRegex);\n\n  if (linkMatch && linkMatch[0].length === word.length) {\n    return htmlEntity.createLink(word);\n  }\n\n  return null;\n};\n\nconst parseMessageEntities = (\n  message: string,\n  emotes: StateEmotes | null,\n  embeddedEmotes: twitchIrc.Emotes | null,\n  isOwnMessage = false,\n): MessageEntity[] => {\n  // If the message was sent by the current user, there is no embedded emotes\n  // So we need to parse twitch emotes manually\n\n  const result = [];\n  let offset = 0;\n  // Before that offset all content was added to the result array\n  let arrayOffset = 0;\n\n  // Check every word. From offset to the next space index\n  do {\n    const spaceIndex = message.indexOf(' ', offset + 1);\n\n    const isStart = offset === 0;\n    const isEnd = spaceIndex === -1;\n\n    const startIndex = isStart ? offset : offset + 1;\n    const endIndex = isEnd ? message.length : spaceIndex;\n\n    const word = message.substring(startIndex, endIndex);\n\n    if (word) {\n      let entity = null;\n\n      // Check embedded twitch emotes\n      if (\n        !isOwnMessage &&\n        embeddedEmotes &&\n        Object.keys(embeddedEmotes).length > 0\n      ) {\n        const normalizedEmotes = normalizeEmbeddedEmotes(embeddedEmotes);\n        const id = normalizedEmotes[startIndex];\n\n        if (id) {\n          entity = htmlEntity.createTwitchEmote({ id, code: word });\n        }\n      }\n\n      // Check other entities\n      if (!entity) {\n        entity = findEntity(word, emotes, isOwnMessage);\n      }\n\n      if (entity) {\n        // Push all text before this entity\n        if (arrayOffset !== startIndex) {\n          const textBefore = message.substring(arrayOffset, startIndex);\n          result.push(textBefore);\n        }\n\n        // If entity it's an array it means entity may be not full word\n        // The second element is the difference between word length and entity length\n        if (Array.isArray(entity)) {\n          const [entityObject, difference] = entity;\n          result.push(entityObject);\n          arrayOffset = endIndex - difference;\n        } else {\n          result.push(entity);\n          arrayOffset = endIndex;\n        }\n      }\n    }\n\n    // If it's the last word and it wasn't added to the result add it now\n    if (spaceIndex === -1 && arrayOffset !== endIndex) {\n      const textAfter = message.substring(arrayOffset, endIndex);\n      result.push(textAfter);\n    }\n\n    offset = spaceIndex;\n  } while (offset !== -1);\n\n  return result;\n};\n\nexport default parseMessageEntities;\n","import { nanoid } from '@reduxjs/toolkit';\nimport * as twitchIrc from 'twitch-simple-irc';\nimport * as tekko from 'tekko';\n\nimport type * as api from 'api';\nimport type { RootState } from 'app/rootReducer';\nimport type {\n  Message,\n  Notice,\n  UserNotice,\n  OwnMessage,\n} from 'features/chat/slice/messages';\nimport type { ChatState } from 'features/chat/slice';\nimport {\n  blockedUsersSelector,\n  globalBadgesSelector,\n  channelBadgesSelector,\n  emotesSelector,\n} from 'features/chat/selectors';\nimport type { StateEmotes } from 'features/chat/selectors';\nimport parseMessageEntities from 'features/chat/utils/parseMessageEntities';\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\nimport checkIsMenction from 'features/chat/utils/checkIsMention';\nimport { writeEmotesUsageStatistic } from 'features/chat/utils/emotesUsageStatistic';\n\nexport const normalizeMessage = (\n  { message, tags, user, channel, isAction }: twitchIrc.MessageEvent,\n  chatState: ChatState,\n  isMention: boolean,\n): Message | null => {\n  const fakeState = { chat: chatState } as RootState;\n\n  // messages from blocked users filtered before\n\n  const globalBadges = globalBadgesSelector(fakeState);\n  const channelBadges = channelBadgesSelector(fakeState);\n  const emotes = emotesSelector(fakeState);\n\n  return {\n    type: 'message',\n    id: tags.id,\n    message,\n    channel,\n    entities: parseMessageEntities(message, emotes, tags.emotes),\n    user: {\n      id: tags.userId,\n      login: user,\n      displayName: tags.displayName,\n      color: tags.color,\n      badges: htmlEntity.createBadges(tags.badges, globalBadges, channelBadges),\n    },\n    timestamp: tags.tmiSentTs,\n    isAction,\n    isHistory: false,\n    isDeleted: false,\n    isMention,\n  };\n};\n\nexport const normalizeNotice = (\n  { message, channel, tags: { msgId } }: twitchIrc.NoticeEvent,\n  id: string,\n): Notice => ({\n  type: 'notice',\n  id,\n  message,\n  channel,\n  noticeType: msgId,\n});\n\nexport const normalizeUserNotice = ({\n  message,\n  channel,\n  tags: { id, msgId, login, systemMsg },\n}: twitchIrc.UserNoticeEvent): UserNotice => ({\n  type: 'user-notice',\n  id,\n  message,\n  channel,\n  noticeType: msgId,\n  systemMessage: systemMsg,\n  user: {\n    login,\n  },\n});\n\nexport const normalizeOwnMessage = (\n  { message, channel, tags, userId, userLogin }: OwnMessage,\n  chatState: ChatState,\n): Message => {\n  const fakeState = { chat: chatState } as RootState;\n  const globalBadges = globalBadgesSelector(fakeState);\n  const channelBadges = channelBadgesSelector(fakeState);\n  const emotes = emotesSelector(fakeState);\n\n  const isAction = message.startsWith('/me ');\n  const normalizedMessage = isAction ? message.slice(4) : message;\n\n  const entities = parseMessageEntities(normalizedMessage, emotes, null, true);\n  writeEmotesUsageStatistic(entities);\n\n  return {\n    type: 'message',\n    id: nanoid(),\n    message: normalizedMessage,\n    channel,\n    entities,\n    user: {\n      id: userId as string,\n      login: userLogin as string,\n      displayName: tags.displayName,\n      color: tags.color,\n      badges: htmlEntity.createBadges(tags.badges, globalBadges, channelBadges),\n    },\n    timestamp: Date.now(),\n    isAction,\n    isHistory: false,\n    isDeleted: false,\n    isMention: false,\n  };\n};\n\nexport const normalizeHistoryMessage = (\n  { tags, params: [channel, message], prefix }: tekko.Message,\n  emotes: StateEmotes,\n  globalBadges: Record<string, api.TwitchBadge>,\n  channelBadges: Record<string, api.TwitchBadge>,\n  userLogin: string | null,\n): Message => {\n  const isAction = twitchIrc.getIsAction(message);\n  const normalizedMessage = isAction\n    ? twitchIrc.normalizeActionMessage(message)\n    : message;\n  const parsedTags = (twitchIrc.parseMessageTags(\n    tags,\n  ) as unknown) as twitchIrc.MessageTags;\n\n  const messageUser = prefix ? prefix.name : '';\n  const isMention = checkIsMenction(userLogin, messageUser, normalizedMessage);\n\n  return {\n    type: 'message',\n    id: parsedTags.id,\n    message: normalizedMessage,\n    channel: channel.slice(1),\n    entities: parseMessageEntities(\n      normalizedMessage,\n      emotes,\n      parsedTags.emotes,\n    ),\n    user: {\n      id: parsedTags.userId,\n      login: messageUser,\n      displayName: parsedTags.displayName,\n      color: parsedTags.color,\n      badges: htmlEntity.createBadges(\n        parsedTags.badges,\n        globalBadges,\n        channelBadges,\n      ),\n    },\n    timestamp: parsedTags.tmiSentTs,\n    isAction,\n    isHistory: true,\n    isDeleted: false,\n    isMention,\n  };\n};\n\nexport const normalizeHistoryMessages = (\n  rawMessages: string[],\n  chatState: ChatState,\n  userLogin: string | null,\n): Message[] => {\n  const fakeState = { chat: chatState } as RootState;\n  const globalBadges = globalBadgesSelector(fakeState);\n  const channelBadges = channelBadgesSelector(fakeState);\n  const emotes = emotesSelector(fakeState);\n  const blockedUsers = blockedUsersSelector(fakeState);\n\n  return rawMessages.reduce<Message[]>((acc, rawMessage) => {\n    const message = tekko.parse(rawMessage) as tekko.Message;\n\n    const { command, prefix } = message;\n\n    if (\n      command === 'PRIVMSG' &&\n      prefix &&\n      !blockedUsers.includes(prefix.name)\n    ) {\n      acc.push(\n        normalizeHistoryMessage(\n          message,\n          emotes,\n          globalBadges,\n          channelBadges,\n          userLogin,\n        ),\n      );\n    }\n\n    return acc;\n  }, []);\n};\n","type SliceItemsParams<T> = {\n  items: T[];\n  limit: number;\n  addedItemsCount?: number;\n  isEven?: boolean;\n};\n\nfunction sliceItemsByLimit<T>({\n  items,\n  limit,\n  addedItemsCount = 1,\n  isEven = false,\n}: SliceItemsParams<T>): [T[], boolean] {\n  const diff = items.length - limit;\n  const isSliced = diff > 0;\n\n  const newItems = isSliced ? items.slice(diff) : items;\n  const newIsEven = isSliced && addedItemsCount % 2 ? !isEven : isEven;\n\n  return [newItems, newIsEven];\n}\n\nexport default sliceItemsByLimit;\n","/* eslint-disable no-param-reassign */\r\nimport { createAsyncThunk, CaseReducer } from '@reduxjs/toolkit';\r\nimport type { PayloadAction, ActionReducerMapBuilder } from '@reduxjs/toolkit';\r\nimport type twitchIrc from 'twitch-simple-irc';\r\n\r\nimport * as api from 'api';\r\nimport { CHANNEL_MESSAGES_LIMIT, STORE_USERS_LIMIT } from 'utils/constants';\r\nimport assertNever from 'utils/assertNever';\r\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\r\nimport {\r\n  normalizeMessage,\r\n  normalizeNotice,\r\n  normalizeUserNotice,\r\n  normalizeHistoryMessages,\r\n  normalizeOwnMessage,\r\n} from 'features/chat/utils/normalizeMessages';\r\nimport sliceItemsByLimit from 'features/chat/utils/sliceItemsByLimit';\r\nimport type { ChatState } from 'features/chat/slice';\r\nimport type { FetchResult } from 'utils/types';\r\n\r\nexport type MessageEntity =\r\n  | htmlEntity.TwitchEmote\r\n  | htmlEntity.BttvEmote\r\n  | htmlEntity.FfzEmote\r\n  | htmlEntity.Emoji\r\n  | htmlEntity.Mention\r\n  | htmlEntity.Link\r\n  | string;\r\n\r\nexport type Message = {\r\n  type: 'message';\r\n  id: string;\r\n  message: string;\r\n  channel: string;\r\n  entities: MessageEntity[];\r\n  user: {\r\n    id: string;\r\n    login: string;\r\n    displayName: string;\r\n    color: string;\r\n    badges: htmlEntity.Badge[];\r\n  };\r\n  timestamp: number;\r\n  isAction: boolean;\r\n  isHistory: boolean;\r\n  isDeleted: boolean;\r\n  isMention: boolean;\r\n};\r\n\r\nexport type Notice = {\r\n  type: 'notice';\r\n  id: string;\r\n  message: string;\r\n  channel: string;\r\n  noticeType: string;\r\n};\r\n\r\nexport type UserNotice = {\r\n  type: 'user-notice';\r\n  id: string;\r\n  message: string;\r\n  channel: string;\r\n  noticeType: keyof typeof twitchIrc.UserNoticeType;\r\n  systemMessage: string;\r\n  user: {\r\n    login: string;\r\n  };\r\n};\r\n\r\nexport type ChatMessage = Message | Notice | UserNotice;\r\n\r\nexport type OwnMessage = {\r\n  message: string;\r\n  channel: string;\r\n  tags: twitchIrc.UserStateTags;\r\n  userId?: string;\r\n  userLogin?: string;\r\n};\r\n\r\ntype AddMessage = {\r\n  type: 'message';\r\n  message: twitchIrc.MessageEvent;\r\n  isMention: boolean;\r\n};\r\ntype AddNotice = {\r\n  type: 'notice';\r\n  id: string;\r\n  message: twitchIrc.NoticeEvent;\r\n};\r\ntype AddUserNotice = {\r\n  type: 'user-notice';\r\n  message: twitchIrc.UserNoticeEvent;\r\n};\r\ntype AddOwnMessage = {\r\n  type: 'own-message';\r\n  message: OwnMessage;\r\n};\r\n\r\ntype AddMessagePayload = AddMessage | AddNotice | AddUserNotice | AddOwnMessage;\r\n\r\ntype AddChatHistoryPayload = {\r\n  channel: string;\r\n  userLogin: string | null;\r\n};\r\n\r\ntype MessagesStateChannel = {\r\n  history: FetchResult<string[]> & {\r\n    isAdded: boolean;\r\n  };\r\n  isEven: boolean;\r\n  items: ChatMessage[];\r\n  users: string[];\r\n};\r\n\r\nexport type MessagesState = Record<string, MessagesStateChannel>;\r\n\r\nexport const messagesInitialState: MessagesState = {};\r\n\r\nconst normalizePayload = (\r\n  data: AddMessagePayload,\r\n  chatState: ChatState,\r\n): ChatMessage | null => {\r\n  if (data.type === 'message') {\r\n    return normalizeMessage(data.message, chatState, data.isMention);\r\n  }\r\n\r\n  if (data.type === 'notice') {\r\n    return normalizeNotice(data.message, data.id);\r\n  }\r\n\r\n  if (data.type === 'user-notice') {\r\n    return normalizeUserNotice(data.message);\r\n  }\r\n\r\n  if (data.type === 'own-message') {\r\n    return normalizeOwnMessage(data.message, chatState);\r\n  }\r\n\r\n  return assertNever(data);\r\n};\r\n\r\nconst clearChat: CaseReducer<\r\n  ChatState,\r\n  PayloadAction<twitchIrc.ClearChatEvent>\r\n> = (state, { payload }) => {\r\n  const {\r\n    channel,\r\n    tags: { targetUserId },\r\n  } = payload;\r\n\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  for (const message of state.messages[channel].items) {\r\n    if (\r\n      message.type === 'message' &&\r\n      message.user.id === targetUserId &&\r\n      !message.isHistory\r\n    ) {\r\n      message.isDeleted = true;\r\n    }\r\n  }\r\n};\r\n\r\nconst addMessage: CaseReducer<ChatState, PayloadAction<AddMessagePayload>> = (\r\n  state,\r\n  { payload },\r\n) => {\r\n  const message = normalizePayload(payload, state);\r\n\r\n  if (!message) return;\r\n\r\n  const { channel } = message;\r\n\r\n  const [newItems, newIsEven] = sliceItemsByLimit({\r\n    items: [...state.messages[channel].items, message],\r\n    limit: CHANNEL_MESSAGES_LIMIT,\r\n    isEven: state.messages[channel].isEven,\r\n  });\r\n\r\n  state.messages[channel].isEven = newIsEven;\r\n  state.messages[channel].items = newItems;\r\n\r\n  // add user\r\n  const { users } = state.messages[channel];\r\n\r\n  if (message.type === 'message' && !users.includes(message.user.displayName)) {\r\n    users.push(message.user.displayName);\r\n  }\r\n\r\n  const [newUsers] = sliceItemsByLimit({\r\n    items: users,\r\n    limit: STORE_USERS_LIMIT,\r\n  });\r\n\r\n  state.messages[channel].users = newUsers;\r\n};\r\n\r\nconst addChatHistory: CaseReducer<\r\n  ChatState,\r\n  PayloadAction<AddChatHistoryPayload>\r\n> = (state, { payload }) => {\r\n  const { channel, userLogin } = payload;\r\n\r\n  const rawHistory = state.messages[channel].history.items;\r\n  const [slicedRawHistory] = sliceItemsByLimit({\r\n    items: rawHistory,\r\n    limit: CHANNEL_MESSAGES_LIMIT,\r\n  });\r\n  const history = normalizeHistoryMessages(slicedRawHistory, state, userLogin);\r\n\r\n  const [newItems, newIsEven] = sliceItemsByLimit({\r\n    items: [...history, ...state.messages[channel].items],\r\n    limit: CHANNEL_MESSAGES_LIMIT,\r\n    addedItemsCount: history.length,\r\n    isEven: state.messages[channel].isEven,\r\n  });\r\n\r\n  state.messages[channel].items = newItems;\r\n  state.messages[channel].isEven = newIsEven;\r\n\r\n  // add users\r\n  const { users } = state.messages[channel];\r\n\r\n  history.forEach((message) => {\r\n    if (\r\n      message.type === 'message' &&\r\n      !users.includes(message.user.displayName)\r\n    ) {\r\n      users.push(message.user.displayName);\r\n    }\r\n  });\r\n\r\n  state.messages[channel].history.items = [];\r\n  state.messages[channel].history.isAdded = true;\r\n};\r\n\r\nexport const messagesReducers = {\r\n  clearChat,\r\n  addMessage,\r\n  addChatHistory,\r\n};\r\n\r\nexport const fetchChatHistory = createAsyncThunk(\r\n  'chat/fetchChatHistory',\r\n  (channel: string) => api.fetchChatHistory(channel),\r\n);\r\n\r\nexport const messagesExtraReducers = (\r\n  builder: ActionReducerMapBuilder<ChatState>,\r\n) => {\r\n  builder.addCase(fetchChatHistory.pending, (state, { meta: { arg } }) => {\r\n    const channel = arg;\r\n\r\n    if (!state.messages[channel]) {\r\n      state.messages[channel] = {\r\n        history: {\r\n          status: 'loading',\r\n          error: {},\r\n          items: [],\r\n          isAdded: false,\r\n        },\r\n        isEven: false,\r\n        items: [],\r\n        users: [],\r\n      };\r\n    } else {\r\n      state.messages[channel].history.status = 'loading';\r\n      state.messages[channel].history.error = {};\r\n    }\r\n  });\r\n\r\n  builder.addCase(\r\n    fetchChatHistory.fulfilled,\r\n    (state, { payload, meta: { arg } }) => {\r\n      const channel = arg;\r\n\r\n      state.messages[channel].history.status = 'success';\r\n      state.messages[channel].history.items = payload.messages;\r\n    },\r\n  );\r\n\r\n  builder.addCase(\r\n    fetchChatHistory.rejected,\r\n    (state, { error, meta: { arg } }) => {\r\n      const channel = arg;\r\n\r\n      state.messages[channel].history.status = 'error';\r\n      state.messages[channel].history.error = error;\r\n    },\r\n  );\r\n};\r\n","import * as R from 'ramda';\n\nimport * as api from 'api';\n\nexport const parseTwitchEmotes = R.prop('emoticon_sets');\n\nexport const parseBttvGlobalEmotes = (\n  data: api.BttvGlobalEmotesResponse,\n): api.BttvGlobalEmote[] => data;\n\nexport const parseBttvChannelEmotes = (\n  data: api.BttvChannelEmotesResponse,\n): api.BttvChannelEmote[] => [...data.channelEmotes, ...data.sharedEmotes];\n\nexport const parseFfzGlobalEmotes = ({\n  default_sets: defaultSets,\n  sets,\n}: api.FfzGlobalEmotesResponse): api.FfzEmote[] =>\n  R.pipe<any, any, any, any, api.FfzEmote[]>(\n    R.pick((defaultSets as unknown) as string[]),\n    R.values,\n    R.map(R.propOr([], 'emoticons')),\n    R.flatten,\n  )(sets);\n\nexport const parseFfzChannelEmotes: (\n  data: api.FfzChannelEmotesResponse,\n) => api.FfzEmote[] = R.pipe(\n  R.pathOr({}, ['sets']),\n  R.values,\n  R.map(R.pathOr([], ['emoticons'])),\n  R.flatten,\n);\n\nexport const parseBlockedUsers = R.pipe<\n  api.TwitchBlockedUsersResponse,\n  {}[],\n  string[]\n>(R.prop('blocks'), R.map<any, any>(R.path(['user', 'name'])));\n\nexport const parseBadges = R.prop('badge_sets');\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport type { ActionReducerMapBuilder } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { ChatState } from 'features/chat/slice';\nimport { parseTwitchEmotes } from 'features/chat/utils/parseApiResponse';\nimport type { FetchResult } from 'utils/types';\n\nexport type TwitchEmotesState = FetchResult<Record<string, api.TwitchEmote[]>>;\n\nexport const twitchEmotesInitialState: TwitchEmotesState = {\n  status: 'idle',\n  error: {},\n  items: {},\n};\n\nexport const fetchTwitchEmotes = createAsyncThunk(\n  'chat/fetchTwitchEmotes',\n  (userId: string) => api.fetchTwitchEmotes(userId),\n);\n\nexport const twitchEmotesExtraReducers = (\n  builder: ActionReducerMapBuilder<ChatState>,\n) => {\n  builder.addCase(fetchTwitchEmotes.pending, (state) => {\n    state.twitchEmotes.status = 'loading';\n    state.twitchEmotes.error = {};\n  });\n\n  builder.addCase(fetchTwitchEmotes.fulfilled, (state, { payload }): void => {\n    state.twitchEmotes.status = 'success';\n    state.twitchEmotes.items = parseTwitchEmotes(payload);\n  });\n\n  builder.addCase(fetchTwitchEmotes.rejected, (state, { error }) => {\n    state.twitchEmotes.status = 'error';\n    state.twitchEmotes.error = error;\n  });\n};\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport type { ActionReducerMapBuilder } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { ChatState } from 'features/chat/slice';\nimport {\n  parseBttvGlobalEmotes,\n  parseBttvChannelEmotes,\n} from 'features/chat/utils/parseApiResponse';\nimport type { FetchResult } from 'utils/types';\n\nexport type BttvEmotesState = {\n  global: FetchResult<api.BttvGlobalEmote[]>;\n  byChannels: Record<string, FetchResult<api.BttvChannelEmote[]>>;\n};\n\nexport const bttvEmotesInitialState: BttvEmotesState = {\n  global: {\n    status: 'idle',\n    error: {},\n    items: [],\n  },\n  byChannels: {},\n};\n\nexport const fetchBttvGlobalEmotes = createAsyncThunk(\n  'chat/fetchBttvGlobalEmotes',\n  () => api.fetchBttvGlobalEmotes(),\n);\n\ntype FetchBttvChannelEmotesParams = {\n  channel: string;\n  channelId: string;\n};\n\nexport const fetchBttvChannelEmotes = createAsyncThunk(\n  'chat/fetchBttvChannelEmotes',\n  ({ channelId }: FetchBttvChannelEmotesParams) =>\n    api.fetchBttvChannelEmotes(channelId),\n);\n\nexport const bttvEmotesExtraReducers = (\n  builder: ActionReducerMapBuilder<ChatState>,\n) => {\n  builder.addCase(fetchBttvGlobalEmotes.pending, (state) => {\n    state.bttvEmotes.global.status = 'loading';\n    state.bttvEmotes.global.error = {};\n  });\n\n  builder.addCase(fetchBttvGlobalEmotes.fulfilled, (state, { payload }) => {\n    state.bttvEmotes.global.status = 'success';\n    state.bttvEmotes.global.items = parseBttvGlobalEmotes(payload);\n  });\n\n  builder.addCase(fetchBttvGlobalEmotes.rejected, (state, { error }) => {\n    state.bttvEmotes.global.status = 'error';\n    state.bttvEmotes.global.error = error;\n  });\n\n  builder.addCase(\n    fetchBttvChannelEmotes.pending,\n    (state, { meta: { arg } }) => {\n      const { channel } = arg;\n\n      if (!state.bttvEmotes.byChannels[channel]) {\n        state.bttvEmotes.byChannels[channel] = {\n          status: 'loading',\n          error: {},\n          items: [],\n        };\n      } else {\n        state.bttvEmotes.byChannels[channel].status = 'loading';\n        state.bttvEmotes.byChannels[channel].error = {};\n      }\n    },\n  );\n\n  builder.addCase(\n    fetchBttvChannelEmotes.fulfilled,\n    (state, { payload, meta: { arg } }) => {\n      const { channel } = arg;\n\n      state.bttvEmotes.byChannels[channel].status = 'success';\n      state.bttvEmotes.byChannels[channel].items = parseBttvChannelEmotes(\n        payload,\n      );\n    },\n  );\n\n  builder.addCase(\n    fetchBttvChannelEmotes.rejected,\n    (state, { error, meta: { arg } }) => {\n      const { channel } = arg;\n\n      state.bttvEmotes.byChannels[channel].status = 'error';\n      state.bttvEmotes.byChannels[channel].error = error;\n    },\n  );\n};\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport type { ActionReducerMapBuilder } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { ChatState } from 'features/chat/slice';\nimport {\n  parseFfzGlobalEmotes,\n  parseFfzChannelEmotes,\n} from 'features/chat/utils/parseApiResponse';\nimport type { FetchResult } from 'utils/types';\n\nexport type FfzEmotesState = {\n  global: FetchResult<api.FfzEmote[]>;\n  byChannels: Record<string, FetchResult<api.FfzEmote[]>>;\n};\n\nexport const ffzEmotesInitialState: FfzEmotesState = {\n  global: {\n    status: 'idle',\n    error: {},\n    items: [],\n  },\n  byChannels: {},\n};\n\nexport const fetchFfzGlobalEmotes = createAsyncThunk(\n  'chat/fetchFfzGlobalEmotes',\n  () => api.fetchFfzGlobalEmotes(),\n);\n\ntype FetchFfzChannelEmotesParams = {\n  channel: string;\n  channelId: string;\n};\n\nexport const fetchFfzChannelEmotes = createAsyncThunk(\n  'chat/fetchFfzChannelEmotes',\n  ({ channelId }: FetchFfzChannelEmotesParams) =>\n    api.fetchFfzChannelEmotes(channelId),\n);\n\nexport const ffzEmotesExtraReducers = (\n  builder: ActionReducerMapBuilder<ChatState>,\n) => {\n  builder.addCase(fetchFfzGlobalEmotes.pending, (state) => {\n    state.ffzEmotes.global.status = 'loading';\n    state.ffzEmotes.global.error = {};\n  });\n\n  builder.addCase(fetchFfzGlobalEmotes.fulfilled, (state, { payload }) => {\n    state.ffzEmotes.global.status = 'success';\n    state.ffzEmotes.global.items = parseFfzGlobalEmotes(payload);\n  });\n\n  builder.addCase(fetchFfzGlobalEmotes.rejected, (state, { error }) => {\n    state.ffzEmotes.global.status = 'error';\n    state.ffzEmotes.global.error = error;\n  });\n\n  builder.addCase(fetchFfzChannelEmotes.pending, (state, { meta: { arg } }) => {\n    const { channel } = arg;\n\n    if (!state.ffzEmotes.byChannels[channel]) {\n      state.ffzEmotes.byChannels[channel] = {\n        status: 'loading',\n        error: {},\n        items: [],\n      };\n    } else {\n      state.ffzEmotes.byChannels[channel].status = 'loading';\n      state.ffzEmotes.byChannels[channel].error = {};\n    }\n  });\n\n  builder.addCase(\n    fetchFfzChannelEmotes.fulfilled,\n    (state, { payload, meta: { arg } }) => {\n      const { channel } = arg;\n\n      state.ffzEmotes.byChannels[channel].status = 'success';\n      state.ffzEmotes.byChannels[channel].items = parseFfzChannelEmotes(\n        payload,\n      );\n    },\n  );\n\n  builder.addCase(\n    fetchFfzChannelEmotes.rejected,\n    (state, { error, meta: { arg } }) => {\n      const { channel } = arg;\n\n      state.ffzEmotes.byChannels[channel].status = 'error';\n      state.ffzEmotes.byChannels[channel].error = error;\n    },\n  );\n};\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, ActionReducerMapBuilder } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport { FetchResult } from 'utils/types';\nimport type { ChatState } from 'features/chat/slice';\nimport { parseBadges } from 'features/chat/utils/parseApiResponse';\n\ntype Badges = Record<string, api.TwitchBadge>;\n\nexport type BadgesState = {\n  global: FetchResult<Badges>;\n  byChannels: Record<string, FetchResult<Badges>>;\n};\n\nexport const badgesInitialState: BadgesState = {\n  global: {\n    status: 'idle',\n    error: {},\n    items: {},\n  },\n  byChannels: {},\n};\n\nexport const fetchGlobalBadges = createAsyncThunk(\n  'chat/fetchGlobalBadges',\n  () => api.fetchGlobalBadges(),\n);\n\ntype FetchChannelBadgesParams = {\n  channel: string;\n  channelId: string;\n};\n\nexport const fetchChannelBadges = createAsyncThunk(\n  'chat/fetchChannelBadges',\n  ({ channelId }: FetchChannelBadgesParams) =>\n    api.fetchChannelBadges(channelId),\n);\n\nexport const badgesExtraReducers = (\n  builder: ActionReducerMapBuilder<ChatState>,\n) => {\n  builder.addCase(fetchGlobalBadges.pending, (state) => {\n    state.badges.global.status = 'loading';\n    state.badges.global.error = {};\n  });\n\n  builder.addCase(fetchGlobalBadges.fulfilled, (state, { payload }) => {\n    state.badges.global.status = 'success';\n    state.badges.global.items = parseBadges(payload);\n  });\n\n  builder.addCase(fetchGlobalBadges.rejected, (state, { error }) => {\n    state.badges.global.status = 'error';\n    state.badges.global.error = error;\n  });\n\n  builder.addCase(fetchChannelBadges.pending, (state, { meta: { arg } }) => {\n    const { channel } = arg;\n\n    if (!state.badges.byChannels[channel]) {\n      state.badges.byChannels[channel] = {\n        status: 'loading',\n        error: {},\n        items: {},\n      };\n    } else {\n      state.badges.byChannels[channel].status = 'loading';\n      state.badges.byChannels[channel].error = {};\n    }\n  });\n\n  builder.addCase(\n    fetchChannelBadges.fulfilled,\n    (state, { payload, meta: { arg } }) => {\n      const { channel } = arg;\n\n      state.badges.byChannels[channel].status = 'success';\n      state.badges.byChannels[channel].items = parseBadges(payload);\n    },\n  );\n\n  builder.addCase(\n    fetchChannelBadges.rejected,\n    (state, { error, meta: { arg } }) => {\n      const { channel } = arg;\n\n      state.badges.byChannels[channel].status = 'error';\n      state.badges.byChannels[channel].error = error;\n    },\n  );\n};\n","/* eslint-disable no-param-reassign */\nimport type { PayloadAction, CaseReducer } from '@reduxjs/toolkit';\nimport type twitchIrc from 'twitch-simple-irc';\n\nimport type { ChatState } from 'features/chat/slice';\n\ntype Params = {\n  room: twitchIrc.RoomStateTags | null;\n  user: twitchIrc.UserStateTags | null;\n};\n\nexport type ParamsState = {\n  global: twitchIrc.GlobalUserStateTags | null;\n  byChannels: Record<string, Params>;\n};\n\nexport const paramsInitialState: ParamsState = {\n  global: null,\n  byChannels: {},\n};\n\nconst updateGlobalUserParams: CaseReducer<\n  ChatState,\n  PayloadAction<twitchIrc.GlobalUserStateEvent>\n> = (state, { payload }): void => {\n  state.params.global = payload.tags;\n};\n\nconst updateUserParams: CaseReducer<\n  ChatState,\n  PayloadAction<twitchIrc.UserStateEvent>\n> = (state, { payload }): void => {\n  const { channel, tags } = payload;\n\n  if (!state.params.byChannels[channel]) {\n    state.params.byChannels[channel] = {\n      room: null,\n      user: null,\n    };\n  }\n\n  state.params.byChannels[channel].user = tags;\n};\n\nconst updateRoomParams: CaseReducer<\n  ChatState,\n  PayloadAction<twitchIrc.RoomStateEvent>\n> = (state, { payload }): void => {\n  const { channel, tags } = payload;\n\n  if (!state.params.byChannels[channel]) {\n    state.params.byChannels[channel] = {\n      room: null,\n      user: null,\n    };\n  }\n\n  // TODO: merge tags\n  state.params.byChannels[channel].room = tags;\n};\n\nexport const paramsReducers = {\n  updateGlobalUserParams,\n  updateUserParams,\n  updateRoomParams,\n};\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport type { ActionReducerMapBuilder } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchResult } from 'utils/types';\nimport type { ChatState } from 'features/chat/slice';\nimport { parseBlockedUsers } from 'features/chat/utils/parseApiResponse';\n\nexport type BlockedUsersState = FetchResult<string[]>;\n\nexport const blockedUsersInitialState: BlockedUsersState = {\n  status: 'idle',\n  error: {},\n  items: [],\n};\n\nexport const fetchBlockedUsers = createAsyncThunk(\n  'chat/fetchBlockedUsers',\n  (userId: string) => api.fetchBlockedUsers(userId),\n);\n\nexport const blockedUsersExtraReducers = (\n  builder: ActionReducerMapBuilder<ChatState>,\n) => {\n  builder.addCase(fetchBlockedUsers.pending, (state) => {\n    state.blockedUsers.status = 'loading';\n    state.blockedUsers.error = {};\n  });\n\n  builder.addCase(fetchBlockedUsers.fulfilled, (state, { payload }): void => {\n    state.blockedUsers.status = 'success';\n    state.blockedUsers.items = parseBlockedUsers(payload);\n  });\n\n  builder.addCase(fetchBlockedUsers.rejected, (state, { error }): void => {\n    state.blockedUsers.status = 'error';\n    state.blockedUsers.error = error;\n  });\n};\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n  messagesInitialState,\r\n  messagesReducers,\r\n  messagesExtraReducers,\r\n  MessagesState,\r\n} from 'features/chat/slice/messages';\r\nimport {\r\n  twitchEmotesInitialState,\r\n  twitchEmotesExtraReducers,\r\n  TwitchEmotesState,\r\n} from 'features/chat/slice/twitchEmotes';\r\nimport {\r\n  bttvEmotesInitialState,\r\n  bttvEmotesExtraReducers,\r\n  BttvEmotesState,\r\n} from 'features/chat/slice/bttvEmotes';\r\nimport {\r\n  ffzEmotesInitialState,\r\n  ffzEmotesExtraReducers,\r\n  FfzEmotesState,\r\n} from 'features/chat/slice/ffzEmotes';\r\nimport {\r\n  badgesInitialState,\r\n  badgesExtraReducers,\r\n  BadgesState,\r\n} from 'features/chat/slice/badges';\r\nimport {\r\n  paramsInitialState,\r\n  paramsReducers,\r\n  ParamsState,\r\n} from 'features/chat/slice/params';\r\nimport {\r\n  blockedUsersInitialState,\r\n  blockedUsersExtraReducers,\r\n  BlockedUsersState,\r\n} from 'features/chat/slice/blockedUsers';\r\n\r\nexport { fetchChatHistory } from 'features/chat/slice/messages';\r\nexport { fetchTwitchEmotes } from 'features/chat/slice/twitchEmotes';\r\nexport {\r\n  fetchBttvGlobalEmotes,\r\n  fetchBttvChannelEmotes,\r\n} from 'features/chat/slice/bttvEmotes';\r\nexport {\r\n  fetchFfzGlobalEmotes,\r\n  fetchFfzChannelEmotes,\r\n} from 'features/chat/slice/ffzEmotes';\r\nexport {\r\n  fetchGlobalBadges,\r\n  fetchChannelBadges,\r\n} from 'features/chat/slice/badges';\r\nexport { fetchBlockedUsers } from 'features/chat/slice/blockedUsers';\r\n\r\nexport type ChatState = {\r\n  isConnected: boolean;\r\n  currentChannel: string;\r\n  messages: MessagesState;\r\n  twitchEmotes: TwitchEmotesState;\r\n  bttvEmotes: BttvEmotesState;\r\n  ffzEmotes: FfzEmotesState;\r\n  badges: BadgesState;\r\n  params: ParamsState;\r\n  blockedUsers: BlockedUsersState;\r\n};\r\n\r\nconst initialState: ChatState = {\r\n  isConnected: false,\r\n  currentChannel: '',\r\n  messages: messagesInitialState,\r\n  twitchEmotes: twitchEmotesInitialState,\r\n  bttvEmotes: bttvEmotesInitialState,\r\n  ffzEmotes: ffzEmotesInitialState,\r\n  badges: badgesInitialState,\r\n  params: paramsInitialState,\r\n  blockedUsers: blockedUsersInitialState,\r\n};\r\n\r\nconst chat = createSlice({\r\n  name: 'chat',\r\n  initialState,\r\n  reducers: {\r\n    updateIsConnected: (state, { payload }: PayloadAction<boolean>): void => {\r\n      state.isConnected = payload;\r\n    },\r\n\r\n    updateCurrentChannel: (state, { payload }: PayloadAction<string>): void => {\r\n      state.currentChannel = payload;\r\n    },\r\n\r\n    ...messagesReducers,\r\n    ...paramsReducers,\r\n  },\r\n  extraReducers: (builder) => {\r\n    messagesExtraReducers(builder);\r\n    twitchEmotesExtraReducers(builder);\r\n    bttvEmotesExtraReducers(builder);\r\n    ffzEmotesExtraReducers(builder);\r\n    badgesExtraReducers(builder);\r\n    blockedUsersExtraReducers(builder);\r\n  },\r\n});\r\n\r\nexport const {\r\n  updateIsConnected,\r\n  updateCurrentChannel,\r\n\r\n  // messages\r\n  clearChat,\r\n  addMessage,\r\n  addChatHistory,\r\n\r\n  // params\r\n  updateGlobalUserParams,\r\n  updateUserParams,\r\n  updateRoomParams,\r\n} = chat.actions;\r\n\r\nexport default chat.reducer;\r\n","import * as R from 'ramda';\nimport { createSelector } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\nimport type { StateEmotes } from 'features/chat/selectors';\nimport getEmotesByText from 'features/chat/utils/getEmotesByText';\nimport { getEmotesFromUsageStatistic } from 'features/chat/utils/emotesUsageStatistic';\n\nexport type EmoteCategory = {\n  title?: string;\n  items: htmlEntity.Emote[];\n};\n\nconst getTwitchUserEmoteCategories = R.pipe<\n  Record<string, api.TwitchEmote[]>,\n  api.TwitchEmote[][],\n  EmoteCategory[]\n>(\n  R.values,\n  R.map((items) => ({ items: R.map(htmlEntity.createTwitchEmote, items) })),\n);\n\nconst createMainEmoteCategories = (emotes: StateEmotes) => {\n  if (!emotes) return [];\n\n  const {\n    twitchGlobal,\n    twitchUser,\n    bttvGlobal,\n    bttvChannel,\n    ffzGlobal,\n    ffzChannel,\n  } = emotes;\n\n  return [\n    {\n      title: 'BetterTTV Channel Emotes',\n      items: bttvChannel.map(htmlEntity.createBttvEmote),\n    },\n    {\n      title: 'FrankerFaceZ Channel Emotes',\n      items: ffzChannel.map(htmlEntity.createFfzEmote),\n    },\n    ...getTwitchUserEmoteCategories(twitchUser),\n    {\n      title: 'Twitch',\n      items: R.map(\n        htmlEntity.createTwitchEmote,\n        R.propOr([], '0', twitchGlobal),\n      ),\n    },\n    {\n      title: 'BetterTTV',\n      items: bttvGlobal.map(htmlEntity.createBttvEmote),\n    },\n    {\n      title: 'FrankerFaceZ',\n      items: ffzGlobal.map(htmlEntity.createFfzEmote),\n    },\n  ].filter(R.path(['items', 'length'])) as EmoteCategory[];\n};\n\nconst getMainEmoteCategories = createSelector(\n  (emotes: any) => emotes,\n  createMainEmoteCategories,\n);\n\nconst createEmoteCategories = (emotes: StateEmotes, text: string) => {\n  if (!emotes) return [];\n\n  if (text) {\n    const items = getEmotesByText(text, emotes);\n    const title = `${items.length ? '' : 'No '}Search Results for \"${text}\"`;\n\n    return [{ title, items }];\n  }\n\n  const mainEmoteCategories = getMainEmoteCategories(emotes);\n  const frequentlyUsed = getEmotesFromUsageStatistic(emotes);\n\n  if (!frequentlyUsed.length) {\n    return mainEmoteCategories;\n  }\n\n  const frequentlyUsedCategory = {\n    title: 'Frequently Used',\n    items: frequentlyUsed,\n  };\n\n  return [frequentlyUsedCategory, ...mainEmoteCategories] as EmoteCategory[];\n};\n\nexport default createEmoteCategories;\n","import * as R from 'ramda';\nimport { createSelector } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { RootState } from 'app/rootReducer';\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\nimport type { ChatMessage } from 'features/chat/slice/messages';\nimport createEmoteCategories from 'features/chat/utils/createEmoteCategories';\n\nexport type StateEmotes = {\n  twitchGlobal: Record<string, api.TwitchEmote[]>;\n  twitchUser: Record<string, api.TwitchEmote[]>;\n  bttvGlobal: api.BttvGlobalEmote[];\n  bttvChannel: api.BttvChannelEmote[];\n  ffzGlobal: api.FfzEmote[];\n  ffzChannel: api.FfzEmote[];\n} | null;\n\nexport const currentChannelSelector = (state: RootState) =>\n  state.chat.currentChannel;\n\nexport const isConnectedSelector = (state: RootState) => state.chat.isConnected;\n\n// messages\n\nexport const messagesSelector = (state: RootState): ChatMessage[] =>\n  state.chat.messages[currentChannelSelector(state)]?.items || [];\n\nexport const usersSelector = (state: RootState): string[] =>\n  state.chat.messages[currentChannelSelector(state)]?.users || [];\n\nexport const isHistoryLoadedSelector = (state: RootState) => {\n  const currentChannel = currentChannelSelector(state);\n\n  return (\n    state.chat.messages[currentChannel]?.history.status === 'success' ||\n    state.chat.messages[currentChannel]?.history.status === 'error' ||\n    false\n  );\n};\n\nexport const isHistoryAddedSelector = (state: RootState) =>\n  state.chat.messages[currentChannelSelector(state)]?.history.isAdded || false;\n\nexport const isEvenSelector = (state: RootState) =>\n  state.chat.messages[currentChannelSelector(state)]?.isEven || false;\n\n// emotes isLoaded\n\nexport const isTwitchEmotesLoadedSelector = (state: RootState) =>\n  state.chat.twitchEmotes.status === 'success' ||\n  state.chat.twitchEmotes.status === 'error';\n\nexport const isBttvGlobalEmotesLoadedSelector = (state: RootState) =>\n  state.chat.bttvEmotes.global.status === 'success' ||\n  state.chat.bttvEmotes.global.status === 'error';\n\nexport const isBttvChannelEmotesLoadedSelector = (state: RootState) => {\n  const currentChannel = currentChannelSelector(state);\n\n  return (\n    state.chat.bttvEmotes.byChannels[currentChannel]?.status === 'success' ||\n    state.chat.bttvEmotes.byChannels[currentChannel]?.status === 'error' ||\n    false\n  );\n};\n\nexport const isBttvEmotesLoadedSelector = (state: RootState) =>\n  isBttvGlobalEmotesLoadedSelector(state) &&\n  isBttvChannelEmotesLoadedSelector(state);\n\nexport const isFfzGlobalEmotesLoadedSelector = (state: RootState) =>\n  state.chat.ffzEmotes.global.status === 'success' ||\n  state.chat.ffzEmotes.global.status === 'error';\n\nexport const isFfzChannelEmotesLoadedSelector = (state: RootState) => {\n  const currentChannel = currentChannelSelector(state);\n\n  return (\n    state.chat.ffzEmotes.byChannels[currentChannel]?.status === 'success' ||\n    state.chat.ffzEmotes.byChannels[currentChannel]?.status === 'error' ||\n    false\n  );\n};\n\nexport const isFfzEmotesLoadedSelector = (state: RootState) =>\n  isFfzGlobalEmotesLoadedSelector(state) &&\n  isFfzChannelEmotesLoadedSelector(state);\n\nexport const isEmotesLoadedSelector = (state: RootState) =>\n  isTwitchEmotesLoadedSelector(state) &&\n  isBttvGlobalEmotesLoadedSelector(state) &&\n  isBttvChannelEmotesLoadedSelector(state) &&\n  isFfzGlobalEmotesLoadedSelector(state) &&\n  isFfzChannelEmotesLoadedSelector(state);\n\n// emotes\nconst twitchEmotesSelector = (state: RootState) =>\n  state.chat.twitchEmotes.items;\nconst twitchGlobalEmotesSelector = createSelector(\n  twitchEmotesSelector,\n  R.pick(['0']),\n);\nconst twitchUserEmotesSelector = createSelector(\n  twitchEmotesSelector,\n  R.omit(['0']),\n);\n\nconst bttvGlobalEmotesSelector = (state: RootState) =>\n  state.chat.bttvEmotes.global.items;\nconst bttvChannelEmotesSelector = (state: RootState) =>\n  state.chat.bttvEmotes.byChannels[currentChannelSelector(state)]?.items || [];\n\nconst ffzGlobalEmotesSelector = (state: RootState) =>\n  state.chat.ffzEmotes.global.items;\nconst ffzChannelEmotesSelector = (state: RootState) =>\n  state.chat.ffzEmotes.byChannels[currentChannelSelector(state)]?.items || [];\n\nexport const emotesSelector = createSelector(\n  isEmotesLoadedSelector,\n  twitchGlobalEmotesSelector,\n  twitchUserEmotesSelector,\n  bttvGlobalEmotesSelector,\n  bttvChannelEmotesSelector,\n  ffzGlobalEmotesSelector,\n  ffzChannelEmotesSelector,\n  (\n    isEmotesLoaded,\n    twitchGlobal,\n    twitchUser,\n    bttvGlobal,\n    bttvChannel,\n    ffzGlobal,\n    ffzChannel,\n  ) => {\n    if (!isEmotesLoaded) return null;\n\n    return {\n      twitchGlobal,\n      twitchUser,\n      bttvGlobal,\n      bttvChannel,\n      ffzGlobal,\n      ffzChannel,\n    } as StateEmotes;\n  },\n);\n\nexport const emoteCategoriesSelector = (state: RootState, search: string) => {\n  const emotes = emotesSelector(state);\n\n  return createEmoteCategories(emotes, search);\n};\n\n// Badges\n\nexport const userBadgesSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user?.badges ||\n  {};\n\nexport const isGlobalBadgesLoadedSelector = (state: RootState) =>\n  state.chat.badges.global.status === 'success' ||\n  state.chat.badges.global.status === 'error';\n\nexport const isChannelBadgesLoadedSelector = (state: RootState) =>\n  state.chat.badges.byChannels[currentChannelSelector(state)]?.status ===\n    'success' ||\n  state.chat.badges.byChannels[currentChannelSelector(state)]?.status ===\n    'error';\n\nexport const isBadgesLoadedSelector = (state: RootState) =>\n  isGlobalBadgesLoadedSelector(state) && isChannelBadgesLoadedSelector(state);\n\nexport const globalBadgesSelector = (state: RootState) =>\n  state.chat.badges.global.items;\n\nexport const channelBadgesSelector = (state: RootState) =>\n  state.chat.badges.byChannels[currentChannelSelector(state)]?.items || {};\n\nexport const userBadgesImagesSelector = createSelector(\n  userBadgesSelector,\n  globalBadgesSelector,\n  channelBadgesSelector,\n  htmlEntity.createBadges,\n);\n\n// params\n\nexport const currentChannelIdSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.room?.roomId ||\n  '';\n\nexport const userColorSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user?.color ||\n  '';\n\nexport const userDisplayNameSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user\n    ?.displayName || '';\n\n// blocked users\n\nexport const isBlockedUsersLoadedSelector = (state: RootState) =>\n  state.chat.blockedUsers.status !== 'idle' &&\n  state.chat.blockedUsers.status !== 'loading';\n\nexport const blockedUsersSelector = (state: RootState) =>\n  state.chat.blockedUsers.items;\n","import tls from 'tls';\nimport { Socket } from 'net';\nimport { EventEmitter } from 'events';\nimport * as tekko from 'tekko';\n\nimport {\n  TekkoMessage,\n  MessageEvent,\n  GlobalUserStateEvent,\n  GlobalUserStateTags,\n  UserStateEvent,\n  UserStateTags,\n  RoomStateEvent,\n  RoomStateTags,\n  ClearChatEvent,\n  ClearMessageEvent,\n  HostTargetEvent,\n  NoticeEvent,\n  UserNoticeEvent,\n  WhisperEvent,\n  JoinEvent,\n  PartEvent,\n  PingEvent,\n} from './types';\nimport { isNode, getChannelFromMessage, getRandomUsername } from './utils';\nimport {\n  normalizeChatMessage,\n  normalizeState,\n  normalizeCommand,\n  normalizeWhisper,\n  normalizeGlobalUserState,\n} from './normalize';\n\nexport enum Commands {\n  REPLY001 = '001',\n  PING = 'PING',\n  PONG = 'PONG',\n  JOIN = 'JOIN',\n  PART = 'PART',\n  PRIVMSG = 'PRIVMSG',\n  NOTICE = 'NOTICE',\n  USERNOTICE = 'USERNOTICE',\n  GLOBALUSERSTATE = 'GLOBALUSERSTATE',\n  USERSTATE = 'USERSTATE',\n  ROOMSTATE = 'ROOMSTATE',\n  CLEARCHAT = 'CLEARCHAT',\n  CLEARMSG = 'CLEARMSG',\n  HOSTTARGET = 'HOSTTARGET',\n  WHISPER = 'WHISPER',\n}\n\ninterface ClientOptions {\n  name?: string;\n  auth?: string;\n  secure?: boolean;\n}\n\ninterface Channels {\n  [channel: string]: {\n    userState: UserStateTags;\n    roomState: RoomStateTags;\n  };\n}\n\ntype Listener<T> = (data: T) => void;\n\nexport interface Client {\n  on(event: 'connect', listener: () => void): this;\n  on(event: 'disconnect', listener: (error?: Error) => void): this;\n  on(event: 'register', listener: () => void): this;\n  on(event: 'message', listener: Listener<MessageEvent>): this;\n  on(event: 'notice', listener: Listener<NoticeEvent>): this;\n  on(event: 'usernotice', listener: Listener<UserNoticeEvent>): this;\n  on(event: 'whisper', listener: Listener<WhisperEvent>): this;\n  on(event: 'globaluserstate', listener: Listener<GlobalUserStateEvent>): this;\n  on(event: 'userstate', listener: Listener<UserStateEvent>): this;\n  on(event: 'roomstate', listener: Listener<RoomStateEvent>): this;\n  on(event: 'join', listener: Listener<JoinEvent>): this;\n  on(event: 'part', listener: Listener<PartEvent>): this;\n  on(event: 'clearchat', listener: Listener<ClearChatEvent>): this;\n  on(event: 'clearmessage', listener: Listener<ClearMessageEvent>): this;\n  on(event: 'hosttarget', listener: Listener<HostTargetEvent>): this;\n  on(event: 'ping', listener: Listener<PingEvent>): this;\n  on(event: 'error', listener: (error: Error) => void): this;\n\n  emit(event: 'connect'): boolean;\n  emit(event: 'disconnect', error?: Error): boolean;\n  emit(event: 'register'): boolean;\n  emit(event: 'message', data: MessageEvent): boolean;\n  emit(event: 'notice', data: NoticeEvent): boolean;\n  emit(event: 'usernotice', data: UserNoticeEvent): boolean;\n  emit(event: 'whisper', data: WhisperEvent): boolean;\n  emit(event: 'globaluserstate', data: GlobalUserStateEvent): boolean;\n  emit(event: 'userstate', data: UserStateEvent): boolean;\n  emit(event: 'roomstate', data: RoomStateEvent): boolean;\n  emit(event: 'join', data: JoinEvent): boolean;\n  emit(event: 'part', data: PartEvent): boolean;\n  emit(event: 'clearchat', data: ClearChatEvent): boolean;\n  emit(event: 'clearmessage', data: ClearMessageEvent): boolean;\n  emit(event: 'hosttarget', data: HostTargetEvent): boolean;\n  emit(event: 'ping', data: PingEvent): boolean;\n  emit(event: 'error', error: Error): boolean;\n}\n\nexport class Client extends EventEmitter {\n  socket: WebSocket | Socket | null = null;\n\n  options: ClientOptions;\n\n  globalUserState: GlobalUserStateTags | null = null;\n\n  channels: Channels = {};\n\n  private _connected: boolean = false;\n\n  private _connecting: boolean = false;\n\n  private _registered: boolean = false;\n\n  constructor(options: ClientOptions | null | undefined = {}) {\n    super();\n    this.options = { secure: true, ...options };\n  }\n\n  async connect(): Promise<void> {\n    const connection = isNode\n      ? this._connectInNode()\n      : this._connectInBrowser();\n\n    await connection;\n\n    return this._register();\n  }\n\n  disconnect(): void {\n    if (!this._connected) return;\n\n    if (isNode) {\n      (this.socket as Socket).destroy();\n    } else {\n      (this.socket as WebSocket).close();\n    }\n\n    this.socket = null;\n    this._connected = false;\n    this._connecting = false;\n    this._registered = false;\n\n    this.emit('disconnect');\n  }\n\n  receiveRaw(rawData: string) {\n    const data = rawData.trim().split('\\r\\n');\n\n    data.forEach((line) => this._handleMessage(line));\n  }\n\n  sendRaw(message: string): boolean {\n    if (this.socket === null || !message) {\n      return false;\n    }\n\n    if (isNode) {\n      (this.socket as Socket).write(message);\n    } else {\n      (this.socket as WebSocket).send(message);\n    }\n\n    return true;\n  }\n\n  say(channel: string, message: string): boolean {\n    const ircMessage = tekko.format({\n      command: Commands.PRIVMSG,\n      middle: [`#${channel}`],\n      trailing: message,\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  sendCommand(\n    channel: string,\n    command: string,\n    params: string | Array<string> = '',\n  ): boolean {\n    const commandParams = Array.isArray(params) ? params.join(' ') : params;\n    const ircMessage = tekko.format({\n      command: Commands.PRIVMSG,\n      middle: [`#${channel}`],\n      trailing: `/${command} ${commandParams}`,\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  join(channel: string): boolean {\n    if (!this._registered) return false;\n\n    const ircMessage = tekko.format({\n      command: Commands.JOIN,\n      middle: [`#${channel}`],\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  part(channel: string): boolean {\n    if (!this._registered) return false;\n\n    const ircMessage = tekko.format({\n      command: Commands.PART,\n      middle: [`#${channel}`],\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  _handleMessage(raw: string) {\n    const data: TekkoMessage = tekko.parse(raw) as TekkoMessage;\n    data.raw = raw;\n    const { command } = data;\n\n    if (command === Commands.PING) {\n      this.sendRaw(`${Commands.PONG} :tmi.twitch.tv`);\n      this.emit('ping', { raw });\n\n      return;\n    }\n\n    if (command === Commands.REPLY001) {\n      this.options.name = data.middle[0];\n      this._registered = true;\n\n      this.emit('register');\n\n      return;\n    }\n\n    if (command === Commands.PRIVMSG) {\n      const eventData = normalizeChatMessage(data);\n\n      this.emit('message', eventData);\n\n      return;\n    }\n\n    if (command === Commands.USERSTATE) {\n      const channel = getChannelFromMessage(data);\n      const eventData = normalizeState(data) as UserStateEvent;\n\n      this._updateUserState(channel, eventData.tags);\n      this.emit('userstate', eventData);\n\n      return;\n    }\n\n    if (command === Commands.JOIN) {\n      const channel = getChannelFromMessage(data);\n      const eventData = { channel } as JoinEvent;\n\n      this.emit('join', eventData);\n\n      return;\n    }\n\n    if (command === Commands.PART) {\n      const channel = getChannelFromMessage(data);\n      const eventData = { channel } as PartEvent;\n\n      this.emit('part', eventData);\n\n      return;\n    }\n\n    if (command === Commands.ROOMSTATE) {\n      const channel = getChannelFromMessage(data);\n      const eventData = (normalizeState(data) as unknown) as RoomStateEvent;\n\n      this._updateRoomState(channel, eventData.tags);\n      this.emit('roomstate', eventData);\n\n      return;\n    }\n\n    if (command === Commands.NOTICE) {\n      const eventData = normalizeCommand(data) as NoticeEvent;\n\n      this.emit('notice', eventData);\n\n      return;\n    }\n\n    if (command === Commands.USERNOTICE) {\n      const eventData = (normalizeCommand(data) as unknown) as UserNoticeEvent;\n\n      this.emit('usernotice', eventData);\n\n      return;\n    }\n\n    if (command === Commands.CLEARCHAT) {\n      const eventData = normalizeCommand(data) as ClearChatEvent;\n\n      this.emit('clearchat', eventData);\n\n      return;\n    }\n\n    if (command === Commands.CLEARMSG) {\n      const eventData = normalizeCommand(data) as ClearMessageEvent;\n\n      this.emit('clearmessage', eventData);\n\n      return;\n    }\n\n    if (command === Commands.HOSTTARGET) {\n      const eventData = normalizeCommand(data) as HostTargetEvent;\n\n      this.emit('hosttarget', eventData);\n\n      return;\n    }\n\n    if (command === Commands.WHISPER) {\n      const eventData = normalizeWhisper(data);\n\n      this.emit('whisper', eventData);\n\n      return;\n    }\n\n    if (command === Commands.GLOBALUSERSTATE) {\n      const eventData = normalizeGlobalUserState(data);\n\n      this._updateGlobalUserState(eventData.tags);\n      this.emit('globaluserstate', eventData);\n\n      return;\n    }\n  }\n\n  _connectInNode(): Promise<void> {\n    const host = 'irc.chat.twitch.tv';\n    const port = this.options.secure ? 6697 : 6667;\n\n    return new Promise<void>((resolve, reject) => {\n      this._connecting = true;\n\n      const handleConnect = () => {\n        this._connecting = false;\n        this._connected = true;\n        this.emit('connect');\n        resolve();\n      };\n\n      if (this.options.secure) {\n        this.socket = tls.connect(port, host, {}, handleConnect);\n      } else {\n        this.socket = new Socket();\n        this.socket.connect(port, host, handleConnect);\n      }\n\n      this.socket.on('error', (error: Error) => {\n        this._connected = false;\n        this._connecting = false;\n        this.emit('disconnect', error);\n        reject(error);\n      });\n      this.socket.on('data', (data: Buffer) => {\n        this.receiveRaw(data.toString());\n      });\n      this.socket.on('close', () => {\n        this._connected = false;\n        this._connecting = false;\n        this._registered = false;\n        this.emit('disconnect');\n      });\n    });\n  }\n\n  _connectInBrowser(): Promise<void> {\n    const url = this.options.secure\n      ? 'wss://irc-ws.chat.twitch.tv:443'\n      : 'ws://irc-ws.chat.twitch.tv:80';\n\n    return new Promise<void>((resolve, reject) => {\n      this._connecting = true;\n      this.socket = new WebSocket(url);\n\n      this.socket.onopen = () => {\n        this._connected = true;\n        this._connecting = false;\n        this.emit('connect');\n        resolve();\n      };\n      this.socket.onmessage = ({ data }) => this.receiveRaw(data);\n      this.socket.onerror = () => {};\n      this.socket.onclose = ({ wasClean, code, reason }) => {\n        this.socket = null;\n        this._connected = false;\n        this._connecting = false;\n        this._registered = false;\n\n        if (wasClean) {\n          this.emit('disconnect');\n        } else {\n          const error = new Error(`[${code}] ${reason}`);\n          this.emit('disconnect', error);\n          reject(error);\n        }\n      };\n    });\n  }\n\n  _register(): Promise<void> {\n    if (!this._connected) return Promise.reject();\n    if (this._registered) return Promise.resolve();\n\n    const { name, auth } = this.options;\n\n    const nick = name || getRandomUsername();\n    const pass = auth ? `oauth:${auth}` : 'SCHMOOPIIE';\n\n    this.sendRaw('CAP REQ :twitch.tv/tags twitch.tv/commands');\n    this.sendRaw(`PASS ${pass}`);\n    this.sendRaw(`NICK ${nick}`);\n\n    return new Promise<void>((resolve, reject) => {\n      const handleRegister = () => {\n        resolve();\n        this.off('register', handleRegister);\n      };\n\n      this.on('register', handleRegister);\n\n      setTimeout(() => {\n        reject();\n        this.off('register', handleRegister);\n      }, 10000);\n    });\n  }\n\n  _updateGlobalUserState(globalUserState: GlobalUserStateTags) {\n    this.globalUserState = { ...this.globalUserState, ...globalUserState };\n  }\n\n  _updateUserState(channel: string, userState: UserStateTags) {\n    this.channels = {\n      ...this.channels,\n      [channel]: {\n        ...this.channels[channel],\n        userState,\n      },\n    };\n  }\n\n  _updateRoomState(channel: string, roomState: RoomStateTags) {\n    this.channels = {\n      ...this.channels,\n      [channel]: {\n        ...this.channels[channel],\n        roomState,\n      },\n    };\n  }\n\n  get connected() {\n    return this._connected;\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get registered() {\n    return this._registered;\n  }\n}\n\nexport default Client;\n","import tekko from 'tekko';\n\nexport const getRandomUsername = (): string => {\n  const randomSuffix = Math.floor(Math.random() * 100000)\n    .toString()\n    .padStart(5, '0');\n  return `justinfan${randomSuffix}`;\n};\n\nexport const getIsAction = (message: string): boolean =>\n  message.startsWith('\\u0001ACTION ') && message.endsWith('\\u0001');\n\nexport const normalizeActionMessage = (message: string): string =>\n  message.slice(8, -1);\n\nexport const getChannelFromMessage = (message: tekko.Message): string =>\n  message.middle[0].slice(1);\n\nexport const isNode = !!(\n  typeof process !== 'undefined' &&\n  process.versions &&\n  process.versions.node\n);\n","import tekko from 'tekko';\nimport { Emotes, BadgeInfo, Badges, TagType } from './types';\n\nconst booleanMessageTags = [\n  'mod',\n  'emote-only',\n  'r9k',\n  'rituals',\n  'subs-only',\n  'msg-param-should-share-streak',\n];\n\nconst numberMessageTags = [\n  'tmi-sent-ts',\n  'bits',\n  'ban-duration',\n  'msg-param-cumulative-months',\n  'msg-param-months',\n  'msg-param-promo-gift-total',\n  'msg-param-streak-months',\n  'msg-param-viewerCount',\n  'msg-param-threshold',\n];\n\nconst tagNamesMap: Record<string, string> = {\n  'badge-info': 'badgeInfo',\n  'display-name': 'displayName',\n  'emote-sets': 'emoteSets',\n  'room-id': 'roomId',\n  'tmi-sent-ts': 'tmiSentTs',\n  'user-id': 'userId',\n  'target-msg-id': 'targetMsgId',\n  'target-user-id': 'targetUserId',\n  'msg-id': 'msgId',\n  'system-msg': 'systemMsg',\n  'emote-only': 'emoteOnly',\n  'followers-only': 'followersOnly',\n  'subs-only': 'subsOnly',\n  'ban-duration': 'banDuration',\n  'message-id': 'messageId',\n  'thread-id': 'threadId',\n  'msg-param-cumulative-months': 'msgParamCumulativeMonths',\n  'msg-param-displayName': 'msgParamDisplayName',\n  'msg-param-login': 'msgParamLogin',\n  'msg-param-months': 'msgParamMonths',\n  'msg-param-promo-gift-total': 'msgParamPromoGiftTotal',\n  'msg-param-promo-name': 'msgParamPromoName',\n  'msg-param-recipient-display-name': 'msgParamRecipientDisplayName',\n  'msg-param-recipient-id': 'msgParamRecipientId',\n  'msg-param-recipient-user-name': 'msgParamRecipientUserName',\n  'msg-param-sender-login': 'msgParamSenderLogin',\n  'msg-param-sender-name': 'msgParamSenderName',\n  'msg-param-should-share-streak': 'msgParamShouldShareStreak',\n  'msg-param-streak-months': 'msgParamStreakMonths',\n  'msg-param-sub-plan': 'msgParamSubPlan',\n  'msg-param-sub-plan-name': 'msgParamSubPlanName',\n  'msg-param-viewerCount': 'msgParamViewerCount',\n  'msg-param-ritual-name': 'msgParamRitualName',\n  'msg-param-threshold': 'msgParamThreshold',\n};\n\nconst depricatedMessageTags = ['subscriber', 'turbo', 'user-type'];\n\nconst parseMessageEmotes = (raw: string = ''): Emotes => {\n  if (!raw) return {};\n\n  return raw.split('/').reduce((acc, emote) => {\n    const [id, indexes] = emote.split(':');\n\n    return {\n      ...acc,\n      [id]: indexes.split(',').map((index) => {\n        const [start, end] = index.split('-');\n\n        return {\n          start: Number.parseInt(start, 10),\n          end: Number.parseInt(end, 10),\n        };\n      }),\n    };\n  }, {});\n};\n\nconst parseBadges = (data: string = ''): BadgeInfo | Badges => {\n  if (!data) return {};\n\n  return data.split(',').reduce((acc, badge) => {\n    const [name, value] = badge.split('/');\n\n    return {\n      ...acc,\n      [name]: value,\n    };\n  }, {});\n};\n\nconst normalizeTagValue = (name: string, value: string): TagType => {\n  if (name === 'emotes') return parseMessageEmotes(value);\n  if (name === 'badges') return parseBadges(value);\n  if (name === 'badge-info') return parseBadges(value);\n\n  if (name === 'followers-only') {\n    let followersOnly: boolean | number = false;\n    if (value === '-1') {\n      followersOnly = false;\n    } else if (value === '0') {\n      followersOnly = true;\n    } else if (typeof value === 'string') {\n      followersOnly = parseInt(value, 10);\n    }\n    return followersOnly;\n  }\n\n  if (name === 'slow') {\n    let slow: boolean | number = false;\n    if (value === '0') {\n      slow = false;\n    } else if (typeof value === 'string') {\n      slow = parseInt(value, 10);\n    }\n    return slow;\n  }\n\n  if (booleanMessageTags.includes(name)) return value === '1';\n  if (numberMessageTags.includes(name)) return parseInt(value, 10);\n\n  if (typeof value === 'string') {\n    return value.replace('\\\\s', ' ');\n  }\n\n  return value;\n};\n\nexport const parseMessageTags = (\n  data?: tekko.MessageTags,\n): Record<string, TagType> => {\n  if (!data) {\n    return {};\n  }\n\n  return Object.entries(data).reduce((acc, [key, value]) => {\n    if (depricatedMessageTags.includes(key)) {\n      return acc;\n    }\n\n    const newKey = tagNamesMap[key] || key;\n\n    return {\n      ...acc,\n      [newKey]: normalizeTagValue(key, value as string),\n    };\n  }, {});\n};\n","import tekko from 'tekko';\n\nimport {\n  TekkoMessage,\n  GlobalUserStateEvent,\n  GlobalUserStateTags,\n  MessageEvent,\n  MessageTags,\n  WhisperEvent,\n  WhisperTags,\n} from './types';\nimport {\n  getIsAction,\n  normalizeActionMessage,\n  getChannelFromMessage,\n} from './utils';\nimport { parseMessageTags } from './parse';\n\nexport const normalizeChatMessage = (data: TekkoMessage): MessageEvent => {\n  const { raw, trailing, tags, prefix } = data;\n  const { name } = prefix as tekko.MessagePrefix;\n  const isAction = getIsAction(trailing);\n\n  return {\n    raw,\n    message: isAction ? normalizeActionMessage(trailing) : trailing,\n    channel: getChannelFromMessage(data),\n    user: name,\n    get tags() {\n      return (parseMessageTags(tags) as unknown) as MessageTags;\n    },\n    isAction,\n  };\n};\n\nexport const normalizeGlobalUserState = ({\n  raw,\n  tags,\n}: TekkoMessage): GlobalUserStateEvent => ({\n  raw,\n  get tags() {\n    return parseMessageTags(tags) as GlobalUserStateTags;\n  },\n});\n\nexport const normalizeState = (data: TekkoMessage) => {\n  const { raw, tags } = data;\n\n  return {\n    raw,\n    channel: getChannelFromMessage(data),\n    get tags() {\n      return parseMessageTags(tags);\n    },\n  };\n};\n\nexport const normalizeCommand = (data: TekkoMessage) => {\n  const { raw, trailing, tags } = data;\n\n  return {\n    raw,\n    message: trailing,\n    channel: getChannelFromMessage(data),\n    get tags() {\n      return parseMessageTags(tags);\n    },\n  };\n};\n\nexport const normalizeWhisper = ({\n  raw,\n  trailing,\n  tags,\n  prefix,\n  middle: [channel],\n}: TekkoMessage): WhisperEvent => {\n  const { name } = prefix as tekko.MessagePrefix;\n\n  return {\n    raw,\n    message: trailing,\n    channel,\n    user: name,\n    get tags() {\n      return (parseMessageTags(tags) as unknown) as WhisperTags;\n    },\n  };\n};\n","import tekko from 'tekko';\n\nexport interface TekkoMessage extends tekko.Message {\n  raw: string;\n}\n\nexport interface Emotes {\n  [emoteId: string]: Array<{ start: number; end: number }>;\n}\n\nexport interface BadgeInfo {\n  /**\n   * The exact number of months the user has been a subscriber.\n   */\n  subscriber?: number;\n}\n\nexport interface Badges {\n  admin?: string;\n  bits?: string;\n  broadcaster?: string;\n  global_mod?: string;\n  moderator?: string;\n  subscriber?: string;\n  staff?: string;\n  turbo?: string;\n}\n\nexport type TagType = string | boolean | number | Emotes | BadgeInfo | Badges;\n\ninterface ATags {\n  /**\n   * Metadata related to the chat badges in the `badges` tag.\n   */\n  badgeInfo: BadgeInfo;\n\n  /**\n   * List of chat badges and the version of each badge.\n   * Many badges have only 1 version, but some badges have different versions (images), depending on how long you hold the badge status; e.g., `subscriber`.\n   */\n  badges: Badges;\n\n  /**\n   * Hexadecimal RGB color code; the empty string if it is never set.\n   */\n  color: string;\n\n  /**\n   * The user’s display name, escaped as described in the IRCv3 spec. This is empty if it is never set.\n   */\n  displayName: string;\n\n  /**\n   * Your emote set, a comma-separated list of emote sets.\n   */\n  emoteSets: string;\n\n  /**\n   * Information to replace text in the message with emote images. This can be empty.\n   */\n  emotes: Emotes;\n\n  /**\n   * A unique ID for the message.\n   */\n  id: string;\n\n  /**\n   * `true` if the user has a moderator badge; otherwise, `false`.\n   */\n  mod: boolean;\n\n  /**\n   * The channel ID.\n   */\n  roomId: string;\n\n  /**\n   * Timestamp when the server received the message.\n   */\n  tmiSentTs: number;\n\n  /**\n   * The user’s ID.\n   */\n  userId: string;\n}\n\nexport interface MessageTags\n  extends Pick<\n    ATags,\n    | 'badgeInfo'\n    | 'badges'\n    | 'color'\n    | 'displayName'\n    | 'emotes'\n    | 'id'\n    | 'mod'\n    | 'roomId'\n    | 'tmiSentTs'\n    | 'userId'\n  > {\n  /**\n   * (Sent only for Bits messages) The amount of cheer/Bits employed by the user.\n   */\n  bits?: number;\n}\n\n/**\n * Sends a message to a channel.\n */\nexport interface MessageEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  user: string;\n  tags: MessageTags;\n  isAction: boolean;\n}\n\nexport type GlobalUserStateTags = Pick<\n  ATags,\n  'badgeInfo' | 'badges' | 'color' | 'displayName' | 'emoteSets' | 'userId'\n>;\n\n/**\n * On successful login, provides data about the current logged-in user through IRC tags.\n * It is sent after successfully authenticating (sending a PASS/NICK command).\n */\nexport interface GlobalUserStateEvent {\n  raw: string;\n  tags: GlobalUserStateTags;\n}\n\nexport type UserStateTags = Pick<\n  ATags,\n  'badgeInfo' | 'badges' | 'color' | 'displayName' | 'emoteSets' | 'mod'\n>;\n\n/**\n * Sends user-state data when a user joins a channel or sends a PRIVMSG to a channel.\n */\nexport interface UserStateEvent {\n  raw: string;\n  channel: string;\n  tags: UserStateTags;\n}\n\nexport interface RoomStateTags extends Pick<ATags, 'roomId'> {\n  /**\n   * Emote-only mode. If enabled, only emotes are allowed in chat.\n   */\n  emoteOnly?: boolean;\n\n  /**\n   * Followers-only mode. If enabled, controls which followers can chat.\n   * Valid values:\n   * -1 (disabled),\n   * false (all followers can chat),\n   * non-negative integer (only users following for at least the specified number of minutes can chat).\n   */\n  followersOnly?: boolean | number;\n\n  /**\n   * R9K mode. If enabled, messages with more than 9 characters must be unique.\n   */\n  r9k?: boolean;\n\n  /**\n   * (Not documented)\n   */\n  rituals?: boolean;\n\n  /**\n   * The number of seconds a chatter without moderator privileges must wait between sending messages.\n   */\n  slow?: boolean | number;\n\n  /**\n   * Subscribers-only mode. If enabled, only subscribers and moderators can chat.\n   */\n  subsOnly?: boolean;\n}\n\n/**\n * Sends room-state data when a user joins a channel or a room setting is changed.\n * For a join, the message contains all chat-room settings.\n * For changes, only the relevant tag is sent.\n */\nexport interface RoomStateEvent {\n  raw: string;\n  channel: string;\n  tags: RoomStateTags;\n}\n\n/**\n * Purges all chat messages in a channel, or purges chat messages from a specific user (typically after a timeout or ban).\n */\nexport interface ClearChatEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {\n    /**\n     * Duration of the timeout, in seconds. If omitted, the ban is permanent.\n     */\n    banDuration?: number;\n\n    /**\n     * (Not documented)\n     */\n    roomId: string;\n\n    /**\n     * (Not documented)\n     */\n    targetUserId?: string;\n\n    /**\n     * (Not documented)\n     */\n    tmiSentTs: number;\n  };\n}\n\n/**\n * Removes a single message from a channel. This is triggered by the `/delete <targetMsgId>` command on IRC.\n */\nexport interface ClearMessageEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {\n    /**\n     * Name of the user who sent the message.\n     */\n    login: string;\n\n    /**\n     * UUID of the message.\n     */\n    targetMsgId: string;\n\n    /**\n     * (Not documented)\n     */\n    tmiSentTs: number;\n  };\n}\n\n/**\n * Channel starts or stops host mode.\n */\nexport interface HostTargetEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {};\n}\n\n/**\n * General notices from the server.\n */\nexport interface NoticeEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {\n    /**\n     * A message ID string. Can be used for i18ln.\n     * Valid values: see https://dev.twitch.tv/docs/irc/msg-id\n     */\n    msgId: string;\n  };\n}\n\nexport enum UserNoticeType {\n  sub = 'sub',\n  resub = 'resub',\n  subgift = 'subgift',\n  anonsubgift = 'anonsubgift',\n  submysterygift = 'submysterygift',\n  giftpaidupgrade = 'giftpaidupgrade',\n  rewardgift = 'rewardgift',\n  anongiftpaidupgrade = 'anongiftpaidupgrade',\n  raid = 'raid',\n  unraid = 'unraid',\n  ritual = 'ritual',\n  bitsbadgetier = 'bitsbadgetier',\n}\n\ninterface AUserNoticeTags {\n  /**\n   * (Sent only on sub, resub) The total number of months the user has subscribed.\n   * This is the same as msg-param-months but sent for different types of user notices.\n   */\n  msgParamCumulativeMonths: number;\n\n  /**\n   * (Sent only on raid) The display name of the source user raiding this channel.\n   */\n  msgParamDisplayName: string;\n\n  /**\n   * (Sent on only raid) The name of the source user raiding this channel.\n   */\n  msgParamLogin: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The total number of months the user has subscribed.\n   * This is the same as msg-param-cumulative-months but sent for different types of user notices.\n   */\n  msgParamMonths: number;\n\n  /**\n   * (Sent only on anongiftpaidupgrade, giftpaidupgrade) The number of gifts the gifter has given during the promo indicated by msg-param-promo-name.\n   */\n  msgParamPromoGiftTotal: number;\n\n  /**\n   * (Sent only on anongiftpaidupgrade, giftpaidupgrade) The subscriptions promo, if any, that is ongoing; e.g. Subtember 2018.\n   */\n  msgParamPromoName: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The display name of the subscription gift recipient.\n   */\n  msgParamRecipientDisplayName: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The user ID of the subscription gift recipient.\n   */\n  msgParamRecipientId: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The user name of the subscription gift recipient.\n   */\n  msgParamRecipientUserName: string;\n\n  /**\n   * (Sent only on giftpaidupgrade) The login of the user who gifted the subscription.\n   */\n  msgParamSenderLogin: string;\n\n  /**\n   * (Sent only on giftpaidupgrade) The display name of the user who gifted the subscription.\n   */\n  msgParamSenderName: string;\n\n  /**\n   * (Sent only on sub, resub) Boolean indicating whether users want their streaks to be shared.\n   */\n  msgParamShouldShareStreak: boolean;\n\n  /**\n   * (Sent only on sub, resub) The number of consecutive months the user has subscribed. This is 0 if msg-param-should-share-streak is 0.\n   */\n  msgParamStreakMonths: number;\n\n  /**\n   * (Sent only on sub, resub, subgift, anonsubgift) The type of subscription plan being used.\n   * Valid values: Prime, 1000, 2000, 3000. 1000, 2000, and 3000 refer to the first, second, and third levels of paid subscriptions, respectively (currently $4.99, $9.99, and $24.99).\n   */\n  msgParamSubPlan: string;\n\n  /**\n   * (Sent only on sub, resub, subgift, anonsubgift) The display name of the subscription plan.\n   * This may be a default name or one created by the channel owner.\n   */\n  msgParamSubPlanName: string;\n\n  /**\n   * (Sent only on raid) The number of viewers watching the source channel raiding this channel.\n   */\n  msgParamViewerCount: number;\n\n  /**\n   * (Sent only on ritual) The name of the ritual this notice is for. Valid value: new_chatter.\n   */\n  msgParamRitualName: string;\n\n  /**\n   * (Sent only on bitsbadgetier) The tier of the bits badge the user just earned; e.g. 100, 1000, 10000.\n   */\n  msgParamThreshold: number;\n}\n\ninterface ABaseUserNoticeTags\n  extends Pick<\n    ATags,\n    | 'badgeInfo'\n    | 'badges'\n    | 'color'\n    | 'displayName'\n    | 'emotes'\n    | 'id'\n    | 'mod'\n    | 'roomId'\n    | 'tmiSentTs'\n    | 'userId'\n  > {\n  /**\n   * The name of the user who sent the notice.\n   */\n  login: string;\n\n  /**\n   * The message printed in chat along with this notice.\n   */\n  systemMsg: string;\n}\n\ninterface UserNoticeTagsSub\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamCumulativeMonths'\n      | 'msgParamShouldShareStreak'\n      | 'msgParamStreakMonths'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  /**\n   * The type of notice (not the ID).\n   */\n  msgId: 'sub';\n}\n\ninterface UserNoticeTagsResub\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamCumulativeMonths'\n      | 'msgParamShouldShareStreak'\n      | 'msgParamStreakMonths'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  msgId: 'resub';\n}\n\ninterface UserNoticeTagsSubGift\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamMonths'\n      | 'msgParamRecipientDisplayName'\n      | 'msgParamRecipientId'\n      | 'msgParamRecipientUserName'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  msgId: 'subgift';\n}\n\ninterface UserNoticeTagsAnonSubGift\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamMonths'\n      | 'msgParamRecipientDisplayName'\n      | 'msgParamRecipientId'\n      | 'msgParamRecipientUserName'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  msgId: 'anonsubgift';\n}\n\ninterface UserNoticeTagsSubMysteryGift extends ABaseUserNoticeTags {\n  msgId: 'submysterygift';\n}\n\ninterface UserNoticeTagsGiftPaidUpgrade\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamPromoGiftTotal'\n      | 'msgParamPromoName'\n      | 'msgParamSenderLogin'\n      | 'msgParamSenderName'\n    > {\n  msgId: 'giftpaidupgrade';\n}\n\ninterface UserNoticeTagsAnonGiftPaidUpgrade\n  extends ABaseUserNoticeTags,\n    Pick<AUserNoticeTags, 'msgParamPromoGiftTotal' | 'msgParamPromoName'> {\n  msgId: 'anongiftpaidupgrade';\n}\n\ninterface UserNoticeTagsRewardGift extends ABaseUserNoticeTags {\n  msgId: 'rewardgift';\n}\n\ninterface UserNoticeTagsRaid\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      'msgParamDisplayName' | 'msgParamLogin' | 'msgParamViewerCount'\n    > {\n  msgId: 'raid';\n}\n\ninterface UserNoticeTagsUnraid extends ABaseUserNoticeTags {\n  msgId: 'unraid';\n}\n\ninterface UserNoticeTagsRitual\n  extends ABaseUserNoticeTags,\n    Pick<AUserNoticeTags, 'msgParamRitualName'> {\n  msgId: 'ritual';\n}\n\ninterface UserNoticeTagsBitsBadGetier\n  extends ABaseUserNoticeTags,\n    Pick<AUserNoticeTags, 'msgParamThreshold'> {\n  msgId: 'bitsbadgetier';\n}\n\ntype UserNoticeTags =\n  | UserNoticeTagsSub\n  | UserNoticeTagsResub\n  | UserNoticeTagsSubGift\n  | UserNoticeTagsAnonSubGift\n  | UserNoticeTagsSubMysteryGift\n  | UserNoticeTagsGiftPaidUpgrade\n  | UserNoticeTagsAnonGiftPaidUpgrade\n  | UserNoticeTagsRewardGift\n  | UserNoticeTagsRaid\n  | UserNoticeTagsUnraid\n  | UserNoticeTagsRitual\n  | UserNoticeTagsBitsBadGetier;\n\n/**\n * Sends a notice to the user when any of the following events occurs:\n * - Subscription, resubscription, or gift subscription to a channel.\n * - Incoming raid to a channel.\n *   Raid is a Twitch tool that allows broadcasters to send their viewers to another channel, to help support and grow other members in the community.\n * - Channel ritual.\n *   Many channels have special rituals to celebrate viewer milestones when they are shared.\n *   The rituals notice extends the sharing of these messages to other viewer milestones (initially, a new viewer chatting for the first time).\n */\nexport interface UserNoticeEvent {\n  raw: string;\n  /**\n   * The message. This is omitted if the user did not enter a message.\n   */\n  message: string;\n  channel: string;\n  tags: UserNoticeTags;\n}\n\nexport interface WhisperTags\n  extends Pick<\n    ATags,\n    'badges' | 'color' | 'displayName' | 'emotes' | 'userId'\n  > {\n  /**\n   * (Not documented)\n   */\n  messageId: string;\n\n  /**\n   * (Not documented)\n   */\n  threadId: string;\n}\n\n/**\n * (Not documented)\n */\nexport interface WhisperEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  user: string;\n  tags: WhisperTags;\n}\n\nexport interface PingEvent {\n  raw: string;\n}\n\n/**\n * Join a channel.\n */\nexport interface JoinEvent {\n  raw: string;\n  channel: string;\n  user: string;\n}\n\n/**\n * Depart from a channel.\n */\nexport interface PartEvent {\n  raw: string;\n  channel: string;\n  user: string;\n}\n","export const TWITCH_API_AUTH_BASE = 'https://id.twitch.tv/oauth2/authorize';\n\nexport const TWITCH_API_CLIENT_ID = process.env.REACT_APP_TWITCH_API_CLIENT_ID;\nexport const TWITCH_API_REDIRECT_URI =\n  process.env.REACT_APP_TWITCH_API_REDIRECT_URI;\n\nexport const CHANNEL_MESSAGES_LIMIT = 500;\nexport const STORE_USERS_LIMIT = 500;\n\nexport const API_REQUESTS_TIMEOUT = 10000;\n\n// local storage keys\nexport const LS_ACCESS_TOKEN = 'accessToken';\nexport const LS_ID_TOKEN = 'idToken';\nexport const LS_LAST_CHANNEL = 'lastChannel';\nexport const LS_USER = 'user';\nexport const LS_EMOTES_USAGE_STATISTIC = 'emotesUsageStatistic';\nexport const LS_OPTIONS = 'options';\n\nexport const SUGGESTION_TYPES = {\n  users: {\n    name: 'users',\n    limit: 5,\n    regex: /^@([\\w\\d_]*)$/,\n  },\n  emotes: {\n    name: 'emotes',\n    limit: 10,\n    regex: /^:([\\w\\d_]{2,})$/,\n  },\n};\n\nexport const NOTICE_MESSAGE_TAGS = [\n  'msg_banned',\n  'msg_bad_characters',\n  'msg_channel_blocked',\n  'msg_channel_suspended',\n  'msg_duplicate',\n  'msg_emoteonly',\n  'msg_facebook',\n  'msg_followersonly',\n  'msg_followersonly_followed',\n  'msg_followersonly_zero',\n  'msg_r9k',\n  'msg_ratelimit',\n  'msg_rejected',\n  'msg_rejected_mandatory',\n  'msg_room_not_found',\n  'msg_slowmode',\n  'msg_subsonly',\n  'msg_suspended',\n  'msg_timedout',\n  'msg_verified_email',\n];\n","import { LS_OPTIONS } from 'utils/constants';\n\nexport const readOptionsFromLocalStorage = (): object => {\n  try {\n    const options = localStorage.getItem(LS_OPTIONS);\n    return JSON.parse(options as string) || {};\n  } catch {\n    return {};\n  }\n};\n\nexport const writeOptionsToLocalStore = (options: object): void => {\n  localStorage.setItem(\n    LS_OPTIONS,\n    JSON.stringify({\n      ...readOptionsFromLocalStorage(),\n      ...options,\n    }),\n  );\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { AppThunk } from 'app/store';\nimport {\n  writeOptionsToLocalStore,\n  readOptionsFromLocalStorage,\n} from 'features/options/optionsUtils';\n\ntype OptionsState = {\n  showTimestamps: boolean;\n  splitChat: boolean;\n  blacklistKeywords: string;\n  highlightKeywords: string;\n  fixedWidth: boolean;\n  highlightNotifications: boolean;\n};\n\ntype ChangeOption = {\n  name: keyof OptionsState;\n  value: any;\n};\n\nexport const initialState: OptionsState = {\n  showTimestamps: false,\n  splitChat: true,\n  blacklistKeywords: '',\n  highlightKeywords: '',\n  fixedWidth: false,\n  highlightNotifications: true,\n  ...readOptionsFromLocalStorage(),\n};\n\nconst options = createSlice({\n  name: 'options',\n  initialState,\n  reducers: {\n    changeOption: (state, { payload }: PayloadAction<ChangeOption>): void => {\n      const { name, value } = payload;\n      (state[name] as unknown) = value;\n    },\n  },\n});\n\nexport const { changeOption } = options.actions;\n\nexport default options.reducer;\n\nexport const changeChatOption = ({\n  name,\n  value,\n}: ChangeOption): AppThunk => async (dispatch): Promise<void> => {\n  writeOptionsToLocalStore({ [name]: value });\n  dispatch(changeOption({ name, value }));\n};\n","const assertNever = (value: never): never => value;\n\nexport default assertNever;\n","/* eslint-disable no-restricted-syntax */\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\nimport { StateEmotes } from 'features/chat/selectors/chatSelectors';\nimport findEmote from 'features/chat/utils/findEmote';\n\nexport type EmotesByText = {\n  begins: htmlEntity.Emote[];\n  contains: htmlEntity.Emote[];\n};\n\nconst getEmotesByText = (\n  text: string,\n  emotes: StateEmotes,\n  limit = -1,\n): htmlEntity.Emote[] => {\n  if (!emotes) return [];\n\n  const result: EmotesByText = {\n    begins: [],\n    contains: [],\n  };\n  const textLower = text.toLowerCase();\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const isOver =\n    findEmote.bttv.byText(result, emotes.bttvChannel, textLower, limit) ||\n    findEmote.ffz.byText(result, emotes.ffzChannel, textLower, limit) ||\n    findEmote.twitch.byText(result, emotes.twitchUser, textLower, limit) ||\n    findEmote.twitch.byText(result, emotes.twitchGlobal, textLower, limit) ||\n    findEmote.bttv.byText(result, emotes.bttvGlobal, textLower, limit) ||\n    findEmote.ffz.byText(result, emotes.ffzGlobal, textLower, limit);\n\n  return [...result.begins, ...result.contains];\n};\n\nexport default getEmotesByText;\n","import * as R from 'ramda';\n\nimport { LS_EMOTES_USAGE_STATISTIC } from 'utils/constants';\nimport * as htmlEntity from 'features/chat/utils/htmlEntity';\nimport findEmote from 'features/chat/utils/findEmote';\nimport { StateEmotes } from 'features/chat/selectors';\nimport { MessageEntity } from 'features/chat/slice/messages';\n\ntype Type = 'twitch-emote' | 'bttv-emote' | 'ffz-emote';\n\ntype AUsageItem = {\n  lastUpdatedAt: number;\n  uses: number;\n};\n\ntype UsageItemTwitchFfz = AUsageItem & {\n  type: 'twitch-emote' | 'ffz-emote';\n  id: number;\n};\n\ntype UsageItemBttv = AUsageItem & {\n  type: 'bttv-emote';\n  id: string;\n};\n\ntype UsageItem = UsageItemTwitchFfz | UsageItemBttv;\n\ntype EmotesUsageStatistic = Record<Type, Record<string, UsageItem>>;\n\nexport const readEmotesUsageStatistic = (): Partial<EmotesUsageStatistic> => {\n  try {\n    const statistic = localStorage.getItem(LS_EMOTES_USAGE_STATISTIC);\n\n    return JSON.parse(statistic as string) || {};\n  } catch (e) {\n    return {};\n  }\n};\n\nexport const getUsageStatisticFromEntities = R.pipe<\n  MessageEntity[],\n  any,\n  any,\n  any\n>(\n  R.filter((v: any) =>\n    R.includes(R.prop('type', v), ['twitch-emote', 'bttv-emote', 'ffz-emote']),\n  ),\n  R.groupBy<any>(R.prop('type')),\n  R.map(\n    R.pipe<any, any, any>(\n      R.groupBy<any>(R.prop('id')),\n      R.map((items: any) => ({\n        type: items[0].type,\n        id: items[0].id,\n        lastUpdatedAt: Date.now(),\n        uses: items.length,\n      })),\n    ),\n  ),\n);\n\nconst mergeFn = (key: string, left: any, right: any) =>\n  key === 'uses' ? left + right : right;\n\nexport const writeEmotesUsageStatistic = (entries: MessageEntity[]) => {\n  const statistic = getUsageStatisticFromEntities(entries) as Partial<\n    EmotesUsageStatistic\n  >;\n\n  if (R.isEmpty(statistic)) return;\n\n  const history = readEmotesUsageStatistic();\n\n  const newHistory = R.mergeDeepWithKey(mergeFn, history, statistic);\n\n  localStorage.setItem(LS_EMOTES_USAGE_STATISTIC, JSON.stringify(newHistory));\n};\n\nconst normalizeHistory = R.pipe<any, any, any, any, UsageItem[]>(\n  R.values,\n  R.map(R.values),\n  R.flatten,\n  R.sortWith([R.descend(R.prop('uses')), R.descend(R.prop('lastUpdatedAt'))]),\n);\n\nexport const getEmotesFromUsageStatistic = (\n  emotes: StateEmotes,\n  limit = 27,\n) => {\n  if (!emotes) return [];\n\n  const result: htmlEntity.Emote[] = [];\n  const history = R.pipe(readEmotesUsageStatistic, normalizeHistory)();\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const item of history) {\n    if (result.length === limit) return result;\n\n    let emoteEntity = null;\n\n    if (item.type === 'twitch-emote') {\n      emoteEntity = findEmote.twitch.byId(item.id, emotes);\n    }\n\n    if (item.type === 'bttv-emote') {\n      emoteEntity = findEmote.bttv.byId(item.id, emotes);\n    }\n\n    if (item.type === 'ffz-emote') {\n      emoteEntity = findEmote.ffz.byId(item.id, emotes);\n    }\n\n    if (emoteEntity) {\n      result.push(emoteEntity);\n    }\n  }\n\n  return result;\n};\n","const checkIsMenction = (\n  userLogin: string | null,\n  messageUser: string,\n  messageText: string,\n) =>\n  !!userLogin &&\n  userLogin !== messageUser &&\n  RegExp(userLogin, 'gi').test(messageText);\n\nexport default checkIsMenction;\n"],"sourceRoot":""}