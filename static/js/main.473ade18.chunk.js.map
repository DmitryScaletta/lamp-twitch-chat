{"version":3,"sources":["features/emotes/utils/getEmotesByText.ts","features/emotes/utils/emotesUsageStatistic.ts","features/messageCards/messageCardsSelectors.ts","features/blockedUsers/blockedUsersSlice.ts","features/chat/chatSelectors.ts","utils/normalizeHref.ts","features/messages/utils/htmlEntity.ts","features/auth/authSelectors.ts","utils/fetchRequest.ts","api/twitch.ts","api/bttv.ts","api/ffz.ts","api/chatHistory.ts","api/youtube.ts","assets/ts-tink.ogg","features/emotes/utils/createEmoteCategories.ts","features/emotes/emotesSelectors.ts","features/chat/utils/parseApiResponse.ts","features/emotes/utils/findEmote.ts","features/chat/chatSlice.ts","features/badges/badgesSelectors.ts","features/auth/useInitializeAuth.ts","features/messages/messagesSelectors.ts","features/chat/hooks/useFetchChatData.ts","features/chat/hooks/useCurrentChannel.ts","features/messages/utils/replaceEmojis.ts","features/chat/hooks/useTwitchClient.ts","features/chat/utils/getUsersByBeginText.ts","features/chat/hooks/useChatInput.ts","icons/close.svg","components/IconButton.tsx","components/ChatModal.tsx","icons/smiley-face.svg","components/Scrollbar.tsx","icons/search.svg","features/emotes/EmotePicker.tsx","features/chat/ChatInput.tsx","icons/gears.svg","icons/twitch.svg","components/Button.tsx","components/Switch.tsx","features/options/Options.tsx","features/chat/ChatControls.tsx","utils/colors.ts","features/messageCards/MessageCard.tsx","features/messages/Message.tsx","features/messages/Notice.tsx","features/messages/UserNotice.tsx","features/messages/ChatMessage.tsx","features/messages/Messages.tsx","features/chat/JoinChannel.tsx","features/chat/Chat.tsx","features/auth/Auth.tsx","features/auth/Logout.tsx","features/auth/AuthCallback.tsx","styles/common.js","styles/colors.js","styles/vars.js","styles/index.js","app/App.tsx","serviceWorker.ts","app/rootReducer.ts","app/store.ts","index.tsx","features/auth/authSlice.ts","features/messages/utils/parseMessageEntities.ts","features/messages/utils/checkIsHighlighted.ts","features/messageCards/utils/getMessageCardFromEntities.ts","features/messages/utils/normalizeMessages.ts","features/messages/utils/sliceItemsByLimit.ts","features/messages/messagesSlice.ts","utils/constants.ts","features/auth/authUtils.ts","features/options/optionsSelectors.ts","features/emotes/emotesSlice.ts","utils/assertNever.ts","../../src/client.ts","../../src/utils.ts","../../src/parse.ts","../../src/normalize.ts","../../src/types.ts","features/messageCards/messageCardsSlice.ts","features/blockedUsers/blockedUsersSelectors.ts","features/badges/badgesSlice.ts","features/options/optionsUtils.ts","features/options/optionsSlice.ts"],"names":["getEmotesByText","text","emotes","limit","result","begins","contains","textLower","toLowerCase","findEmote","bttv","byText","bttvChannel","ffz","ffzChannel","twitch","twitchUser","twitchGlobal","bttvGlobal","ffzGlobal","readEmotesUsageStatistic","statistic","localStorage","getItem","LS_EMOTES_USAGE_STATISTIC","JSON","parse","e","getUsageStatisticFromEntities","R","v","items","type","id","lastUpdatedAt","Date","now","uses","length","mergeFn","key","left","right","writeEmotesUsageStatistic","entries","history","newHistory","setItem","stringify","normalizeHistory","getEmotesFromUsageStatistic","item","emoteEntity","byId","push","messageCardSelector","card","state","messageCards","twitchClips","twitchVideos","youtubeVideos","assertNever","fetchBlockedUsers","createAsyncThunk","userId","api","blockedUsers","createSlice","name","initialState","status","error","reducers","extraReducers","builder","addCase","pending","fulfilled","payload","parseBlockedUsers","rejected","currentChannelSelector","chat","currentChannel","isConnectedSelector","isConnected","currentChannelIdSelector","params","byChannels","room","roomId","userColorSelector","user","color","userDisplayNameSelector","displayName","userBadgesSelector","badges","isStartsWithProtocolRegex","normalizeHref","href","test","regexEmotesMap","getFfzSrcSet","dpi","url","createTwitchEmote","code","alt","src","TWITCH_EMOTES_CDN","srcSet","createBttvEmote","BTTV_EMOTES_CDN","createFfzEmote","urls","createEmoji","createMention","target","createLink","createBadges","globalBadges","channelBadges","version","badge","versions","title","description","image_url_1x","imageUrl1x","image_url_2x","imageUrl2x","image_url_4x","imageUrl4x","label","createBadge","Boolean","isAuthReadySelector","auth","isAuthSelector","userLoginSelector","userLogin","userIdSelector","fetchRequest","async","timeout","restOptions","options","fetchTimeout","API_REQUESTS_TIMEOUT","controller","AbortController","signal","setTimeout","abort","response","fetch","ok","Error","statusText","json","apiRequestHelix","headers","process","Authorization","LS_ACCESS_TOKEN","apiRequestKraken","Accept","fetchUser","fetchTwitchEmotes","fetchGlobalBadges","language","fetchChannelBadges","channelId","fetchTwitchClip","fetchTwitchVideo","fetchBttvGlobalEmotes","fetchBttvChannelEmotes","fetchFfzGlobalEmotes","fetchFfzChannelEmotes","fetchChatHistory","channel","fetchYoutubeVideo","module","exports","getTwitchUserEmoteCategories","htmlEntity","getMainEmoteCategories","createSelector","map","filter","createEmoteCategories","mainEmoteCategories","frequentlyUsed","isTwitchEmotesLoadedSelector","isBttvGlobalEmotesLoadedSelector","global","isBttvChannelEmotesLoadedSelector","isFfzGlobalEmotesLoadedSelector","isFfzChannelEmotesLoadedSelector","isEmotesLoadedSelector","twitchEmotesSelector","twitchGlobalEmotesSelector","twitchUserEmotesSelector","emotesSelector","isEmotesLoaded","emoteCategoriesSelector","search","parseTwitchEmotes","parseBttvGlobalEmotes","data","parseBttvChannelEmotes","channelEmotes","sharedEmotes","parseFfzGlobalEmotes","default_sets","defaultSets","sets","parseFfzChannelEmotes","parseBadges","clipThumbnailRegex","parseTwitchClip","thumbnail_url","thumbnailUrl","creator_name","creatorName","m","exec","x1","videoThumbnailRegex","parseTwitchVideo","user_name","userName","published_at","publishedAt","date","format","parseYoutubeVideo","snippet","channelTitle","thumbnails","default","medium","x2","high","x4","findTwitchEmoteByIdInSets","set","Object","values","regexMap","4","9","findTwitchEmoteByNameInSets","RegExp","byName","emote","index","indexOf","findById","findByName","updateIsConnected","updateCurrentChannel","updateGlobalUserParams","tags","updateUserParams","updateRoomParams","actions","isGlobalBadgesLoadedSelector","isChannelBadgesLoadedSelector","globalBadgesSelector","channelBadgesSelector","userBadgesImagesSelector","useInitializeAuth","dispatch","useDispatch","isAuthReady","useSelector","useEffect","idToken","readUserFromLocatStorage","login","isAuth","initializeAuth","jwtData","jwt","decode","sub","messagesSelector","messages","usersSelector","users","isHistoryLoadedSelector","isHistoryAddedSelector","isAdded","isEvenSelector","isEven","useFetchChatData","currentChannelId","isTwitchEmotesLoaded","isBttvGlobalEmotesLoaded","isBttvChannelEmotesLoaded","isFfzGlobalEmotesLoaded","isFfzChannelEmotesLoaded","isGlobalBadgesLoaded","isChannelBadgesLoaded","isHistoryLoaded","isBlockedUsersLoaded","isBlockedUsersLoadedSelector","isHistoryAdded","isReadyToAddHistory","addChatHistory","useCurrentChannel","useHistory","hash","location","slice","LS_LAST_CHANNEL","document","lastChannel","pathname","replaceEmojis","split","word","emoji","emojilib","char","join","useTwitchClient","prevChannel","usePrevious","clientRef","useRef","registerEvents","useCallback","client","current","on","message","recieveMessage","invalidateAuth","disconnect","targetUserId","clearChat","part","twitchIrc","connect","useMemo","say","trim","normalizedMessage","handleUserState","ownMessage","removeListeners","handleNotice","NOTICE_MESSAGE_TAGS","includes","msgId","off","getUsersByBeginText","beginText","beginTextLower","nameLower","startsWith","suggestionsInitialState","isActive","activeIndex","start","end","setSuggestionsIndexUp","rest","setSuggestionsIndexDown","replaceSuggestionText","currentItem","insertedText","substring","useChatInput","setText","onSendMessage","chatInputRef","suggestions","setSuggestions","useSetState","usersRef","emotesRef","suggestionsRef","handleChange","value","selectionStart","spaceIndexBefore","lastIndexOf","spaceIndexAfter","usersMatch","SUGGESTION_TYPES","regex","emotesMatch","handleKeyUp","handleKeyDown","preventDefault","t","handleSuggestionMouseEnter","handleSuggestionClick","focus","handleBlur","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","this","_ref","createElement","fill","d","SvgClose","svgRef","props","viewBox","ref","ForwardRef","forwardRef","sizes","small","css","IconButton","styled","button","attrs","p","size","ChatModalRoot","div","CloseButton","CloseIcon","CloseIconSvg","ChatModal","children","onClose","onClick","fillRule","clipRule","SvgSmileyFace","Scrollbar","CustomScrollbar","disableTracksWidthCompensation","SvgSearch","EmotePickerRoot","Categories","Category","CategoryHeader","CategoryItems","Emote","img","SearchBlock","SearchInput","input","SearchIcon","SearchIconSvg","EmotePicker","onEmoteClick","setSearch","useState","searchInputRef","emoteCategories","placeholder","onChange","ChatInputRoot","ChatInputInner","Suggestions","SuggestionItem","SuggestionImage","TextareaInput","TextareaWrapper","isSuggestions","EmotesModal","Textarea","TextareaAutosize","$showScroll","EmotesButton","SmileyFaceIcon","SmileyFaceIconSvg","ChatInput","React","isDisabled","onKeyUp","onKeyDown","onBlur","onSuggestionMouseEnter","onSuggestionClick","textareaRef","useOnClickOutside","isShowTextareaScroll","setIsShowTextareaScroll","isEmotesModalVisible","setIsEmotesModalVisible","handleCloseEmotesModal","renderUser","onMouseEnter","renderEmote","renderSuggestions","inputRef","maxLength","maxRows","disabled","onHeightChange","height","memo","SvgGears","_ref2","_ref3","SvgTwitch","Button","SwitchRoot","Label","Input","Switch","checked","readOnly","aria-label","htmlFor","defaultProps","OptionsRoot","Header","h2","Option","OptionText","span","Profile","UserName","LogOutButton","Link","Badge","Options","optionsSelector","userDisplayName","userColor","userBadgesImages","renderOption","changeOption","renderOptionsCategory","to","ChatControlsRoot","Controls","OptionsModal","OptionsButton","GearsIcon","GearsIconSvg","TwitchIcon","TwitchIconSvg","isOptionsModalVisible","setIsOptionsModalVisible","optionsModalRef","optionsButtonRef","handleCloseOptionsModal","as","prev","hueToRgb","pp","qq","calculateColorBackground","replace","parseInt","substr","calculateColorReplacement","background","light","factor","hsl","r","g","b","max","Math","min","l","h","s","rgbToHsl","rgb","round","q","hslToRgb","toString","padStart","colorCache","Map","MessageCardRoot","a","rel","$clickable","Preview","Image","PreviewLoading","Content","textStyles","Title","Description","textLoadingStyle","TitleLoading","DescriptionLoading","errorImageSrc","errorImageSrcSet","errorDescription","MessageCard","cardInfo","MessageRoot","isAction","isHistory","isDeleted","isHighlighted","Name","Emoji","EmoteWrapper","Mention","isOwnMessage","Timestamp","entities","timestamp","isShowTimestamps","onNameRightClick","isVisible","setIsVisible","newColor","darkenedMode","cacheKey","has","get","bgColor","delete","next","calculateColor","renderBadges","onContextMenu","messageLogin","data-emote-id","renderMessageArray","NoticeRoot","Notice","UserNoticeRoot","UserNotice","systemMessage","MessagesRoot","StyledScrollbar","MoreMessagesButton","Messages","isMoreMessagesButtonVisible","setIsMoreMessagesButtonVisible","isShowTimestampsSelector","isSplitChat","isSplitChatSelector","scrollbarRef","handleScrollToBottom","scrollToBottom","getIsEven","onUpdate","clientHeight","contentScrollHeight","scrollTop","JoinChannelRoot","JoinButton","JoinChannel","setValue","handleChangeChannel","onKeyPress","ChatRoot","ChatWrapper","isFixedWidth","Chat","isFixedWidthSelector","textRef","handleSendMessage","chatInput","handleNameRightClick","trimLeft","handleEmoteClick","Auth","window","getAuthUrl","Logout","removeItem","LS_ID_TOKEN","LS_USER","AuthCallback","URLSearchParams","accessToken","createGlobalStyle","colors","vars","common","getHomeComponent","isAuthRedirect","App","exact","path","render","component","isLocalhost","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","console","log","onSuccess","catch","rootReducer","combineReducers","store","configureStore","reducer","ReactGA","initialize","page","pageview","require","ReactDOM","getElementById","URL","origin","addEventListener","contentType","ready","unregister","reload","checkValidServiceWorker","writeUserToLocatStorage","mentionRegex","linkRegex","urlRegex","strict","normalizeEmbeddedEmotes","embeddedEmotes","reduce","Number","acc","findEntity","parseTwitch","twitchEmote","emojiMatch","twemojiParser","assetType","mentionMatch","linkMatch","parseMessageEntities","offset","arrayOffset","spaceIndex","startIndex","endIndex","entity","keys","textBefore","Array","isArray","entityObject","difference","textAfter","checkIsHighlighted","messageUser","messageText","twitchClipRegex","twitchVideoRegex","youtubeVideoRegex","getMessageCardFromEntities","tink","Howl","tinkSfx","normalizeHistoryMessages","rawMessages","blockedUsersSelector","rawMessage","tekko","command","prefix","parsedTags","tmiSentTs","normalizeHistoryMessage","sliceItemsByLimit","addedItemsCount","diff","isSliced","messagesSlice","recieveMessagesAction","newItems","newIsEven","CHANNEL_MESSAGES_LIMIT","forEach","newUsers","STORE_USERS_LIMIT","meta","arg","normalizePayload","isHighlightNotifications","isHighlightNotificationsSelector","play","normalizeMessage","nanoid","noticeType","normalizeNotice","systemMsg","normalizeUserNotice","normalizeOwnMessage","getState","slicedRawHistory","TWITCH_API_AUTH_BASE","TWITCH_API_CLIENT_ID","TWITCH_API_REDIRECT_URI","LS_OPTIONS","authParams","client_id","redirect_uri","response_type","scope","claims","id_token","email_verified","picture","preferred_username","showTimestamps","splitChat","fixedWidth","highlightNotifications","getIsAction","normalizeActionMessage","getChannelFromMessage","isNode","booleanMessageTags","numberMessageTags","tagNamesMap","depricatedMessageTags","normalizeTagValue","raw","indexes","followersOnly","slow","parseMessageTags","newKey","normalizeState","normalizeCommand","trailing","Commands","Client","socket","globalUserState","channels","_connected","_connecting","_registered","secure","connection","receiveRaw","rawData","sendRaw","ircMessage","middle","sendCommand","commandParams","_handleMessage","eventData","normalizeGlobalUserState","normalizeWhisper","normalizeChatMessage","_connectInNode","host","port","Promise","handleConnect","resolve","tls","reject","_connectInBrowser","WebSocket","wasClean","reason","_register","nick","pass","handleRegister","_updateGlobalUserState","_updateUserState","userState","_updateRoomState","roomState","UserNoticeType","readOptionsFromLocalStorage","blacklistKeywords","highlightKeywords","prepare"],"mappings":"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","file":"static/js/main.473ade18.chunk.js","sourcesContent":["/* eslint-disable no-restricted-syntax */\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport findEmote from 'features/emotes/utils/findEmote';\n\nexport type EmotesByText = {\n  begins: htmlEntity.Emote[];\n  contains: htmlEntity.Emote[];\n};\n\nconst getEmotesByText = (\n  text: string,\n  emotes: StateEmotes,\n  limit = -1,\n): htmlEntity.Emote[] => {\n  if (!emotes) return [];\n\n  const result: EmotesByText = {\n    begins: [],\n    contains: [],\n  };\n  const textLower = text.toLowerCase();\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const isOver =\n    findEmote.bttv.byText(result, emotes.bttvChannel, textLower, limit) ||\n    findEmote.ffz.byText(result, emotes.ffzChannel, textLower, limit) ||\n    findEmote.twitch.byText(result, emotes.twitchUser, textLower, limit) ||\n    findEmote.twitch.byText(result, emotes.twitchGlobal, textLower, limit) ||\n    findEmote.bttv.byText(result, emotes.bttvGlobal, textLower, limit) ||\n    findEmote.ffz.byText(result, emotes.ffzGlobal, textLower, limit);\n\n  return [...result.begins, ...result.contains];\n};\n\nexport default getEmotesByText;\n","import * as R from 'ramda';\n\nimport { LS_EMOTES_USAGE_STATISTIC } from 'utils/constants';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport findEmote from 'features/emotes/utils/findEmote';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport type { MessageEntity } from 'features/messages/messagesSlice';\n\ntype Type = 'twitch-emote' | 'bttv-emote' | 'ffz-emote';\n\ntype AUsageItem = {\n  lastUpdatedAt: number;\n  uses: number;\n};\n\ntype UsageItemTwitchFfz = AUsageItem & {\n  type: 'twitch-emote' | 'ffz-emote';\n  id: number;\n};\n\ntype UsageItemBttv = AUsageItem & {\n  type: 'bttv-emote';\n  id: string;\n};\n\ntype UsageItem = UsageItemTwitchFfz | UsageItemBttv;\n\ntype EmotesUsageStatistic = Record<Type, Record<string, UsageItem>>;\n\nexport const readEmotesUsageStatistic = (): Partial<EmotesUsageStatistic> => {\n  try {\n    const statistic = localStorage.getItem(LS_EMOTES_USAGE_STATISTIC);\n\n    return JSON.parse(statistic as string) || {};\n  } catch (e) {\n    return {};\n  }\n};\n\nexport const getUsageStatisticFromEntities = R.pipe<\n  MessageEntity[],\n  any,\n  any,\n  any\n>(\n  R.filter((v: any) =>\n    R.includes(R.prop('type', v), ['twitch-emote', 'bttv-emote', 'ffz-emote']),\n  ),\n  R.groupBy<any>(R.prop('type')),\n  R.map(\n    R.pipe<any, any, any>(\n      R.groupBy<any>(R.prop('id')),\n      R.map((items: any) => ({\n        type: items[0].type,\n        id: items[0].id,\n        lastUpdatedAt: Date.now(),\n        uses: items.length,\n      })),\n    ),\n  ),\n);\n\nconst mergeFn = (key: string, left: any, right: any) =>\n  key === 'uses' ? left + right : right;\n\nexport const writeEmotesUsageStatistic = (entries: MessageEntity[]) => {\n  const statistic = getUsageStatisticFromEntities(entries) as Partial<\n    EmotesUsageStatistic\n  >;\n\n  if (R.isEmpty(statistic)) return;\n\n  const history = readEmotesUsageStatistic();\n\n  const newHistory = R.mergeDeepWithKey(mergeFn, history, statistic);\n\n  localStorage.setItem(LS_EMOTES_USAGE_STATISTIC, JSON.stringify(newHistory));\n};\n\nconst normalizeHistory = R.pipe<any, any, any, any, UsageItem[]>(\n  R.values,\n  R.map(R.values),\n  R.flatten,\n  R.sortWith([R.descend(R.prop('uses')), R.descend(R.prop('lastUpdatedAt'))]),\n);\n\nexport const getEmotesFromUsageStatistic = (\n  emotes: StateEmotes,\n  limit = 27,\n) => {\n  if (!emotes) return [];\n\n  const result: htmlEntity.Emote[] = [];\n  const history = R.pipe(readEmotesUsageStatistic, normalizeHistory)();\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const item of history) {\n    if (result.length === limit) return result;\n\n    let emoteEntity = null;\n\n    if (item.type === 'twitch-emote') {\n      emoteEntity = findEmote.twitch.byId(item.id, emotes);\n    }\n\n    if (item.type === 'bttv-emote') {\n      emoteEntity = findEmote.bttv.byId(item.id, emotes);\n    }\n\n    if (item.type === 'ffz-emote') {\n      emoteEntity = findEmote.ffz.byId(item.id, emotes);\n    }\n\n    if (emoteEntity) {\n      result.push(emoteEntity);\n    }\n  }\n\n  return result;\n};\n","import type { RootState } from 'app/rootReducer';\nimport assertNever from 'utils/assertNever';\nimport type { MessageCardInfo } from 'features/messages/messagesSlice';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const messageCardSelector = (\n  card: Omit<MessageCardInfo, 'url'> | null,\n) => (state: RootState) => {\n  if (!card) return null;\n\n  if (card.type === 'twitch-clip') {\n    return state.messageCards.twitchClips[card.id];\n  }\n\n  if (card.type === 'twitch-video') {\n    return state.messageCards.twitchVideos[card.id];\n  }\n\n  if (card.type === 'youtube-video') {\n    return state.messageCards.youtubeVideos[card.id];\n  }\n\n  return assertNever(card.type);\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchResult } from 'utils/types';\nimport { parseBlockedUsers } from 'features/chat/utils/parseApiResponse';\n\ntype BlockedUsersState = FetchResult<string[]>;\n\nconst initialState: BlockedUsersState = {\n  status: 'idle',\n  error: {},\n  items: [],\n};\n\nexport const fetchBlockedUsers = createAsyncThunk(\n  'chat/fetchBlockedUsers',\n  (userId: string) => api.fetchBlockedUsers(userId),\n);\n\nconst blockedUsers = createSlice({\n  name: 'blockedUsers',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchBlockedUsers.pending, (state) => {\n      state.status = 'loading';\n      state.error = {};\n    });\n\n    builder.addCase(fetchBlockedUsers.fulfilled, (state, { payload }): void => {\n      state.status = 'success';\n      state.items = parseBlockedUsers(payload);\n    });\n\n    builder.addCase(fetchBlockedUsers.rejected, (state, { error }): void => {\n      state.status = 'error';\n      state.error = error;\n    });\n  },\n});\n\nexport default blockedUsers.reducer;\n","import type { RootState } from 'app/rootReducer';\n\nexport const currentChannelSelector = (state: RootState) =>\n  state.chat.currentChannel;\n\nexport const isConnectedSelector = (state: RootState) => state.chat.isConnected;\n\nexport const currentChannelIdSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.room?.roomId ||\n  '';\n\nexport const userColorSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user?.color ||\n  '';\n\nexport const userDisplayNameSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user\n    ?.displayName || '';\n\nexport const userBadgesSelector = (state: RootState) =>\n  state.chat.params.byChannels[currentChannelSelector(state)]?.user?.badges ||\n  {};\n","// https://regex101.com/r/cpaNXh/1\nconst isStartsWithProtocolRegex = /^(?:(?:[a-z]+:)?\\/\\/)/;\n\nconst normalizeHref = (href: string) =>\n  isStartsWithProtocolRegex.test(href) ? href : `//${href}`;\n\nexport default normalizeHref;\n","import * as R from 'ramda';\nimport type twitchIrc from 'twitch-simple-irc';\n\nimport * as api from 'api';\nimport normalizeHref from 'utils/normalizeHref';\nimport { TWITCH_EMOTES_CDN, BTTV_EMOTES_CDN } from 'utils/constants';\n\nexport type TwitchEmote = {\n  type: 'twitch-emote';\n  id: number;\n  alt: string;\n  src: string;\n  srcSet: string;\n};\nexport type BttvEmote = {\n  type: 'bttv-emote';\n  id: string;\n  alt: string;\n  src: string;\n  srcSet: string;\n};\nexport type FfzEmote = {\n  type: 'ffz-emote';\n  id: number;\n  alt: string;\n  src: string;\n  srcSet: string;\n};\nexport type Emoji = {\n  type: 'emoji';\n  alt: string;\n  src: string;\n};\nexport type Mention = {\n  type: 'mention';\n  text: string;\n  target: string;\n};\nexport type Link = {\n  type: 'link';\n  text: string;\n  href: string;\n};\nexport type Badge = {\n  alt: string;\n  label: string;\n  src: string;\n  srcSet: string;\n};\n\nexport type Emote = TwitchEmote | BttvEmote | FfzEmote;\n\n// prettier-ignore\nexport const regexEmotesMap: Record<string, string> = {\n  '[oO](_|\\\\.)[oO]': 'O_o',\n  '\\\\&gt\\\\;\\\\(':     '>(',\n  '\\\\&lt\\\\;3':       '<3',\n  '\\\\:-?(o|O)':      ':O',\n  '\\\\:-?(p|P)':      ':P',\n  '\\\\:-?[\\\\\\\\/]':    ':/',\n  '\\\\:-?[z|Z|\\\\|]':  ':Z',\n  '\\\\:-?\\\\(':        ':(',\n  '\\\\:-?\\\\)':        ':)',\n  '\\\\:-?D':          ':D',\n  '\\\\;-?(p|P)':      ';P',\n  '\\\\;-?\\\\)':        ';)',\n  'R-?\\\\)':          'R)',\n  'B-?\\\\)':          'B)',\n};\n\nexport const getFfzSrcSet = R.pipe<{}, [string, string][], string[], string>(\n  R.toPairs,\n  R.map(([dpi, url]) => `${url} ${dpi}x`),\n  R.join(', '),\n);\n\nexport const createTwitchEmote = ({\n  id,\n  code,\n}: api.TwitchEmote): TwitchEmote => ({\n  type: 'twitch-emote',\n  id,\n  alt: regexEmotesMap[code] || code,\n  src: `${TWITCH_EMOTES_CDN}/${id}/1.0`,\n  srcSet: `${TWITCH_EMOTES_CDN}/${id}/1.0 1x, ${TWITCH_EMOTES_CDN}/${id}/2.0 2x, ${TWITCH_EMOTES_CDN}/${id}/3.0 4x`,\n});\n\nexport const createBttvEmote = ({\n  id,\n  code,\n}: api.BttvGlobalEmote | api.BttvChannelEmote): BttvEmote => ({\n  type: 'bttv-emote',\n  id,\n  alt: code,\n  src: `${BTTV_EMOTES_CDN}/${id}/1x`,\n  srcSet: `${BTTV_EMOTES_CDN}/${id}/2x 2x, ${BTTV_EMOTES_CDN}/${id}/3x 4x`,\n});\n\nexport const createFfzEmote = ({ id, name, urls }: api.FfzEmote): FfzEmote => ({\n  type: 'ffz-emote',\n  id,\n  alt: name,\n  src: urls[1],\n  srcSet: getFfzSrcSet(urls),\n});\n\nexport const createEmoji = (alt: string, src: string): Emoji => ({\n  type: 'emoji',\n  alt: `:${alt}:`,\n  src,\n});\n\nexport const createMention = (text: string, target: string): Mention => ({\n  type: 'mention',\n  text,\n  target,\n});\n\nexport const createLink = (href: string): Link => ({\n  type: 'link',\n  text: href,\n  href: normalizeHref(href),\n});\n\nexport const createBadge = ({\n  title,\n  description,\n  image_url_1x: imageUrl1x,\n  image_url_2x: imageUrl2x,\n  image_url_4x: imageUrl4x,\n}: api.TwitchBadgeVersion): Badge => ({\n  alt: title,\n  label: description,\n  src: imageUrl1x,\n  srcSet: `${imageUrl1x} 1x, ${imageUrl2x} 2x, ${imageUrl4x} 4x`,\n});\n\nexport const createBadges = (\n  badges: twitchIrc.Badges,\n  globalBadges: Record<string, api.TwitchBadge>,\n  channelBadges: Record<string, api.TwitchBadge>,\n): Badge[] => {\n  const mapBadges = ([name, version]: [string, string]): Badge | false => {\n    const badge =\n      channelBadges[name]?.versions[version] ||\n      globalBadges[name]?.versions[version];\n\n    return badge ? createBadge(badge) : false;\n  };\n\n  return R.pipe<{}, [string, string][], any[], any[]>(\n    R.toPairs,\n    R.map(mapBadges),\n    R.filter(Boolean),\n  )(badges);\n};\n","import type { RootState } from 'app/rootReducer';\n\nexport const isAuthReadySelector = (state: RootState): boolean =>\n  state.auth.status !== 'idle' && state.auth.status !== 'loading';\n\nexport const isAuthSelector = (state: RootState): boolean =>\n  state.auth.status === 'success';\n\nexport const userLoginSelector = (state: RootState): string | null =>\n  state.auth.userLogin;\n\nexport const userIdSelector = (state: RootState): string | null =>\n  state.auth.userId;\n","import { API_REQUESTS_TIMEOUT } from 'utils/constants';\n\nexport interface FetchRequestOptions extends RequestInit {\n  timeout?: number;\n}\n\nconst fetchRequest = async (\n  url: string,\n  { timeout, ...restOptions }: FetchRequestOptions = {},\n) => {\n  let options = { ...restOptions };\n  const fetchTimeout = timeout || API_REQUESTS_TIMEOUT;\n\n  if (fetchTimeout) {\n    const controller = new AbortController();\n\n    options = { ...options, signal: controller.signal };\n\n    setTimeout(() => controller.abort(), fetchTimeout);\n  }\n\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  const body = await response.json();\n\n  return body;\n};\n\nexport default fetchRequest;\n","import { LS_ACCESS_TOKEN } from 'utils/constants';\nimport fetchRequest from 'utils/fetchRequest';\nimport type { FetchRequestOptions } from 'utils/fetchRequest';\n\nconst TWITCH_API_HELIX = 'https://api.twitch.tv/helix';\nconst TWITCH_API_KRAKEN = 'https://api.twitch.tv/kraken';\n\nconst getHelixHeaders = () => ({\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `Bearer ${localStorage.getItem(LS_ACCESS_TOKEN)}`,\n});\n\nconst getKrakenHeaders = () => ({\n  Accept: 'application/vnd.twitchtv.v5+json',\n  'Client-ID': process.env.REACT_APP_TWITCH_API_CLIENT_ID,\n  Authorization: `OAuth ${localStorage.getItem(LS_ACCESS_TOKEN)}`,\n});\n\nconst apiRequestHelix = (url: string, options?: FetchRequestOptions) =>\n  fetchRequest(`${TWITCH_API_HELIX}${url}`, {\n    ...options,\n    headers: getHelixHeaders(),\n  } as FetchRequestOptions);\n\nconst apiRequestKraken = (url: string, options?: FetchRequestOptions) =>\n  fetchRequest(`${TWITCH_API_KRAKEN}${url}`, {\n    ...options,\n    headers: getKrakenHeaders(),\n  } as FetchRequestOptions);\n\nexport interface TwitchUser {\n  id: string;\n  login: string;\n  display_name: string;\n  type: string;\n  broadcaster_type: string;\n  description: string;\n  profile_image_url: string;\n  offline_image_url: string;\n  view_count: number;\n}\n\nexport interface TwitchUsersResponse {\n  data: TwitchUser[];\n}\n\nexport interface TwitchEmote {\n  id: number;\n  code: string;\n}\n\nexport interface TwitchEmotesResponse {\n  emoticon_sets: Record<string, TwitchEmote[]>;\n}\n\nexport interface TwitchBadgeVersion {\n  image_url_1x: string;\n  image_url_2x: string;\n  image_url_4x: string;\n  description: string;\n  title: string;\n  click_action: string;\n  click_url: string;\n  last_updated: null;\n}\n\nexport interface TwitchBadge {\n  versions: Record<string, TwitchBadgeVersion>;\n}\n\nexport interface TwitchBadgesResponse {\n  badge_sets: Record<string, TwitchBadge>;\n}\n\nexport interface TwitchBlockedUser {\n  display_name: string;\n  _id: string;\n  name: string;\n  type: string;\n  bio: string | null;\n  created_at: string;\n  updated_at: string;\n  logo: string;\n}\n\nexport interface TwitchBlockedUsersResponse {\n  _total: number;\n  blocks: {\n    user: TwitchBlockedUser;\n  }[];\n}\n\ninterface TwitchClipData {\n  id: string;\n  url: string;\n  embed_url: string;\n  broadcaster_id: string;\n  broadcaster_name: string;\n  creator_id: string;\n  creator_name: string;\n  video_id: string;\n  game_id: string;\n  language: string;\n  title: string;\n  view_count: number;\n  created_at: string;\n  thumbnail_url: string;\n}\n\nexport interface TwitchClipResponse {\n  data: TwitchClipData[];\n  pagination: {};\n}\n\ninterface TwitchVideoData {\n  id: string;\n  user_id: string;\n  user_name: string;\n  title: string;\n  description: string;\n  created_at: string;\n  published_at: string;\n  url: string;\n  thumbnail_url: string;\n  viewable: 'public' | 'private';\n  view_count: number;\n  language: string;\n  type: 'upload' | 'archive' | 'highlight';\n  duration: string;\n}\n\nexport interface TwitchVideoResponse {\n  data: TwitchVideoData[];\n  pagination: {};\n}\n\nexport const fetchUser = (userId: string): Promise<TwitchUsersResponse> =>\n  apiRequestHelix(`/users?id=${userId}`);\n\nexport const fetchTwitchEmotes = (\n  userId: string,\n): Promise<TwitchEmotesResponse> => apiRequestKraken(`/users/${userId}/emotes`);\n\nexport const fetchGlobalBadges = (\n  language = 'en',\n): Promise<TwitchBadgesResponse> =>\n  fetchRequest(\n    `https://badges.twitch.tv/v1/badges/global/display?language=${language}`,\n  );\n\nexport const fetchChannelBadges = (\n  channelId: string,\n  language = 'en',\n): Promise<TwitchBadgesResponse> =>\n  fetchRequest(\n    `https://badges.twitch.tv/v1/badges/channels/${channelId}/display?language=${language}`,\n  );\n\nexport const fetchBlockedUsers = (\n  userId: string,\n): Promise<TwitchBlockedUsersResponse> =>\n  apiRequestKraken(`/users/${userId}/blocks`);\n\nexport const fetchTwitchClip = (id: string): Promise<TwitchClipResponse> =>\n  apiRequestHelix(`/clips?id=${id}`);\n\nexport const fetchTwitchVideo = (id: string): Promise<TwitchVideoResponse> =>\n  apiRequestHelix(`/videos?id=${id}`);\n","import fetchRequest from 'utils/fetchRequest';\r\n\r\nexport interface BttvEmote {\r\n  id: string;\r\n  code: string;\r\n  imageType: 'png' | 'gif';\r\n}\r\n\r\nexport interface BttvGlobalEmote extends BttvEmote {\r\n  userId: string;\r\n}\r\n\r\nexport interface BttvChannelEmote extends BttvEmote {\r\n  user: {\r\n    id: string;\r\n    name: string;\r\n    displayName: string;\r\n    providerId: string;\r\n  };\r\n}\r\n\r\nexport type BttvGlobalEmotesResponse = BttvGlobalEmote[];\r\n\r\nexport interface BttvChannelEmotesResponse {\r\n  id: string;\r\n  bots: string[];\r\n  channelEmotes: BttvChannelEmote[];\r\n  sharedEmotes: BttvChannelEmote[];\r\n}\r\n\r\nexport const fetchBttvGlobalEmotes = (): Promise<BttvGlobalEmotesResponse> =>\r\n  fetchRequest('https://api.betterttv.net/3/cached/emotes/global');\r\n\r\nexport const fetchBttvChannelEmotes = (\r\n  channelId: string,\r\n): Promise<BttvChannelEmotesResponse> =>\r\n  fetchRequest(`https://api.betterttv.net/3/cached/users/twitch/${channelId}`);\r\n","import fetchRequest from 'utils/fetchRequest';\r\n\r\nexport interface FfzEmote {\r\n  css: null;\r\n  height: number;\r\n  hidden: boolean;\r\n  id: number;\r\n  margins: null;\r\n  modifier: boolean;\r\n  name: string;\r\n  offset: null;\r\n  owner: {\r\n    _id: number;\r\n    display_name: string;\r\n    name: string;\r\n  };\r\n  public: boolean;\r\n  urls: {\r\n    '1': string;\r\n    '2'?: string;\r\n    '4'?: string;\r\n  };\r\n  width: number;\r\n}\r\n\r\ninterface FfzEmoteSet {\r\n  _type: number;\r\n  css: null;\r\n  description: null;\r\n  emoticons: FfzEmote[];\r\n  icon: null;\r\n  id: number;\r\n  title: string;\r\n}\r\n\r\nexport interface FfzGlobalEmotesResponse {\r\n  default_sets: number[];\r\n  sets: Record<string, FfzEmoteSet>;\r\n  users: Record<string, string[]>;\r\n}\r\n\r\nexport interface FfzChannelEmotesResponse {\r\n  room: {\r\n    _id: number;\r\n    css: null;\r\n    display_name: string;\r\n    id: string;\r\n    is_group: boolean;\r\n    mod_urls: null;\r\n    moderator_badge: null;\r\n    set: number;\r\n    twitch_id: number;\r\n    user_badges: {};\r\n  };\r\n  sets: Record<string, FfzEmoteSet>;\r\n}\r\n\r\nexport const fetchFfzGlobalEmotes = (): Promise<FfzGlobalEmotesResponse> =>\r\n  fetchRequest('https://api.frankerfacez.com/v1/set/global');\r\n\r\nexport const fetchFfzChannelEmotes = (\r\n  channelId: string,\r\n): Promise<FfzChannelEmotesResponse> =>\r\n  fetchRequest(`https://api.frankerfacez.com/v1/room/id/${channelId}`);\r\n","import fetchRequest from 'utils/fetchRequest';\r\n\r\nexport interface ChatHistoryResponse {\r\n  messages: string[];\r\n  error: null;\r\n}\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const fetchChatHistory = (\r\n  channel: string,\r\n): Promise<ChatHistoryResponse> =>\r\n  fetchRequest(\r\n    `https://recent-messages.robotty.de/api/v2/recent-messages/${channel}?clearchatToNotice=true`,\r\n  );\r\n","import fetchRequest from 'utils/fetchRequest';\n\nconst YOUTUBE_API_BASE = 'https://www.googleapis.com/youtube/v3';\n\ninterface YoutubeThumbnail {\n  url: string;\n  width: number;\n  height: number;\n}\n\ninterface YoutubeVideoItem {\n  kind: string;\n  etag: string;\n  id: string;\n  snippet: {\n    publishedAt: string;\n    channelId: string;\n    title: string;\n    description: string;\n    thumbnails: {\n      default: YoutubeThumbnail;\n      medium: YoutubeThumbnail;\n      high: YoutubeThumbnail;\n      standard: YoutubeThumbnail;\n      maxres: YoutubeThumbnail;\n    };\n    channelTitle: string;\n    tags: string[];\n    categoryId: string;\n    liveBroadcastContent: string;\n    defaultLanguage: string;\n    localized: {\n      title: string;\n      description: string;\n    };\n    defaultAudioLanguage: string;\n  };\n}\n\nexport interface YoutubeVideoResponse {\n  kind: string;\n  etag: string;\n  items: YoutubeVideoItem[];\n  pageInfo: {\n    totalResults: number;\n    resultsPerPage: number;\n  };\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport const fetchYoutubeVideo = (id: string): Promise<YoutubeVideoResponse> =>\n  fetchRequest(\n    `${YOUTUBE_API_BASE}/videos?part=snippet&id=${id}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`,\n  );\n","module.exports = __webpack_public_path__ + \"static/media/ts-tink.4251bf04.ogg\";","import * as R from 'ramda';\nimport { createSelector } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport getEmotesByText from 'features/emotes/utils/getEmotesByText';\nimport { getEmotesFromUsageStatistic } from 'features/emotes/utils/emotesUsageStatistic';\n\nexport type EmoteCategory = {\n  title?: string;\n  items: htmlEntity.Emote[];\n};\n\nconst getTwitchUserEmoteCategories = R.pipe<\n  Record<string, api.TwitchEmote[]>,\n  api.TwitchEmote[][],\n  EmoteCategory[]\n>(\n  R.values,\n  R.map((items) => ({ items: R.map(htmlEntity.createTwitchEmote, items) })),\n);\n\nconst createMainEmoteCategories = (emotes: StateEmotes) => {\n  if (!emotes) return [];\n\n  const {\n    twitchGlobal,\n    twitchUser,\n    bttvGlobal,\n    bttvChannel,\n    ffzGlobal,\n    ffzChannel,\n  } = emotes;\n\n  return [\n    {\n      title: 'BetterTTV Channel Emotes',\n      items: bttvChannel.map(htmlEntity.createBttvEmote),\n    },\n    {\n      title: 'FrankerFaceZ Channel Emotes',\n      items: ffzChannel.map(htmlEntity.createFfzEmote),\n    },\n    ...getTwitchUserEmoteCategories(twitchUser),\n    {\n      title: 'Twitch',\n      items: R.map(\n        htmlEntity.createTwitchEmote,\n        R.propOr([], '0', twitchGlobal),\n      ),\n    },\n    {\n      title: 'BetterTTV',\n      items: bttvGlobal.map(htmlEntity.createBttvEmote),\n    },\n    {\n      title: 'FrankerFaceZ',\n      items: ffzGlobal.map(htmlEntity.createFfzEmote),\n    },\n  ].filter(R.path(['items', 'length'])) as EmoteCategory[];\n};\n\nconst getMainEmoteCategories = createSelector(\n  (emotes: StateEmotes) => emotes,\n  createMainEmoteCategories,\n);\n\nconst createEmoteCategories = (emotes: StateEmotes, text: string) => {\n  if (!emotes) return [];\n\n  if (text) {\n    const items = getEmotesByText(text, emotes);\n    const title = `${items.length ? '' : 'No '}Search Results for \"${text}\"`;\n\n    return [{ title, items }];\n  }\n\n  const mainEmoteCategories = getMainEmoteCategories(emotes);\n  const frequentlyUsed = getEmotesFromUsageStatistic(emotes);\n\n  if (!frequentlyUsed.length) {\n    return mainEmoteCategories;\n  }\n\n  const frequentlyUsedCategory = {\n    title: 'Frequently Used',\n    items: frequentlyUsed,\n  };\n\n  return [frequentlyUsedCategory, ...mainEmoteCategories] as EmoteCategory[];\n};\n\nexport default createEmoteCategories;\n","import * as R from 'ramda';\nimport { createSelector } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { RootState } from 'app/rootReducer';\nimport { currentChannelSelector } from 'features/chat/chatSelectors';\nimport createEmoteCategories from 'features/emotes/utils/createEmoteCategories';\n\nexport type StateEmotes = {\n  twitchGlobal: Record<string, api.TwitchEmote[]>;\n  twitchUser: Record<string, api.TwitchEmote[]>;\n  bttvGlobal: api.BttvGlobalEmote[];\n  bttvChannel: api.BttvChannelEmote[];\n  ffzGlobal: api.FfzEmote[];\n  ffzChannel: api.FfzEmote[];\n} | null;\n\n// emotes isLoaded\nexport const isTwitchEmotesLoadedSelector = (state: RootState) =>\n  state.emotes.twitch.status === 'success' ||\n  state.emotes.twitch.status === 'error';\n\nexport const isBttvGlobalEmotesLoadedSelector = (state: RootState) =>\n  state.emotes.bttv.global.status === 'success' ||\n  state.emotes.bttv.global.status === 'error';\n\nexport const isBttvChannelEmotesLoadedSelector = (state: RootState) => {\n  const currentChannel = currentChannelSelector(state);\n\n  return (\n    state.emotes.bttv.byChannels[currentChannel]?.status === 'success' ||\n    state.emotes.bttv.byChannels[currentChannel]?.status === 'error' ||\n    false\n  );\n};\n\nexport const isBttvEmotesLoadedSelector = (state: RootState) =>\n  isBttvGlobalEmotesLoadedSelector(state) &&\n  isBttvChannelEmotesLoadedSelector(state);\n\nexport const isFfzGlobalEmotesLoadedSelector = (state: RootState) =>\n  state.emotes.ffz.global.status === 'success' ||\n  state.emotes.ffz.global.status === 'error';\n\nexport const isFfzChannelEmotesLoadedSelector = (state: RootState) => {\n  const currentChannel = currentChannelSelector(state);\n\n  return (\n    state.emotes.ffz.byChannels[currentChannel]?.status === 'success' ||\n    state.emotes.ffz.byChannels[currentChannel]?.status === 'error' ||\n    false\n  );\n};\n\nexport const isFfzEmotesLoadedSelector = (state: RootState) =>\n  isFfzGlobalEmotesLoadedSelector(state) &&\n  isFfzChannelEmotesLoadedSelector(state);\n\nexport const isEmotesLoadedSelector = (state: RootState) =>\n  isTwitchEmotesLoadedSelector(state) &&\n  isBttvGlobalEmotesLoadedSelector(state) &&\n  isBttvChannelEmotesLoadedSelector(state) &&\n  isFfzGlobalEmotesLoadedSelector(state) &&\n  isFfzChannelEmotesLoadedSelector(state);\n\n// emotes\nconst twitchEmotesSelector = (state: RootState) => state.emotes.twitch.items;\nconst twitchGlobalEmotesSelector = createSelector(\n  twitchEmotesSelector,\n  R.pick(['0']),\n);\nconst twitchUserEmotesSelector = createSelector(\n  twitchEmotesSelector,\n  R.omit(['0']),\n);\n\nconst bttvGlobalEmotesSelector = (state: RootState) =>\n  state.emotes.bttv.global.items;\nconst bttvChannelEmotesSelector = (state: RootState) =>\n  state.emotes.bttv.byChannels[currentChannelSelector(state)]?.items || [];\n\nconst ffzGlobalEmotesSelector = (state: RootState) =>\n  state.emotes.ffz.global.items;\nconst ffzChannelEmotesSelector = (state: RootState) =>\n  state.emotes.ffz.byChannels[currentChannelSelector(state)]?.items || [];\n\nexport const emotesSelector = createSelector(\n  isEmotesLoadedSelector,\n  twitchGlobalEmotesSelector,\n  twitchUserEmotesSelector,\n  bttvGlobalEmotesSelector,\n  bttvChannelEmotesSelector,\n  ffzGlobalEmotesSelector,\n  ffzChannelEmotesSelector,\n  (\n    isEmotesLoaded,\n    twitchGlobal,\n    twitchUser,\n    bttvGlobal,\n    bttvChannel,\n    ffzGlobal,\n    ffzChannel,\n  ) => {\n    if (!isEmotesLoaded) return null;\n\n    return {\n      twitchGlobal,\n      twitchUser,\n      bttvGlobal,\n      bttvChannel,\n      ffzGlobal,\n      ffzChannel,\n    } as StateEmotes;\n  },\n);\n\nexport const emoteCategoriesSelector = (state: RootState, search: string) => {\n  const emotes = emotesSelector(state);\n\n  return createEmoteCategories(emotes, search);\n};\n","import * as R from 'ramda';\nimport { format } from 'date-fns/fp';\n\nimport * as api from 'api';\n\nexport const parseTwitchEmotes = R.prop('emoticon_sets');\n\nexport const parseBttvGlobalEmotes = (\n  data: api.BttvGlobalEmotesResponse,\n): api.BttvGlobalEmote[] => data;\n\nexport const parseBttvChannelEmotes = (\n  data: api.BttvChannelEmotesResponse,\n): api.BttvChannelEmote[] => [...data.channelEmotes, ...data.sharedEmotes];\n\nexport const parseFfzGlobalEmotes = ({\n  default_sets: defaultSets,\n  sets,\n}: api.FfzGlobalEmotesResponse): api.FfzEmote[] =>\n  R.pipe<any, any, any, any, api.FfzEmote[]>(\n    R.pick((defaultSets as unknown) as string[]),\n    R.values,\n    R.map(R.propOr([], 'emoticons')),\n    R.flatten,\n  )(sets);\n\nexport const parseFfzChannelEmotes: (\n  data: api.FfzChannelEmotesResponse,\n) => api.FfzEmote[] = R.pipe(\n  R.pathOr({}, ['sets']),\n  R.values,\n  R.map(R.pathOr([], ['emoticons'])),\n  R.flatten,\n);\n\nexport const parseBlockedUsers = R.pipe<\n  api.TwitchBlockedUsersResponse,\n  {}[],\n  string[]\n>(R.prop('blocks'), R.map<any, any>(R.path(['user', 'name'])));\n\nexport const parseBadges = R.prop('badge_sets');\n\n// https://regex101.com/r/4hu5CW/1\nconst clipThumbnailRegex = /(.+-)(86x45|260x147|480x272)(.+)/;\n\nexport const parseTwitchClip = ({ data }: api.TwitchClipResponse) => {\n  if (data.length === 0) return null;\n\n  const {\n    id,\n    url,\n    thumbnail_url: thumbnailUrl,\n    title,\n    creator_name: creatorName,\n  } = data[0];\n\n  const m = clipThumbnailRegex.exec(thumbnailUrl);\n\n  let src = '';\n  let srcSet = '';\n\n  if (m) {\n    const x1 = `${m[1]}86x45${m[3]}`;\n    const x2 = `${m[1]}260x147${m[3]}`;\n\n    src = x1;\n    srcSet = `${x1} 1x, ${x2} 2x`;\n  }\n\n  return {\n    id,\n    url,\n    src,\n    srcSet,\n    title,\n    description: `Clipped by ${creatorName}`,\n  };\n};\n\n// https://regex101.com/r/KimbdV/1\nconst videoThumbnailRegex = /(.+)(%{width})x(%{height})(.+)/;\n\nexport const parseTwitchVideo = ({ data }: api.TwitchVideoResponse) => {\n  if (data.length === 0) return null;\n\n  const {\n    id,\n    thumbnail_url: thumbnailUrl,\n    title,\n    user_name: userName,\n    published_at: publishedAt,\n  } = data[0];\n\n  const date = format('PP', new Date(publishedAt));\n  const m = videoThumbnailRegex.exec(thumbnailUrl);\n\n  let src = '';\n  let srcSet = '';\n\n  if (m) {\n    const x1 = `${m[1]}80x45${m[4]}`;\n    const x2 = `${m[1]}160x90${m[4]}`;\n    const x4 = `${m[1]}320x180${m[4]}`;\n\n    src = x1;\n    srcSet = `${x1} 1x, ${x2} 2x, ${x4} 4x`;\n  }\n\n  return {\n    id,\n    src,\n    srcSet,\n    title,\n    description: `${date} · ${userName}`,\n  };\n};\n\nexport const parseYoutubeVideo = ({ items }: api.YoutubeVideoResponse) => {\n  if (items.length === 0) return null;\n\n  const {\n    id,\n    snippet: {\n      title,\n      publishedAt,\n      channelTitle,\n      thumbnails: {\n        default: { url: x1 },\n        medium: { url: x2 },\n        high: { url: x4 },\n      },\n    },\n  } = items[0];\n\n  const date = format('PP', new Date(publishedAt));\n\n  return {\n    id,\n    src: x1,\n    srcSet: `${x1} 1x, ${x2} 2x, ${x4} 4x`,\n    title,\n    description: `${date} · ${channelTitle}`,\n  };\n};\n","import * as R from 'ramda';\n\nimport * as api from 'api';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport type { EmotesByText } from 'features/emotes/utils/getEmotesByText';\n\n// by id\n\nconst findTwitchEmoteByIdInSets = (\n  id: number,\n  sets: Record<string, api.TwitchEmote[]>,\n) => {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const set of Object.values(sets)) {\n    const result = R.find(R.propEq('id', id), set);\n\n    if (result) return htmlEntity.createTwitchEmote(result);\n  }\n\n  return null;\n};\n\nconst findTwitchEmoteById = (\n  id: number,\n  { twitchGlobal, twitchUser }: NonNullable<StateEmotes>,\n) =>\n  findTwitchEmoteByIdInSets(id, twitchGlobal) ||\n  findTwitchEmoteByIdInSets(id, twitchUser);\n\nconst findBttvEmoteById = (\n  id: string,\n  { bttvGlobal, bttvChannel }: NonNullable<StateEmotes>,\n) => {\n  const findById = R.find<api.BttvGlobalEmote | api.BttvChannelEmote>(\n    R.propEq('id', id),\n  );\n  const result = findById(bttvGlobal) || findById(bttvChannel);\n\n  return result ? htmlEntity.createBttvEmote(result) : null;\n};\n\nconst findFfzEmoteById = (\n  id: number,\n  { ffzGlobal, ffzChannel }: NonNullable<StateEmotes>,\n) => {\n  const findById = R.find<api.FfzEmote>(R.propEq('id', id));\n  const result = findById(ffzGlobal) || findById(ffzChannel);\n\n  return result ? htmlEntity.createFfzEmote(result) : null;\n};\n\n// by name\n\nconst regexMap: Record<number, string> = {\n  4: '>\\\\(', // '\\\\&gt\\\\;\\\\('\n  9: '<3', // '\\\\&lt\\\\;3'\n};\n\nconst findTwitchEmoteByNameInSets = (\n  name: string,\n  sets: Record<string, api.TwitchEmote[]>,\n) => {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const set of Object.values(sets)) {\n    const result = R.find(({ id, code }) => {\n      // 1-14 - match by regex\n      if (id >= 1 && id <= 14) {\n        const regexString = regexMap[id] || code;\n        return RegExp(`^${regexString}$`).test(name);\n      }\n\n      return name === code;\n    }, set);\n\n    if (result) return htmlEntity.createTwitchEmote(result);\n  }\n\n  return null;\n};\n\nconst findTwitchEmoteByName = (\n  name: string,\n  { twitchGlobal, twitchUser }: NonNullable<StateEmotes>,\n) =>\n  findTwitchEmoteByNameInSets(name, twitchGlobal) ||\n  findTwitchEmoteByNameInSets(name, twitchUser);\n\nconst findBttvEmoteByName = (\n  name: string,\n  { bttvGlobal, bttvChannel }: NonNullable<StateEmotes>,\n) => {\n  const findByName = R.find<api.BttvGlobalEmote | api.BttvChannelEmote>(\n    R.propEq('code', name),\n  );\n  const result = findByName(bttvGlobal) || findByName(bttvChannel);\n\n  return result ? htmlEntity.createBttvEmote(result) : null;\n};\n\nconst findFfzEmoteByName = (\n  name: string,\n  { ffzGlobal, ffzChannel }: NonNullable<StateEmotes>,\n) => {\n  const findByName = R.find<api.FfzEmote>(R.propEq('name', name));\n  const result = findByName(ffzGlobal) || findByName(ffzChannel);\n\n  return result ? htmlEntity.createFfzEmote(result) : null;\n};\n\n// by text\n\n/* eslint-disable no-restricted-syntax */\nconst findTwitchEmotesByText = (\n  result: EmotesByText,\n  sets: Record<string, api.TwitchEmote[]>,\n  text: string,\n  limit: number,\n): boolean => {\n  for (const items of Object.values(sets)) {\n    for (const emote of items) {\n      if (result.begins.length + result.contains.length === limit) return true;\n\n      const index = emote.code.toLowerCase().indexOf(text);\n\n      if (index !== -1) {\n        const type = index === 0 ? 'begins' : 'contains';\n\n        result[type].push(htmlEntity.createTwitchEmote(emote));\n      }\n    }\n  }\n\n  return false;\n};\n\nconst findBttvEmotesByText = (\n  result: EmotesByText,\n  bttv: api.BttvGlobalEmote[] | api.BttvChannelEmote[],\n  text: string,\n  limit: number,\n): boolean => {\n  for (const emote of bttv) {\n    if (result.begins.length + result.contains.length === limit) return true;\n\n    const index = emote.code.toLowerCase().indexOf(text);\n\n    if (index !== -1) {\n      const type = index === 0 ? 'begins' : 'contains';\n\n      result[type].push(htmlEntity.createBttvEmote(emote));\n    }\n  }\n\n  return false;\n};\n\nconst findFfzEmotesByText = (\n  result: EmotesByText,\n  ffz: api.FfzEmote[],\n  text: string,\n  limit: number,\n): boolean => {\n  for (const emote of ffz) {\n    if (result.begins.length + result.contains.length === limit) return true;\n\n    const index = emote.name.toLowerCase().indexOf(text);\n\n    if (index !== -1) {\n      const type = index === 0 ? 'begins' : 'contains';\n\n      result[type].push(htmlEntity.createFfzEmote(emote));\n    }\n  }\n\n  return false;\n};\n/* eslint-enable no-restricted-syntax */\n\nconst findEmote = {\n  twitch: {\n    byId: findTwitchEmoteById,\n    byName: findTwitchEmoteByName,\n    byText: findTwitchEmotesByText,\n  },\n  bttv: {\n    byId: findBttvEmoteById,\n    byName: findBttvEmoteByName,\n    byText: findBttvEmotesByText,\n  },\n  ffz: {\n    byId: findFfzEmoteById,\n    byName: findFfzEmoteByName,\n    byText: findFfzEmotesByText,\n  },\n};\n\nexport default findEmote;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\nimport type twitchIrc from 'twitch-simple-irc';\n\ntype Params = {\n  room: twitchIrc.RoomStateTags | null;\n  user: twitchIrc.UserStateTags | null;\n};\n\ntype ChatState = {\n  isConnected: boolean;\n  currentChannel: string;\n  params: {\n    global: twitchIrc.GlobalUserStateTags | null;\n    byChannels: Record<string, Params>;\n  };\n};\n\nconst initialState: ChatState = {\n  isConnected: false,\n  currentChannel: '',\n  params: {\n    global: null,\n    byChannels: {},\n  },\n};\n\nconst chat = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    updateIsConnected: (state, { payload }: PayloadAction<boolean>): void => {\n      state.isConnected = payload;\n    },\n\n    updateCurrentChannel: (state, { payload }: PayloadAction<string>): void => {\n      state.currentChannel = payload;\n    },\n\n    updateGlobalUserParams: (\n      state,\n      { payload }: PayloadAction<twitchIrc.GlobalUserStateEvent>,\n    ) => {\n      state.params.global = payload.tags;\n    },\n\n    updateUserParams: (\n      state,\n      { payload }: PayloadAction<twitchIrc.UserStateEvent>,\n    ) => {\n      const { channel, tags } = payload;\n\n      if (!state.params.byChannels[channel]) {\n        state.params.byChannels[channel] = {\n          room: null,\n          user: null,\n        };\n      }\n\n      state.params.byChannels[channel].user = tags;\n    },\n\n    updateRoomParams: (\n      state,\n      { payload }: PayloadAction<twitchIrc.RoomStateEvent>,\n    ) => {\n      const { channel, tags } = payload;\n\n      if (!state.params.byChannels[channel]) {\n        state.params.byChannels[channel] = {\n          room: null,\n          user: null,\n        };\n      }\n\n      // TODO: merge tags\n      state.params.byChannels[channel].room = tags;\n    },\n  },\n});\n\nexport const {\n  updateIsConnected,\n  updateCurrentChannel,\n\n  // params\n  updateGlobalUserParams,\n  updateUserParams,\n  updateRoomParams,\n} = chat.actions;\n\nexport default chat.reducer;\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport type { RootState } from 'app/rootReducer';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport {\n  currentChannelSelector,\n  userBadgesSelector,\n} from 'features/chat/chatSelectors';\n\nexport const isGlobalBadgesLoadedSelector = (state: RootState) =>\n  state.badges.global.status === 'success' ||\n  state.badges.global.status === 'error';\n\nexport const isChannelBadgesLoadedSelector = (state: RootState) =>\n  state.badges.byChannels[currentChannelSelector(state)]?.status ===\n    'success' ||\n  state.badges.byChannels[currentChannelSelector(state)]?.status === 'error';\n\nexport const isBadgesLoadedSelector = (state: RootState) =>\n  isGlobalBadgesLoadedSelector(state) && isChannelBadgesLoadedSelector(state);\n\nexport const globalBadgesSelector = (state: RootState) =>\n  state.badges.global.items;\n\nexport const channelBadgesSelector = (state: RootState) =>\n  state.badges.byChannels[currentChannelSelector(state)]?.items || {};\n\nexport const userBadgesImagesSelector = createSelector(\n  userBadgesSelector,\n  globalBadgesSelector,\n  channelBadgesSelector,\n  htmlEntity.createBadges,\n);\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport jwt from 'jsonwebtoken';\n\nimport { initializeAuth, fetchUser } from 'features/auth/authSlice';\nimport { isAuthReadySelector } from 'features/auth/authSelectors';\nimport { readUserFromLocatStorage } from 'features/auth/authUtils';\n\nconst useInitializeAuth = () => {\n  const dispatch = useDispatch();\n  const isAuthReady = useSelector(isAuthReadySelector);\n\n  useEffect(() => {\n    if (isAuthReady) return;\n\n    const { idToken } = localStorage;\n    const user = readUserFromLocatStorage();\n\n    if (!idToken) {\n      dispatch(initializeAuth({ isAuth: false }));\n      return;\n    }\n\n    if (user) {\n      const { id, login } = user;\n      const params = { isAuth: true, userId: id, userLogin: login };\n\n      dispatch(initializeAuth(params));\n    } else {\n      const jwtData = jwt.decode(idToken);\n\n      if (jwtData) {\n        dispatch(fetchUser(jwtData.sub));\n      } else {\n        dispatch(initializeAuth({ isAuth: false }));\n      }\n    }\n  }, [dispatch, isAuthReady]);\n};\n\nexport default useInitializeAuth;\n","import type { RootState } from 'app/rootReducer';\nimport type { ChatMessage } from 'features/messages/messagesSlice';\nimport { currentChannelSelector } from 'features/chat/chatSelectors';\n\nexport const messagesSelector = (state: RootState): ChatMessage[] =>\n  state.messages[currentChannelSelector(state)]?.items || [];\n\nexport const usersSelector = (state: RootState): string[] =>\n  state.messages[currentChannelSelector(state)]?.users || [];\n\nexport const isHistoryLoadedSelector = (state: RootState) => {\n  const currentChannel = currentChannelSelector(state);\n\n  return (\n    state.messages[currentChannel]?.history.status === 'success' ||\n    state.messages[currentChannel]?.history.status === 'error' ||\n    false\n  );\n};\n\nexport const isHistoryAddedSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.history.isAdded || false;\n\nexport const isEvenSelector = (state: RootState) =>\n  state.messages[currentChannelSelector(state)]?.isEven || false;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  currentChannelSelector,\n  currentChannelIdSelector,\n} from 'features/chat/chatSelectors';\nimport {\n  isHistoryAddedSelector,\n  isHistoryLoadedSelector,\n} from 'features/messages/messagesSelectors';\nimport {\n  isTwitchEmotesLoadedSelector,\n  isBttvGlobalEmotesLoadedSelector,\n  isBttvChannelEmotesLoadedSelector,\n  isFfzGlobalEmotesLoadedSelector,\n  isFfzChannelEmotesLoadedSelector,\n} from 'features/emotes/emotesSelectors';\nimport {\n  isGlobalBadgesLoadedSelector,\n  isChannelBadgesLoadedSelector,\n} from 'features/badges/badgesSelectors';\nimport { isBlockedUsersLoadedSelector } from 'features/blockedUsers/blockedUsersSelectors';\nimport {\n  isAuthReadySelector,\n  isAuthSelector,\n  userIdSelector,\n} from 'features/auth/authSelectors';\nimport {\n  addChatHistory,\n  fetchChatHistory,\n} from 'features/messages/messagesSlice';\nimport {\n  fetchTwitchEmotes,\n  fetchBttvGlobalEmotes,\n  fetchBttvChannelEmotes,\n  fetchFfzGlobalEmotes,\n  fetchFfzChannelEmotes,\n} from 'features/emotes/emotesSlice';\nimport {\n  fetchChannelBadges,\n  fetchGlobalBadges,\n} from 'features/badges/badgesSlice';\nimport { fetchBlockedUsers } from 'features/blockedUsers/blockedUsersSlice';\n\nconst useFetchChatData = () => {\n  const dispatch = useDispatch();\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n  const userId = useSelector(userIdSelector);\n  const currentChannel = useSelector(currentChannelSelector);\n  const currentChannelId = useSelector(currentChannelIdSelector);\n\n  const isTwitchEmotesLoaded = useSelector(isTwitchEmotesLoadedSelector);\n  const isBttvGlobalEmotesLoaded = useSelector(\n    isBttvGlobalEmotesLoadedSelector,\n  );\n  const isBttvChannelEmotesLoaded = useSelector(\n    isBttvChannelEmotesLoadedSelector,\n  );\n  const isFfzGlobalEmotesLoaded = useSelector(isFfzGlobalEmotesLoadedSelector);\n  const isFfzChannelEmotesLoaded = useSelector(\n    isFfzChannelEmotesLoadedSelector,\n  );\n  const isGlobalBadgesLoaded = useSelector(isGlobalBadgesLoadedSelector);\n  const isChannelBadgesLoaded = useSelector(isChannelBadgesLoadedSelector);\n  const isHistoryLoaded = useSelector(isHistoryLoadedSelector);\n  const isBlockedUsersLoaded = useSelector(isBlockedUsersLoadedSelector);\n  const isHistoryAdded = useSelector(isHistoryAddedSelector);\n\n  const isAllEmotesLoaded =\n    (isAuth ? isTwitchEmotesLoaded : true) &&\n    isBttvGlobalEmotesLoaded &&\n    isBttvChannelEmotesLoaded &&\n    isFfzGlobalEmotesLoaded &&\n    isFfzChannelEmotesLoaded;\n\n  const isReadyToAddHistory =\n    isAuthReady &&\n    currentChannel &&\n    !isHistoryAdded &&\n    isAllEmotesLoaded &&\n    (isAuth ? isBlockedUsersLoaded : true) &&\n    isGlobalBadgesLoaded &&\n    isChannelBadgesLoaded &&\n    isHistoryLoaded;\n\n  useEffect(() => {\n    dispatch(fetchBttvGlobalEmotes());\n    dispatch(fetchFfzGlobalEmotes());\n    dispatch(fetchGlobalBadges());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (isReadyToAddHistory) {\n      dispatch(addChatHistory(currentChannel));\n    }\n  }, [dispatch, currentChannel, isReadyToAddHistory]);\n\n  useEffect(() => {\n    if (!isHistoryAdded && currentChannel) {\n      dispatch(fetchChatHistory(currentChannel));\n    }\n  }, [dispatch, currentChannel, isHistoryAdded]);\n\n  useEffect(() => {\n    if (isAuthReady && isAuth && userId) {\n      dispatch(fetchTwitchEmotes(userId));\n      dispatch(fetchBlockedUsers(userId));\n    }\n  }, [dispatch, isAuthReady, isAuth, userId]);\n\n  // TODO: check if emotes and badges is already in the store\n\n  useEffect(() => {\n    if (currentChannel && currentChannelId) {\n      const params = {\n        channel: currentChannel,\n        channelId: currentChannelId,\n      };\n\n      dispatch(fetchBttvChannelEmotes(params));\n      dispatch(fetchFfzChannelEmotes(params));\n      dispatch(fetchChannelBadges(params));\n    }\n  }, [dispatch, currentChannel, currentChannelId]);\n};\n\nexport default useFetchChatData;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { LS_LAST_CHANNEL } from 'utils/constants';\nimport { updateCurrentChannel } from 'features/chat/chatSlice';\n\n// TODO: remove lastChannel if can't connect to the channel\n\nconst useCurrentChannel = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { hash } = history.location;\n\n  useEffect(() => {\n    if (hash && hash.length > 1) {\n      const channel = hash.slice(1);\n\n      dispatch(updateCurrentChannel(channel));\n\n      localStorage.setItem(LS_LAST_CHANNEL, channel);\n\n      document.title = channel\n        ? `#${channel} - ${process.env.REACT_APP_NAME} `\n        : (process.env.REACT_APP_NAME as string);\n\n      return;\n    }\n\n    const lastChannel = localStorage.getItem(LS_LAST_CHANNEL);\n\n    if (lastChannel) {\n      history.push({ pathname: '/chat/', hash: lastChannel });\n\n      dispatch(updateCurrentChannel(lastChannel));\n    } else {\n      dispatch(updateCurrentChannel(''));\n    }\n  }, [dispatch, history, hash]);\n};\n\nexport default useCurrentChannel;\n","import { lib as emojilib } from 'emojilib';\n\nconst replaceEmojis = (text: string): string =>\n  text\n    .split(' ')\n    .map((word: string) => {\n      if (word[0] !== ':' || word[word.length - 1] !== ':') {\n        return word;\n      }\n\n      const name = word.slice(1, -1);\n      const emoji = emojilib[name];\n\n      return emoji && emoji.char ? emoji.char : word;\n    })\n    .join(' ');\n\nexport default replaceEmojis;\n","import { useEffect, useRef, useMemo, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as twitchIrc from 'twitch-simple-irc';\nimport { usePrevious } from 'react-use';\n\nimport { NOTICE_MESSAGE_TAGS, LS_ACCESS_TOKEN } from 'utils/constants';\nimport {\n  updateIsConnected,\n  updateGlobalUserParams,\n  updateUserParams,\n  updateRoomParams,\n} from 'features/chat/chatSlice';\nimport { recieveMessage, clearChat } from 'features/messages/messagesSlice';\nimport { invalidateAuth } from 'features/auth/authSlice';\nimport {\n  currentChannelSelector,\n  isConnectedSelector,\n} from 'features/chat/chatSelectors';\nimport {\n  isAuthSelector,\n  isAuthReadySelector,\n  userLoginSelector,\n} from 'features/auth/authSelectors';\nimport replaceEmojis from 'features/messages/utils/replaceEmojis';\n\nconst useTwitchClient = () => {\n  const dispatch = useDispatch();\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n  const userLogin = useSelector(userLoginSelector);\n  const isConnected = useSelector(isConnectedSelector);\n  const currentChannel = useSelector(currentChannelSelector);\n  const prevChannel = usePrevious(currentChannel);\n  const clientRef = useRef<twitchIrc.Client | null>(null);\n\n  const registerEvents = useCallback(\n    (client: typeof clientRef) => {\n      if (!client.current) return;\n\n      const handleRegister = () => dispatch(updateIsConnected(true));\n\n      const handleDisconnect = () => dispatch(updateIsConnected(false));\n\n      const handleGlobalUserState = (data: twitchIrc.GlobalUserStateEvent) =>\n        dispatch(updateGlobalUserParams(data));\n\n      const handleUserState = (data: twitchIrc.UserStateEvent) =>\n        dispatch(updateUserParams(data));\n\n      const handleRoomState = (data: twitchIrc.RoomStateEvent) =>\n        dispatch(updateRoomParams(data));\n\n      const handleMessage = (message: twitchIrc.MessageEvent) => {\n        dispatch(recieveMessage({ type: 'message', message }));\n      };\n\n      const handleNotice = (message: twitchIrc.NoticeEvent) => {\n        if (\n          client.current &&\n          message.message === 'Login authentication failed'\n        ) {\n          dispatch(invalidateAuth());\n          client.current.disconnect();\n          // eslint-disable-next-line no-param-reassign\n          client.current = null;\n          return;\n        }\n\n        dispatch(recieveMessage({ type: 'notice', message }));\n      };\n\n      const handleUserNotice = (message: twitchIrc.UserNoticeEvent) =>\n        dispatch(recieveMessage({ type: 'user-notice', message }));\n\n      const handleClearChat = (data: twitchIrc.ClearChatEvent) => {\n        if (!data.tags.targetUserId) return;\n        dispatch(clearChat(data));\n      };\n\n      client.current.on('register', handleRegister);\n      client.current.on('disconnect', handleDisconnect);\n      client.current.on('globaluserstate', handleGlobalUserState);\n      client.current.on('userstate', handleUserState);\n      client.current.on('roomstate', handleRoomState);\n      client.current.on('message', handleMessage);\n      client.current.on('notice', handleNotice);\n      client.current.on('usernotice', handleUserNotice);\n      client.current.on('clearchat', handleClearChat);\n    },\n    [dispatch],\n  );\n\n  useEffect(() => {\n    return () => {\n      if (clientRef.current) {\n        clientRef.current.disconnect();\n        clientRef.current = null;\n      }\n    };\n  }, [clientRef]);\n\n  useEffect(() => {\n    if (!currentChannel || !isAuthReady) return;\n\n    if (!clientRef.current) {\n      const options = isAuth\n        ? {\n            name: userLogin as string,\n            auth: localStorage.getItem(LS_ACCESS_TOKEN) as string,\n          }\n        : null;\n\n      (async () => {\n        clientRef.current = new twitchIrc.Client(options);\n\n        registerEvents(clientRef);\n\n        await clientRef.current.connect();\n\n        clientRef.current.join(currentChannel);\n      })();\n\n      return;\n    }\n\n    if (prevChannel && prevChannel !== currentChannel) {\n      clientRef.current.part(prevChannel);\n      clientRef.current.join(currentChannel);\n    }\n  }, [\n    dispatch,\n    registerEvents,\n    isAuth,\n    isAuthReady,\n    isConnected,\n    userLogin,\n    currentChannel,\n    prevChannel,\n  ]);\n\n  const client = () => ({\n    say(channel: string, message: string) {\n      if (!clientRef.current || !message.trim()) return;\n\n      const normalizedMessage = replaceEmojis(message.trim());\n\n      clientRef.current.say(channel, normalizedMessage);\n\n      function handleUserState(data: twitchIrc.UserStateEvent) {\n        if (data.channel === channel) {\n          const ownMessage = {\n            message: normalizedMessage,\n            channel,\n            tags: data.tags,\n          };\n\n          dispatch(\n            recieveMessage({ type: 'own-message', message: ownMessage }),\n          );\n\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          removeListeners();\n        }\n      }\n\n      function handleNotice(data: twitchIrc.NoticeEvent) {\n        if (\n          data.channel === channel &&\n          NOTICE_MESSAGE_TAGS.includes(data.tags.msgId)\n        ) {\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          removeListeners();\n        }\n      }\n\n      function removeListeners() {\n        if (!clientRef.current) return;\n\n        clientRef.current.off('notice', handleNotice);\n        clientRef.current.off('userstate', handleUserState);\n      }\n\n      clientRef.current.on('notice', handleNotice);\n      clientRef.current.on('userstate', handleUserState);\n\n      setTimeout(() => removeListeners(), 10000);\n    },\n  });\n\n  return useMemo(client, [clientRef, dispatch]);\n};\n\nexport default useTwitchClient;\n","const getUsersByBeginText = (\n  beginText: string,\n  users: string[],\n  limit = 5,\n): string[] => {\n  const result = [];\n  const beginTextLower = beginText.toLowerCase();\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const name of users) {\n    if (result.length === limit) return result;\n\n    const nameLower = name.toLowerCase();\n\n    if (beginTextLower === '' || nameLower.startsWith(beginTextLower)) {\n      result.push(name);\n    }\n  }\n\n  return result;\n};\n\nexport default getUsersByBeginText;\n","import { useRef, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useSetState } from 'react-use';\n\nimport { SUGGESTION_TYPES } from 'utils/constants';\nimport getUsersByBeginText from 'features/chat/utils/getUsersByBeginText';\nimport getEmotesByText from 'features/emotes/utils/getEmotesByText';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport { usersSelector } from 'features/messages/messagesSelectors';\nimport { emotesSelector } from 'features/emotes/emotesSelectors';\n\ninterface ASuggestions {\n  isActive: boolean;\n  activeIndex: number;\n  start: number;\n  end: number;\n}\ninterface UserSuggestions extends ASuggestions {\n  type: 'users';\n  items: string[];\n}\ninterface EmoteSuggestions extends ASuggestions {\n  type: 'emotes';\n  items: htmlEntity.Emote[];\n}\nexport type SuggestionsState = UserSuggestions | EmoteSuggestions;\n\nconst suggestionsInitialState: SuggestionsState = {\n  type: 'users',\n  isActive: false,\n  items: [],\n  activeIndex: 0,\n  start: 0,\n  end: 0,\n};\n\nconst setSuggestionsIndexUp = ({\n  activeIndex,\n  items,\n  ...rest\n}: SuggestionsState) =>\n  ({\n    activeIndex: activeIndex === 0 ? items.length - 1 : activeIndex - 1,\n    items,\n    ...rest,\n  } as SuggestionsState);\n\nconst setSuggestionsIndexDown = ({\n  activeIndex,\n  items,\n  ...rest\n}: SuggestionsState) =>\n  ({\n    activeIndex: activeIndex === items.length - 1 ? 0 : activeIndex + 1,\n    items,\n    ...rest,\n  } as SuggestionsState);\n\nconst replaceSuggestionText = (\n  text: string,\n  { type, items, activeIndex, start, end }: SuggestionsState,\n) => {\n  if (items.length === 0) return text;\n\n  const currentItem = items[activeIndex];\n  const insertedText =\n    type === 'users'\n      ? `@${currentItem}`\n      : (currentItem as htmlEntity.Emote).alt;\n\n  const textBefore = text.substring(0, start);\n  const testAfter = text.substring(end) || ' ';\n\n  return `${textBefore}${insertedText}${testAfter}`;\n};\n\nconst useChatInput = (\n  setText: (value: React.SetStateAction<string>) => void,\n  onSendMessage: () => void,\n  chatInputRef: React.RefObject<HTMLElement>,\n) => {\n  const [suggestions, setSuggestions] = useSetState<SuggestionsState>(\n    suggestionsInitialState,\n  );\n\n  const emotes = useSelector(emotesSelector);\n  const users = useSelector(usersSelector);\n\n  const usersRef = useRef(users);\n  usersRef.current = users;\n  const emotesRef = useRef(emotes);\n  emotesRef.current = emotes;\n  const suggestionsRef = useRef(suggestions);\n  suggestionsRef.current = suggestions;\n\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      const { value, selectionStart } = e.target;\n\n      setText(value);\n\n      const spaceIndexBefore = value.lastIndexOf(' ', selectionStart - 1);\n      const spaceIndexAfter = value.indexOf(' ', selectionStart);\n\n      const start = spaceIndexBefore === -1 ? 0 : spaceIndexBefore + 1;\n      const end = spaceIndexAfter === -1 ? value.length : spaceIndexAfter;\n\n      const word = value.substring(start, end);\n\n      const usersMatch = SUGGESTION_TYPES.users.regex.exec(word);\n\n      if (usersMatch) {\n        const [, beginText] = usersMatch;\n        const items = getUsersByBeginText(\n          beginText,\n          usersRef.current,\n          SUGGESTION_TYPES.users.limit,\n        );\n\n        setSuggestions({\n          type: 'users',\n          isActive: true,\n          items,\n          activeIndex: 0,\n          start,\n          end,\n        });\n\n        return;\n      }\n\n      const emotesMatch = SUGGESTION_TYPES.emotes.regex.exec(word);\n\n      if (emotesMatch && emotesRef.current) {\n        const [, text] = emotesMatch;\n        const items = getEmotesByText(\n          text,\n          emotesRef.current,\n          SUGGESTION_TYPES.emotes.limit,\n        );\n\n        setSuggestions({\n          type: 'emotes',\n          isActive: true,\n          items,\n          activeIndex: 0,\n          start,\n          end,\n        });\n\n        return;\n      }\n\n      if (suggestionsRef.current.isActive) {\n        setSuggestions(suggestionsInitialState);\n      }\n    },\n    [setText, setSuggestions, suggestionsRef],\n  );\n\n  const handleKeyUp = useCallback(\n    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {},\n    [],\n  );\n\n  const handleKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n      if (suggestionsRef.current.isActive) {\n        if (e.key === 'Enter' || e.key === 'Tab') {\n          e.preventDefault();\n          setText((t) => replaceSuggestionText(t, suggestionsRef.current));\n          setSuggestions(suggestionsInitialState);\n\n          return;\n        }\n\n        if (e.key === 'ArrowUp') {\n          e.preventDefault();\n          setSuggestions(setSuggestionsIndexUp);\n          return;\n        }\n\n        if (e.key === 'ArrowDown') {\n          e.preventDefault();\n          setSuggestions(setSuggestionsIndexDown);\n          return;\n        }\n\n        if (e.key === 'Escape') {\n          setSuggestions({ isActive: false });\n          return;\n        }\n      }\n\n      if (!suggestionsRef.current.isActive) {\n        if (e.key === 'Enter') {\n          e.preventDefault();\n          onSendMessage();\n        }\n      }\n    },\n    [onSendMessage, setText, setSuggestions, suggestionsRef],\n  );\n\n  const handleSuggestionMouseEnter = useCallback(\n    (activeIndex: number) => setSuggestions({ activeIndex }),\n    [setSuggestions],\n  );\n\n  const handleSuggestionClick = useCallback(\n    (activeIndex: number) => {\n      setText((t) =>\n        replaceSuggestionText(t, { ...suggestionsRef.current, activeIndex }),\n      );\n\n      if (chatInputRef.current) {\n        chatInputRef.current.focus();\n      }\n\n      setSuggestions(suggestionsInitialState);\n    },\n    [setText, setSuggestions, chatInputRef],\n  );\n\n  const handleBlur = useCallback(() => {\n    setSuggestions({ isActive: false });\n  }, [setSuggestions]);\n\n  return {\n    suggestions,\n    handleChange,\n    handleKeyUp,\n    handleKeyDown,\n    handleBlur,\n    handleSuggestionMouseEnter,\n    handleSuggestionClick,\n  };\n};\n\nexport default useChatInput;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M8.5 10L4 5.5 5.5 4 10 8.5 14.5 4 16 5.5 11.5 10l4.5 4.5-1.5 1.5-4.5-4.5L5.5 16 4 14.5 8.5 10z\"\n});\n\nconst SvgClose = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 20 20\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref);\n\nconst ForwardRef = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgClose, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/close.992b249e.svg\";\nexport { ForwardRef as ReactComponent };","import styled, { css } from 'styled-components';\n\nconst sizes = {\n  small: css`\n    width: 24px;\n    height: 24px;\n  `,\n  medium: css`\n    width: 30px;\n    height: 30px;\n  `,\n  // large: css``,\n};\n\nconst IconButton = styled.button.attrs({\n  type: 'button',\n})<{ size?: 'small' | 'medium' }>`\n  margin: 0;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: none;\n  border: none;\n  outline: none;\n  color: #fff;\n  border-radius: 4px;\n  cursor: pointer;\n\n  ${(p) => sizes[p.size || 'medium']};\n\n  &:hover,\n  &:focus {\n    background-color: rgba(255, 255, 255, 0.15);\n  }\n\n  &:active {\n    background-color: rgba(255, 255, 255, 0.2);\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n`;\n\nexport default IconButton;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { ReactComponent as CloseIconSvg } from 'icons/close.svg';\nimport IconButton from 'components/IconButton';\n\nconst ChatModalRoot = styled.div`\n  height: 100%;\n  box-shadow: rgba(0, 0, 0, 0.4) 0px 4px 8px 0px,\n    rgba(0, 0, 0, 0.4) 0px 0px 4px 0px;\n  background-color: #18181b;\n  white-space: normal;\n  color: #fff;\n  border-radius: 4px;\n`;\nconst CloseButton = styled(IconButton).attrs({ size: 'small' })`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n`;\nconst CloseIcon = styled(CloseIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  children: React.ReactNode;\n  onClose: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n};\n\nconst ChatModal = ({ children, onClose }: Props) => (\n  <ChatModalRoot>\n    <CloseButton onClick={onClose}>\n      <CloseIcon />\n    </CloseButton>\n    {children}\n  </ChatModalRoot>\n);\n\nexport default ChatModal;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"currentColor\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M7 11a1 1 0 100-2 1 1 0 000 2zm7-1a1 1 0 11-2 0 1 1 0 012 0zm-4 4a2 2 0 002-2H8a2 2 0 002 2z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-2 0a6 6 0 11-12 0 6 6 0 0112 0z\",\n  clipRule: \"evenodd\"\n}));\n\nconst SvgSmileyFace = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 20 20\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref);\n\nconst ForwardRef = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgSmileyFace, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/smiley-face.1cc055ed.svg\";\nexport { ForwardRef as ReactComponent };","import CustomScrollbar from 'react-scrollbars-custom';\nimport styled from 'styled-components';\n\nconst Scrollbar = styled(CustomScrollbar).attrs({\n  disableTracksWidthCompensation: true,\n})`\n  overflow-y: auto;\n\n  .ScrollbarsCustom-Content {\n    padding: 0 !important;\n  }\n\n  .ScrollbarsCustom-TrackY {\n    background: none !important;\n  }\n\n  .ScrollbarsCustom-ThumbY {\n    margin-left: auto;\n    margin-right: auto;\n    width: 6px !important;\n  }\n`;\n\nexport default Scrollbar;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  fillRule: \"evenodd\",\n  d: \"M13.192 14.606a7 7 0 111.414-1.414l3.101 3.1-1.414 1.415-3.1-3.1zM14 9A5 5 0 114 9a5 5 0 0110 0z\",\n  clipRule: \"evenodd\"\n});\n\nconst SvgSearch = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 20 20\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref);\n\nconst ForwardRef = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgSearch, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/search.a2f0945f.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport type { RootState } from 'app/rootReducer';\nimport Scrollbar from 'components/Scrollbar';\nimport { emoteCategoriesSelector } from 'features/emotes/emotesSelectors';\nimport type { EmoteCategory } from 'features/emotes/utils/createEmoteCategories';\nimport { ReactComponent as SearchIconSvg } from 'icons/search.svg';\n\nconst EmotePickerRoot = styled.div`\n  padding-top: 30px;\n  padding-bottom: 16px;\n  height: 100%;\n`;\nconst Categories = styled.div`\n  height: calc(100% - 30px);\n`;\nconst Category = styled.div`\n  padding-top: 10px;\n  padding-right: 16px;\n  padding-left: 16px;\n\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding-bottom: 10px;\n  font-size: 12px;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst CategoryItems = styled.div``;\nconst Emote = styled.img`\n  padding: 2px;\n  width: 32px;\n  height: 32px;\n  object-fit: contain;\n\n  &:hover {\n    background-color: rgba(119, 44, 232, 0.2);\n    cursor: pointer;\n  }\n`;\nconst SearchBlock = styled.div`\n  position: relative;\n  padding: 0 16px;\n  color: #adadb8;\n`;\nconst SearchInput = styled.input`\n  padding-left: 30px;\n  padding-right: 10px;\n  width: 100%;\n  height: 30px;\n  color: #efeff1;\n  font-family: inherit;\n  line-height: 1.5;\n  background-clip: padding-box;\n  background-color: rgba(255, 255, 255, 0.15);\n  border: 2px solid rgba(255, 255, 255, 0.15);\n  outline: 0;\n  border-radius: 4px;\n  appearance: none;\n  transition: box-shadow 0.1s ease-in, border 0.1s ease-in,\n    background-color 0.1s ease-in;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n`;\nconst SearchIcon = styled(SearchIconSvg)`\n  position: absolute;\n  top: 50%;\n  left: 21px;\n  display: block;\n  width: 20px;\n  height: 20px;\n  transform: translateY(-50%);\n`;\n\ntype Props = {\n  onEmoteClick: (name: string) => void;\n};\n\nconst EmotePicker = ({ onEmoteClick }: Props) => {\n  const [search, setSearch] = useState('');\n  const searchInputRef = useRef<HTMLInputElement>(null);\n  const emoteCategories = useSelector((state: RootState) =>\n    emoteCategoriesSelector(state, search),\n  );\n\n  useEffect(() => {\n    if (searchInputRef.current) {\n      searchInputRef.current.focus();\n    }\n\n    return () => setSearch('');\n  }, []);\n\n  const renderCategory = ({ title, items }: EmoteCategory, key: number) => (\n    <Category key={key}>\n      {!!title && <CategoryHeader>{title}</CategoryHeader>}\n      <CategoryItems>\n        {items.map(({ alt, src, srcSet }) => (\n          <Emote\n            key={alt}\n            alt={alt}\n            src={src}\n            srcSet={srcSet}\n            onClick={() => onEmoteClick(alt)}\n          />\n        ))}\n      </CategoryItems>\n    </Category>\n  );\n\n  return (\n    <EmotePickerRoot>\n      <SearchBlock>\n        <SearchIcon />\n        <SearchInput\n          ref={searchInputRef}\n          placeholder=\"Search for Emotes\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n        />\n      </SearchBlock>\n      <Categories>\n        <Scrollbar>{emoteCategories.map(renderCategory)}</Scrollbar>\n      </Categories>\n    </EmotePickerRoot>\n  );\n};\n\nexport default EmotePicker;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\nimport TextareaAutosize, {\n  TextareaAutosizeProps,\n} from 'react-textarea-autosize';\nimport useOnClickOutside from 'react-cool-onclickoutside';\n\nimport ChatModal from 'components/ChatModal';\nimport IconButton from 'components/IconButton';\nimport { ReactComponent as SmileyFaceIconSvg } from 'icons/smiley-face.svg';\nimport EmotePicker from 'features/emotes/EmotePicker';\nimport type { SuggestionsState } from 'features/chat/hooks/useChatInput';\nimport { isEmotesLoadedSelector } from 'features/emotes/emotesSelectors';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\n\nconst ChatInputRoot = styled.div`\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n  background-color: #18181b;\n\n  & > :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nconst ChatInputInner = styled.div`\n  position: relative;\n`;\nconst Suggestions = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 100%;\n  margin-left: -5px;\n  margin-bottom: -5px;\n  margin-right: -5px;\n  margin-bottom: 0;\n  padding-top: 10px;\n  padding-bottom: 5px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border: 1px solid rgba(255, 255, 255, 0.15);\n  border-bottom: none;\n  background-color: #18181b;\n  color: #fff;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n  /* box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15), 0 0px 2px rgba(0, 0, 0, 0.1); */\n`;\nconst SuggestionItem = styled.div<{ isActive: boolean }>`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border-radius: 2px;\n  background-color: ${(p) =>\n    p.isActive ? 'rgba(255, 255, 255, 0.15)' : 'transparent'};\n  cursor: pointer;\n`;\nconst SuggestionImage = styled.img`\n  margin-right: 8px;\n  width: 28px;\n  height: 28px;\n  object-fit: contain;\n`;\nconst TextareaInput = styled.div`\n  position: relative;\n`;\nconst TextareaWrapper = styled.div<{ isSuggestions: boolean }>`\n  ${(p) =>\n    p.isSuggestions &&\n    css`\n      margin-left: -5px;\n      margin-bottom: -5px;\n      margin-right: -5px;\n      padding: 5px;\n      border: 1px solid rgba(255, 255, 255, 0.15);\n      border-top: none;\n      border-bottom-left-radius: 6px;\n      border-bottom-right-radius: 6px;\n      /* box-shadow: 0 2px 3px -1px rgba(0, 0, 0, 0.1),\n        0 2px 2px -2px rgba(0, 0, 0, 0.02); */\n\n      & > ${TextareaInput} {\n        margin-left: -1px;\n        margin-bottom: -1px;\n        margin-right: -1px;\n      }\n    `};\n`;\nconst EmotesModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 0;\n  bottom: 100%;\n  margin-bottom: 8px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nconst Textarea = styled(TextareaAutosize)<{ $showScroll: boolean }>`\n  display: block;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  padding-left: 10px;\n  padding-right: 32px;\n  width: 100%;\n  height: 38px;\n  max-height: 91px;\n  min-height: 40px;\n  overflow-x: hidden;\n  overflow-y: ${(p) => (p.$showScroll ? 'auto' : 'hidden')};\n  border: 2px solid transparent;\n  background-color: rgba(255, 255, 255, 0.15);\n  font-family: inherit;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 4px;\n  outline: none;\n  color: #fff;\n  resize: none;\n  transition-duration: 0.1s;\n  transition-timing-function: ease-in;\n  transition-property: box-shadow, border, background-color;\n\n  &:focus {\n    background-color: #000;\n    border-color: #9147ff;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\nconst EmotesButton = styled(IconButton)`\n  position: absolute;\n  right: 5px;\n  bottom: 5px;\n`;\nconst SmileyFaceIcon = styled(SmileyFaceIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  text: string;\n  suggestions: SuggestionsState;\n  isDisabled: boolean;\n  onEmoteClick: (name: string) => void;\n  onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onKeyUp: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur: () => void;\n  onSuggestionMouseEnter: (index: number) => void;\n  onSuggestionClick: (index: number) => void;\n};\n\nconst ChatInput = React.forwardRef<HTMLTextAreaElement, Props>(\n  (\n    {\n      text,\n      suggestions,\n      isDisabled,\n      onEmoteClick,\n      onChange,\n      onKeyUp,\n      onKeyDown,\n      onBlur,\n      onSuggestionMouseEnter,\n      onSuggestionClick,\n    },\n    textareaRef,\n  ) => {\n    const chatInputRef = useRef(null);\n    const suggestionsRef = useRef<HTMLDivElement>(null);\n\n    useOnClickOutside(\n      [textareaRef as React.RefObject<HTMLElement>, suggestionsRef],\n      () => onBlur(),\n    );\n\n    const [isShowTextareaScroll, setIsShowTextareaScroll] = useState(false);\n    const [isEmotesModalVisible, setIsEmotesModalVisible] = useState(false);\n    const isEmotesLoaded = useSelector(isEmotesLoadedSelector);\n    const handleCloseEmotesModal = () => setIsEmotesModalVisible(false);\n\n    useOnClickOutside(chatInputRef, handleCloseEmotesModal);\n\n    const renderSuggestions = ({\n      type,\n      items,\n      activeIndex,\n    }: SuggestionsState) => {\n      const renderUser = (name: string, index: number) => (\n        <SuggestionItem\n          key={name}\n          isActive={index === activeIndex}\n          onMouseEnter={() => onSuggestionMouseEnter(index)}\n          onClick={() => onSuggestionClick(index)}\n        >\n          {name}\n        </SuggestionItem>\n      );\n\n      const renderEmote = (\n        { src, srcSet, alt }: htmlEntity.Emote,\n        index: number,\n      ) => (\n        <SuggestionItem\n          key={alt}\n          isActive={index === activeIndex}\n          onMouseEnter={() => onSuggestionMouseEnter(index)}\n          onClick={() => onSuggestionClick(index)}\n        >\n          <SuggestionImage src={src} srcSet={srcSet} alt={alt} />\n          {alt}\n        </SuggestionItem>\n      );\n\n      const renderItems = () =>\n        type === 'users'\n          ? (items as string[]).map(renderUser)\n          : (items as htmlEntity.Emote[]).map(renderEmote);\n\n      return (\n        <Suggestions ref={suggestionsRef}>\n          {items.length ? renderItems() : 'No matches'}\n        </Suggestions>\n      );\n    };\n\n    const renderEmotesButton = () => (\n      <EmotesButton\n        onClick={() => setIsEmotesModalVisible(!isEmotesModalVisible)}\n      >\n        <SmileyFaceIcon />\n      </EmotesButton>\n    );\n\n    const renderEmotesModal = () => (\n      <EmotesModal>\n        <ChatModal onClose={handleCloseEmotesModal}>\n          <EmotePicker onEmoteClick={onEmoteClick} />\n        </ChatModal>\n      </EmotesModal>\n    );\n\n    const handleHeightChange = (height: number) =>\n      setIsShowTextareaScroll(height >= 96);\n\n    return (\n      <ChatInputRoot ref={chatInputRef}>\n        <ChatInputInner>\n          {suggestions.isActive && renderSuggestions(suggestions)}\n          <TextareaWrapper isSuggestions={suggestions.isActive}>\n            <TextareaInput>\n              <Textarea\n                inputRef={textareaRef as TextareaAutosizeProps['inputRef']}\n                value={text}\n                placeholder=\"Send a message\"\n                maxLength={500}\n                maxRows={4}\n                disabled={isDisabled}\n                $showScroll={isShowTextareaScroll}\n                onChange={onChange}\n                onKeyUp={onKeyUp}\n                onKeyDown={onKeyDown}\n                onHeightChange={handleHeightChange}\n              />\n              {isEmotesLoaded && renderEmotesButton()}\n            </TextareaInput>\n          </TextareaWrapper>\n          {isEmotesModalVisible && renderEmotesModal()}\n        </ChatInputInner>\n      </ChatInputRoot>\n    );\n  },\n);\n\nexport default React.memo(ChatInput);\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"currentColor\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 8a2 2 0 100 4 2 2 0 000-4z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M9 2h2a2.01 2.01 0 001.235 1.855l.53.22a2.01 2.01 0 002.185-.439l1.414 1.414a2.01 2.01 0 00-.439 2.185l.22.53A2.01 2.01 0 0018 9v2a2.01 2.01 0 00-1.855 1.235l-.22.53a2.01 2.01 0 00.44 2.185l-1.415 1.414a2.01 2.01 0 00-2.184-.439l-.531.22A2.01 2.01 0 0011 18H9a2.01 2.01 0 00-1.235-1.854l-.53-.22a2.009 2.009 0 00-2.185.438L3.636 14.95a2.009 2.009 0 00.438-2.184l-.22-.531A2.01 2.01 0 002 11V9c.809 0 1.545-.487 1.854-1.235l.22-.53a2.009 2.009 0 00-.438-2.185L5.05 3.636a2.01 2.01 0 002.185.438l.53-.22A2.01 2.01 0 009 2zm-4 8l1.464 3.536L10 15l3.535-1.464L15 10l-1.465-3.536L10 5 6.464 6.464 5 10z\",\n  clipRule: \"evenodd\"\n}));\n\nconst SvgGears = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 20 20\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref);\n\nconst ForwardRef = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgGears, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/gears.5f76af43.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M13 8l-5 5v18h6v5l5-5h4l9-9V8z\"\n});\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#9147ff\",\n  d: \"M26 25l4-4V10H14v15h4v4l4-4z\"\n});\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M20 14h2v6h-2v-6zm7 0v6h-2v-6h2z\"\n});\n\nconst SvgTwitch = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 40 40\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref, _ref2, _ref3);\n\nconst ForwardRef = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgTwitch, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/twitch.75e6e194.svg\";\nexport { ForwardRef as ReactComponent };","import styled from 'styled-components';\n\nconst Button = styled.button.attrs({ type: 'button' })`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0 10px;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #9147ff;\n  outline: none;\n  font-size: 12px;\n  border-radius: 4px;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #772ce8;\n  }\n\n  &:active {\n    background-color: #5c16c5;\n  }\n\n  &:focus {\n    box-shadow: 0 0 6px 0 #772ce8;\n  }\n\n  &[disabled] {\n    background-color: rgba(255, 255, 255, 0.26);\n    color: rgba(255, 255, 255, 0.8);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst SwitchRoot = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  line-height: 20px;\n`;\nconst Label = styled.label`\n  content: '';\n  position: relative;\n  display: inline-block;\n  order: 0;\n  width: 35px;\n  height: 20px;\n  vertical-align: bottom;\n  border-radius: 10px/50%;\n  background-color: rgba(0, 0, 0, 0.3);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15), 0 0 2px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.1s ease;\n  cursor: pointer;\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    bottom: 2px;\n    display: block;\n    width: 16px;\n    border-radius: 50%;\n    background-color: #fff;\n    transition: left 0.1s ease;\n  }\n`;\nconst Input = styled.input.attrs({ type: 'checkbox' })`\n  position: absolute;\n  opacity: 0;\n\n  &:checked + ${Label} {\n    background-color: #9147ff;\n\n    &:after {\n      content: '';\n      top: 2px;\n      left: calc(100% - 18px);\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 9px;\n      left: 10px;\n      display: block;\n      height: 3px;\n      width: 7px;\n      border-bottom: 2px solid #fff;\n      border-left: 2px solid #fff;\n      transform: translate3d(-50%, -50%, 0) rotate(-45deg);\n    }\n  }\n`;\n\ntype Props = {\n  id: string;\n  label: string;\n  checked?: boolean;\n  readOnly?: boolean;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst Switch = ({ id, label, checked, readOnly, onChange }: Props) => (\n  <SwitchRoot>\n    <Input\n      id={id}\n      aria-label={label}\n      checked={checked}\n      readOnly={readOnly}\n      onChange={onChange}\n    />\n    <Label htmlFor={id} />\n  </SwitchRoot>\n);\n\nSwitch.defaultProps = {\n  checked: false,\n  readOnly: false,\n  onChange: () => {},\n};\n\nexport default Switch;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport Scrollbar from 'components/Scrollbar';\nimport Switch from 'components/Switch';\nimport { optionsSelector } from 'features/options/optionsSelectors';\nimport { isAuthSelector } from 'features/auth/authSelectors';\nimport {\n  userDisplayNameSelector,\n  userColorSelector,\n} from 'features/chat/chatSelectors';\nimport { userBadgesImagesSelector } from 'features/badges/badgesSelectors';\nimport { changeOption } from 'features/options/optionsSlice';\n\nconst OptionsRoot = styled.div`\n  padding: 16px;\n  height: 100%;\n`;\nconst Header = styled.h2`\n  margin: 0;\n  padding: 0;\n  font-size: 14px;\n  text-align: center;\n  color: rgba(255, 255, 255, 0.8);\n`;\nconst Categories = styled(Scrollbar)`\n  height: 100%;\n`;\nconst Category = styled.div`\n  &:not(:last-child) {\n    padding-bottom: 10px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n  }\n`;\nconst CategoryHeader = styled.div`\n  padding: 8px 0;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst CategoryItems = styled.div``;\nconst Option = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 4px 0;\n  cursor: pointer;\n`;\nconst OptionText = styled.span``;\nconst Profile = styled.div`\n  display: flex;\n  align-items: center;\n`;\nconst UserName = styled.div`\n  font-weight: bold;\n  color: ${(p) => p.color};\n`;\nconst LogOutButton = styled(Link)`\n  margin-left: auto;\n  color: #bf94ff;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Badge = styled.img`\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst Options = () => {\n  const dispatch = useDispatch();\n  const options = useSelector(optionsSelector);\n\n  const isAuth = useSelector(isAuthSelector);\n\n  const userDisplayName = useSelector(userDisplayNameSelector);\n  const userColor = useSelector(userColorSelector);\n  const userBadgesImages = useSelector(userBadgesImagesSelector);\n\n  const renderOption = useCallback(\n    ({ id, name, title, description, value }) => (\n      <Option\n        key={id}\n        onClick={() => dispatch(changeOption({ name, value: !value }))}\n        title={description}\n      >\n        <OptionText>{title}</OptionText>\n        <Switch\n          id={id}\n          label={title}\n          checked={value}\n          onChange={() => dispatch(changeOption({ name, value }))}\n        />\n      </Option>\n    ),\n    [dispatch],\n  );\n\n  const renderProfileCategory = () => {\n    return (\n      <Category>\n        <CategoryHeader>Profile</CategoryHeader>\n        <CategoryItems>\n          <Profile>\n            {userBadgesImages.map(({ alt, label, src, srcSet }, key) => (\n              <Badge\n                // eslint-disable-next-line react/no-array-index-key\n                key={key}\n                alt={alt}\n                aria-label={label}\n                src={src}\n                srcSet={srcSet}\n              />\n            ))}\n            <UserName color={userColor}>{userDisplayName}</UserName>\n            <LogOutButton to=\"/chat/logout\">Log Out</LogOutButton>\n          </Profile>\n        </CategoryItems>\n      </Category>\n    );\n  };\n\n  const renderOptionsCategory = useCallback(\n    ({ title, items }, key) => (\n      <Category key={key}>\n        {!!title && <CategoryHeader>{title}</CategoryHeader>}\n        <CategoryItems>{items.map(renderOption)}</CategoryItems>\n      </Category>\n    ),\n    [renderOption],\n  );\n\n  return (\n    <OptionsRoot>\n      <Header>Chat settings</Header>\n      <Categories>\n        {isAuth && renderProfileCategory()}\n        {options.map(renderOptionsCategory)}\n      </Categories>\n    </OptionsRoot>\n  );\n};\n\nexport default Options;\n","import React, { useState, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nimport useOnClickOutside from 'react-cool-onclickoutside';\nimport { ReactComponent as GearsIconSvg } from 'icons/gears.svg';\nimport { ReactComponent as TwitchIconSvg } from 'icons/twitch.svg';\nimport Button from 'components/Button';\nimport IconButton from 'components/IconButton';\nimport ChatModal from 'components/ChatModal';\nimport Options from 'features/options/Options';\nimport {\n  isAuthSelector,\n  isAuthReadySelector,\n} from 'features/auth/authSelectors';\n\nconst ChatControlsRoot = styled.div`\n  position: relative;\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 10px;\n`;\nconst Controls = styled.div`\n  display: flex;\n  align-items: center;\n\n  & > :not(:last-child) {\n    margin-right: 8px;\n  }\n`;\nconst OptionsModal = styled.div`\n  position: absolute;\n  top: auto;\n  right: 10px;\n  bottom: 100%;\n  margin-bottom: 10px;\n  width: 320px;\n  height: 405px;\n  min-width: 0;\n  white-space: nowrap;\n`;\nconst OptionsButton = styled(IconButton)`\n  margin-left: auto;\n`;\nconst GearsIcon = styled(GearsIconSvg)`\n  display: block;\n  width: 20px;\n  height: 20px;\n`;\nconst TwitchIcon = styled(TwitchIconSvg)`\n  display: block;\n  margin-right: 4px;\n  width: 20px;\n  height: 20px;\n`;\n\ntype Props = {\n  isDisabled: boolean;\n  onSendMessage: () => void;\n};\n\nconst ChatControls = ({ isDisabled, onSendMessage }: Props) => {\n  const [isOptionsModalVisible, setIsOptionsModalVisible] = useState(false);\n  const optionsModalRef = useRef(null);\n  const optionsButtonRef = useRef(null);\n\n  const isAuthReady = useSelector(isAuthReadySelector);\n  const isAuth = useSelector(isAuthSelector);\n\n  const handleCloseOptionsModal = () => setIsOptionsModalVisible(false);\n  useOnClickOutside(\n    [optionsModalRef, optionsButtonRef],\n    handleCloseOptionsModal,\n  );\n\n  const renderSignInButton = () => (\n    <Button as={Link} to=\"/chat/auth\">\n      <TwitchIcon />\n      Sign in with Twitch\n    </Button>\n  );\n\n  const renderOptionsModal = () => (\n    <OptionsModal ref={optionsModalRef}>\n      <ChatModal onClose={handleCloseOptionsModal}>\n        <Options />\n      </ChatModal>\n    </OptionsModal>\n  );\n\n  return (\n    <ChatControlsRoot>\n      <Controls>\n        {isAuthReady && !isAuth && renderSignInButton()}\n        <OptionsButton\n          ref={optionsButtonRef}\n          onClick={() => setIsOptionsModalVisible((prev) => !prev)}\n        >\n          <GearsIcon />\n        </OptionsButton>\n        <Button disabled={isDisabled} onClick={onSendMessage}>\n          Chat\n        </Button>\n      </Controls>\n      {isOptionsModalVisible && renderOptionsModal()}\n    </ChatControlsRoot>\n  );\n};\n\nexport default React.memo(ChatControls);\n","/* eslint-disable no-param-reassign */\n// source: https://github.com/night/betterttv/blob/master/src/utils/colors.js\n\n/**\n * Converts an RGB color value to HSL. Conversion formula\n * adapted from https://en.wikipedia.org/wiki/HSL_color_space\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and l in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSL representation\n */\nconst rgbToHsl = (r: number, g: number, b: number) => {\n  // Convert RGB to HSL, not ideal but it's faster than HCL or full YIQ conversion\n  // based on http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = Math.min(Math.max(0, (max + min) / 2), 1);\n  const d = Math.min(Math.max(0, max - min), 1);\n\n  if (d === 0) {\n    return [d, d, l]; // achromatic\n  }\n\n  let h = 0;\n\n  // eslint-disable-next-line default-case\n  switch (max) {\n    case r:\n      h = Math.min(Math.max(0, (g - b) / d + (g < b ? 6 : 0)), 6);\n      break;\n    case g:\n      h = Math.min(Math.max(0, (b - r) / d + 2), 6);\n      break;\n    case b:\n      h = Math.min(Math.max(0, (r - g) / d + 4), 6);\n      break;\n  }\n\n  h /= 6;\n\n  let s = l > 0.5 ? d / (2 * (1 - l)) : d / (2 * l);\n\n  s = Math.min(Math.max(0, s), 1);\n\n  return [h, s, l];\n};\n\n// Convert HSL to RGB, based on http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\nconst hueToRgb = (pp: number, qq: number, t: number) => {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1 / 6) return pp + (qq - pp) * 6 * t;\n  if (t < 1 / 2) return qq;\n  if (t < 2 / 3) return pp + (qq - pp) * (2 / 3 - t) * 6;\n\n  return pp;\n};\n\n/**\n * Converts an HSL color value to RGB. Conversion formula\n * adapted from https://en.wikipedia.org/wiki/HSL_color_space\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set of integers [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  l       The lightness\n * @return  Array           The RGB representation\n */\nconst hslToRgb = (h: number, s: number, l: number) => {\n  if (s === 0) {\n    const rgb = Math.round(Math.min(Math.max(0, 255 * l), 255)); // achromatic\n\n    return [rgb, rgb, rgb];\n  }\n\n  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  const p = 2 * l - q;\n\n  return [\n    Math.round(Math.min(Math.max(0, 255 * hueToRgb(p, q, h + 1 / 3)), 255)),\n    Math.round(Math.min(Math.max(0, 255 * hueToRgb(p, q, h)), 255)),\n    Math.round(Math.min(Math.max(0, 255 * hueToRgb(p, q, h - 1 / 3)), 255)),\n  ];\n};\n\nconst calculateColorBackground = (color: string) => {\n  // Converts HEX to YIQ to judge what color background the color would look best on\n  color = color.replace(/[^0-9a-f]/gi, '');\n\n  if (color.length < 6) {\n    color = color[0] + color[0] + color[1] + color[1] + color[2] + color[2];\n  }\n\n  const r = parseInt(color.substr(0, 2), 16);\n  const g = parseInt(color.substr(2, 2), 16);\n  const b = parseInt(color.substr(4, 2), 16);\n\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n\n  return yiq >= 128 ? 'dark' : 'light';\n};\n\nconst calculateColorReplacement = (\n  color: string,\n  background: 'dark' | 'light' = 'dark',\n) => {\n  // Modified from http://www.sitepoint.com/javascript-generate-lighter-darker-color/\n  // Modified further to use HSL as an intermediate format, to avoid hue-shifting\n  // toward primaries when darkening and toward secondaries when lightening\n  const light = background === 'light';\n  const factor = light ? 0.1 : -0.1;\n\n  color = color.replace(/[^0-9a-f]/gi, '');\n\n  if (color.length < 6) {\n    color = color[0] + color[0] + color[1] + color[1] + color[2] + color[2];\n  }\n\n  const hsl = rgbToHsl(\n    parseInt(color.substr(0, 2), 16),\n    parseInt(color.substr(2, 2), 16),\n    parseInt(color.substr(4, 2), 16),\n  );\n\n  // more thoroughly lightens dark colors, with no problems at black\n  let l = light ? 1 - (1 - factor) * (1 - hsl[2]) : (1 + factor) * hsl[2];\n\n  l = Math.min(Math.max(0, l), 1);\n\n  const rgb = hslToRgb(hsl[0], hsl[1], l);\n  const r = rgb[0].toString(16).padStart(2, '0');\n  const g = rgb[1].toString(16).padStart(2, '0');\n  const b = rgb[2].toString(16).padStart(2, '0');\n\n  return `#${r}${g}${b}`;\n};\n\nconst colorCache = new Map();\n\n// eslint-disable-next-line import/prefer-default-export\nexport const calculateColor = (color: string, darkenedMode = true): string => {\n  const cacheKey = `${color}:${darkenedMode}`;\n\n  if (colorCache.has(cacheKey)) return colorCache.get(cacheKey);\n\n  const colorRegex = /^#[0-9a-f]+$/i;\n\n  if (!colorRegex.test(color)) return color;\n\n  let bgColor: 'dark' | 'light';\n\n  for (let i = 20; i >= 0; i -= 1) {\n    bgColor = calculateColorBackground(color);\n\n    if (bgColor === 'light' && !darkenedMode) break;\n    if (bgColor === 'dark' && darkenedMode) break;\n\n    color = calculateColorReplacement(color, bgColor);\n  }\n\n  colorCache.set(cacheKey, color);\n\n  if (colorCache.size > 1000) {\n    colorCache.delete(colorCache.entries().next().value[0]);\n  }\n\n  return color;\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\n\nimport { TWITCH_EMOTES_CDN } from 'utils/constants';\nimport type { MessageCardInfo } from 'features/messages/messagesSlice';\nimport { messageCardSelector } from 'features/messageCards/messageCardsSelectors';\n\nconst MessageCardRoot = styled.a.attrs({\n  target: '_blank',\n  rel: 'noreferrer noopener',\n})<{ $clickable?: boolean }>`\n  display: flex;\n  flex-wrap: nowrap;\n  padding: 5px;\n  border-radius: 4px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.9), 0 0 2px rgba(0, 0, 0, 0.9);\n  background-color: #18181b;\n  text-decoration: none;\n\n  ${(p) =>\n    p.$clickable &&\n    css`\n      &:hover {\n        background-color: #3a3a3d;\n      }\n\n      &:active {\n        background-color: #464649;\n      }\n    `}\n`;\nconst Preview = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 45px;\n  width: 80px;\n  background-color: #26262c;\n  overflow: hidden;\n`;\nconst Image = styled.img`\n  max-height: 100%;\n`;\nconst PreviewLoading = styled.div`\n  height: 45px;\n  width: 80px;\n  background-color: #46464b;\n`;\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding-left: 10px;\n  overflow: hidden;\n`;\nconst textStyles = css`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin: 0;\n  font-size: 12px;\n  line-height: 1.5;\n`;\nconst Title = styled.p`\n  ${textStyles};\n  font-weight: bold;\n  color: #efeff1;\n`;\nconst Description = styled.p`\n  ${textStyles};\n  color: #adadb8;\n`;\nconst textLoadingStyle = css`\n  margin-top: 3px;\n  margin-bottom: 4px;\n\n  height: 12px;\n  background-color: #232326;\n  border-radius: 2px;\n`;\nconst TitleLoading = styled.div`\n  ${textLoadingStyle};\n  width: 180px;\n`;\nconst DescriptionLoading = styled.div`\n  ${textLoadingStyle};\n  width: 120px;\n`;\n\nconst id = '58765';\nconst errorImageSrc = `${TWITCH_EMOTES_CDN}/${id}/1.0`;\nconst errorImageSrcSet = `${TWITCH_EMOTES_CDN}/${id}/1.0 1x, ${TWITCH_EMOTES_CDN}/${id}/2.0 2x, ${TWITCH_EMOTES_CDN}/${id}/3.0 4x`;\n\nconst errorTitle = 'Something went wrong';\nconst errorDescription = {\n  'twitch-clip': \"We couldn't find that Clip\",\n  'twitch-video': \"We couldn't find that Video\",\n  'youtube-video': \"We couldn't find that Video\",\n};\n\nconst renderLoading = () => (\n  <MessageCardRoot>\n    <PreviewLoading />\n    <Content>\n      <TitleLoading />\n      <DescriptionLoading />\n    </Content>\n  </MessageCardRoot>\n);\n\nconst renderError = (type: MessageCardInfo['type']) => (\n  <MessageCardRoot>\n    <Preview>\n      <Image src={errorImageSrc} srcSet={errorImageSrcSet} alt=\"\" />\n    </Preview>\n    <Content>\n      <Title>{errorTitle}</Title>\n      <Description>{errorDescription[type]}</Description>\n    </Content>\n  </MessageCardRoot>\n);\n\ntype Props = Omit<MessageCardInfo, 'url'>;\n\nconst MessageCard = (cardInfo: Props) => {\n  const card = useSelector(messageCardSelector(cardInfo));\n\n  if (!card || card.status === 'loading') {\n    return renderLoading();\n  }\n\n  if (card.status === 'error') {\n    return renderError(cardInfo.type);\n  }\n\n  const { url, src, srcSet, title, description } = card;\n\n  return (\n    <MessageCardRoot href={url} $clickable>\n      <Preview>\n        <Image src={src} srcSet={srcSet} alt={title} />\n      </Preview>\n      <Content>\n        <Title>{title}</Title>\n        <Description>{description}</Description>\n      </Content>\n    </MessageCardRoot>\n  );\n};\n\nexport default MessageCard;\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { format } from 'date-fns/fp';\n\nimport { calculateColor } from 'utils/colors';\nimport MessageCard from 'features/messageCards/MessageCard';\nimport type {\n  Message as MessageType,\n  MessageEntity,\n} from 'features/messages/messagesSlice';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\n\ntype MessageRootProps = {\n  isAction: boolean;\n  isHistory: boolean;\n  isDeleted: boolean;\n  isHighlighted: boolean;\n  isEven: boolean;\n};\n\nconst getChatMessageBg = (p: MessageRootProps) => {\n  if (p.isHighlighted) return 'rgba(255, 0, 0, 0.3)';\n  if (p.isEven) return '#1f1925';\n  return 'transparent';\n};\n\nconst MessageRoot = styled.div<MessageRootProps>`\n  padding: 5px 20px;\n  color: ${(p) => (p.isAction ? p.color : '#fff')};\n  opacity: ${(p) => (p.isHistory || p.isDeleted ? '0.5' : '1')};\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${getChatMessageBg};\n`;\nconst Name = styled.span`\n  font-weight: bold;\n  color: ${(p) => p.color};\n  cursor: pointer;\n`;\nconst Emoji = styled.img`\n  display: inline-block;\n  margin-top: -5px;\n  margin-bottom: -4px;\n  width: 20px;\n  height: auto;\n  vertical-align: middle;\n`;\nconst Emote = styled.img`\n  display: inline-block;\n  margin: -5px 0;\n  vertical-align: middle;\n`;\n// https://github.com/night/BetterTTV/blob/master/src/modules/emotes/style.css\n// prettier-ignore\nconst EmoteWrapper = styled.span`\n  display: inline-block;\n\n  /* Prevent stacking of IceCold, SoSnowy */\n  &[data-emote-id='5849c9a4f52be01a7ee5f79d'] + &[data-emote-id='5849c9a4f52be01a7ee5f79d'],\n  &[data-emote-id='567b5b520e984428652809b6'] + &[data-emote-id='567b5b520e984428652809b6'] {\n    display: none;\n  }\n\n  /* IceCold */\n  &        + &[data-emote-id='5849c9a4f52be01a7ee5f79d'],\n  ${Emoji} + &[data-emote-id='5849c9a4f52be01a7ee5f79d'] {\n    margin-left: -33px;\n  }\n\n  /* SoSnowy */\n  &        + &[data-emote-id='567b5b520e984428652809b6'],\n  ${Emoji} + &[data-emote-id='567b5b520e984428652809b6'] {\n    margin-left: -32px;\n  }\n\n  /* SantaHat */\n  &        + &[data-emote-id='58487cc6f52be01a7ee5f205'],\n  ${Emoji} + &[data-emote-id='58487cc6f52be01a7ee5f205'] {\n    margin-left: -34px;\n    margin-top: -18px;\n  }\n\n  /* TopHat, CandyCane, ReinDeer */\n  &        + &[data-emote-id='5849c9c8f52be01a7ee5f79e'],\n  ${Emoji} + &[data-emote-id='5849c9c8f52be01a7ee5f79e'],\n  &        + &[data-emote-id='567b5c080e984428652809ba'],\n  ${Emoji} + &[data-emote-id='567b5c080e984428652809ba'],\n  &        + &[data-emote-id='567b5dc00e984428652809bd'],\n  ${Emoji} + &[data-emote-id='567b5dc00e984428652809bd'] {\n    margin-left: -31px;\n    margin-top: -18px;\n  }\n\n  /* cvHazmat, cvMask */\n  &        + &[data-emote-id='5e76d338d6581c3724c0f0b2'],\n  ${Emoji} + &[data-emote-id='5e76d338d6581c3724c0f0b2'],\n  &        + &[data-emote-id='5e76d399d6581c3724c0f0b8'],\n  ${Emoji} + &[data-emote-id='5e76d399d6581c3724c0f0b8'] {\n    margin-left: -34px;\n  }\n  &        + &[data-emote-id='5e76d338d6581c3724c0f0b2'] ${Emote},\n  ${Emoji} + &[data-emote-id='5e76d338d6581c3724c0f0b2'] ${Emote},\n  &        + &[data-emote-id='5e76d399d6581c3724c0f0b8'] ${Emote},\n  ${Emoji} + &[data-emote-id='5e76d399d6581c3724c0f0b8'] ${Emote} {\n    height: 34px;\n    width: 34px;\n  }\n`;\nconst Mention = styled.span<{ isActive: boolean; isOwnMessage: boolean }>`\n  ${(p) =>\n    (p.isActive || p.isOwnMessage) &&\n    css`\n      padding: 2px 4px;\n    `};\n  ${(p) =>\n    p.isOwnMessage &&\n    css`\n      background-color: #40404a;\n      color: #fff;\n    `};\n  ${(p) =>\n    p.isActive &&\n    css`\n      background-color: #fafafa;\n      color: #18181b;\n    `};\n`;\nconst Link = styled.a`\n  color: #bf94ff;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    color: #a970ff;\n    text-decoration: underline;\n  }\n\n  &:visited {\n    color: #a970ff;\n  }\n`;\nconst Timestamp = styled.span`\n  margin-right: 5px;\n  color: rgba(255, 255, 255, 0.6);\n`;\nconst Badge = styled.img`\n  margin-bottom: 2px;\n  margin-right: 3px;\n  max-width: 100%;\n  vertical-align: middle;\n  border-radius: 3px;\n`;\n\nconst renderMessageArray = (messageLogin: string, userLogin: string | null) => (\n  item: MessageEntity,\n  key: number,\n) => {\n  if (typeof item !== 'object') return item;\n\n  if (\n    item.type === 'twitch-emote' ||\n    item.type === 'bttv-emote' ||\n    item.type === 'ffz-emote'\n  ) {\n    return (\n      <EmoteWrapper key={key} data-emote-id={item.id}>\n        <Emote src={item.src} srcSet={item.srcSet} alt={item.alt} />\n      </EmoteWrapper>\n    );\n  }\n\n  if (item.type === 'emoji') {\n    return (\n      <EmoteWrapper key={key}>\n        <Emoji src={item.src} alt={item.alt} />\n      </EmoteWrapper>\n    );\n  }\n\n  if (item.type === 'mention') {\n    return (\n      <Mention\n        key={key}\n        isActive={item.target === userLogin}\n        isOwnMessage={messageLogin === userLogin}\n      >\n        {item.text}\n      </Mention>\n    );\n  }\n\n  if (item.type === 'link') {\n    return (\n      <Link\n        key={key}\n        href={item.href}\n        rel=\"noreferrer noopener\"\n        target=\"_blank\"\n      >\n        {item.text}\n      </Link>\n    );\n  }\n\n  return null;\n};\n\nconst renderBadges = (badges: htmlEntity.Badge[]) =>\n  badges.map(({ alt, label, src, srcSet }, key: number) => (\n    // eslint-disable-next-line react/no-array-index-key\n    <Badge key={key} alt={alt} aria-label={label} src={src} srcSet={srcSet} />\n  ));\n\ntype Props = {\n  message: MessageType;\n  userLogin: string | null;\n  isEven: boolean;\n  isShowTimestamps: boolean;\n  onNameRightClick: (name: string) => void;\n};\n\nconst MESSAGE_DELETED_LABEL = '<message deleted>';\n\nconst Message = ({\n  message: {\n    entities,\n    user: { login, color, displayName, badges },\n    timestamp,\n    card,\n    isHistory,\n    isAction,\n    isDeleted,\n    isHighlighted,\n  },\n  userLogin,\n  isEven,\n  isShowTimestamps,\n  // onNameClick,\n  onNameRightClick,\n}: Props) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const handleNameRightClick = (\n    e: React.MouseEvent<HTMLSpanElement, MouseEvent>,\n  ) => {\n    onNameRightClick(displayName);\n    e.preventDefault();\n  };\n\n  const newColor = color ? calculateColor(color) : '';\n\n  return (\n    <MessageRoot\n      isHistory={isHistory}\n      isAction={isAction}\n      isEven={isEven}\n      isHighlighted={isHighlighted}\n      isDeleted={isDeleted}\n      color={newColor}\n    >\n      {isShowTimestamps && (\n        <Timestamp>{format('h:mm', new Date(timestamp))}</Timestamp>\n      )}\n      {badges.length > 0 && renderBadges(badges)}\n      <Name color={newColor} onContextMenu={handleNameRightClick}>\n        {displayName}\n      </Name>\n      {isAction ? ' ' : ': '}\n      {isDeleted && !isVisible ? (\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n        <Link onClick={() => setIsVisible(true)}>{MESSAGE_DELETED_LABEL}</Link>\n      ) : (\n        entities.map(renderMessageArray(login, userLogin))\n      )}\n      {card && <MessageCard type={card.type} id={card.id} />}\n    </MessageRoot>\n  );\n};\n\nexport default React.memo(Message);\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport type { Notice as NoticeType } from 'features/messages/messagesSlice';\n\nconst NoticeRoot = styled.div<{ isEven: boolean }>`\n  padding: 5px 20px;\n  color: rgba(255, 255, 255, 0.6);\n  line-height: 20px;\n  word-wrap: break-word;\n  background-color: ${(p) => (p.isEven ? '#1f1925' : 'transparent')};\n`;\n\ntype Props = {\n  message: NoticeType;\n  isEven: boolean;\n};\n\nconst Notice = ({ message: { message }, isEven }: Props) => (\n  <NoticeRoot isEven={isEven}>{message}</NoticeRoot>\n);\n\nexport default Notice;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport type { UserNotice as UserNoticeType } from 'features/messages/messagesSlice';\n\nconst UserNoticeRoot = styled.div`\n  padding: 5px 20px 5px 16px;\n  line-height: 20px;\n  word-wrap: break-word;\n  border-left: 4px solid #9147ff;\n  color: #fff;\n`;\n\ntype Props = {\n  message: UserNoticeType;\n};\n\nconst UserNotice = ({ message: { systemMessage } }: Props) => (\n  <UserNoticeRoot>{systemMessage}</UserNoticeRoot>\n);\n\nexport default UserNotice;\n","import React from 'react';\n\nimport assertNever from 'utils/assertNever';\nimport type { ChatMessage as ChatMessageType } from 'features/messages/messagesSlice';\nimport Message from 'features/messages/Message';\nimport Notice from 'features/messages/Notice';\nimport UserNotice from 'features/messages/UserNotice';\n\ntype Props = {\n  message: ChatMessageType;\n  userLogin: string | null;\n  isEven: boolean;\n  isShowTimestamps: boolean;\n  // onNameClick: (name: string) => void;\n  onNameRightClick: (name: string) => void;\n};\n\nconst ChatMessage = ({\n  message,\n  userLogin,\n  isEven,\n  isShowTimestamps,\n  // onNameClick,\n  onNameRightClick,\n}: Props) => {\n  if (message.type === 'message') {\n    return (\n      <Message\n        message={message}\n        userLogin={userLogin}\n        isEven={isEven}\n        isShowTimestamps={isShowTimestamps}\n        // onNameClick={onNameClick}\n        onNameRightClick={onNameRightClick}\n      />\n    );\n  }\n\n  if (message.type === 'notice') {\n    return <Notice message={message} isEven={isEven} />;\n  }\n\n  if (message.type === 'user-notice') {\n    return <UserNotice message={message} />;\n  }\n\n  return assertNever(message);\n};\n\nexport default React.memo(ChatMessage);\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport type ScrollbarType from 'react-scrollbars-custom';\nimport type { ScrollState } from 'react-scrollbars-custom/dist/types/types';\n\nimport Scrollbar from 'components/Scrollbar';\nimport ChatMessage from 'features/messages/ChatMessage';\nimport {\n  messagesSelector,\n  isEvenSelector,\n} from 'features/messages/messagesSelectors';\nimport {\n  isShowTimestampsSelector,\n  isSplitChatSelector,\n} from 'features/options/optionsSelectors';\nimport { userLoginSelector } from 'features/auth/authSelectors';\n\nconst MORE_MESSAGES_OFFSET = 100;\n\nconst MessagesRoot = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\nconst StyledScrollbar = styled(Scrollbar)`\n  .ScrollbarsCustom-Content {\n    padding-bottom: 10px !important;\n  }\n`;\nconst MoreMessagesButton = styled.button<{ isVisible: boolean }>`\n  position: absolute;\n  left: 50%;\n  bottom: 10px;\n  display: ${(p) => (p.isVisible ? 'block' : 'none')};\n  padding: 5px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  transform: translateX(-50%);\n`;\n\ntype Props = {\n  onNameRightClick: (name: string) => void;\n};\n\nconst Messages = ({ onNameRightClick }: Props) => {\n  const [\n    isMoreMessagesButtonVisible,\n    setIsMoreMessagesButtonVisible,\n  ] = useState(false);\n\n  const messages = useSelector(messagesSelector);\n  const userLogin = useSelector(userLoginSelector);\n\n  const isEven = useSelector(isEvenSelector);\n  const isShowTimestamps = useSelector(isShowTimestampsSelector);\n  const isSplitChat = useSelector(isSplitChatSelector);\n\n  const handleScrollUpdate = ({\n    clientHeight,\n    contentScrollHeight,\n    scrollTop,\n  }: ScrollState) => {\n    const maxScrollTop = contentScrollHeight - clientHeight;\n    const isVisible = scrollTop + MORE_MESSAGES_OFFSET < maxScrollTop;\n\n    setIsMoreMessagesButtonVisible(isVisible);\n  };\n\n  const scrollbarRef = useRef<ScrollbarType>(null);\n\n  const handleScrollToBottom = () => {\n    if (scrollbarRef.current) {\n      scrollbarRef.current.scrollToBottom();\n    }\n  };\n\n  useEffect(() => {\n    if (!isMoreMessagesButtonVisible) {\n      handleScrollToBottom();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages]);\n\n  const getIsEven = (key: number) => {\n    if (!isSplitChat) return false;\n    return isEven ? key % 2 === 1 : key % 2 === 0;\n  };\n\n  return (\n    <MessagesRoot>\n      <StyledScrollbar onUpdate={handleScrollUpdate} ref={scrollbarRef}>\n        {messages.map((message, key) => (\n          <ChatMessage\n            key={message.id}\n            message={message}\n            userLogin={userLogin}\n            isEven={getIsEven(key)}\n            isShowTimestamps={isShowTimestamps}\n            onNameRightClick={onNameRightClick}\n          />\n        ))}\n      </StyledScrollbar>\n      <MoreMessagesButton\n        onClick={handleScrollToBottom}\n        isVisible={isMoreMessagesButtonVisible}\n      >\n        More messages below\n      </MoreMessagesButton>\n    </MessagesRoot>\n  );\n};\n\nexport default Messages;\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from 'components/Button';\r\n\r\nconst JoinChannelRoot = styled.div`\r\n  padding: 10px;\r\n  flex-grow: 1;\r\n  width: 320px;\r\n`;\r\nconst Title = styled.h2`\r\n  margin-top: 0;\r\n  margin-bottom: 10px;\r\n  padding: 0;\r\n  color: #fff;\r\n`;\r\nconst Controls = styled.div`\r\n  display: flex;\r\n\r\n  & > :not(:last-child) {\r\n    margin-right: 10px;\r\n  }\r\n`;\r\nconst Input = styled.input`\r\n  display: block;\r\n  padding: 4px 10px;\r\n  width: 100%;\r\n  border: 2px solid transparent;\r\n  background-color: rgba(255, 255, 255, 0.15);\r\n  font-family: inherit;\r\n  font-size: 12px;\r\n  line-height: 1.5;\r\n  border-radius: 4px;\r\n  outline: none;\r\n  color: #fff;\r\n  resize: none;\r\n  transition-duration: 0.1s;\r\n  transition-timing-function: ease-in;\r\n  transition-property: box-shadow, border, background-color;\r\n\r\n  &:focus {\r\n    background-color: #000;\r\n    border-color: #9147ff;\r\n  }\r\n\r\n  &[disabled] {\r\n    opacity: 0.5;\r\n    pointer-events: none;\r\n  }\r\n`;\r\nconst JoinButton = styled(Button)`\r\n  flex-shrink: none;\r\n`;\r\n\r\nconst JoinChannel = () => {\r\n  const history = useHistory();\r\n  const [value, setValue] = useState('');\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, []);\r\n\r\n  const handleChangeChannel = () => {\r\n    history.push({\r\n      pathname: '/chat/',\r\n      hash: value,\r\n    });\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      handleChangeChannel();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <JoinChannelRoot>\r\n      <Title>Channel to join: </Title>\r\n      <Controls>\r\n        <Input\r\n          ref={inputRef}\r\n          value={value}\r\n          onChange={(e) => setValue(e.target.value)}\r\n          onKeyPress={handleKeyPress}\r\n        />\r\n        <JoinButton onClick={handleChangeChannel} disabled={!value}>\r\n          Join\r\n        </JoinButton>\r\n      </Controls>\r\n    </JoinChannelRoot>\r\n  );\r\n};\r\n\r\nexport default JoinChannel;\r\n","import React, { useState, useCallback, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { isAuthSelector } from 'features/auth/authSelectors';\nimport {\n  currentChannelSelector,\n  isConnectedSelector,\n} from 'features/chat/chatSelectors';\nimport { isFixedWidthSelector } from 'features/options/optionsSelectors';\nimport useInitializeAuth from 'features/auth/useInitializeAuth';\nimport useFetchChatData from 'features/chat/hooks/useFetchChatData';\nimport useCurrentChannel from 'features/chat/hooks/useCurrentChannel';\nimport useTwitchClient from 'features/chat/hooks/useTwitchClient';\nimport useChatInput from 'features/chat/hooks/useChatInput';\n\nimport ChatInput from 'features/chat/ChatInput';\nimport ChatControls from 'features/chat/ChatControls';\nimport Messages from 'features/messages/Messages';\nimport JoinChannel from 'features/chat/JoinChannel';\n\nconst ChatRoot = styled.div`\n  height: 100vh;\n  font-size: 12px;\n  background-color: #0e0e10;\n`;\nconst ChatWrapper = styled.div<{ isFixedWidth: boolean }>`\n  display: flex;\n  flex-direction: column;\n  width: ${(p) => (p.isFixedWidth ? '340px' : 'auto')};\n  height: 100%;\n  background-color: #18181b;\n`;\n\nconst Chat = () => {\n  const [text, setText] = useState('');\n\n  const client = useTwitchClient();\n\n  useInitializeAuth();\n  useCurrentChannel();\n  useFetchChatData();\n\n  const currentChannel = useSelector(currentChannelSelector);\n\n  const isAuth = useSelector(isAuthSelector);\n  const isConnected = useSelector(isConnectedSelector);\n\n  const isFixedWidth = useSelector(isFixedWidthSelector);\n  const chatInputRef = useRef<HTMLTextAreaElement>(null);\n\n  const textRef = useRef(text);\n  textRef.current = text;\n\n  const isDisabled = !isAuth || !isConnected;\n\n  const handleSendMessage = useCallback(() => {\n    if (!client || !textRef.current) return;\n\n    client.say(currentChannel, textRef.current);\n\n    setText('');\n  }, [client, currentChannel, textRef, setText]);\n\n  const chatInput = useChatInput(setText, handleSendMessage, chatInputRef);\n\n  const handleNameRightClick = useCallback(\n    (name: string) => {\n      setText((t) => `${t.trim()} @${name} `.trimLeft());\n      if (chatInputRef.current) {\n        chatInputRef.current.focus();\n      }\n    },\n    [setText, chatInputRef],\n  );\n\n  const handleEmoteClick = useCallback(\n    (name: string) => {\n      setText((t) => `${t.trim()} ${name} `.trimLeft());\n    },\n    [setText],\n  );\n\n  return (\n    <ChatRoot>\n      <ChatWrapper isFixedWidth={isFixedWidth}>\n        {currentChannel ? (\n          <Messages onNameRightClick={handleNameRightClick} />\n        ) : (\n          <JoinChannel />\n        )}\n        <ChatInput\n          ref={chatInputRef}\n          text={text}\n          suggestions={chatInput.suggestions}\n          isDisabled={isDisabled}\n          onEmoteClick={handleEmoteClick}\n          onChange={chatInput.handleChange}\n          onKeyUp={chatInput.handleKeyUp}\n          onKeyDown={chatInput.handleKeyDown}\n          onBlur={chatInput.handleBlur}\n          onSuggestionMouseEnter={chatInput.handleSuggestionMouseEnter}\n          onSuggestionClick={chatInput.handleSuggestionClick}\n        />\n        <ChatControls\n          isDisabled={isDisabled}\n          onSendMessage={handleSendMessage}\n        />\n      </ChatWrapper>\n    </ChatRoot>\n  );\n};\n\nexport default Chat;\n","import { getAuthUrl } from 'features/auth/authUtils';\n\nconst Auth = () => {\n  window.location.href = getAuthUrl();\n\n  return null;\n};\n\nexport default Auth;\n","import { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport {\n  LS_ACCESS_TOKEN,\n  LS_ID_TOKEN,\n  LS_USER,\n  LS_LAST_CHANNEL,\n} from 'utils/constants';\nimport { invalidateAuth } from 'features/auth/authSlice';\n\nconst Logout = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  localStorage.removeItem(LS_ACCESS_TOKEN);\n  localStorage.removeItem(LS_ID_TOKEN);\n  localStorage.removeItem(LS_USER);\n\n  dispatch(invalidateAuth());\n\n  history.push({\n    pathname: '/chat/',\n    hash: localStorage.getItem(LS_LAST_CHANNEL) || '',\n  });\n\n  return null;\n};\n\nexport default Logout;\n","import { useHistory } from 'react-router-dom';\r\n\r\nimport { LS_ACCESS_TOKEN, LS_ID_TOKEN, LS_LAST_CHANNEL } from 'utils/constants';\r\n\r\nconst AuthCallback = () => {\r\n  const history = useHistory();\r\n\r\n  if (!window.location.hash) return null;\r\n\r\n  const params = new URLSearchParams(window.location.hash.slice(1));\r\n\r\n  const accessToken = params.get('access_token');\r\n  const idToken = params.get('id_token');\r\n\r\n  if (!accessToken || !idToken) return null;\r\n\r\n  localStorage.setItem(LS_ACCESS_TOKEN, accessToken);\r\n  localStorage.setItem(LS_ID_TOKEN, idToken);\r\n\r\n  history.push({\r\n    pathname: '/chat/',\r\n    hash: localStorage.getItem(LS_LAST_CHANNEL) || '',\r\n  });\r\n\r\n  return null;\r\n};\r\n\r\nexport default AuthCallback;\r\n","import { css } from 'styled-components';\r\n\r\nexport default css`\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n  body {\r\n    margin: 0;\r\n    font-family: Roobert, Helvetica Neue, Helvetica, Arial, sans-serif;\r\n  }\r\n`;\r\n","import { css } from 'styled-components';\r\n\r\nexport default css``;\r\n","import { css } from 'styled-components';\n\nexport default css``;\n","import { createGlobalStyle } from 'styled-components';\n\nimport common from 'styles/common';\nimport colors from 'styles/colors';\nimport vars from 'styles/vars';\n\nexport default createGlobalStyle`\n  :root {\n    ${colors};\n    ${vars};\n  }\n  ${common};\n`;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  RouteComponentProps,\n} from 'react-router-dom';\n\nimport { isAuthRedirect } from 'features/auth/authUtils';\nimport Chat from 'features/chat/Chat';\nimport Auth from 'features/auth/Auth';\nimport Logout from 'features/auth/Logout';\nimport AuthCallback from 'features/auth/AuthCallback';\nimport GlobalStyles from 'styles';\n\nconst getHomeComponent = ({ location }: RouteComponentProps) =>\n  isAuthRedirect(location.hash) ? <AuthCallback /> : <Chat />;\n\nconst App: React.FC = () => (\n  <>\n    <Router>\n      <Switch>\n        <Route exact path=\"/chat/\" render={getHomeComponent} />\n        <Route exact path=\"/chat/auth\" component={Auth} />\n        <Route exact path=\"/chat/logout\" component={Logout} />\n      </Switch>\n    </Router>\n    <GlobalStyles />\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nconst registerValidSW = (swUrl: string, config?: Config) => {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n};\n\nconst checkValidServiceWorker = (swUrl: string, config?: Config) => {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n};\n\nexport const register = (config?: Config) => {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n};\n\nexport const unregister = () => {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n};\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport auth from 'features/auth/authSlice';\nimport chat from 'features/chat/chatSlice';\nimport messages from 'features/messages/messagesSlice';\nimport messageCards from 'features/messageCards/messageCardsSlice';\nimport emotes from 'features/emotes/emotesSlice';\nimport badges from 'features/badges/badgesSlice';\nimport blockedUsers from 'features/blockedUsers/blockedUsersSlice';\nimport options from 'features/options/optionsSlice';\n\nconst rootReducer = combineReducers({\n  auth,\n  chat,\n  messages,\n  messageCards,\n  emotes,\n  badges,\n  blockedUsers,\n  options,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore, Action } from '@reduxjs/toolkit';\nimport type { ThunkAction } from 'redux-thunk';\n\nimport rootReducer, { RootState } from 'app/rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    // eslint-disable-next-line global-require\n    const newRootReducer = require('./rootReducer').default;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport ReactGA from 'react-ga';\n\nimport * as serviceWorker from 'serviceWorker';\nimport { isAuthRedirect } from 'features/auth/authUtils';\nimport store from 'app/store';\n\nif (process.env.NODE_ENV === 'production') {\n  ReactGA.initialize('UA-139550930-3');\n\n  if (!isAuthRedirect(window.location.hash)) {\n    const page =\n      window.location.pathname + window.location.search + window.location.hash;\n    ReactGA.pageview(page);\n  }\n}\n\nconst render = () => {\n  // eslint-disable-next-line global-require\n  const App = require('./app/App').default;\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n};\n\nrender();\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./app/App', render);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchStatus } from 'utils/types';\nimport { writeUserToLocatStorage } from 'features/auth/authUtils';\n\ntype AuthState = {\n  status: FetchStatus;\n  userId: string | null;\n  userLogin: string | null;\n};\n\ntype InitializeAuth = {\n  isAuth: boolean;\n  userId?: string;\n  userLogin?: string;\n};\n\nexport const initialState: AuthState = {\n  status: 'idle',\n  userId: null,\n  userLogin: null,\n};\n\nexport const fetchUser = createAsyncThunk(\n  'auth/fetchUser',\n  async (userId: string) => {\n    const users = await api.fetchUser(userId);\n    const { id, login } = users.data[0];\n\n    writeUserToLocatStorage({ id, login });\n\n    return users;\n  },\n);\n\nconst auth = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    initializeAuth: (\n      state,\n      { payload }: PayloadAction<InitializeAuth>,\n    ): void => {\n      state.status = payload.isAuth ? 'success' : 'error';\n\n      if (payload.userId) {\n        state.userId = payload.userId;\n      }\n\n      if (payload.userLogin) {\n        state.userLogin = payload.userLogin;\n      }\n    },\n\n    invalidateAuth: (): AuthState => initialState,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchUser.pending, (state) => {\n      state.status = 'loading';\n    });\n\n    builder.addCase(fetchUser.fulfilled, (state, { payload }) => {\n      state.status = 'success';\n\n      state.userId = payload.data[0].id;\n      state.userLogin = payload.data[0].login;\n    });\n\n    builder.addCase(fetchUser.rejected, (state) => {\n      state.status = 'error';\n    });\n  },\n});\n\nexport const { initializeAuth, invalidateAuth } = auth.actions;\n\nexport default auth.reducer;\n","import * as R from 'ramda';\nimport { parse as twemojiParser } from 'twemoji-parser';\nimport { lib as emojilib } from 'emojilib';\nimport urlRegex from 'url-regex';\nimport type twitchIrc from 'twitch-simple-irc';\n\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport type { MessageEntity } from 'features/messages/messagesSlice';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport findEmote from 'features/emotes/utils/findEmote';\n\nconst mentionRegex = /^@([\\p{Letter}\\p{Number}_]+)/u;\nconst linkRegex = urlRegex({ strict: false });\n\nconst normalizeEmbeddedEmotes = (embeddedEmotes: twitchIrc.Emotes) =>\n  Object.entries(embeddedEmotes).reduce((result, [key, items]) => {\n    const id = Number.parseInt(key, 10);\n\n    return {\n      ...result,\n      ...items.reduce((acc, { start }) => ({ ...acc, [start]: id }), {}),\n    };\n  }, {} as Record<string, number>);\n\nconst findEmojiByName = (char: string) =>\n  R.pipe<any, any, any, string | undefined>(\n    R.filter(R.propEq('char', char)),\n    R.keys,\n    R.head,\n  )(emojilib);\n\nconst findEntity = (\n  word: string,\n  emotes: StateEmotes,\n  parseTwitch: boolean,\n):\n  | htmlEntity.TwitchEmote\n  | htmlEntity.BttvEmote\n  | htmlEntity.FfzEmote\n  | htmlEntity.Emoji\n  | [htmlEntity.Mention, number]\n  | htmlEntity.Link\n  | null => {\n  if (!emotes) return null;\n\n  if (parseTwitch) {\n    const twitchEmote = findEmote.twitch.byName(word, emotes);\n\n    if (twitchEmote) return twitchEmote;\n  }\n\n  const emote =\n    findEmote.bttv.byName(word, emotes) || findEmote.ffz.byName(word, emotes);\n\n  if (emote) return emote;\n\n  // Don't parse two or more emotes without spaces between\n  // Don't parse emote if it's not in the emojilib package\n  const emojiMatch = twemojiParser(word, { assetType: 'png' });\n\n  if (\n    emojiMatch &&\n    emojiMatch.length === 1 &&\n    emojiMatch[0].text.length === word.length\n  ) {\n    const emoji = findEmojiByName(word);\n\n    if (emoji) {\n      const [{ url }] = emojiMatch;\n\n      return htmlEntity.createEmoji(emoji, url);\n    }\n  }\n\n  const mentionMatch = word.match(mentionRegex);\n\n  if (mentionMatch) {\n    const [text, target] = mentionMatch;\n\n    return [\n      htmlEntity.createMention(text, target.toLowerCase()),\n      word.length - text.length,\n    ] as [htmlEntity.Mention, number];\n  }\n\n  const linkMatch = word.match(linkRegex);\n\n  if (linkMatch && linkMatch[0].length === word.length) {\n    return htmlEntity.createLink(word);\n  }\n\n  return null;\n};\n\nconst parseMessageEntities = (\n  message: string,\n  emotes: StateEmotes | null,\n  embeddedEmotes: twitchIrc.Emotes | null,\n  isOwnMessage = false,\n): MessageEntity[] => {\n  // If the message was sent by the current user, there is no embedded emotes\n  // So we need to parse twitch emotes manually\n\n  const result = [];\n  let offset = 0;\n  // Before that offset all content was added to the result array\n  let arrayOffset = 0;\n\n  // Check every word. From offset to the next space index\n  do {\n    const spaceIndex = message.indexOf(' ', offset + 1);\n\n    const isStart = offset === 0;\n    const isEnd = spaceIndex === -1;\n\n    const startIndex = isStart ? offset : offset + 1;\n    const endIndex = isEnd ? message.length : spaceIndex;\n\n    const word = message.substring(startIndex, endIndex);\n\n    if (word) {\n      let entity = null;\n\n      // Check embedded twitch emotes\n      if (\n        !isOwnMessage &&\n        embeddedEmotes &&\n        Object.keys(embeddedEmotes).length > 0\n      ) {\n        const normalizedEmotes = normalizeEmbeddedEmotes(embeddedEmotes);\n        const id = normalizedEmotes[startIndex];\n\n        if (id) {\n          entity = htmlEntity.createTwitchEmote({ id, code: word });\n        }\n      }\n\n      // Check other entities\n      if (!entity) {\n        entity = findEntity(word, emotes, isOwnMessage);\n      }\n\n      if (entity) {\n        // Push all text before this entity\n        if (arrayOffset !== startIndex) {\n          const textBefore = message.substring(arrayOffset, startIndex);\n          result.push(textBefore);\n        }\n\n        // If entity it's an array it means entity may be not full word\n        // The second element is the difference between word length and entity length\n        if (Array.isArray(entity)) {\n          const [entityObject, difference] = entity;\n          result.push(entityObject);\n          arrayOffset = endIndex - difference;\n        } else {\n          result.push(entity);\n          arrayOffset = endIndex;\n        }\n      }\n    }\n\n    // If it's the last word and it wasn't added to the result add it now\n    if (spaceIndex === -1 && arrayOffset !== endIndex) {\n      const textAfter = message.substring(arrayOffset, endIndex);\n      result.push(textAfter);\n    }\n\n    offset = spaceIndex;\n  } while (offset !== -1);\n\n  return result;\n};\n\nexport default parseMessageEntities;\n","const checkIsHighlighted = (\n  userLogin: string | null,\n  messageUser: string,\n  messageText: string,\n) =>\n  !!userLogin &&\n  userLogin !== messageUser &&\n  RegExp(userLogin, 'gi').test(messageText);\n\nexport default checkIsHighlighted;\n","import type {\n  MessageEntity,\n  MessageCardInfo,\n} from 'features/messages/messagesSlice';\n\n// https://regex101.com/r/jGbDV1/3\nconst twitchClipRegex = /^(?:https?:)?(?:\\/\\/)?(?:clips\\.twitch\\.tv\\/|(?:www\\.|m\\.)?twitch\\.tv\\/(?:[\\d\\w]+)\\/clip\\/)([\\d\\w]+)/;\n\n// https://regex101.com/r/xsgeA4/3\nconst twitchVideoRegex = /^(?:https?:)?(?:\\/\\/)?(?:www\\.|m\\.)?twitch.tv\\/videos\\/(\\d+)/;\n\n// https://regexr.com/3dj5t\nconst youtubeVideoRegex = /^((?:https?:)?\\/\\/)?((?:www|m)\\.)?(?:youtube\\.com|youtu.be)(\\/(?:[\\w-]+\\?v=|embed\\/|v\\/)?)([\\w-]+)(\\S+)?$/;\n\nconst getMessageCardFromEntities = (\n  entities: MessageEntity[],\n): MessageCardInfo | null => {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const entity of entities) {\n    if (typeof entity === 'object' && entity.type === 'link') {\n      // twitch clip\n      let m = twitchClipRegex.exec(entity.text);\n\n      if (m) {\n        return {\n          type: 'twitch-clip',\n          id: m[1],\n          url: entity.href,\n        };\n      }\n\n      // twitch video\n      m = twitchVideoRegex.exec(entity.text);\n\n      if (m) {\n        return {\n          type: 'twitch-video',\n          id: m[1],\n          url: entity.href,\n        };\n      }\n\n      // youtube video\n      m = youtubeVideoRegex.exec(entity.text);\n\n      if (m) {\n        return {\n          type: 'youtube-video',\n          id: m[5],\n          url: entity.href,\n        };\n      }\n    }\n  }\n\n  return null;\n};\n\nexport default getMessageCardFromEntities;\n","import { nanoid } from '@reduxjs/toolkit';\nimport * as twitchIrc from 'twitch-simple-irc';\nimport * as tekko from 'tekko';\nimport { Howl } from 'howler';\n\nimport type * as api from 'api';\nimport type { RootState } from 'app/rootReducer';\nimport type {\n  Message,\n  Notice,\n  UserNotice,\n  OwnMessage,\n} from 'features/messages/messagesSlice';\nimport { emotesSelector } from 'features/emotes/emotesSelectors';\nimport { blockedUsersSelector } from 'features/blockedUsers/blockedUsersSelectors';\nimport {\n  globalBadgesSelector,\n  channelBadgesSelector,\n} from 'features/badges/badgesSelectors';\nimport { isHighlightNotificationsSelector } from 'features/options/optionsSelectors';\nimport { userLoginSelector, userIdSelector } from 'features/auth/authSelectors';\nimport type { StateEmotes } from 'features/emotes/emotesSelectors';\nimport parseMessageEntities from 'features/messages/utils/parseMessageEntities';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport checkIsHighlighted from 'features/messages/utils/checkIsHighlighted';\nimport getMessageCardFromEntities from 'features/messageCards/utils/getMessageCardFromEntities';\nimport { writeEmotesUsageStatistic } from 'features/emotes/utils/emotesUsageStatistic';\n\nimport tinkSfx from 'assets/ts-tink.ogg';\n\nconst tink = new Howl({ src: [tinkSfx] });\n\nexport const normalizeMessage = (\n  { message, tags, user, channel, isAction }: twitchIrc.MessageEvent,\n  state: RootState,\n): Message | null => {\n  const blockedUsers = blockedUsersSelector(state);\n  const isBlockedUser = blockedUsers.includes(user);\n\n  if (isBlockedUser) {\n    return null;\n  }\n\n  const isHighlightNotifications = isHighlightNotificationsSelector(state);\n  const userLogin = userLoginSelector(state);\n  const isHighlighted = checkIsHighlighted(userLogin, user, message);\n\n  if (isHighlighted && isHighlightNotifications) {\n    tink.play();\n  }\n\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n\n  const entities = parseMessageEntities(message, emotes, tags.emotes);\n  const badges = htmlEntity.createBadges(\n    tags.badges,\n    globalBadges,\n    channelBadges,\n  );\n  const card = getMessageCardFromEntities(entities);\n\n  return {\n    type: 'message',\n    id: tags.id,\n    message,\n    channel,\n    entities,\n    user: {\n      id: tags.userId,\n      login: user,\n      displayName: tags.displayName,\n      color: tags.color,\n      badges,\n    },\n    timestamp: tags.tmiSentTs,\n    card,\n    isAction,\n    isHistory: false,\n    isDeleted: false,\n    isHighlighted,\n  };\n};\n\nexport const normalizeNotice = ({\n  message,\n  channel,\n  tags: { msgId },\n}: twitchIrc.NoticeEvent): Notice => ({\n  type: 'notice',\n  id: nanoid(),\n  message,\n  channel,\n  noticeType: msgId,\n});\n\nexport const normalizeUserNotice = ({\n  message,\n  channel,\n  tags: { id, msgId, login, systemMsg },\n}: twitchIrc.UserNoticeEvent): UserNotice => ({\n  type: 'user-notice',\n  id,\n  message,\n  channel,\n  noticeType: msgId,\n  systemMessage: systemMsg,\n  user: {\n    login,\n  },\n});\n\nexport const normalizeOwnMessage = (\n  { message, channel, tags }: OwnMessage,\n  state: RootState,\n): Message => {\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n  const userLogin = userLoginSelector(state) as string;\n  const userId = userIdSelector(state) as string;\n\n  const isAction = message.startsWith('/me ');\n  const normalizedMessage = isAction ? message.slice(4) : message;\n\n  const entities = parseMessageEntities(normalizedMessage, emotes, null, true);\n  const badges = htmlEntity.createBadges(\n    tags.badges,\n    globalBadges,\n    channelBadges,\n  );\n  const card = getMessageCardFromEntities(entities);\n\n  writeEmotesUsageStatistic(entities);\n\n  return {\n    type: 'message',\n    id: nanoid(),\n    message: normalizedMessage,\n    channel,\n    entities,\n    user: {\n      id: userId,\n      login: userLogin,\n      displayName: tags.displayName,\n      color: tags.color,\n      badges,\n    },\n    timestamp: Date.now(),\n    card,\n    isAction,\n    isHistory: false,\n    isDeleted: false,\n    isHighlighted: false,\n  };\n};\n\nexport const normalizeHistoryMessage = (\n  { tags, params: [channel, message], prefix }: tekko.Message,\n  emotes: StateEmotes,\n  globalBadges: Record<string, api.TwitchBadge>,\n  channelBadges: Record<string, api.TwitchBadge>,\n  userLogin: string | null,\n): Message => {\n  const isAction = twitchIrc.getIsAction(message);\n  const normalizedMessage = isAction\n    ? twitchIrc.normalizeActionMessage(message)\n    : message;\n  const parsedTags = (twitchIrc.parseMessageTags(\n    tags,\n  ) as unknown) as twitchIrc.MessageTags;\n\n  const messageUser = prefix ? prefix.name : '';\n  const isHighlighted = checkIsHighlighted(\n    userLogin,\n    messageUser,\n    normalizedMessage,\n  );\n\n  const entities = parseMessageEntities(\n    normalizedMessage,\n    emotes,\n    parsedTags.emotes,\n  );\n  const badges = htmlEntity.createBadges(\n    parsedTags.badges,\n    globalBadges,\n    channelBadges,\n  );\n\n  // TODO: add cards for history?\n  // const card = getMessageCardFromEntities(entities);\n\n  return {\n    type: 'message',\n    id: parsedTags.id,\n    message: normalizedMessage,\n    channel: channel.slice(1),\n    entities,\n    user: {\n      id: parsedTags.userId,\n      login: messageUser,\n      displayName: parsedTags.displayName,\n      color: parsedTags.color,\n      badges,\n    },\n    timestamp: parsedTags.tmiSentTs,\n    card: null,\n    isAction,\n    isHistory: true,\n    isDeleted: false,\n    isHighlighted,\n  };\n};\n\nexport const normalizeHistoryMessages = (\n  rawMessages: string[],\n  state: RootState,\n): Message[] => {\n  const globalBadges = globalBadgesSelector(state);\n  const channelBadges = channelBadgesSelector(state);\n  const emotes = emotesSelector(state);\n  const blockedUsers = blockedUsersSelector(state);\n  const userLogin = userLoginSelector(state);\n\n  return rawMessages.reduce<Message[]>((acc, rawMessage) => {\n    const message = tekko.parse(rawMessage) as tekko.Message;\n\n    const { command, prefix } = message;\n\n    if (\n      command === 'PRIVMSG' &&\n      prefix &&\n      !blockedUsers.includes(prefix.name)\n    ) {\n      acc.push(\n        normalizeHistoryMessage(\n          message,\n          emotes,\n          globalBadges,\n          channelBadges,\n          userLogin,\n        ),\n      );\n    }\n\n    return acc;\n  }, []);\n};\n","type SliceItemsParams<T> = {\n  items: T[];\n  limit: number;\n  addedItemsCount?: number;\n  isEven?: boolean;\n};\n\nfunction sliceItemsByLimit<T>({\n  items,\n  limit,\n  addedItemsCount = 1,\n  isEven = false,\n}: SliceItemsParams<T>): [T[], boolean] {\n  const diff = items.length - limit;\n  const isSliced = diff > 0;\n\n  const newItems = isSliced ? items.slice(diff) : items;\n  const newIsEven = isSliced && addedItemsCount % 2 ? !isEven : isEven;\n\n  return [newItems, newIsEven];\n}\n\nexport default sliceItemsByLimit;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\nimport type twitchIrc from 'twitch-simple-irc';\n\nimport * as api from 'api';\nimport type { AppThunk } from 'app/store';\nimport type { RootState } from 'app/rootReducer';\nimport type { FetchResult } from 'utils/types';\nimport { CHANNEL_MESSAGES_LIMIT, STORE_USERS_LIMIT } from 'utils/constants';\nimport assertNever from 'utils/assertNever';\nimport * as htmlEntity from 'features/messages/utils/htmlEntity';\nimport {\n  normalizeMessage,\n  normalizeNotice,\n  normalizeUserNotice,\n  normalizeHistoryMessages,\n  normalizeOwnMessage,\n} from 'features/messages/utils/normalizeMessages';\nimport sliceItemsByLimit from 'features/messages/utils/sliceItemsByLimit';\nimport {\n  fetchTwitchClip,\n  fetchTwitchVideo,\n  fetchYoutubeVideo,\n} from 'features/messageCards/messageCardsSlice';\nimport { messageCardSelector } from 'features/messageCards/messageCardsSelectors';\n\nexport type MessageEntity =\n  | htmlEntity.TwitchEmote\n  | htmlEntity.BttvEmote\n  | htmlEntity.FfzEmote\n  | htmlEntity.Emoji\n  | htmlEntity.Mention\n  | htmlEntity.Link\n  | string;\n\nexport type MessageCardInfo = {\n  type: 'twitch-clip' | 'twitch-video' | 'youtube-video';\n  id: string;\n  url: string;\n};\n\nexport type Message = {\n  type: 'message';\n  id: string;\n  message: string;\n  channel: string;\n  entities: MessageEntity[];\n  user: {\n    id: string;\n    login: string;\n    displayName: string;\n    color: string;\n    badges: htmlEntity.Badge[];\n  };\n  timestamp: number;\n  card: MessageCardInfo | null;\n  isAction: boolean;\n  isHistory: boolean;\n  isDeleted: boolean;\n  isHighlighted: boolean;\n};\n\nexport type Notice = {\n  type: 'notice';\n  id: string;\n  message: string;\n  channel: string;\n  noticeType: string;\n};\n\nexport type UserNotice = {\n  type: 'user-notice';\n  id: string;\n  message: string;\n  channel: string;\n  noticeType: keyof typeof twitchIrc.UserNoticeType;\n  systemMessage: string;\n  user: {\n    login: string;\n  };\n};\n\nexport type ChatMessage = Message | Notice | UserNotice;\n\nexport type OwnMessage = {\n  message: string;\n  channel: string;\n  tags: twitchIrc.UserStateTags;\n};\n\ntype RecieveMessage = {\n  type: 'message';\n  message: twitchIrc.MessageEvent;\n};\ntype RecieveNotice = {\n  type: 'notice';\n  message: twitchIrc.NoticeEvent;\n};\ntype RecieveUserNotice = {\n  type: 'user-notice';\n  message: twitchIrc.UserNoticeEvent;\n};\ntype RecieveOwnMessage = {\n  type: 'own-message';\n  message: OwnMessage;\n};\n\ntype RecieveMessagePayload =\n  | RecieveMessage\n  | RecieveNotice\n  | RecieveUserNotice\n  | RecieveOwnMessage;\n\ntype RecieveMessagesActionPayload = {\n  messages: ChatMessage[];\n  channel: string;\n  type?: 'message' | 'history';\n};\n\ntype MessagesStateChannel = {\n  history: FetchResult<string[]> & {\n    isAdded: boolean;\n  };\n  isEven: boolean;\n  items: ChatMessage[];\n  users: string[];\n};\n\ntype MessagesState = Record<string, MessagesStateChannel>;\n\nconst initialState: MessagesState = {};\n\nexport const fetchChatHistory = createAsyncThunk(\n  'chat/fetchChatHistory',\n  (channel: string) => api.fetchChatHistory(channel),\n);\n\n// TODO: write function than adds a user to the users array\n\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    clearChat: (\n      state,\n      { payload }: PayloadAction<twitchIrc.ClearChatEvent>,\n    ) => {\n      const {\n        channel,\n        tags: { targetUserId },\n      } = payload;\n\n      // eslint-disable-next-line no-restricted-syntax\n      for (const message of state[channel].items) {\n        if (\n          message.type === 'message' &&\n          message.user.id === targetUserId &&\n          !message.isHistory\n        ) {\n          message.isDeleted = true;\n        }\n      }\n    },\n\n    recieveMessagesAction: (\n      state,\n      { payload }: PayloadAction<RecieveMessagesActionPayload>,\n    ) => {\n      const { messages, channel, type = 'message' } = payload;\n\n      if (messages.length === 0) return;\n\n      const items =\n        type === 'message'\n          ? [...state[channel].items, ...messages]\n          : [...messages, ...state[channel].items];\n\n      const [newItems, newIsEven] = sliceItemsByLimit({\n        items,\n        limit: CHANNEL_MESSAGES_LIMIT,\n        addedItemsCount: messages.length,\n        isEven: state[channel].isEven,\n      });\n\n      state[channel].isEven = newIsEven;\n      state[channel].items = newItems;\n\n      // TODO: add colors for users if it's not set\n\n      // add users\n      const { users } = state[channel];\n\n      messages.forEach((message) => {\n        if (\n          message.type === 'message' &&\n          !users.includes(message.user.displayName)\n        ) {\n          users.push(message.user.displayName);\n        }\n      });\n\n      const [newUsers] = sliceItemsByLimit({\n        items: users,\n        limit: STORE_USERS_LIMIT,\n      });\n\n      state[channel].users = newUsers;\n\n      if (type === 'history') {\n        state[channel].history.items = [];\n        state[channel].history.isAdded = true;\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchChatHistory.pending, (state, { meta: { arg } }) => {\n      const channel = arg;\n\n      if (!state[channel]) {\n        state[channel] = {\n          history: {\n            status: 'loading',\n            error: {},\n            items: [],\n            isAdded: false,\n          },\n          isEven: false,\n          items: [],\n          users: [],\n        };\n      } else {\n        state[channel].history.status = 'loading';\n        state[channel].history.error = {};\n      }\n    });\n\n    builder.addCase(\n      fetchChatHistory.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const channel = arg;\n\n        state[channel].history.status = 'success';\n        state[channel].history.items = payload.messages;\n      },\n    );\n\n    builder.addCase(\n      fetchChatHistory.rejected,\n      (state, { error, meta: { arg } }) => {\n        const channel = arg;\n\n        state[channel].history.status = 'error';\n        state[channel].history.error = error;\n      },\n    );\n  },\n});\n\nexport const { clearChat } = messagesSlice.actions;\n\nexport default messagesSlice.reducer;\n\nconst { recieveMessagesAction } = messagesSlice.actions;\n\nconst normalizePayload = (\n  payload: RecieveMessagePayload,\n  state: RootState,\n): ChatMessage | null => {\n  if (payload.type === 'message') {\n    return normalizeMessage(payload.message, state);\n  }\n\n  if (payload.type === 'notice') {\n    return normalizeNotice(payload.message);\n  }\n\n  if (payload.type === 'user-notice') {\n    return normalizeUserNotice(payload.message);\n  }\n\n  if (payload.type === 'own-message') {\n    return normalizeOwnMessage(payload.message, state);\n  }\n\n  return assertNever(payload);\n};\n\nexport const recieveMessage = (payload: RecieveMessagePayload): AppThunk => (\n  dispatch,\n  getState,\n) => {\n  const state = getState();\n  const message = normalizePayload(payload, state);\n\n  if (!message) return;\n\n  // fetch a message card if any\n  if (message.type === 'message' && message.card) {\n    const card = messageCardSelector(message.card)(state);\n\n    if (!card || card.status === 'error') {\n      const { id, url } = message.card;\n      const params = { id, url };\n\n      if (message.card.type === 'twitch-clip') {\n        dispatch(fetchTwitchClip(params));\n      }\n\n      if (message.card.type === 'twitch-video') {\n        dispatch(fetchTwitchVideo(params));\n      }\n\n      if (message.card.type === 'youtube-video') {\n        dispatch(fetchYoutubeVideo(params));\n      }\n    }\n  }\n\n  const params = { messages: [message], channel: message.channel };\n\n  dispatch(recieveMessagesAction(params));\n};\n\nexport const addChatHistory = (channel: string): AppThunk => (\n  dispatch,\n  getState,\n) => {\n  const state = getState();\n\n  const [slicedRawHistory] = sliceItemsByLimit({\n    items: state.messages[channel].history.items,\n    limit: CHANNEL_MESSAGES_LIMIT,\n  });\n\n  const messages = normalizeHistoryMessages(slicedRawHistory, state);\n\n  dispatch(recieveMessagesAction({ messages, channel, type: 'history' }));\n};\n","export const TWITCH_API_AUTH_BASE = 'https://id.twitch.tv/oauth2/authorize';\n\nexport const TWITCH_API_CLIENT_ID = process.env.REACT_APP_TWITCH_API_CLIENT_ID;\nexport const TWITCH_API_REDIRECT_URI =\n  process.env.REACT_APP_TWITCH_API_REDIRECT_URI;\n\nexport const CHANNEL_MESSAGES_LIMIT = 500;\nexport const STORE_USERS_LIMIT = 500;\n\nexport const API_REQUESTS_TIMEOUT = 10000;\n\nexport const TWITCH_EMOTES_CDN = '//static-cdn.jtvnw.net/emoticons/v1';\nexport const BTTV_EMOTES_CDN = '//cdn.betterttv.net/emote';\n\n// local storage keys\nexport const LS_ACCESS_TOKEN = 'accessToken';\nexport const LS_ID_TOKEN = 'idToken';\nexport const LS_LAST_CHANNEL = 'lastChannel';\nexport const LS_USER = 'user';\nexport const LS_EMOTES_USAGE_STATISTIC = 'emotesUsageStatistic';\nexport const LS_OPTIONS = 'options';\n\nexport const SUGGESTION_TYPES = {\n  users: {\n    name: 'users',\n    limit: 5,\n    regex: /^@([\\w\\d_]*)$/,\n  },\n  emotes: {\n    name: 'emotes',\n    limit: 10,\n    regex: /^:([\\w\\d_]{2,})$/,\n  },\n};\n\nexport const NOTICE_MESSAGE_TAGS = [\n  'msg_banned',\n  'msg_bad_characters',\n  'msg_channel_blocked',\n  'msg_channel_suspended',\n  'msg_duplicate',\n  'msg_emoteonly',\n  'msg_facebook',\n  'msg_followersonly',\n  'msg_followersonly_followed',\n  'msg_followersonly_zero',\n  'msg_r9k',\n  'msg_ratelimit',\n  'msg_rejected',\n  'msg_rejected_mandatory',\n  'msg_room_not_found',\n  'msg_slowmode',\n  'msg_subsonly',\n  'msg_suspended',\n  'msg_timedout',\n  'msg_verified_email',\n];\n","import {\n  TWITCH_API_AUTH_BASE,\n  TWITCH_API_CLIENT_ID,\n  TWITCH_API_REDIRECT_URI,\n  LS_USER,\n} from 'utils/constants';\n\ntype StoredUser = {\n  id: string;\n  login: string;\n};\n\nconst authParams = {\n  client_id: TWITCH_API_CLIENT_ID,\n  redirect_uri: TWITCH_API_REDIRECT_URI,\n  response_type: 'token+id_token',\n  scope: [\n    'openid',\n    'channel:moderate',\n    'chat:edit',\n    'chat:read',\n    'whispers:read',\n    'whispers:edit',\n    'user_blocks_read',\n    'user_blocks_edit',\n    'user_subscriptions',\n  ].join('+'),\n  claims: JSON.stringify({\n    id_token: { email_verified: null, picture: null, preferred_username: null },\n  }),\n  // TODO:\n  // state: uid(),\n};\n\nexport const getAuthUrl = (): string => {\n  const search = Object.entries(authParams)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n\n  return `${TWITCH_API_AUTH_BASE}?${search}`;\n};\n\nexport const isAuthRedirect = (hash: string): boolean =>\n  hash.startsWith('#access_token=');\n\nexport const writeUserToLocatStorage = (user: StoredUser): void => {\n  localStorage.setItem(LS_USER, JSON.stringify(user));\n};\n\nexport const readUserFromLocatStorage = (): StoredUser | null => {\n  let user;\n\n  try {\n    user = JSON.parse(localStorage.getItem(LS_USER) as string);\n  } catch (e) {\n    user = null;\n  }\n\n  if (!user || !user.id || !user.login) return null;\n\n  return user as StoredUser;\n};\n","import type { RootState } from 'app/rootReducer';\n\ntype OptionItem = {\n  type: 'switch' | 'input';\n  id: string;\n  name: string;\n  title: string;\n  description: string;\n  value: boolean | string;\n};\n\ntype OptionCategories = {\n  title: string;\n  items: OptionItem[];\n};\n\nexport const optionsSelector = (state: RootState): OptionCategories[] => [\n  {\n    title: 'My preferences',\n    items: [\n      {\n        type: 'switch',\n        id: 'show-timestamps',\n        name: 'showTimestamps',\n        title: 'Show Timestamps',\n        description: '',\n        value: state.options.showTimestamps,\n      },\n      {\n        type: 'switch',\n        id: 'split-chat',\n        name: 'splitChat',\n        title: 'Split Chat',\n        description: '',\n        value: state.options.splitChat,\n      },\n      {\n        type: 'switch',\n        id: 'fixed-width',\n        name: 'fixedWidth',\n        title: 'Fixed Width',\n        description: '',\n        value: state.options.fixedWidth,\n      },\n      {\n        type: 'switch',\n        id: 'highlight-notifications',\n        name: 'highlightNotifications',\n        title: 'Play a sound on highlights',\n        description: 'Plays a sound for messages directed at you',\n        value: state.options.highlightNotifications,\n      },\n      // {\n      //   type: 'input',\n      //   id: 'blacklist-keywords',\n      //   name: 'blacklistKeywords',\n      //   title: 'Set Blacklist Keywords',\n      //   description: '',\n      //   value: state.options.blacklistKeywords,\n      // },\n      // {\n      //   type: 'input',\n      //   id: 'highlight-keywords',\n      //   name: 'highlightKeywords',\n      //   title: 'Set Highlight Keywords',\n      //   description: '',\n      //   value: state.options.highlightKeywords,\n      // },\n    ],\n  },\n];\n\nexport const isShowTimestampsSelector = (state: RootState) =>\n  state.options.showTimestamps;\n\nexport const isSplitChatSelector = (state: RootState) =>\n  state.options.splitChat;\n\nexport const isFixedWidthSelector = (state: RootState) =>\n  state.options.fixedWidth;\n\nexport const isHighlightNotificationsSelector = (state: RootState) =>\n  state.options.highlightNotifications;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchResult } from 'utils/types';\nimport {\n  parseTwitchEmotes,\n  parseBttvGlobalEmotes,\n  parseBttvChannelEmotes,\n  parseFfzGlobalEmotes,\n  parseFfzChannelEmotes,\n} from 'features/chat/utils/parseApiResponse';\n\ntype EmotesState = {\n  twitch: FetchResult<Record<string, api.TwitchEmote[]>>;\n  bttv: {\n    global: FetchResult<api.BttvGlobalEmote[]>;\n    byChannels: Record<string, FetchResult<api.BttvChannelEmote[]>>;\n  };\n  ffz: {\n    global: FetchResult<api.FfzEmote[]>;\n    byChannels: Record<string, FetchResult<api.FfzEmote[]>>;\n  };\n};\n\nconst initialState: EmotesState = {\n  twitch: {\n    status: 'idle',\n    error: {},\n    items: {},\n  },\n  bttv: {\n    global: {\n      status: 'idle',\n      error: {},\n      items: [],\n    },\n    byChannels: {},\n  },\n  ffz: {\n    global: {\n      status: 'idle',\n      error: {},\n      items: [],\n    },\n    byChannels: {},\n  },\n};\n\nexport const fetchTwitchEmotes = createAsyncThunk(\n  'chat/fetchTwitchEmotes',\n  (userId: string) => api.fetchTwitchEmotes(userId),\n);\n\nexport const fetchBttvGlobalEmotes = createAsyncThunk(\n  'chat/fetchBttvGlobalEmotes',\n  () => api.fetchBttvGlobalEmotes(),\n);\n\ntype FetchBttvChannelEmotesParams = {\n  channel: string;\n  channelId: string;\n};\n\nexport const fetchBttvChannelEmotes = createAsyncThunk(\n  'chat/fetchBttvChannelEmotes',\n  ({ channelId }: FetchBttvChannelEmotesParams) =>\n    api.fetchBttvChannelEmotes(channelId),\n);\n\nexport const fetchFfzGlobalEmotes = createAsyncThunk(\n  'chat/fetchFfzGlobalEmotes',\n  () => api.fetchFfzGlobalEmotes(),\n);\n\ntype FetchFfzChannelEmotesParams = {\n  channel: string;\n  channelId: string;\n};\n\nexport const fetchFfzChannelEmotes = createAsyncThunk(\n  'chat/fetchFfzChannelEmotes',\n  ({ channelId }: FetchFfzChannelEmotesParams) =>\n    api.fetchFfzChannelEmotes(channelId),\n);\n\nconst emotes = createSlice({\n  name: 'emotes',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // twitch\n    builder.addCase(fetchTwitchEmotes.pending, (state) => {\n      state.twitch.status = 'loading';\n      state.twitch.error = {};\n    });\n\n    builder.addCase(fetchTwitchEmotes.fulfilled, (state, { payload }) => {\n      state.twitch.status = 'success';\n      state.twitch.items = parseTwitchEmotes(payload);\n    });\n\n    builder.addCase(fetchTwitchEmotes.rejected, (state, { error }) => {\n      state.twitch.status = 'error';\n      state.twitch.error = error;\n    });\n\n    // bttv global\n    builder.addCase(fetchBttvGlobalEmotes.pending, (state) => {\n      state.bttv.global.status = 'loading';\n      state.bttv.global.error = {};\n    });\n\n    builder.addCase(fetchBttvGlobalEmotes.fulfilled, (state, { payload }) => {\n      state.bttv.global.status = 'success';\n      state.bttv.global.items = parseBttvGlobalEmotes(payload);\n    });\n\n    builder.addCase(fetchBttvGlobalEmotes.rejected, (state, { error }) => {\n      state.bttv.global.status = 'error';\n      state.bttv.global.error = error;\n    });\n\n    // bttv channel\n    builder.addCase(\n      fetchBttvChannelEmotes.pending,\n      (state, { meta: { arg } }) => {\n        const { channel } = arg;\n\n        if (!state.bttv.byChannels[channel]) {\n          state.bttv.byChannels[channel] = {\n            status: 'loading',\n            error: {},\n            items: [],\n          };\n        } else {\n          state.bttv.byChannels[channel].status = 'loading';\n          state.bttv.byChannels[channel].error = {};\n        }\n      },\n    );\n\n    builder.addCase(\n      fetchBttvChannelEmotes.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.bttv.byChannels[channel].status = 'success';\n        state.bttv.byChannels[channel].items = parseBttvChannelEmotes(payload);\n      },\n    );\n\n    builder.addCase(\n      fetchBttvChannelEmotes.rejected,\n      (state, { error, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.bttv.byChannels[channel].status = 'error';\n        state.bttv.byChannels[channel].error = error;\n      },\n    );\n\n    // ffz global\n    builder.addCase(fetchFfzGlobalEmotes.pending, (state) => {\n      state.ffz.global.status = 'loading';\n      state.ffz.global.error = {};\n    });\n\n    builder.addCase(fetchFfzGlobalEmotes.fulfilled, (state, { payload }) => {\n      state.ffz.global.status = 'success';\n      state.ffz.global.items = parseFfzGlobalEmotes(payload);\n    });\n\n    builder.addCase(fetchFfzGlobalEmotes.rejected, (state, { error }) => {\n      state.ffz.global.status = 'error';\n      state.ffz.global.error = error;\n    });\n\n    // ffz channel\n    builder.addCase(\n      fetchFfzChannelEmotes.pending,\n      (state, { meta: { arg } }) => {\n        const { channel } = arg;\n\n        if (!state.ffz.byChannels[channel]) {\n          state.ffz.byChannels[channel] = {\n            status: 'loading',\n            error: {},\n            items: [],\n          };\n        } else {\n          state.ffz.byChannels[channel].status = 'loading';\n          state.ffz.byChannels[channel].error = {};\n        }\n      },\n    );\n\n    builder.addCase(\n      fetchFfzChannelEmotes.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.ffz.byChannels[channel].status = 'success';\n        state.ffz.byChannels[channel].items = parseFfzChannelEmotes(payload);\n      },\n    );\n\n    builder.addCase(\n      fetchFfzChannelEmotes.rejected,\n      (state, { error, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.ffz.byChannels[channel].status = 'error';\n        state.ffz.byChannels[channel].error = error;\n      },\n    );\n  },\n});\n\nexport default emotes.reducer;\n","const assertNever = (value: never): never => value;\n\nexport default assertNever;\n","import tls from 'tls';\nimport { Socket } from 'net';\nimport { EventEmitter } from 'events';\nimport * as tekko from 'tekko';\n\nimport {\n  TekkoMessage,\n  MessageEvent,\n  GlobalUserStateEvent,\n  GlobalUserStateTags,\n  UserStateEvent,\n  UserStateTags,\n  RoomStateEvent,\n  RoomStateTags,\n  ClearChatEvent,\n  ClearMessageEvent,\n  HostTargetEvent,\n  NoticeEvent,\n  UserNoticeEvent,\n  WhisperEvent,\n  JoinEvent,\n  PartEvent,\n  PingEvent,\n} from './types';\nimport { isNode, getChannelFromMessage, getRandomUsername } from './utils';\nimport {\n  normalizeChatMessage,\n  normalizeState,\n  normalizeCommand,\n  normalizeWhisper,\n  normalizeGlobalUserState,\n} from './normalize';\n\nexport enum Commands {\n  REPLY001 = '001',\n  PING = 'PING',\n  PONG = 'PONG',\n  JOIN = 'JOIN',\n  PART = 'PART',\n  PRIVMSG = 'PRIVMSG',\n  NOTICE = 'NOTICE',\n  USERNOTICE = 'USERNOTICE',\n  GLOBALUSERSTATE = 'GLOBALUSERSTATE',\n  USERSTATE = 'USERSTATE',\n  ROOMSTATE = 'ROOMSTATE',\n  CLEARCHAT = 'CLEARCHAT',\n  CLEARMSG = 'CLEARMSG',\n  HOSTTARGET = 'HOSTTARGET',\n  WHISPER = 'WHISPER',\n}\n\ninterface ClientOptions {\n  name?: string;\n  auth?: string;\n  secure?: boolean;\n}\n\ninterface Channels {\n  [channel: string]: {\n    userState: UserStateTags;\n    roomState: RoomStateTags;\n  };\n}\n\ntype Listener<T> = (data: T) => void;\n\nexport interface Client {\n  on(event: 'connect', listener: () => void): this;\n  on(event: 'disconnect', listener: (error?: Error) => void): this;\n  on(event: 'register', listener: () => void): this;\n  on(event: 'message', listener: Listener<MessageEvent>): this;\n  on(event: 'notice', listener: Listener<NoticeEvent>): this;\n  on(event: 'usernotice', listener: Listener<UserNoticeEvent>): this;\n  on(event: 'whisper', listener: Listener<WhisperEvent>): this;\n  on(event: 'globaluserstate', listener: Listener<GlobalUserStateEvent>): this;\n  on(event: 'userstate', listener: Listener<UserStateEvent>): this;\n  on(event: 'roomstate', listener: Listener<RoomStateEvent>): this;\n  on(event: 'join', listener: Listener<JoinEvent>): this;\n  on(event: 'part', listener: Listener<PartEvent>): this;\n  on(event: 'clearchat', listener: Listener<ClearChatEvent>): this;\n  on(event: 'clearmessage', listener: Listener<ClearMessageEvent>): this;\n  on(event: 'hosttarget', listener: Listener<HostTargetEvent>): this;\n  on(event: 'ping', listener: Listener<PingEvent>): this;\n  on(event: 'error', listener: (error: Error) => void): this;\n\n  emit(event: 'connect'): boolean;\n  emit(event: 'disconnect', error?: Error): boolean;\n  emit(event: 'register'): boolean;\n  emit(event: 'message', data: MessageEvent): boolean;\n  emit(event: 'notice', data: NoticeEvent): boolean;\n  emit(event: 'usernotice', data: UserNoticeEvent): boolean;\n  emit(event: 'whisper', data: WhisperEvent): boolean;\n  emit(event: 'globaluserstate', data: GlobalUserStateEvent): boolean;\n  emit(event: 'userstate', data: UserStateEvent): boolean;\n  emit(event: 'roomstate', data: RoomStateEvent): boolean;\n  emit(event: 'join', data: JoinEvent): boolean;\n  emit(event: 'part', data: PartEvent): boolean;\n  emit(event: 'clearchat', data: ClearChatEvent): boolean;\n  emit(event: 'clearmessage', data: ClearMessageEvent): boolean;\n  emit(event: 'hosttarget', data: HostTargetEvent): boolean;\n  emit(event: 'ping', data: PingEvent): boolean;\n  emit(event: 'error', error: Error): boolean;\n}\n\nexport class Client extends EventEmitter {\n  socket: WebSocket | Socket | null = null;\n\n  options: ClientOptions;\n\n  globalUserState: GlobalUserStateTags | null = null;\n\n  channels: Channels = {};\n\n  private _connected: boolean = false;\n\n  private _connecting: boolean = false;\n\n  private _registered: boolean = false;\n\n  constructor(options: ClientOptions | null | undefined = {}) {\n    super();\n    this.options = { secure: true, ...options };\n  }\n\n  async connect(): Promise<void> {\n    const connection = isNode\n      ? this._connectInNode()\n      : this._connectInBrowser();\n\n    await connection;\n\n    return this._register();\n  }\n\n  disconnect(): void {\n    if (!this._connected) return;\n\n    if (isNode) {\n      (this.socket as Socket).destroy();\n    } else {\n      (this.socket as WebSocket).close();\n    }\n\n    this.socket = null;\n    this._connected = false;\n    this._connecting = false;\n    this._registered = false;\n\n    this.emit('disconnect');\n  }\n\n  receiveRaw(rawData: string) {\n    const data = rawData.trim().split('\\r\\n');\n\n    data.forEach((line) => this._handleMessage(line));\n  }\n\n  sendRaw(message: string): boolean {\n    if (this.socket === null || !message) {\n      return false;\n    }\n\n    if (isNode) {\n      (this.socket as Socket).write(message);\n    } else {\n      (this.socket as WebSocket).send(message);\n    }\n\n    return true;\n  }\n\n  say(channel: string, message: string): boolean {\n    const ircMessage = tekko.format({\n      command: Commands.PRIVMSG,\n      middle: [`#${channel}`],\n      trailing: message,\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  sendCommand(\n    channel: string,\n    command: string,\n    params: string | Array<string> = '',\n  ): boolean {\n    const commandParams = Array.isArray(params) ? params.join(' ') : params;\n    const ircMessage = tekko.format({\n      command: Commands.PRIVMSG,\n      middle: [`#${channel}`],\n      trailing: `/${command} ${commandParams}`,\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  join(channel: string): boolean {\n    if (!this._registered) return false;\n\n    const ircMessage = tekko.format({\n      command: Commands.JOIN,\n      middle: [`#${channel}`],\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  part(channel: string): boolean {\n    if (!this._registered) return false;\n\n    const ircMessage = tekko.format({\n      command: Commands.PART,\n      middle: [`#${channel}`],\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  _handleMessage(raw: string) {\n    const data: TekkoMessage = tekko.parse(raw) as TekkoMessage;\n    data.raw = raw;\n    const { command } = data;\n\n    if (command === Commands.PING) {\n      this.sendRaw(`${Commands.PONG} :tmi.twitch.tv`);\n      this.emit('ping', { raw });\n\n      return;\n    }\n\n    if (command === Commands.REPLY001) {\n      this.options.name = data.middle[0];\n      this._registered = true;\n\n      this.emit('register');\n\n      return;\n    }\n\n    if (command === Commands.PRIVMSG) {\n      const eventData = normalizeChatMessage(data);\n\n      this.emit('message', eventData);\n\n      return;\n    }\n\n    if (command === Commands.USERSTATE) {\n      const channel = getChannelFromMessage(data);\n      const eventData = normalizeState(data) as UserStateEvent;\n\n      this._updateUserState(channel, eventData.tags);\n      this.emit('userstate', eventData);\n\n      return;\n    }\n\n    if (command === Commands.JOIN) {\n      const channel = getChannelFromMessage(data);\n      const eventData = { channel } as JoinEvent;\n\n      this.emit('join', eventData);\n\n      return;\n    }\n\n    if (command === Commands.PART) {\n      const channel = getChannelFromMessage(data);\n      const eventData = { channel } as PartEvent;\n\n      this.emit('part', eventData);\n\n      return;\n    }\n\n    if (command === Commands.ROOMSTATE) {\n      const channel = getChannelFromMessage(data);\n      const eventData = (normalizeState(data) as unknown) as RoomStateEvent;\n\n      this._updateRoomState(channel, eventData.tags);\n      this.emit('roomstate', eventData);\n\n      return;\n    }\n\n    if (command === Commands.NOTICE) {\n      const eventData = normalizeCommand(data) as NoticeEvent;\n\n      this.emit('notice', eventData);\n\n      return;\n    }\n\n    if (command === Commands.USERNOTICE) {\n      const eventData = (normalizeCommand(data) as unknown) as UserNoticeEvent;\n\n      this.emit('usernotice', eventData);\n\n      return;\n    }\n\n    if (command === Commands.CLEARCHAT) {\n      const eventData = normalizeCommand(data) as ClearChatEvent;\n\n      this.emit('clearchat', eventData);\n\n      return;\n    }\n\n    if (command === Commands.CLEARMSG) {\n      const eventData = normalizeCommand(data) as ClearMessageEvent;\n\n      this.emit('clearmessage', eventData);\n\n      return;\n    }\n\n    if (command === Commands.HOSTTARGET) {\n      const eventData = normalizeCommand(data) as HostTargetEvent;\n\n      this.emit('hosttarget', eventData);\n\n      return;\n    }\n\n    if (command === Commands.WHISPER) {\n      const eventData = normalizeWhisper(data);\n\n      this.emit('whisper', eventData);\n\n      return;\n    }\n\n    if (command === Commands.GLOBALUSERSTATE) {\n      const eventData = normalizeGlobalUserState(data);\n\n      this._updateGlobalUserState(eventData.tags);\n      this.emit('globaluserstate', eventData);\n\n      return;\n    }\n  }\n\n  _connectInNode(): Promise<void> {\n    const host = 'irc.chat.twitch.tv';\n    const port = this.options.secure ? 6697 : 6667;\n\n    return new Promise<void>((resolve, reject) => {\n      this._connecting = true;\n\n      const handleConnect = () => {\n        this._connecting = false;\n        this._connected = true;\n        this.emit('connect');\n        resolve();\n      };\n\n      if (this.options.secure) {\n        this.socket = tls.connect(port, host, {}, handleConnect);\n      } else {\n        this.socket = new Socket();\n        this.socket.connect(port, host, handleConnect);\n      }\n\n      this.socket.on('error', (error: Error) => {\n        this._connected = false;\n        this._connecting = false;\n        this.emit('disconnect', error);\n        reject(error);\n      });\n      this.socket.on('data', (data: Buffer) => {\n        this.receiveRaw(data.toString());\n      });\n      this.socket.on('close', () => {\n        this._connected = false;\n        this._connecting = false;\n        this._registered = false;\n        this.emit('disconnect');\n      });\n    });\n  }\n\n  _connectInBrowser(): Promise<void> {\n    const url = this.options.secure\n      ? 'wss://irc-ws.chat.twitch.tv:443'\n      : 'ws://irc-ws.chat.twitch.tv:80';\n\n    return new Promise<void>((resolve, reject) => {\n      this._connecting = true;\n      this.socket = new WebSocket(url);\n\n      this.socket.onopen = () => {\n        this._connected = true;\n        this._connecting = false;\n        this.emit('connect');\n        resolve();\n      };\n      this.socket.onmessage = ({ data }) => this.receiveRaw(data);\n      this.socket.onerror = () => {};\n      this.socket.onclose = ({ wasClean, code, reason }) => {\n        this.socket = null;\n        this._connected = false;\n        this._connecting = false;\n        this._registered = false;\n\n        if (wasClean) {\n          this.emit('disconnect');\n        } else {\n          const error = new Error(`[${code}] ${reason}`);\n          this.emit('disconnect', error);\n          reject(error);\n        }\n      };\n    });\n  }\n\n  _register(): Promise<void> {\n    if (!this._connected) return Promise.reject();\n    if (this._registered) return Promise.resolve();\n\n    const { name, auth } = this.options;\n\n    const nick = name || getRandomUsername();\n    const pass = auth ? `oauth:${auth}` : 'SCHMOOPIIE';\n\n    this.sendRaw('CAP REQ :twitch.tv/tags twitch.tv/commands');\n    this.sendRaw(`PASS ${pass}`);\n    this.sendRaw(`NICK ${nick}`);\n\n    return new Promise<void>((resolve, reject) => {\n      const handleRegister = () => {\n        resolve();\n        this.off('register', handleRegister);\n      };\n\n      this.on('register', handleRegister);\n\n      setTimeout(() => {\n        reject();\n        this.off('register', handleRegister);\n      }, 10000);\n    });\n  }\n\n  _updateGlobalUserState(globalUserState: GlobalUserStateTags) {\n    this.globalUserState = { ...this.globalUserState, ...globalUserState };\n  }\n\n  _updateUserState(channel: string, userState: UserStateTags) {\n    this.channels = {\n      ...this.channels,\n      [channel]: {\n        ...this.channels[channel],\n        userState,\n      },\n    };\n  }\n\n  _updateRoomState(channel: string, roomState: RoomStateTags) {\n    this.channels = {\n      ...this.channels,\n      [channel]: {\n        ...this.channels[channel],\n        roomState,\n      },\n    };\n  }\n\n  get connected() {\n    return this._connected;\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get registered() {\n    return this._registered;\n  }\n}\n\nexport default Client;\n","import tekko from 'tekko';\n\nexport const getRandomUsername = (): string => {\n  const randomSuffix = Math.floor(Math.random() * 100000)\n    .toString()\n    .padStart(5, '0');\n  return `justinfan${randomSuffix}`;\n};\n\nexport const getIsAction = (message: string): boolean =>\n  message.startsWith('\\u0001ACTION ') && message.endsWith('\\u0001');\n\nexport const normalizeActionMessage = (message: string): string =>\n  message.slice(8, -1);\n\nexport const getChannelFromMessage = (message: tekko.Message): string =>\n  message.middle[0].slice(1);\n\nexport const isNode = !!(\n  typeof process !== 'undefined' &&\n  process.versions &&\n  process.versions.node\n);\n","import tekko from 'tekko';\nimport { Emotes, BadgeInfo, Badges, TagType } from './types';\n\nconst booleanMessageTags = [\n  'mod',\n  'emote-only',\n  'r9k',\n  'rituals',\n  'subs-only',\n  'msg-param-should-share-streak',\n];\n\nconst numberMessageTags = [\n  'tmi-sent-ts',\n  'bits',\n  'ban-duration',\n  'msg-param-cumulative-months',\n  'msg-param-months',\n  'msg-param-promo-gift-total',\n  'msg-param-streak-months',\n  'msg-param-viewerCount',\n  'msg-param-threshold',\n];\n\nconst tagNamesMap: Record<string, string> = {\n  'badge-info': 'badgeInfo',\n  'display-name': 'displayName',\n  'emote-sets': 'emoteSets',\n  'room-id': 'roomId',\n  'tmi-sent-ts': 'tmiSentTs',\n  'user-id': 'userId',\n  'target-msg-id': 'targetMsgId',\n  'target-user-id': 'targetUserId',\n  'msg-id': 'msgId',\n  'system-msg': 'systemMsg',\n  'emote-only': 'emoteOnly',\n  'followers-only': 'followersOnly',\n  'subs-only': 'subsOnly',\n  'ban-duration': 'banDuration',\n  'message-id': 'messageId',\n  'thread-id': 'threadId',\n  'msg-param-cumulative-months': 'msgParamCumulativeMonths',\n  'msg-param-displayName': 'msgParamDisplayName',\n  'msg-param-login': 'msgParamLogin',\n  'msg-param-months': 'msgParamMonths',\n  'msg-param-promo-gift-total': 'msgParamPromoGiftTotal',\n  'msg-param-promo-name': 'msgParamPromoName',\n  'msg-param-recipient-display-name': 'msgParamRecipientDisplayName',\n  'msg-param-recipient-id': 'msgParamRecipientId',\n  'msg-param-recipient-user-name': 'msgParamRecipientUserName',\n  'msg-param-sender-login': 'msgParamSenderLogin',\n  'msg-param-sender-name': 'msgParamSenderName',\n  'msg-param-should-share-streak': 'msgParamShouldShareStreak',\n  'msg-param-streak-months': 'msgParamStreakMonths',\n  'msg-param-sub-plan': 'msgParamSubPlan',\n  'msg-param-sub-plan-name': 'msgParamSubPlanName',\n  'msg-param-viewerCount': 'msgParamViewerCount',\n  'msg-param-ritual-name': 'msgParamRitualName',\n  'msg-param-threshold': 'msgParamThreshold',\n};\n\nconst depricatedMessageTags = ['subscriber', 'turbo', 'user-type'];\n\nconst parseMessageEmotes = (raw: string = ''): Emotes => {\n  if (!raw) return {};\n\n  return raw.split('/').reduce((acc, emote) => {\n    const [id, indexes] = emote.split(':');\n\n    return {\n      ...acc,\n      [id]: indexes.split(',').map((index) => {\n        const [start, end] = index.split('-');\n\n        return {\n          start: Number.parseInt(start, 10),\n          end: Number.parseInt(end, 10),\n        };\n      }),\n    };\n  }, {});\n};\n\nconst parseBadges = (data: string = ''): BadgeInfo | Badges => {\n  if (!data) return {};\n\n  return data.split(',').reduce((acc, badge) => {\n    const [name, value] = badge.split('/');\n\n    return {\n      ...acc,\n      [name]: value,\n    };\n  }, {});\n};\n\nconst normalizeTagValue = (name: string, value: string): TagType => {\n  if (name === 'emotes') return parseMessageEmotes(value);\n  if (name === 'badges') return parseBadges(value);\n  if (name === 'badge-info') return parseBadges(value);\n\n  if (name === 'followers-only') {\n    let followersOnly: boolean | number = false;\n    if (value === '-1') {\n      followersOnly = false;\n    } else if (value === '0') {\n      followersOnly = true;\n    } else if (typeof value === 'string') {\n      followersOnly = parseInt(value, 10);\n    }\n    return followersOnly;\n  }\n\n  if (name === 'slow') {\n    let slow: boolean | number = false;\n    if (value === '0') {\n      slow = false;\n    } else if (typeof value === 'string') {\n      slow = parseInt(value, 10);\n    }\n    return slow;\n  }\n\n  if (booleanMessageTags.includes(name)) return value === '1';\n  if (numberMessageTags.includes(name)) return parseInt(value, 10);\n\n  if (typeof value === 'string') {\n    return value.replace('\\\\s', ' ');\n  }\n\n  return value;\n};\n\nexport const parseMessageTags = (\n  data?: tekko.MessageTags,\n): Record<string, TagType> => {\n  if (!data) {\n    return {};\n  }\n\n  return Object.entries(data).reduce((acc, [key, value]) => {\n    if (depricatedMessageTags.includes(key)) {\n      return acc;\n    }\n\n    const newKey = tagNamesMap[key] || key;\n\n    return {\n      ...acc,\n      [newKey]: normalizeTagValue(key, value as string),\n    };\n  }, {});\n};\n","import tekko from 'tekko';\n\nimport {\n  TekkoMessage,\n  GlobalUserStateEvent,\n  GlobalUserStateTags,\n  MessageEvent,\n  MessageTags,\n  WhisperEvent,\n  WhisperTags,\n} from './types';\nimport {\n  getIsAction,\n  normalizeActionMessage,\n  getChannelFromMessage,\n} from './utils';\nimport { parseMessageTags } from './parse';\n\nexport const normalizeChatMessage = (data: TekkoMessage): MessageEvent => {\n  const { raw, trailing, tags, prefix } = data;\n  const { name } = prefix as tekko.MessagePrefix;\n  const isAction = getIsAction(trailing);\n\n  return {\n    raw,\n    message: isAction ? normalizeActionMessage(trailing) : trailing,\n    channel: getChannelFromMessage(data),\n    user: name,\n    get tags() {\n      return (parseMessageTags(tags) as unknown) as MessageTags;\n    },\n    isAction,\n  };\n};\n\nexport const normalizeGlobalUserState = ({\n  raw,\n  tags,\n}: TekkoMessage): GlobalUserStateEvent => ({\n  raw,\n  get tags() {\n    return parseMessageTags(tags) as GlobalUserStateTags;\n  },\n});\n\nexport const normalizeState = (data: TekkoMessage) => {\n  const { raw, tags } = data;\n\n  return {\n    raw,\n    channel: getChannelFromMessage(data),\n    get tags() {\n      return parseMessageTags(tags);\n    },\n  };\n};\n\nexport const normalizeCommand = (data: TekkoMessage) => {\n  const { raw, trailing, tags } = data;\n\n  return {\n    raw,\n    message: trailing,\n    channel: getChannelFromMessage(data),\n    get tags() {\n      return parseMessageTags(tags);\n    },\n  };\n};\n\nexport const normalizeWhisper = ({\n  raw,\n  trailing,\n  tags,\n  prefix,\n  middle: [channel],\n}: TekkoMessage): WhisperEvent => {\n  const { name } = prefix as tekko.MessagePrefix;\n\n  return {\n    raw,\n    message: trailing,\n    channel,\n    user: name,\n    get tags() {\n      return (parseMessageTags(tags) as unknown) as WhisperTags;\n    },\n  };\n};\n","import tekko from 'tekko';\n\nexport interface TekkoMessage extends tekko.Message {\n  raw: string;\n}\n\nexport interface Emotes {\n  [emoteId: string]: Array<{ start: number; end: number }>;\n}\n\nexport interface BadgeInfo {\n  /**\n   * The exact number of months the user has been a subscriber.\n   */\n  subscriber?: number;\n}\n\nexport interface Badges {\n  admin?: string;\n  bits?: string;\n  broadcaster?: string;\n  global_mod?: string;\n  moderator?: string;\n  subscriber?: string;\n  staff?: string;\n  turbo?: string;\n}\n\nexport type TagType = string | boolean | number | Emotes | BadgeInfo | Badges;\n\ninterface ATags {\n  /**\n   * Metadata related to the chat badges in the `badges` tag.\n   */\n  badgeInfo: BadgeInfo;\n\n  /**\n   * List of chat badges and the version of each badge.\n   * Many badges have only 1 version, but some badges have different versions (images), depending on how long you hold the badge status; e.g., `subscriber`.\n   */\n  badges: Badges;\n\n  /**\n   * Hexadecimal RGB color code; the empty string if it is never set.\n   */\n  color: string;\n\n  /**\n   * The user’s display name, escaped as described in the IRCv3 spec. This is empty if it is never set.\n   */\n  displayName: string;\n\n  /**\n   * Your emote set, a comma-separated list of emote sets.\n   */\n  emoteSets: string;\n\n  /**\n   * Information to replace text in the message with emote images. This can be empty.\n   */\n  emotes: Emotes;\n\n  /**\n   * A unique ID for the message.\n   */\n  id: string;\n\n  /**\n   * `true` if the user has a moderator badge; otherwise, `false`.\n   */\n  mod: boolean;\n\n  /**\n   * The channel ID.\n   */\n  roomId: string;\n\n  /**\n   * Timestamp when the server received the message.\n   */\n  tmiSentTs: number;\n\n  /**\n   * The user’s ID.\n   */\n  userId: string;\n}\n\nexport interface MessageTags\n  extends Pick<\n    ATags,\n    | 'badgeInfo'\n    | 'badges'\n    | 'color'\n    | 'displayName'\n    | 'emotes'\n    | 'id'\n    | 'mod'\n    | 'roomId'\n    | 'tmiSentTs'\n    | 'userId'\n  > {\n  /**\n   * (Sent only for Bits messages) The amount of cheer/Bits employed by the user.\n   */\n  bits?: number;\n}\n\n/**\n * Sends a message to a channel.\n */\nexport interface MessageEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  user: string;\n  tags: MessageTags;\n  isAction: boolean;\n}\n\nexport type GlobalUserStateTags = Pick<\n  ATags,\n  'badgeInfo' | 'badges' | 'color' | 'displayName' | 'emoteSets' | 'userId'\n>;\n\n/**\n * On successful login, provides data about the current logged-in user through IRC tags.\n * It is sent after successfully authenticating (sending a PASS/NICK command).\n */\nexport interface GlobalUserStateEvent {\n  raw: string;\n  tags: GlobalUserStateTags;\n}\n\nexport type UserStateTags = Pick<\n  ATags,\n  'badgeInfo' | 'badges' | 'color' | 'displayName' | 'emoteSets' | 'mod'\n>;\n\n/**\n * Sends user-state data when a user joins a channel or sends a PRIVMSG to a channel.\n */\nexport interface UserStateEvent {\n  raw: string;\n  channel: string;\n  tags: UserStateTags;\n}\n\nexport interface RoomStateTags extends Pick<ATags, 'roomId'> {\n  /**\n   * Emote-only mode. If enabled, only emotes are allowed in chat.\n   */\n  emoteOnly?: boolean;\n\n  /**\n   * Followers-only mode. If enabled, controls which followers can chat.\n   * Valid values:\n   * -1 (disabled),\n   * false (all followers can chat),\n   * non-negative integer (only users following for at least the specified number of minutes can chat).\n   */\n  followersOnly?: boolean | number;\n\n  /**\n   * R9K mode. If enabled, messages with more than 9 characters must be unique.\n   */\n  r9k?: boolean;\n\n  /**\n   * (Not documented)\n   */\n  rituals?: boolean;\n\n  /**\n   * The number of seconds a chatter without moderator privileges must wait between sending messages.\n   */\n  slow?: boolean | number;\n\n  /**\n   * Subscribers-only mode. If enabled, only subscribers and moderators can chat.\n   */\n  subsOnly?: boolean;\n}\n\n/**\n * Sends room-state data when a user joins a channel or a room setting is changed.\n * For a join, the message contains all chat-room settings.\n * For changes, only the relevant tag is sent.\n */\nexport interface RoomStateEvent {\n  raw: string;\n  channel: string;\n  tags: RoomStateTags;\n}\n\n/**\n * Purges all chat messages in a channel, or purges chat messages from a specific user (typically after a timeout or ban).\n */\nexport interface ClearChatEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {\n    /**\n     * Duration of the timeout, in seconds. If omitted, the ban is permanent.\n     */\n    banDuration?: number;\n\n    /**\n     * (Not documented)\n     */\n    roomId: string;\n\n    /**\n     * (Not documented)\n     */\n    targetUserId?: string;\n\n    /**\n     * (Not documented)\n     */\n    tmiSentTs: number;\n  };\n}\n\n/**\n * Removes a single message from a channel. This is triggered by the `/delete <targetMsgId>` command on IRC.\n */\nexport interface ClearMessageEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {\n    /**\n     * Name of the user who sent the message.\n     */\n    login: string;\n\n    /**\n     * UUID of the message.\n     */\n    targetMsgId: string;\n\n    /**\n     * (Not documented)\n     */\n    tmiSentTs: number;\n  };\n}\n\n/**\n * Channel starts or stops host mode.\n */\nexport interface HostTargetEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {};\n}\n\n/**\n * General notices from the server.\n */\nexport interface NoticeEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {\n    /**\n     * A message ID string. Can be used for i18ln.\n     * Valid values: see https://dev.twitch.tv/docs/irc/msg-id\n     */\n    msgId: string;\n  };\n}\n\nexport enum UserNoticeType {\n  sub = 'sub',\n  resub = 'resub',\n  subgift = 'subgift',\n  anonsubgift = 'anonsubgift',\n  submysterygift = 'submysterygift',\n  giftpaidupgrade = 'giftpaidupgrade',\n  rewardgift = 'rewardgift',\n  anongiftpaidupgrade = 'anongiftpaidupgrade',\n  raid = 'raid',\n  unraid = 'unraid',\n  ritual = 'ritual',\n  bitsbadgetier = 'bitsbadgetier',\n}\n\ninterface AUserNoticeTags {\n  /**\n   * (Sent only on sub, resub) The total number of months the user has subscribed.\n   * This is the same as msg-param-months but sent for different types of user notices.\n   */\n  msgParamCumulativeMonths: number;\n\n  /**\n   * (Sent only on raid) The display name of the source user raiding this channel.\n   */\n  msgParamDisplayName: string;\n\n  /**\n   * (Sent on only raid) The name of the source user raiding this channel.\n   */\n  msgParamLogin: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The total number of months the user has subscribed.\n   * This is the same as msg-param-cumulative-months but sent for different types of user notices.\n   */\n  msgParamMonths: number;\n\n  /**\n   * (Sent only on anongiftpaidupgrade, giftpaidupgrade) The number of gifts the gifter has given during the promo indicated by msg-param-promo-name.\n   */\n  msgParamPromoGiftTotal: number;\n\n  /**\n   * (Sent only on anongiftpaidupgrade, giftpaidupgrade) The subscriptions promo, if any, that is ongoing; e.g. Subtember 2018.\n   */\n  msgParamPromoName: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The display name of the subscription gift recipient.\n   */\n  msgParamRecipientDisplayName: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The user ID of the subscription gift recipient.\n   */\n  msgParamRecipientId: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The user name of the subscription gift recipient.\n   */\n  msgParamRecipientUserName: string;\n\n  /**\n   * (Sent only on giftpaidupgrade) The login of the user who gifted the subscription.\n   */\n  msgParamSenderLogin: string;\n\n  /**\n   * (Sent only on giftpaidupgrade) The display name of the user who gifted the subscription.\n   */\n  msgParamSenderName: string;\n\n  /**\n   * (Sent only on sub, resub) Boolean indicating whether users want their streaks to be shared.\n   */\n  msgParamShouldShareStreak: boolean;\n\n  /**\n   * (Sent only on sub, resub) The number of consecutive months the user has subscribed. This is 0 if msg-param-should-share-streak is 0.\n   */\n  msgParamStreakMonths: number;\n\n  /**\n   * (Sent only on sub, resub, subgift, anonsubgift) The type of subscription plan being used.\n   * Valid values: Prime, 1000, 2000, 3000. 1000, 2000, and 3000 refer to the first, second, and third levels of paid subscriptions, respectively (currently $4.99, $9.99, and $24.99).\n   */\n  msgParamSubPlan: string;\n\n  /**\n   * (Sent only on sub, resub, subgift, anonsubgift) The display name of the subscription plan.\n   * This may be a default name or one created by the channel owner.\n   */\n  msgParamSubPlanName: string;\n\n  /**\n   * (Sent only on raid) The number of viewers watching the source channel raiding this channel.\n   */\n  msgParamViewerCount: number;\n\n  /**\n   * (Sent only on ritual) The name of the ritual this notice is for. Valid value: new_chatter.\n   */\n  msgParamRitualName: string;\n\n  /**\n   * (Sent only on bitsbadgetier) The tier of the bits badge the user just earned; e.g. 100, 1000, 10000.\n   */\n  msgParamThreshold: number;\n}\n\ninterface ABaseUserNoticeTags\n  extends Pick<\n    ATags,\n    | 'badgeInfo'\n    | 'badges'\n    | 'color'\n    | 'displayName'\n    | 'emotes'\n    | 'id'\n    | 'mod'\n    | 'roomId'\n    | 'tmiSentTs'\n    | 'userId'\n  > {\n  /**\n   * The name of the user who sent the notice.\n   */\n  login: string;\n\n  /**\n   * The message printed in chat along with this notice.\n   */\n  systemMsg: string;\n}\n\ninterface UserNoticeTagsSub\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamCumulativeMonths'\n      | 'msgParamShouldShareStreak'\n      | 'msgParamStreakMonths'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  /**\n   * The type of notice (not the ID).\n   */\n  msgId: 'sub';\n}\n\ninterface UserNoticeTagsResub\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamCumulativeMonths'\n      | 'msgParamShouldShareStreak'\n      | 'msgParamStreakMonths'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  msgId: 'resub';\n}\n\ninterface UserNoticeTagsSubGift\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamMonths'\n      | 'msgParamRecipientDisplayName'\n      | 'msgParamRecipientId'\n      | 'msgParamRecipientUserName'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  msgId: 'subgift';\n}\n\ninterface UserNoticeTagsAnonSubGift\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamMonths'\n      | 'msgParamRecipientDisplayName'\n      | 'msgParamRecipientId'\n      | 'msgParamRecipientUserName'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  msgId: 'anonsubgift';\n}\n\ninterface UserNoticeTagsSubMysteryGift extends ABaseUserNoticeTags {\n  msgId: 'submysterygift';\n}\n\ninterface UserNoticeTagsGiftPaidUpgrade\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamPromoGiftTotal'\n      | 'msgParamPromoName'\n      | 'msgParamSenderLogin'\n      | 'msgParamSenderName'\n    > {\n  msgId: 'giftpaidupgrade';\n}\n\ninterface UserNoticeTagsAnonGiftPaidUpgrade\n  extends ABaseUserNoticeTags,\n    Pick<AUserNoticeTags, 'msgParamPromoGiftTotal' | 'msgParamPromoName'> {\n  msgId: 'anongiftpaidupgrade';\n}\n\ninterface UserNoticeTagsRewardGift extends ABaseUserNoticeTags {\n  msgId: 'rewardgift';\n}\n\ninterface UserNoticeTagsRaid\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      'msgParamDisplayName' | 'msgParamLogin' | 'msgParamViewerCount'\n    > {\n  msgId: 'raid';\n}\n\ninterface UserNoticeTagsUnraid extends ABaseUserNoticeTags {\n  msgId: 'unraid';\n}\n\ninterface UserNoticeTagsRitual\n  extends ABaseUserNoticeTags,\n    Pick<AUserNoticeTags, 'msgParamRitualName'> {\n  msgId: 'ritual';\n}\n\ninterface UserNoticeTagsBitsBadGetier\n  extends ABaseUserNoticeTags,\n    Pick<AUserNoticeTags, 'msgParamThreshold'> {\n  msgId: 'bitsbadgetier';\n}\n\ntype UserNoticeTags =\n  | UserNoticeTagsSub\n  | UserNoticeTagsResub\n  | UserNoticeTagsSubGift\n  | UserNoticeTagsAnonSubGift\n  | UserNoticeTagsSubMysteryGift\n  | UserNoticeTagsGiftPaidUpgrade\n  | UserNoticeTagsAnonGiftPaidUpgrade\n  | UserNoticeTagsRewardGift\n  | UserNoticeTagsRaid\n  | UserNoticeTagsUnraid\n  | UserNoticeTagsRitual\n  | UserNoticeTagsBitsBadGetier;\n\n/**\n * Sends a notice to the user when any of the following events occurs:\n * - Subscription, resubscription, or gift subscription to a channel.\n * - Incoming raid to a channel.\n *   Raid is a Twitch tool that allows broadcasters to send their viewers to another channel, to help support and grow other members in the community.\n * - Channel ritual.\n *   Many channels have special rituals to celebrate viewer milestones when they are shared.\n *   The rituals notice extends the sharing of these messages to other viewer milestones (initially, a new viewer chatting for the first time).\n */\nexport interface UserNoticeEvent {\n  raw: string;\n  /**\n   * The message. This is omitted if the user did not enter a message.\n   */\n  message: string;\n  channel: string;\n  tags: UserNoticeTags;\n}\n\nexport interface WhisperTags\n  extends Pick<\n    ATags,\n    'badges' | 'color' | 'displayName' | 'emotes' | 'userId'\n  > {\n  /**\n   * (Not documented)\n   */\n  messageId: string;\n\n  /**\n   * (Not documented)\n   */\n  threadId: string;\n}\n\n/**\n * (Not documented)\n */\nexport interface WhisperEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  user: string;\n  tags: WhisperTags;\n}\n\nexport interface PingEvent {\n  raw: string;\n}\n\n/**\n * Join a channel.\n */\nexport interface JoinEvent {\n  raw: string;\n  channel: string;\n  user: string;\n}\n\n/**\n * Depart from a channel.\n */\nexport interface PartEvent {\n  raw: string;\n  channel: string;\n  user: string;\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport {\n  parseTwitchClip,\n  parseTwitchVideo,\n  parseYoutubeVideo,\n} from 'features/chat/utils/parseApiResponse';\n\ntype MessageCardLoading = {\n  status: 'loading';\n};\ntype MessageCardSuccess = {\n  status: 'success';\n  id: string;\n  url: string;\n  src: string;\n  srcSet: string;\n  title: string;\n  description: string;\n};\ntype MessageCardError = {\n  status: 'error';\n};\nexport type MessageCardData =\n  | MessageCardLoading\n  | MessageCardSuccess\n  | MessageCardError;\n\ntype MessageCardsState = {\n  twitchClips: Record<string, MessageCardData>;\n  twitchVideos: Record<string, MessageCardData>;\n  youtubeVideos: Record<string, MessageCardData>;\n};\n\nconst initialState: MessageCardsState = {\n  twitchClips: {},\n  twitchVideos: {},\n  youtubeVideos: {},\n};\n\ntype FetchMessageCardParams = {\n  id: string;\n  url: string;\n};\n\nexport const fetchTwitchClip = createAsyncThunk(\n  'clips/fetchTwitchClip',\n  ({ id }: FetchMessageCardParams) => api.fetchTwitchClip(id),\n);\n\nexport const fetchTwitchVideo = createAsyncThunk(\n  'clips/fetchTwitchVideo',\n  ({ id }: FetchMessageCardParams) => api.fetchTwitchVideo(id),\n);\n\nexport const fetchYoutubeVideo = createAsyncThunk(\n  'clips/fetchYoutubeVideo',\n  ({ id }: FetchMessageCardParams) => api.fetchYoutubeVideo(id),\n);\n\n// TODO: refact this code. DRY!\n\nconst messageCards = createSlice({\n  name: 'messageCards',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // twitch clip\n    builder.addCase(fetchTwitchClip.pending, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchClips[id] = { status: 'loading' };\n    });\n\n    builder.addCase(\n      fetchTwitchClip.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { id } = arg;\n        const card = parseTwitchClip(payload);\n\n        if (!card) {\n          state.twitchClips[id] = { status: 'error' };\n\n          return;\n        }\n\n        state.twitchClips[id] = {\n          status: 'success',\n          ...card,\n        };\n      },\n    );\n\n    builder.addCase(fetchTwitchClip.rejected, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchClips[id] = { status: 'error' };\n    });\n\n    // twitch video\n    builder.addCase(fetchTwitchVideo.pending, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchVideos[id] = { status: 'loading' };\n    });\n\n    builder.addCase(\n      fetchTwitchVideo.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { id, url } = arg;\n        const card = parseTwitchVideo(payload);\n\n        if (!card) {\n          state.twitchVideos[id] = { status: 'error' };\n\n          return;\n        }\n\n        state.twitchVideos[id] = {\n          status: 'success',\n          url,\n          ...card,\n        };\n      },\n    );\n\n    builder.addCase(fetchTwitchVideo.rejected, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.twitchVideos[id] = { status: 'error' };\n    });\n\n    // youtube-video\n    builder.addCase(fetchYoutubeVideo.pending, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.youtubeVideos[id] = { status: 'loading' };\n    });\n\n    builder.addCase(\n      fetchYoutubeVideo.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { id, url } = arg;\n        const card = parseYoutubeVideo(payload);\n\n        if (!card) {\n          state.youtubeVideos[id] = { status: 'error' };\n\n          return;\n        }\n\n        state.youtubeVideos[id] = {\n          status: 'success',\n          url,\n          ...card,\n        };\n      },\n    );\n\n    builder.addCase(fetchYoutubeVideo.rejected, (state, { meta: { arg } }) => {\n      const { id } = arg;\n\n      state.youtubeVideos[id] = { status: 'error' };\n    });\n  },\n});\n\nexport default messageCards.reducer;\n","import type { RootState } from 'app/rootReducer';\n\nexport const isBlockedUsersLoadedSelector = (state: RootState) =>\n  state.blockedUsers.status !== 'idle' &&\n  state.blockedUsers.status !== 'loading';\n\nexport const blockedUsersSelector = (state: RootState) =>\n  state.blockedUsers.items;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as api from 'api';\nimport type { FetchResult } from 'utils/types';\nimport { parseBadges } from 'features/chat/utils/parseApiResponse';\n\ntype Badges = Record<string, api.TwitchBadge>;\n\ntype BadgesState = {\n  global: FetchResult<Badges>;\n  byChannels: Record<string, FetchResult<Badges>>;\n};\n\nconst initialState: BadgesState = {\n  global: {\n    status: 'idle',\n    error: {},\n    items: {},\n  },\n  byChannels: {},\n};\n\nexport const fetchGlobalBadges = createAsyncThunk(\n  'chat/fetchGlobalBadges',\n  () => api.fetchGlobalBadges(),\n);\n\ntype FetchChannelBadgesParams = {\n  channel: string;\n  channelId: string;\n};\n\nexport const fetchChannelBadges = createAsyncThunk(\n  'chat/fetchChannelBadges',\n  ({ channelId }: FetchChannelBadgesParams) =>\n    api.fetchChannelBadges(channelId),\n);\n\nconst badges = createSlice({\n  name: 'badges',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // global badges\n    builder.addCase(fetchGlobalBadges.pending, (state) => {\n      state.global.status = 'loading';\n      state.global.error = {};\n    });\n\n    builder.addCase(fetchGlobalBadges.fulfilled, (state, { payload }) => {\n      state.global.status = 'success';\n      state.global.items = parseBadges(payload);\n    });\n\n    builder.addCase(fetchGlobalBadges.rejected, (state, { error }) => {\n      state.global.status = 'error';\n      state.global.error = error;\n    });\n\n    // channel badges\n    builder.addCase(fetchChannelBadges.pending, (state, { meta: { arg } }) => {\n      const { channel } = arg;\n\n      if (!state.byChannels[channel]) {\n        state.byChannels[channel] = {\n          status: 'loading',\n          error: {},\n          items: {},\n        };\n      } else {\n        state.byChannels[channel].status = 'loading';\n        state.byChannels[channel].error = {};\n      }\n    });\n\n    builder.addCase(\n      fetchChannelBadges.fulfilled,\n      (state, { payload, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.byChannels[channel].status = 'success';\n        state.byChannels[channel].items = parseBadges(payload);\n      },\n    );\n\n    builder.addCase(\n      fetchChannelBadges.rejected,\n      (state, { error, meta: { arg } }) => {\n        const { channel } = arg;\n\n        state.byChannels[channel].status = 'error';\n        state.byChannels[channel].error = error;\n      },\n    );\n  },\n});\n\nexport default badges.reducer;\n","import { LS_OPTIONS } from 'utils/constants';\n\nexport const readOptionsFromLocalStorage = (): object => {\n  try {\n    const options = localStorage.getItem(LS_OPTIONS);\n    return JSON.parse(options as string) || {};\n  } catch {\n    return {};\n  }\n};\n\nexport const writeOptionsToLocalStore = (options: object): void => {\n  localStorage.setItem(\n    LS_OPTIONS,\n    JSON.stringify({\n      ...readOptionsFromLocalStorage(),\n      ...options,\n    }),\n  );\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\n\nimport {\n  writeOptionsToLocalStore,\n  readOptionsFromLocalStorage,\n} from 'features/options/optionsUtils';\n\ntype OptionsState = {\n  showTimestamps: boolean;\n  splitChat: boolean;\n  blacklistKeywords: string;\n  highlightKeywords: string;\n  fixedWidth: boolean;\n  highlightNotifications: boolean;\n};\n\ntype ChangeOption = {\n  name: keyof OptionsState;\n  value: any;\n};\n\nexport const initialState: OptionsState = {\n  showTimestamps: false,\n  splitChat: true,\n  blacklistKeywords: '',\n  highlightKeywords: '',\n  fixedWidth: false,\n  highlightNotifications: true,\n  ...readOptionsFromLocalStorage(),\n};\n\nconst options = createSlice({\n  name: 'options',\n  initialState,\n  reducers: {\n    changeOption: {\n      reducer: (state, { payload }: PayloadAction<ChangeOption>) => {\n        const { name, value } = payload;\n\n        (state[name] as unknown) = value;\n      },\n      prepare: (payload: ChangeOption) => {\n        const { name, value } = payload;\n\n        writeOptionsToLocalStore({ [name]: value });\n\n        return { payload };\n      },\n    },\n  },\n});\n\nexport const { changeOption } = options.actions;\n\nexport default options.reducer;\n"],"sourceRoot":""}